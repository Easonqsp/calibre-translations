# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-06 09:51+0530\n"
"PO-Revision-Date: 2014-11-03 09:10+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Japanese (http://www.transifex.com/projects/p/calibre/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 669b74c8cb514c3c9141fa00a200ad49
#: ../../home/kovid/work/calibre/manual/develop.rst:4
msgid "Setting up a calibre development environment"
msgstr ""

# b9b7ec250d7b4666a131c1d3418574e8
#: ../../home/kovid/work/calibre/manual/develop.rst:6
msgid ""
"calibre is completely open source, licensed under the `GNU GPL v3 "
"<http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to "
"download and modify the program to your heart's content. In this section, "
"you will learn how to get a calibre development environment set up on the "
"operating system of your choice. calibre is written primarily in `Python "
"<http://www.python.org>`_ with some C/C++ code for speed and system "
"interfacing. Note that calibre is not compatible with Python 3 and requires "
"at least Python 2.7."
msgstr ""

# 1b70af89725f4b1db2bbfe2757e12d7a
#: ../../home/kovid/work/calibre/manual/develop.rst:0
msgid "Contents"
msgstr "目次"

# 80bf82c5d51e46af92699e2d064b23b3
#: ../../home/kovid/work/calibre/manual/develop.rst:17
msgid "Design philosophy"
msgstr ""

# ea0c61e5b52143a88fa92852fcfa5d92
#: ../../home/kovid/work/calibre/manual/develop.rst:19
msgid ""
"calibre has its roots in the Unix world, which means that its design is "
"highly modular. The modules interact with each other via well defined "
"interfaces. This makes adding new features and fixing bugs in calibre very "
"easy, resulting in a frenetic pace of development. Because of its roots, "
"calibre has a comprehensive command line interface for all its functions, "
"documented in :doc:`generated/en/cli-index`."
msgstr ""

# 66fd02d4a9d44676bdd4411fded3589f
#: ../../home/kovid/work/calibre/manual/develop.rst:24
msgid ""
"The modular design of calibre is expressed via ``Plugins``. There is a "
":ref:`tutorial <customize>` on writing calibre plugins. For example, adding "
"support for a new device to calibre typically involves writing less than a "
"100 lines of code in the form of a device driver plugin. You can browse the "
"`built-in drivers "
"<http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_."
" Similarly, adding support for new conversion formats involves writing "
"input/output format plugins. Another example of the modular design is the "
":ref:`recipe system <news>` for fetching news. For more examples of plugins "
"designed to add features to calibre, see the `plugin index "
"<http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

# 4d63445094bb4d53b0869843afa43682
#: ../../home/kovid/work/calibre/manual/develop.rst:34
msgid "Code layout"
msgstr ""

# 446bb1b70aa5493987208d021d55d10f
#: ../../home/kovid/work/calibre/manual/develop.rst:36
msgid ""
"All the calibre python code is in the ``calibre`` package. This package "
"contains the following main sub-packages"
msgstr ""

# 518ab0365e63405abffe075420511161
#: ../../home/kovid/work/calibre/manual/develop.rst:38
msgid ""
"devices - All the device drivers. Just look through some of the built-in "
"drivers to get an idea for how they work."
msgstr ""

# 932cdc148c3e46d9a92f230b19cb66ee
#: ../../home/kovid/work/calibre/manual/develop.rst:40
msgid ""
"For details, see: ``devices.interface`` which defines the interface "
"supported by device drivers and ``devices.usbms`` which defines a generic "
"driver that connects to a USBMS device. All USBMS based drivers in calibre "
"inherit from it."
msgstr ""

# 8abaf547e3134f12969e08f33e1df088
#: ../../home/kovid/work/calibre/manual/develop.rst:43
msgid ""
"ebooks  - All the ebook conversion/metadata code. A good starting point is "
"``calibre.ebooks.conversion.cli`` which is the module powering the :command"
":`ebook-convert` command. The conversion process is controlled via "
"``conversion.plumber``. The format independent code is all in ``ebooks.oeb``"
" and the format dependent code is in ``ebooks.format_name``."
msgstr ""

# 6f914ef51cad4ed3b69c7d31f9558dab
#: ../../home/kovid/work/calibre/manual/develop.rst:47
msgid ""
"Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

# a1c5b178729b4b2fa1fe026eeb50ad8b
#: ../../home/kovid/work/calibre/manual/develop.rst:48
msgid ""
"Conversion happens in a pipeline, for the structure of the pipeline, see "
":ref:`conversion-introduction`. The pipeline consists of an input plugin, "
"various transforms and an output plugin. The code that constructs and drives"
" the pipeline is in :file:`plumber.py`. The pipeline works on a "
"representation of an ebook that is like an unzipped epub, with manifest, "
"spine, toc, guide, html content, etc. The class that manages this "
"representation is OEBBook in ``ebooks.oeb.base``. The various "
"transformations that are applied to the book during conversions live in "
":file:`oeb/transforms/*.py`. And the input and output plugins live in "
":file:`conversion/plugins/*.py`."
msgstr ""

# 61d69f2418044c92850b734fd083f6fe
#: ../../home/kovid/work/calibre/manual/develop.rst:58
msgid ""
"Ebook editing happens using a different container object. It is documented "
"in :ref:`polish_api`."
msgstr ""

# b9c5d23948bf4ae68fe9696fa375c6ed
#: ../../home/kovid/work/calibre/manual/develop.rst:61
msgid ""
"db - The database back-end. See :ref:`db_api` for the interface to the "
"calibre library."
msgstr ""

# 87ccc45c6fde49d3a5110d42c253cc5b
#: ../../home/kovid/work/calibre/manual/develop.rst:63
msgid "content server: ``library.server`` is the calibre Content Server."
msgstr ""

# d49549f0dec047f182435bde584b37c7
#: ../../home/kovid/work/calibre/manual/develop.rst:65
msgid ""
"gui2 - The Graphical User Interface. GUI initialization happens in "
"``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The "
"ebook editor is in ``gui2.tweak_book``."
msgstr ""

# 808627f1484341f0b88e8c546d467cd7
#: ../../home/kovid/work/calibre/manual/develop.rst:67
msgid ""
"If you want to locate the entry points for all the various calibre "
"executables, look at the ``entry_points`` structure in `linux.py "
"<https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

# ee26f09652a345a89986e442104a613d
#: ../../home/kovid/work/calibre/manual/develop.rst:71
msgid ""
"If you need help understanding the code, post in the `development forum "
"<http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will "
"most likely get help from one of calibre's many developers."
msgstr ""

# 18b667cbf7084bc7a68fdb82da245b5b
#: ../../home/kovid/work/calibre/manual/develop.rst:75
msgid "Getting the code"
msgstr ""

# 637fc81ad3f749c0aeb88ba6e71ffe64
#: ../../home/kovid/work/calibre/manual/develop.rst:77
msgid ""
"You can get the calibre source code in two ways, using a version control "
"system or directly downloading a `tarball <http://status.calibre-"
"ebook.com/dist/src>`_."
msgstr ""

# aa55aa5800b74027aeed5585432fb104
#: ../../home/kovid/work/calibre/manual/develop.rst:80
msgid ""
"calibre uses `Git <http://www.git-scm.com/>`_, a distributed version control"
" system. Git is available on all the platforms calibre supports.  After "
"installing Git, you can get the calibre source code with the command::"
msgstr ""

# 029d8f3c7ab84afea9aab405d4a9739b
#: ../../home/kovid/work/calibre/manual/develop.rst:86
msgid ""
"On Windows you will need the complete path name, that will be something like"
" :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

# b980dff1e37f48c28b893136f2600a8c
#: ../../home/kovid/work/calibre/manual/develop.rst:88
msgid ""
"calibre is a very large project with a very long source control history, so "
"the above can take a while (10 mins to an hour depending on your internet "
"speed)."
msgstr ""

# 4e76bbcea3e44071a96d64151c3afacf
#: ../../home/kovid/work/calibre/manual/develop.rst:91
msgid ""
"If you want to get the code faster, the source code for the latest release "
"is always available as an `archive <http://status.calibre-"
"ebook.com/dist/src>`_."
msgstr ""

# f59343930ea840cb81fd2efc693f2132
#: ../../home/kovid/work/calibre/manual/develop.rst:94
msgid "To update a branch to the latest code, use the command::"
msgstr ""

# b4958a53fd704428aff8181f803897a8
#: ../../home/kovid/work/calibre/manual/develop.rst:99
msgid "Submitting your changes to be included"
msgstr ""

# 927c50c4acb240d79f64903605254845
#: ../../home/kovid/work/calibre/manual/develop.rst:101
msgid ""
"If you only plan to make a few small changes, you can make your changes and "
"create a \"merge directive\" which you can then attach to a ticket in the "
"calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, "
"make your changes, then run::"
msgstr ""

# ac9a9fd556724347a9a500a9df7352a5
#: ../../home/kovid/work/calibre/manual/develop.rst:109
msgid ""
"This will create a :file:`my-changes` file in the current directory, simply "
"attach that to a ticket on the calibre `bug tracker "
"<https://bugs.launchpad.net/calibre>`_. Note that this will include *all* "
"the commits you have made. If you only want to send some commits, you have "
"to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

# 382c4fb09faa433a874a99b689c655bd
#: ../../home/kovid/work/calibre/manual/develop.rst:117
msgid ""
"To send the last *n* commits, replace *1* with *n*, for example, for the "
"last 3 commits::"
msgstr ""

# 91c6210a6e0b42808658e68e5fdd82ad
#: ../../home/kovid/work/calibre/manual/develop.rst:122
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

# 121afd324f6443e1856a011458a6c68d
#: ../../home/kovid/work/calibre/manual/develop.rst:124
msgid ""
"If you plan to do a lot of development on calibre, then the best method is "
"to create a `GitHub <http://github.com>`_ account. Below is a basic guide to"
" setting up your own fork of calibre in a way that will allow you to submit "
"pull requests for inclusion into the main calibre repository:"
msgstr ""

# 58974c628af0424c982a561b1b9a92ea
#: ../../home/kovid/work/calibre/manual/develop.rst:129
msgid ""
"Setup git on your machine as described in this article: `Setup Git "
"<https://help.github.com/articles/set-up-git>`_"
msgstr ""

# 2cab8f829b224980a7f9acf7be19c3c5
#: ../../home/kovid/work/calibre/manual/develop.rst:130
msgid ""
"Setup ssh keys for authentication to GitHub, as described here: `Generating "
"SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

# eba4acd3a48d4a799d56611a98220c9d
#: ../../home/kovid/work/calibre/manual/develop.rst:131
msgid ""
"Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` "
"button."
msgstr ""

# 3a096b421f5b4f07a2e26186ad202a65
#: ../../home/kovid/work/calibre/manual/develop.rst:132
msgid "In a Terminal do::"
msgstr ""

# e10ec109e75d4f7982c7aca2bfd2bdcc
#: ../../home/kovid/work/calibre/manual/develop.rst:137
msgid ""
"Replace <username> above with your github username. That will get your fork "
"checked out locally."
msgstr ""

# b54a3b54a269460c9649f36c2e490c94
#: ../../home/kovid/work/calibre/manual/develop.rst:138
msgid ""
"You can make changes and commit them whenever you like. When you are ready "
"to have your work merged, do a::"
msgstr ""

# 7dc50907842949439257cdfc934a6e82
#: ../../home/kovid/work/calibre/manual/develop.rst:142
msgid ""
"and go to ``https://github.com/<username>/calibre`` and click the "
":guilabel:`Pull Request` button to generate a pull request that can be "
"merged."
msgstr ""

# 598c29625786455787ce7a778ca54bf0
#: ../../home/kovid/work/calibre/manual/develop.rst:143
msgid ""
"You can update your local copy with code from the main repo at any time by "
"doing::"
msgstr ""

# 3bcea1eab784443aa42aeed6280f83df
#: ../../home/kovid/work/calibre/manual/develop.rst:148
msgid ""
"You should also keep an eye on the calibre `development forum "
"<http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making "
"major changes, you should discuss them in the forum or contact Kovid "
"directly (his email address is all over the source code)."
msgstr ""

# 3a7c47dec1ca4fcc9b6b0a6fdd31f91d
#: ../../home/kovid/work/calibre/manual/develop.rst:154
msgid "Windows development environment"
msgstr ""

# 7c36e361c8ee4e05801dd3c8af0f5791
# bdb34064c0504477966b26f8cb2ed24d
# 16151cd09cb243deb8a6b67d69af385f
#: ../../home/kovid/work/calibre/manual/develop.rst:156
#: ../../home/kovid/work/calibre/manual/develop.rst:187
#: ../../home/kovid/work/calibre/manual/develop.rst:219
msgid ""
"You must also get the calibre source code separately as described above."
msgstr ""

# 35f00226cf5f41fe96ac3f32b19ee1a6
#: ../../home/kovid/work/calibre/manual/develop.rst:158
msgid ""
"Install calibre normally, using the Windows installer. Then open a Command "
"Prompt and change to the previously checked out calibre code directory. For "
"example::"
msgstr ""

# 1bcd8c6d1b944e32be74780ed672ed22
# 5f7b0105b24a4872bef0dbbefa320806
#: ../../home/kovid/work/calibre/manual/develop.rst:163
#: ../../home/kovid/work/calibre/manual/develop.rst:231
msgid ""
"calibre is the directory that contains the src and resources sub-"
"directories."
msgstr ""

# da0dca56e687484ca8d4e760ac08320b
#: ../../home/kovid/work/calibre/manual/develop.rst:165
msgid ""
"The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to"
" the absolute path of the src directory. So, following the example above, it"
" would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide "
"<http://docs.python.org/using/windows.html#excursus-setting-environment-"
"variables>`_ to setting environment variables on Windows."
msgstr ""

# abd02059fd474fd59b206e73906b6b15
#: ../../home/kovid/work/calibre/manual/develop.rst:170
msgid ""
"Once you have set the environment variable, open a new command prompt and "
"check that it was correctly set by using the command::"
msgstr ""

# bfb746c1662240b2bd06632ef5a56f9a
# ff57792d6e1746bbbd47d7629c3947cc
#: ../../home/kovid/work/calibre/manual/develop.rst:175
#: ../../home/kovid/work/calibre/manual/develop.rst:242
msgid ""
"Setting this environment variable means that calibre will now load all its "
"Python code from the specified location."
msgstr ""

# f0f643bbbb254865b76d3f299965b64b
#: ../../home/kovid/work/calibre/manual/develop.rst:177
msgid ""
"That's it! You are now ready to start hacking on the calibre code. For "
"example, open the file :file:`src\\\\calibre\\\\__init__.py` in your "
"favorite editor and add the line::"
msgstr ""

# 409fd5cef6fe4f19b13da3de0d3b8757
# c89ac4fa9a3c492f9ce8c68b0b40fb5a
#: ../../home/kovid/work/calibre/manual/develop.rst:182
#: ../../home/kovid/work/calibre/manual/develop.rst:249
msgid ""
"near the top of the file. Now run the command :command:`calibredb`. The very"
" first line of output should be ``Hello, world!``."
msgstr ""

# f1e3e973c0cc42e499b150c70da005c2
#: ../../home/kovid/work/calibre/manual/develop.rst:185
msgid "OS X development environment"
msgstr ""

# 431e345c68de4669b8d02d265b2f00b2
#: ../../home/kovid/work/calibre/manual/develop.rst:189
msgid ""
"Install calibre normally using the provided .dmg. Then open a Terminal and "
"change to the previously checked out calibre code directory, for example::"
msgstr ""

# 05039bc9b08648b9a655d6c0545daf84
#: ../../home/kovid/work/calibre/manual/develop.rst:194
msgid ""
"calibre is the directory that contains the src and resources sub-"
"directories. Ensure you have installed the calibre commandline tools via "
":guilabel:`Preferences->Advanced->Miscellaneous` in the calibre GUI."
msgstr ""

# 1220b93e220447dfafb357a23c92ad26
#: ../../home/kovid/work/calibre/manual/develop.rst:196
msgid ""
"The next step is to create a bash script that will set the environment "
"variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory "
"when running calibre in debug mode."
msgstr ""

# 5780f578f2814ad8925aa51ee5cfd6b3
#: ../../home/kovid/work/calibre/manual/develop.rst:198
msgid "Create a plain text file::"
msgstr ""

# be09b53b9f404b85afba15c9466d6b79
#: ../../home/kovid/work/calibre/manual/develop.rst:204
msgid ""
"Save this file as ``/usr/bin/calibre-develop``, then set its permissions so "
"that it can be executed::"
msgstr ""

# 36143ea859db486a911c60dde19da8ad
#: ../../home/kovid/work/calibre/manual/develop.rst:208
msgid "Once you have done this, run::"
msgstr ""

# 69d2cd859ed742f5a9dcf2797549d06e
#: ../../home/kovid/work/calibre/manual/develop.rst:212
msgid ""
"You should see some diagnostic information in the Terminal window as calibre"
" starts up, and you should see an asterisk after the version number in the "
"GUI window, indicating that you are running from source."
msgstr ""

# 5400f09b1f704f3ba371b926953d3418
#: ../../home/kovid/work/calibre/manual/develop.rst:217
msgid "Linux development environment"
msgstr ""

# 13f2a62b03c34829bdd843db36567837
#: ../../home/kovid/work/calibre/manual/develop.rst:221
msgid ""
"calibre is primarily developed on Linux. You have two choices in setting up "
"the development environment. You can install the calibre binary as normal "
"and use that as a runtime environment to do your development. This approach "
"is similar to that used in Windows and OS X. Alternatively, you can install "
"calibre from source. Instructions for setting up a development environment "
"from source are in the INSTALL file in the source tree. Here we will address"
" using the binary at runtime, which is the recommended method."
msgstr ""

# 71a05981977b4afbb9c657a429e8d819
#: ../../home/kovid/work/calibre/manual/develop.rst:227
msgid ""
"Install calibre using the binary installer. Then open a terminal and change "
"to the previously checked out calibre code directory, for example::"
msgstr ""

# a87caed021354b8db7f4d79dfcd97f99
#: ../../home/kovid/work/calibre/manual/develop.rst:233
msgid ""
"The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to"
" the absolute path of the src directory. So, following the example above, it"
" would be ``/home/kovid/work/calibre/src``. How to set environment variables"
" depends on your Linux distribution and what shell you are using."
msgstr ""

# b0a00eb446274495b2e4a0e773367d84
#: ../../home/kovid/work/calibre/manual/develop.rst:237
msgid ""
"Once you have set the environment variable, open a new terminal and check "
"that it was correctly set by using the command::"
msgstr ""

# 1825ca1fe65744088843a40199263526
#: ../../home/kovid/work/calibre/manual/develop.rst:244
msgid ""
"That's it! You are now ready to start hacking on the calibre code. For "
"example, open the file :file:`src/calibre/__init__.py` in your favorite "
"editor and add the line::"
msgstr ""

# d642c7d4ccf14b52aae9ac583738bf1e
#: ../../home/kovid/work/calibre/manual/develop.rst:252
msgid ""
"Having separate \"normal\" and \"development\" calibre installs on the same "
"computer"
msgstr ""

# ee0332d15d3e4df1b297ad2e94e63831
#: ../../home/kovid/work/calibre/manual/develop.rst:254
msgid ""
"The calibre source tree is very stable and rarely breaks, but if you feel "
"the need to run from source on a separate test library and run the released "
"calibre version with your everyday library, you can achieve this easily "
"using .bat files or shell scripts to launch calibre. The example below shows"
" how to do this on Windows using .bat files (the instructions for other "
"platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

# e644aa6b72dd40f894981491a33c7b77
#: ../../home/kovid/work/calibre/manual/develop.rst:259
msgid "To launch the release version of calibre with your everyday library:"
msgstr ""

# 51e84dd757e34fa58c814e62210e99c4
#: ../../home/kovid/work/calibre/manual/develop.rst:261
msgid "calibre-normal.bat::"
msgstr ""

# 1caea6ba90f24accb4138a68e5b0acf8
#: ../../home/kovid/work/calibre/manual/develop.rst:265
msgid "calibre-dev.bat::"
msgstr ""

# eb8d3e9d9b824b1bb81007f46db23075
#: ../../home/kovid/work/calibre/manual/develop.rst:272
msgid "Debugging tips"
msgstr ""

# 22a56ba39c3d4728a5fcff814ad8acf1
#: ../../home/kovid/work/calibre/manual/develop.rst:274
msgid ""
"Python is a dynamically typed language with excellent facilities for "
"introspection. Kovid wrote the core calibre code without once using a "
"debugger. There are many strategies to debug calibre code:"
msgstr ""

# f2e7eb7e08284e699703542736eab1bb
#: ../../home/kovid/work/calibre/manual/develop.rst:279
msgid "Using print statements"
msgstr ""

# 10ce7521aa9e4f42b1e1b885274c1445
#: ../../home/kovid/work/calibre/manual/develop.rst:281
msgid ""
"This is Kovid's favorite way to debug. Simply insert print statements at "
"points of interest and run your program in the terminal. For example, you "
"can start the GUI from the terminal as::"
msgstr ""

# 0ce5face025e469faf5bfe325097fded
#: ../../home/kovid/work/calibre/manual/develop.rst:286
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

# e739de119e804b88a52cca38bb078dc9
#: ../../home/kovid/work/calibre/manual/develop.rst:290
msgid "The ebook-editor can be started as::"
msgstr ""

# 7d5a2d169ff549229d550e807b0a73ae
#: ../../home/kovid/work/calibre/manual/develop.rst:295
msgid "Using an interactive python interpreter"
msgstr ""

# 47abd48949a9451287e50fd6dfd6d7d3
#: ../../home/kovid/work/calibre/manual/develop.rst:297
msgid ""
"You can insert the following two lines of code to start an interactive "
"python session at that point::"
msgstr ""

# d98c4c5f85f64ba39f58ebd108f898b0
#: ../../home/kovid/work/calibre/manual/develop.rst:302
msgid ""
"When running from the command line, this will start an interactive Python "
"interpreter with access to all locally defined variables (variables in the "
"local scope). The interactive prompt even has TAB completion for object "
"properties and you can use the various Python facilities for introspection, "
"such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

# a76f84378c4e49ffbee75324fc98387e
#: ../../home/kovid/work/calibre/manual/develop.rst:308
msgid "Using the python debugger as a remote debugger"
msgstr ""

# 96e5acca0fa145339ec7186b15f35d72
#: ../../home/kovid/work/calibre/manual/develop.rst:310
msgid ""
"You can use the builtin python debugger (pdb) as a remote debugger from the "
"command line. First, start the remote debugger at the point in the calibre "
"code you are interested in, like this::"
msgstr ""

# 0cdc099a7eea496daa08f513d6655419
#: ../../home/kovid/work/calibre/manual/develop.rst:317
msgid ""
"Then run calibre, either as normal, or using one of the calibre-debug "
"commands described in the previous section. Once the above point in the code"
" is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

# bf19c458e4094c9b9026a10a83cc7474
#: ../../home/kovid/work/calibre/manual/develop.rst:321
msgid ""
"Now open a terminal or command prompt and use the following command to start"
" the debugging session::"
msgstr ""

# 482cbb93599b44fca858f50ec48505f4
#: ../../home/kovid/work/calibre/manual/develop.rst:326
msgid ""
"You can read about how to use the python debugger in the `python stdlib docs"
" for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-"
"commands>`_."
msgstr ""

# 3b4a98fc47b04884a2c38a7a81845cfc
#: ../../home/kovid/work/calibre/manual/develop.rst:330
msgid ""
"By default, the remote debugger will try to connect on port 4444. You can "
"change it, by passing the port parameter to both the set_trace() and the "
"cli() functions above, like this: ``set_trace(port=1234)`` and "
"``cli(port=1234)``."
msgstr ""

# d7834b68260145f9acb22cd6a1661887
#: ../../home/kovid/work/calibre/manual/develop.rst:336
msgid ""
"The python debugger cannot handle multiple threads, so you have to call "
"set_trace once per thread, each time with a different port number."
msgstr ""

# 89587485cfea459a96d64a5f8d898cba
#: ../../home/kovid/work/calibre/manual/develop.rst:340
msgid "Using the debugger in your favorite python IDE"
msgstr ""

# 5904278dc0ee4aafb7245c400d545dd9
#: ../../home/kovid/work/calibre/manual/develop.rst:342
msgid ""
"It is possible to use the builtin debugger in your favorite python IDE, if "
"it supports remote debugging. The first step is to add the calibre src "
"checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory "
"you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the "
"``PYTHONPATH`` of your IDE."
msgstr ""

# 955813d1f9b4410db6fe2ea58af11a46
#: ../../home/kovid/work/calibre/manual/develop.rst:347
msgid ""
"Then place the IDE's remote debugger module into the :file:`src` "
"subdirectory of the calibre source code checkout. Add whatever code is "
"needed to launch the remote debugger to calibre at the point of interest, "
"for example in the main function. Then run calibre as normal. Your IDE "
"should now be able to connect to the remote debugger running inside calibre."
msgstr ""

# 2a5da96083c148599f070fe5a6d31f11
#: ../../home/kovid/work/calibre/manual/develop.rst:354
msgid "Executing arbitrary scripts in the calibre python environment"
msgstr ""

# e9f89d2aeeac4a268ca3ff2729acc481
#: ../../home/kovid/work/calibre/manual/develop.rst:356
msgid ""
"The :command:`calibre-debug` command provides a couple of handy switches to "
"execute your own code, with access to the calibre modules::"
msgstr ""

# 142d2d7b75ef4bdd900e874ce1982c98
#: ../../home/kovid/work/calibre/manual/develop.rst:361
msgid ""
"is great for testing a little snippet of code on the command line. It works "
"in the same way as the -c switch to the python interpreter::"
msgstr ""

# ab248222411b4b08821f5752e4496a95
#: ../../home/kovid/work/calibre/manual/develop.rst:365
msgid ""
"can be used to execute your own Python script. It works in the same way as "
"passing the script to the Python interpreter, except that the calibre "
"environment is fully initialized, so you can use all the calibre code in "
"your script. To use command line arguments with your script, use the form::"
msgstr ""

# e75394eacdcd4245b98535a75eeeca0d
#: ../../home/kovid/work/calibre/manual/develop.rst:370
msgid ""
"The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

# 617b660d070b4f54a5686d2156f3ca63
#: ../../home/kovid/work/calibre/manual/develop.rst:374
msgid "Using calibre in your projects"
msgstr ""

# 38ffc736ea1e4088b177f67f08d867d2
#: ../../home/kovid/work/calibre/manual/develop.rst:376
msgid ""
"It is possible to directly use calibre functions/code in your Python "
"project. Two ways exist to do this:"
msgstr ""

# 79794143021c400094e21e8396381fab
#: ../../home/kovid/work/calibre/manual/develop.rst:379
msgid "Binary install of calibre"
msgstr ""

# 60d570a4b2e0494581cdc72a069d2165
#: ../../home/kovid/work/calibre/manual/develop.rst:381
msgid ""
"If you have a binary install of calibre, you can use the Python interpreter "
"bundled with calibre, like this::"
msgstr ""

# 074fc231507d480486b1e2ba083dc7e7
#: ../../home/kovid/work/calibre/manual/develop.rst:386
msgid "Source install on Linux"
msgstr ""

# a3b1de19289c442f876bc67a674e7aea
#: ../../home/kovid/work/calibre/manual/develop.rst:388
msgid ""
"In addition to using the above technique, if you do a source install on "
"Linux, you can also directly import calibre, as follows::"
msgstr ""

# ec91ce5de96d4890a96021158e95d934
#: ../../home/kovid/work/calibre/manual/develop.rst:396
msgid ""
"It is essential that you import the init_calibre module before any other "
"calibre modules/packages as it sets up the interpreter to run calibre code."
msgstr ""

# 2d16943e84f846a0850b720bebc93fc8
#: ../../home/kovid/work/calibre/manual/develop.rst:400
msgid "API documentation for various parts of calibre"
msgstr ""
