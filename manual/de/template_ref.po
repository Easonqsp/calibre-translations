# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# Ettore Atalan <atalanttore@googlemail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-17 18:11+0530\n"
"PO-Revision-Date: 2014-06-19 13:11+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: German (http://www.transifex.com/projects/p/calibre/language/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 6efec453731240908f167641cd0c7338
#: ../../template_ref.rst:6
msgid "Reference for all built-in template language functions"
msgstr ""

# 6523ce6c80f442e8acf955bcd2a599ef
#: ../../template_ref.rst:8
msgid ""
"Here, we document all the built-in functions available in the |app| template"
" language. Every function is implemented as a class in python and you can "
"click the source links to see the source code, in case the documentation is "
"insufficient. The functions are arranged in logical groups by type."
msgstr ""

# bd004eea62854d6fb9f5443acc5a6502
#: ../../template_ref.rst:17
msgid "Arithmetic"
msgstr "Arithmetik"

# 000f754700ef45b6b414f5c565681713
#: ../../template_ref.rst:20
msgid "add(x, y)"
msgstr ""

# 9df6c2211d4044c08f357c84348f14d1
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinAdd:1
msgid ""
"add(x, y) -- returns x + y. Throws an exception if either x or y are not "
"numbers."
msgstr "add(x, y) -- Rückgabewert ist x + y. Eine Exception wird ausgelöst, wenn x und/oder y keine Zahl ist."

# 81f5f4ec24cd43fd9686b66c82aba53a
#: ../../template_ref.rst:25
msgid "divide(x, y)"
msgstr ""

# 2f435944f0bb48dfbb902c378d211a79
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinDivide:1
msgid ""
"divide(x, y) -- returns x / y. Throws an exception if either x or y are not "
"numbers."
msgstr "divide(x, y) -- Rückgabewert ist x / y. Eine Exception wird ausgelöst, wenn x und/oder y keine Zahl ist."

# 0c331537b81a41168655faf4f5a1e91a
#: ../../template_ref.rst:30
msgid "multiply(x, y)"
msgstr ""

# 286fa57cbe4f49ab8849f50ab776d245
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinMultiply:1
msgid ""
"multiply(x, y) -- returns x * y. Throws an exception if either x or y are "
"not numbers."
msgstr "multiply(x, y) -- Rückgabewert ist x * y. Eine Exception wird ausgelöst, wenn x und/oder y keine Zahl ist."

# 05c7b9ea4f394387962a5219d41f302b
#: ../../template_ref.rst:35
msgid "subtract(x, y)"
msgstr ""

# 1709bf4f84d44d47bb91d2c47f5fe3e0
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSubtract:1
msgid ""
"subtract(x, y) -- returns x - y. Throws an exception if either x or y are "
"not numbers."
msgstr "subtract(x, y) -- Rückgabwert ist x - y. Eine Exception wird ausgelöst, wenn x und/oder y keine Zahl ist."

# 4a563aaf293749d1bde8388cf4b0bc67
#: ../../template_ref.rst:40
msgid "Boolean"
msgstr ""

# ffeb42d9f9334813977295cfd3ed2fac
#: ../../template_ref.rst:43
msgid "and(value, value, ...)"
msgstr ""

# 460f42bc0dd9433f93108080378d03b1
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinAnd:1
msgid ""
"and(value, value, ...) -- returns the string \"1\" if all values are not "
"empty, otherwise returns the empty string. This function works well with "
"test or first_non_empty. You can have as many values as you want."
msgstr "and(value, value, ...) -- gibt den String \"1\" aus, wenn alle Werte nicht empty ist, ansonsten wird retuder empty String ausgegeben. Diese Funktion arbeitet gut mit test oder first_non_empty Werten. Die Anzahl der Werte ist beliebig."

# 2e32489318e946eda70b1d8976eb286a
#: ../../template_ref.rst:48
msgid "not(value)"
msgstr ""

# c2cfbfbd69e64cab8c2bfe024c290cd9
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinNot:1
msgid ""
"not(value) -- returns the string \"1\" if the value is empty, otherwise "
"returns the empty string. This function works well with test or "
"first_non_empty. You can have as many values as you want."
msgstr "not(value) -- gibt den String \"1\" aus,  wenn  der Wert empty ist, ansonsten wird ein leerer String ausgegeben. Diese Funktion arbeitet gut mit test oder first_non_empty zusammen. Die Anzahl der Werte ist beliebig."

# abdef009167947df95aa9779ed58c758
#: ../../template_ref.rst:53
msgid "or(value, value, ...)"
msgstr ""

# e88d2626115f4340b933ca3cf2952d7c
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinOr:1
msgid ""
"or(value, value, ...) -- returns the string \"1\" if any value is not empty,"
" otherwise returns the empty string. This function works well with test or "
"first_non_empty. You can have as many values as you want."
msgstr "or(value, value, ...) -- gibt den String \"1\" aus,  wenn jeder Wert nicht empty ist, otherwise returns the empty string. Diese Funktion arbeitet gut mit test oder first_non_empty zusammen. Die Anzahl der Werte ist beliebig."

# b15f94963c474e1498f9cf8c3ddb9668
#: ../../template_ref.rst:58
msgid "Date functions"
msgstr ""

# fbfb42bea98b4cad927052cbf9e65862
#: ../../template_ref.rst:61
msgid "days_between(date1, date2)"
msgstr ""

# 3b29ad94cc53484cb56f4a4c660d1c7a
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinDaysBetween:1
msgid ""
"days_between(date1, date2) -- return the number of days between date1 and "
"date2. The number is positive if date1 is greater than date2, otherwise "
"negative. If either date1 or date2 are not dates, the function returns the "
"empty string."
msgstr "days_between(date1, date2) -- liefert die Anzahl der Tage zwischen date1 und date2. Die Zahl ist positiv, wenn date1 größer als date2 ist, andernfalls negativ. Falls einer der beiden Werte date1 und date2 kein Datum ist, wird ein leerer String zurückgeliefert."

# 54ea38bbef6f4816a6351e00ae7d1f48
#: ../../template_ref.rst:66
msgid "today()"
msgstr ""

# dcd1cf7fd0d048e49efaa3e1c9a66b00
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinToday:1
msgid ""
"today() -- return a date string for today. This value is designed for use in"
" format_date or days_between, but can be manipulated like any other string. "
"The date is in ISO format."
msgstr "today() -- gibt einen Datum-String für den aktuellen Tag aus. Dieser Wert ist für den Einsatz in format_date oder days_between gedacht, kann aber wie jeder andere String verändert werden. Das Datum wird im ISO Format ausgegeben."

# 004fa17c02684cd19277bec2e38dc616
#: ../../template_ref.rst:71
msgid "Formatting values"
msgstr ""

# 3b4942dc5992491894ad3e0c61295260
#: ../../template_ref.rst:74
msgid "finish_formatting(val, fmt, prefix, suffix)"
msgstr ""

# 67b91c66948a42d18c0045ca1f8fa732
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFinishFormatting:1
msgid ""
"finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and"
" suffix to a value in the same way as done in a template like "
"`{series_index:05.2f| - |- }`. For example, the following program produces "
"the same output as the above template: program: "
"finish_formatting(field(\"series_index\"), \"05.2f\", \" - \", \" - \")"
msgstr "finish_formatting(val, fmt, prefix, suffix) -- anwenden des Formats, Präfix, und Suffix zu einem Wert in der gleichen Art und Weise wie mit dem Template  `{series_index:05.2f| - |- }`. Das folgende Programm produziert die gleiche Ausgabe, wie das obere Template: Program: finish_formatting(field(\"series_index\"), \"05.2f\", \" - \", \" - \")"

# 1cc1bd8bb7514908bf7f0e7a101c2442
#: ../../template_ref.rst:79
msgid "format_date(val, format_string)"
msgstr ""

# d63408dfafdf4985852d5f51e73519d4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatDate:1
msgid ""
"format_date(val, format_string) -- format the value, which must be a date, "
"using the format_string, returning a string. The formatting codes are: d    "
": the day as number without a leading zero (1 to 31) dd   : the day as "
"number with a leading zero (01 to 31) ddd  : the abbreviated localized day "
"name (e.g. \"Mon\" to \"Sun\"). dddd : the long localized day name (e.g. "
"\"Monday\" to \"Sunday\"). M    : the month as number without a leading zero"
" (1 to 12). MM   : the month as number with a leading zero (01 to 12) MMM  :"
" the abbreviated localized month name (e.g. \"Jan\" to \"Dec\"). MMMM : the "
"long localized month name (e.g. \"January\" to \"December\"). yy   : the "
"year as two digit number (00 to 99). yyyy : the year as four digit number. h"
"    : the hours without a leading 0 (0 to 11 or 0 to 23, depending on am/pm)"
" hh   : the hours with a leading 0 (00 to 11 or 00 to 23, depending on "
"am/pm) m    : the minutes without a leading 0 (0 to 59) mm   : the minutes "
"with a leading 0 (00 to 59) s    : the seconds without a leading 0 (0 to 59)"
" ss   : the seconds with a leading 0 (00 to 59) ap   : use a 12-hour clock "
"instead of a 24-hour clock, with \"ap\" replaced by the localized string for"
" am or pm AP   : use a 12-hour clock instead of a 24-hour clock, with \"AP\""
" replaced by the localized string for AM or PM iso  : the date with time and"
" timezone. Must be the only format present"
msgstr "format_date(val, format_string) - angegebenen Wert, der Datum sein muss, entsprechend dem Formatstring formatieren; liefert einen String zurück. Die einzelnen Codes des Formatstrings sind: d: der Tag als Zahl ohne führende Null (1 bis 31). dd: der Tag als Zahl mit führender Null (01 bis 31). ddd: der abgekürzte, lokalisierte, Name des Wochentags (z.B. \"Mon\" bis \"Son\"). dddd: der lange, lokalisierte Name des Wochentags (z.B.: \"Montag\" bis \"Sonntag\"). M: der Monat als Zahl ohne führende Null (1 bis 12). MM: der Monat als Zahl mit führender Null (01 bis 12). MMM: der abgekürzte, lokalisierte Name des Monats (z.B. \"Jan\" bis \"Dez\"). MMMM: der lange, lokalisierte Name des Monats (z.B. \"Januar\" bis \"Dezember\"). yy: das Jahr als zweistellige Zahl (00 bis 99). yyyy: das Jahr als vierstellige Zahl. h: die Stunden ohne führende Null (0 bis 11, bzw.  0 bis 23). hh: die Stunden mit führender Null (00 bis 12, bzw. 00 bis 23). m: die Minuten ohne führende Null (0 bis 59). mm: die Minuten mit führender Null (00 bis 59). s: die Sekunden ohne führende Null (0 bis 59). ss: die Sekunden mit führender Null (00 bis 59). am oder pm: 12-Stunden Uhr benutzen. AM oder PM: 24-Stunden Uhr benutzen. iso: das Datum mit Zeit und Zeitzone (muss die einzige Formatangabe sein)"

# 1b6f70c05940466f946c8879bd253e9f
#: ../../template_ref.rst:84
msgid "format_number(v, template)"
msgstr ""

# 82c732926ac64a7b8240cf55179ccbc2
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatNumber:1
msgid ""
"format_number(v, template) -- format the number v using a python formatting "
"template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The "
"field_name part of the template must be a 0 (zero) (the \"{0:\" in the above"
" examples). See the template language and python documentation for more "
"examples. Returns the empty string if formatting fails."
msgstr "format_number(v, template) -- Formatiert die Zahl v unter Verwendung eines Python Formatierungs-Template wie \"{0:5.2f}\" oder \"{0:,d}\" oder \"${0:5,.2f}\". Der field_name (Feld_Name) Teil des Templates muss eine 0 (Null) sein (die \"{0:\" im o.g. Bsp.). Lesen Sie das Handbuch zu der Template Sprache und Python für weitere Beispiele. Gibt den leeren String aus, wenn die Formatierung nicht funktioniert."

# 1be5a800766443fbb5d0c40cdf741201
#: ../../template_ref.rst:89
msgid "human_readable(v)"
msgstr ""

# cc406c30e1d149debd8afb08188c494e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinHumanReadable:1
msgid ""
"human_readable(v) -- return a string representing the number v in KB, MB, "
"GB, etc."
msgstr "human_readable(v) -- gibt einen String zurück der die Zahl v in KB, MB, GB, etc. ausdrückt."

# 8b1fc7a43be947debeff0d0c6751c99e
#: ../../template_ref.rst:94
msgid "Get values from metadata"
msgstr ""

# 3331c442eaf44f06a9836e609d2e24ad
#: ../../template_ref.rst:97
msgid "approximate_formats()"
msgstr ""

# 9abe5fe6d31442a08a384d9e3d4828f1
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinApproximateFormats:1
msgid ""
"approximate_formats() -- return a comma-separated list of formats that at "
"one point were associated with the book. There is no guarantee that this "
"list is correct, although it probably is. This function can be called in "
"template program mode using the template \"{:'approximate_formats()'}\". "
"Note that format names are always uppercase, as in EPUB. This function works"
" only in the GUI. If you want to use these values in save-to-disk or send-"
"to-device templates then you must make a custom \"Column built from other "
"columns\", use the function in that column's template, and use that column's"
" value in your save/send templates"
msgstr "approximate_formats() -- gibt eine durch Kommas getrennte Liste von Formaten zurück, die mit dem Buch gespeichert wurden. Es gibt keine Garantie, dass diese Liste stimmt, obwohl es wahrscheinlich ist. Diese Funktion wird als Vorlage im Programm-Modus mithilfe der Vorlage \"{program:'approximate_formats()'}\" aufgerufen. Die Namen der Formate sind immer in Großschrift geschrieben, wie z. B. EPUB. Diese Funktion funktioniert nur auf der Benutzeroberfläche. Wenn Sie die Werte in den Vorlagen für \"Bücher auf Datenträger speichern\" oder \"Bücher auf Gerät übertragen\" verwenden wollen, müssen Sie mit dieser Funktion eine benutzerdefinierte Spalte des Typs \"Aus anderen Spalten zusammengesetzte Spalte\" erstellen und deren Werte im Template verwenden"

# 777450b87610421cb704e10bf3de76b3
#: ../../template_ref.rst:102
msgid "booksize()"
msgstr ""

# 1d4ab3b49f3a420ca493355c49c1fe45
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinBooksize:1
msgid ""
"booksize() -- return value of the size field. This function works only in "
"the GUI. If you want to use this value in save-to-disk or send-to-device "
"templates then you must make a custom \"Column built from other columns\", "
"use the function in that column's template, and use that column's value in "
"your save/send templates"
msgstr "booksize() -- Gibt den Wert des Feldes size zurück. Diese Funktion funktioniert nur auf der Benutzeroberfläche. Wenn Sie die Werte in den Vorlagen für \"Bücher auf Datenträger speichern\" oder \"Bücher auf Gerät übertragen\" verwenden wollen, müssen Sie eine benutzerdefinierte Spalte des Typs \"aus anderen Spalten zusammengesetzte Spalte\" erstellen, deren Werte im Template verwenden und den Wert der Spalte im Speichern/Senden Template angeben"

# 5895083e9e834d499fa1e27fbee1d764
#: ../../template_ref.rst:107
msgid "current_library_name()"
msgstr ""

# f9461dc008cd408a902f5747adcc098b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCurrentLibraryName:1
msgid ""
"current_library_name() -- return the last name on the path to the current "
"calibre library. This function can be called in template program mode using "
"the template \"{:'current_library_name()'}\"."
msgstr "current_library_name() -- gibt den letzten Namen das Pfades zur aktuellen-Calibre Bibliothek aus. Diese Funktion kann im Vorlagen-Programmmodus durch die Vorlage \"{:'current_library_name()'}\" geladen werden."

# 9f6bf5836b744f51b3f32e85b34a7637
#: ../../template_ref.rst:112
msgid "current_library_path()"
msgstr ""

# baff53eb0be840e7853655851b14eac3
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCurrentLibraryPath:1
msgid ""
"current_library_path() -- return the path to the current calibre library. "
"This function can be called in template program mode using the template "
"\"{:'current_library_path()'}\"."
msgstr "current_library_path() -- gibt den Pfad der aktuellen calibe-Datenbank zurück. Diese Funktion dann im Vorlagen Programmiermodus verwendet werden: \"{:'current_library_path()'}\"."

# 8821e40b3f954017a8ca21cde20082ff
#: ../../template_ref.rst:117
msgid "field(name)"
msgstr ""

# 17edf073a1ba4050a37fc1b1615dafcc
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinField:1
msgid "field(name) -- returns the metadata field named by name"
msgstr "field(name) -- gibt das Feld Metadaten, das durch name bezeichnet ist, zurück"

# 4fb82b9a5963438ca1ac6aebaa92cf57
#: ../../template_ref.rst:122
msgid "formats_modtimes(date_format)"
msgstr ""

# fbeb78434f314d65b8cb8728689cfb45
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatsModtimes:1
msgid ""
"formats_modtimes(date_format) -- return a comma-separated list of "
"colon_separated items representing modification times for the formats of a "
"book. The date_format parameter specifies how the date is to be formatted. "
"See the date_format function for details. You can use the select function to"
" get the mod time for a specific format. Note that format names are always "
"uppercase, as in EPUB."
msgstr "formats_modtimes(date_format) -- liefert eine kommaseparierte Liste von Doppelpunkt getrennten Inhalten, die die Änderungszeitpunkte für das Format eines Buches wiedergeben. Der Parameter date_format legt fest, nach welcher Art ein  Datum zu formatieren ist. Lesen Sie mehr in der date_format Funktionsaufruf-Beschreibung. Sie können die Auswahlfunktion benutzen, um den Änderungszeitpunkt für ein bestimmtes Format zu erhalten. Bitte beachten Sie, dass Format Bezeichnungen immer in Großbuchstaben zu erfolgen haben, z.B. wie in EPUB."

# 2356f5942f9546a086b3bab5640c8de5
#: ../../template_ref.rst:127
msgid "formats_paths()"
msgstr ""

# 48017182f6ba404faea851dbe528d639
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatsPaths:1
msgid ""
"formats_paths() -- return a comma-separated list of colon_separated items "
"representing full path to the formats of a book. You can use the select "
"function to get the path for a specific format. Note that format names are "
"always uppercase, as in EPUB."
msgstr "formats_paths() -- gibt eine durch Komma getrennte Liste von colon_separated Elementen aus, welche den vollen Pfad zu dem Format eines eBooks darstellen. Sie können die Wählen-Funktion nutzen, um den Pfad eines bestimmten Formates zu bekommen.\r\nBeachten Sie, dass die Format-Namen immer in Großbuchstaben angegeben werden, wie bei EPUB."

# 05465c0966e94c92a7b0a96b20adcaeb
#: ../../template_ref.rst:132
msgid "formats_sizes()"
msgstr ""

# 95931191391e462892c35c98f9b1b856
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatsSizes:1
msgid ""
"formats_sizes() -- return a comma-separated list of colon_separated items "
"representing sizes in bytes of the formats of a book. You can use the select"
" function to get the size for a specific format. Note that format names are "
"always uppercase, as in EPUB."
msgstr "formats_sizes() -- gibt eine, durch ein Komma getrennte Liste von colon_separated Elementen aus, welche die Größe eines Buches in Bytes angibt. Sie können die Auswählen- Funktion nutzen, um die Größe eines bestimmten Formates zu erhalten.\r\nBeachten Sie, dass Formatnamen immer in Großbuchstaben (z.B. EPUB) angegeben werden."

# b00d02e1795b4fbe90ea5776475a761e
#: ../../template_ref.rst:137
msgid "has_cover()"
msgstr ""

# 781a5894bd5b4856a7f8dcbcda7d94e1
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinHasCover:1
msgid ""
"has_cover() -- return Yes if the book has a cover, otherwise return the "
"empty string"
msgstr "has_cover() -- gibt Yes zurück, wenn das Buch einen Coverbild hat, andernfalls einen leeren String"

# b75a10a1450a4cb2b6c16ec56322e3c1
#: ../../template_ref.rst:142
msgid "language_codes(lang_strings)"
msgstr ""

# f785f599cbf54d6f974473c93563da3b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLanguageCodes:1
msgid ""
"language_codes(lang_strings) -- return the language codes for the strings "
"passed in lang_strings. The strings must be in the language of the current "
"locale. Lang_strings is a comma-separated list."
msgstr "language_codes(lang_strings) -- gibt den Sprachcode für die Strings übergeben in lang_strings aus. Die Strings müssen in der Sprache des aktuellen Gebietsschemas sein. Die Liste der Lang_strings wird durch Kommata getrennt."

# b025efd1986e43f3b0ce733c4623f097
#: ../../template_ref.rst:147
msgid "language_strings(lang_codes, localize)"
msgstr ""

# a276fb070f274000a47e6b3f2856edfe
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLanguageStrings:1
msgid ""
"language_strings(lang_codes, localize) -- return the strings for the "
"language codes passed in lang_codes. If localize is zero, return the strings"
" in English. If localize is not zero, return the strings in the language of "
"the current locale. Lang_codes is a comma-separated list."
msgstr "language_strings(lang_codes, localize) -- gibt die Strings für die Sprachcodes übergeben in lang_codes an. Wenn Null lokalisiert wird, dann werden die Strings in Englisch ausgegeben. Wenn Null nicht Lokalisiert wird, dann werden die Strings in der  Sprache das aktuellen Gebietsschemas ausgegeben. Die Liste der Lang_codes wird durch Kommata getrennt."

# bf4424a72334459aa952e96615dc3191
#: ../../template_ref.rst:152
msgid "ondevice()"
msgstr ""

# d2ea6ba2636a40eabb3275042efbc30a
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinOndevice:1
msgid ""
"ondevice() -- return Yes if ondevice is set, otherwise return the empty "
"string. This function works only in the GUI. If you want to use this value "
"in save-to-disk or send-to-device templates then you must make a custom "
"\"Column built from other columns\", use the function in that column's "
"template, and use that column's value in your save/send templates"
msgstr "ondevice() -- gibt ein Ja bzw. Yes aus, wenn ondevice gesetzt ist, ansonsten wird ein leerer String ausgegeben. Diese Funktion funktioniert nur auf der Benutzeroberfläche. Wenn Sie die Werte in den Vorlagen für \"Bücher auf Datenträger speichern\" oder \"Bücher auf Gerät übertragen\" verwenden wollen, müssen Sie eine benutzerdefinierte Spalte des Typs \"aus anderen Spalten zusammengesetzte Spalte\" erstellen, deren Werte im Template verwenden und den Wert der Spalte im Speichern/Senden Template angeben"

# 2b756531a0bb44fc88e2c5132fe763b4
#: ../../template_ref.rst:157
msgid "raw_field(name)"
msgstr ""

# a8f2d1343f7b47178c82ec69d4a2655e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinRawField:1
msgid ""
"raw_field(name) -- returns the metadata field named by name without applying"
" any formatting."
msgstr "raw_field(name) -- gibt das Feld Metadaten, das durch name bezeichnet ist, ohne jegliche Formatierung zurück."

# 2bbf6f206c3d429bb6b7916a889c625e
#: ../../template_ref.rst:162
msgid "series_sort()"
msgstr ""

# 9d966ac3732842b1afb4b6504580592d
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSeriesSort:1
msgid "series_sort() -- return the series sort value"
msgstr "series_sort() -- gibt den Sortierschlüssel der Serie zurück"

# c6812768bbd4466f88bdc1d1721c6ce1
#: ../../template_ref.rst:167
msgid "virtual_libraries()"
msgstr ""

# ab46577e080840178dde8de00517047e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinVirtualLibraries:1
msgid ""
"virtual_libraries() -- return a comma-separated list of virtual libraries "
"that contain this book. This function works only in the GUI. If you want to "
"use these values in save-to-disk or send-to-device templates then you must "
"make a custom \"Column built from other columns\", use the function in that "
"column's template, and use that column's value in your save/send templates"
msgstr "virtual_libraries() -- gibt eine durch Kommas getrennte Liste der virtuellen Bibliotheken zurück, welche dieses Buch enthalten. Diese Funktion funktioniert nur auf der Benutzeroberfläche. Wenn Sie die Werte in den Vorlagen für \"Bücher auf Datenträger speichern\" oder \"Bücher auf Gerät übertragen\" verwenden wollen, müssen Sie mit dieser Funktion eine benutzerdefinierte Spalte des Typs \"Aus anderen Spalten zusammengesetzte Spalte\" erstellen und deren Werte im Template verwenden"

# 008daa4646b44e318266a356cf7f0444
#: ../../template_ref.rst:172
msgid "If-then-else"
msgstr ""

# 03440f763d8a420da913fb8c70aeaa5a
#: ../../template_ref.rst:175
msgid "contains(val, pattern, text if match, text if not match)"
msgstr ""

# bbc0becf60fd453588955fad57d30bd0
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinContains:1
msgid ""
"contains(val, pattern, text if match, text if not match) -- checks if field "
"contains matches for the regular expression `pattern`. Returns `text if "
"match` if matches are found, otherwise it returns `text if no match`"
msgstr "contains(val, pattern, text if match, text if not match) -- prüft, ob das Feld Treffer für allgemeine Ausdrücke `pattern`enthält. Gibt `text if match` aus, wenn keine Treffer gefunden werden, ansonsten `text if no match`"

# 7d84358453e24a94b1cd68a45cea1347
#: ../../template_ref.rst:180
msgid "ifempty(val, text if empty)"
msgstr ""

# 4ffc93cd686148e297833674e4aa4c54
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinIfempty:1
msgid ""
"ifempty(val, text if empty) -- return val if val is not empty, otherwise "
"return `text if empty`"
msgstr "ifempty(val, text if empty) -- gibt val aus wenn val nicht leer ist, ansonsten `text if empty`"

# f2aa4f636a4648a19802dd43fba9f8e1
#: ../../template_ref.rst:185
msgid "test(val, text if not empty, text if empty)"
msgstr ""

# 8c0a050303d04feeb534ac1be35ac8fa
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTest:1
msgid ""
"test(val, text if not empty, text if empty) -- return `text if not empty` if"
" the field is not empty, otherwise return `text if empty`"
msgstr "test(val, text if not empty, text if empty) -- gibt `text if not empty` aus, wenn das Feld nicht leer ist, ansonsten `text if empty`"

# 7a77a4d33b21429f842a55d1a0be45f6
#: ../../template_ref.rst:190
msgid "Iterating over values"
msgstr ""

# 063f17dbb6ae403caab0ebbd2df35f00
#: ../../template_ref.rst:193
msgid "first_non_empty(value, value, ...)"
msgstr ""

# 47242b2974734833adc1f6fbfeef4e7d
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFirstNonEmpty:1
msgid ""
"first_non_empty(value, value, ...) -- returns the first value that is not "
"empty. If all values are empty, then the empty value is returned. You can "
"have as many values as you want."
msgstr "first_non_empty(value, value, ...) -- gibt den ersten Wert aus, der nicht empty ist. Wenn alle Werte empty sind, dann kommt der empty Wert wieder. Die Anzahl der Werte ist beliebig."

# 65a9dc195e304e349f6f724ba84c95f7
#: ../../template_ref.rst:198
msgid "lookup(val, pattern, field, pattern, field, ..., else_field)"
msgstr ""

# f4e5ced8eed74fce88802ad2194ad8a7
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLookup:1
msgid ""
"lookup(val, pattern, field, pattern, field, ..., else_field) -- like switch,"
" except the arguments are field (metadata) names, not text. The value of the"
" appropriate field will be fetched and used. Note that because composite "
"columns are fields, you can use this function in one composite field to use "
"the value of some other composite field. This is extremely useful when "
"constructing variable save paths"
msgstr "lookup(val, pattern, field, pattern, field, ..., else_field) -- wie switch, außer dass die Argumente  Feld (Metadaten) Namen sind, kein Text. Der Wert des entsprechenden Feldes wird ausgelesen und verwendet.  Beachten Sie das, da zusammengesetzte Spalten Felder sind. Sie können die Funktion eines zusammengesetzten Feldes verwenden, um den Wert eines Anderen zusammengesetzten Feldes zu nutzen. Das ist sehr nützlich bei der Konstruktion von variablen Speicherpfaden"

# 81382ed56c9d4ef0bff0e626a19e7e2b
#: ../../template_ref.rst:203
msgid "switch(val, pattern, value, pattern, value, ..., else_value)"
msgstr ""

# ebe66236c16a44c18e48116f1572f00f
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSwitch:1
msgid ""
"switch(val, pattern, value, pattern, value, ..., else_value) -- for each "
"`pattern, value` pair, checks if the field matches the regular expression "
"`pattern` and if so, returns that `value`. If no pattern matches, then "
"else_value is returned. You can have as many `pattern, value` pairs as you "
"want"
msgstr "switch(val, pattern, value, pattern, value, ..., else_value) -- für jedes `pattern, value` Paar, prüft, ob das Feld den regulären Ausdruck `pattern` enthält und wenn, dann wird `value` ausgegeben. Wenn keine pattern zutreffen, dann wird else_value ausgegeben. Es können beliebig viele `pattern, value` Paare angegeben werden"

# b7e63762e0b94b149353432e2bbfc817
#: ../../template_ref.rst:208
msgid "List lookup"
msgstr ""

# b0519240a97844b8bbf808ef3d09abe8
#: ../../template_ref.rst:211
msgid "identifier_in_list(val, id, found_val, not_found_val)"
msgstr ""

# ef833871df7648f295044d287c4cc045
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinIdentifierInList:1
msgid ""
"identifier_in_list(val, id, found_val, not_found_val) -- treat val as a list"
" of identifiers separated by commas, comparing the string against each value"
" in the list. An identifier has the format \"identifier:value\". The id "
"parameter should be either \"id\" or \"id:regexp\". The first case matches "
"if there is any identifier with that id. The second case matches if the "
"regexp matches the identifier's value. If there is a match, return "
"found_val, otherwise return not_found_val."
msgstr "identifier_in_list(val, id, found_val, not_found_val) -- behandelt val wie eine durch Kommata getrennte Liste von Kennungen (IDs) und vergleicht die Strings mit jedem Wert in der Liste. Eine Kennung hat das Format \"identifier:value\", Die ID Parameter sollten entweder \"id\" oder \"id:regexp\" sein. Der erste Fall stimmt überein, wenn jede Kennung mit der ID übereinstimmt. Es entspricht dem zweiten Fall, wenn das regexp mit dem Kennungs-Wert übereinstimmt. Wenn es eine Übereinstimmung gibt, wird found_val ausgegeben, ansonsten not_found_val."

# 7a76a931f6a84fb29fb3aad768c930ad
#: ../../template_ref.rst:216
msgid "in_list(val, separator, pattern, found_val, not_found_val)"
msgstr ""

# e00c93a3d4454aa2827e9f1509c681ab
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinInList:1
msgid ""
"in_list(val, separator, pattern, found_val, not_found_val) -- treat val as a"
" list of items separated by separator, comparing the pattern against each "
"value in the list. If the pattern matches a value, return found_val, "
"otherwise return not_found_val."
msgstr "in_list(val, separator, pattern, found_val, not_found_val) -- val wird als Liste von Werten, welche durch ein Trennzeichen getrennt werden behandelt. Das Pattern wird mit jedem dieser Werte verglichen. Wenn eine Übereinstimmung auftritt, wird found_val zurückgegeben, sonst not_found_val."

# 35a2521b89994869abe8aba908b8a3e6
#: ../../template_ref.rst:221
msgid "list_item(val, index, separator)"
msgstr ""

# 2893b066bbd84addacbd16830729fd1c
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListitem:1
msgid ""
"list_item(val, index, separator) -- interpret the value as a list of items "
"separated by `separator`, returning the `index`th item. The first item is "
"number zero. The last item can be returned using `list_item(-1,separator)`. "
"If the item is not in the list, then the empty value is returned. The "
"separator has the same meaning as in the count function."
msgstr "list_item(val, index, separator) -- Interpretiert den Wert als eine Liste von Elementen, getrennt durch `separator` (Trennzeichen, wobei das `index`te Element ausgegeben wird. Das erste Element ist die Zahl Null. Das Letzte Element kann durch `list_item(-1,separator)` wiedergegeben werden. Wenn das Element nicht in der Liste ist, dann wied ein leerer Wert ausgegeben. Das Trennzeichen hat die gleiche Bedeutung, wie die Zähl-Funktion."

# 8a81519cfeb84e628be943f330f363f2
#: ../../template_ref.rst:226
msgid "select(val, key)"
msgstr ""

# ea68c1fdb12b440cabcce2bdd404a32d
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSelect:1
msgid ""
"select(val, key) -- interpret the value as a comma-separated list of items, "
"with the items being \"id:value\". Find the pair with the id equal to key, "
"and return the corresponding value."
msgstr "select(val, key) -- Interpretiert den Wert (value) als eine durch Komma getrennte Liste von Elementen, wobei die Elemente \"id:value\" sind. Findet das Paar, bei dem die id gleich key ist, und gibt den entsprechenden Wert zurück."

# 90b4d21d6e514347b21a2c7618417966
#: ../../template_ref.rst:231
msgid "str_in_list(val, separator, string, found_val, not_found_val)"
msgstr ""

# 43c1423cbedb408ca75cf7cadbb2b7bc
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrInList:1
msgid ""
"str_in_list(val, separator, string, found_val, not_found_val) -- treat val "
"as a list of items separated by separator, comparing the string against each"
" value in the list. If the string matches a value, return found_val, "
"otherwise return not_found_val. If the string contains separators, then it "
"is also treated as a list and each value is checked."
msgstr "str_in_list(val, separator, string, found_val, not_found_val) -- behandelt \"val\" als eine Liste von Elementen, durch ein Trennzeichen getrennt. Der String wird mit jedem Wert in der Liste verglichen. Wenn der String mit dem Wert übereinstimmt, wird \"found_val\" ausgegeben, andernfalls \"not_found_val\". Wenn der String Trennzeichnen enthält, dann wird er so behandelt wie eine Liste und jeder Wert wird überprüft."

# 528b96c84d9742428ecc53535b61f646
#: ../../template_ref.rst:236
msgid "List manipulation"
msgstr ""

# 6095515bcdca429e95151005f50decfb
#: ../../template_ref.rst:239
msgid "count(val, separator)"
msgstr ""

# aa87da5e3fad4845a55b4cc569cd01d4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCount:1
msgid ""
"count(val, separator) -- interprets the value as a list of items separated "
"by `separator`, returning the number of items in the list. Most lists use a "
"comma as the separator, but authors uses an ampersand. Examples: "
"{tags:count(,)}, {authors:count(&)}"
msgstr "count(val, separator) -- 'val' wird als Liste von Werten interpretiert, welche alle durch 'separator' voneinander getrennt sind. Die Anzahl der Items wird zurückgegeben. In den meisten Listen wird ein Komma (,) verwendet. Allerdings wird zum Beispiel in der Liste der Autoren ein kaufmännisches Und (&) genutzt. Beispiel: {tags:count(,)}, {authors:count(&)}"

# 7fd83219f5a7434684694527d8d42165
#: ../../template_ref.rst:244
msgid "list_difference(list1, list2, separator)"
msgstr ""

# 21c8195b9bfd41838fec187bfa05fd7a
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListDifference:1
msgid ""
"list_difference(list1, list2, separator) -- return a list made by removing "
"from list1 any item found in list2, using a case-insensitive compare. The "
"items in list1 and list2 are separated by separator, as are the items in the"
" returned list."
msgstr "list_difference(list1, list2, separator) -- gibt eine Liste aus, bei der jedes Element aus list1 entfernt wird, dass in list2 gefunden wird, wobei die Groß- und Kleinschreibung verglichen wird. Die Elemente, in list1 und list2 werden durch ein Trennzeichen getrennt, ebenso wie die Elemente der ausgegebenen Liste."

# 4676aa2851b34a61b53a05f6ce69e40b
#: ../../template_ref.rst:249
msgid "list_equals(list1, sep1, list2, sep2, yes_val, no_val)"
msgstr ""

# 0e24b0fada7f4ccd887d143f134ca378
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListEquals:1
msgid ""
"list_equals(list1, sep1, list2, sep2, yes_val, no_val) -- return yes_val if "
"list1 and list2 contain the same items, otherwise return no_val. The items "
"are determined by splitting each list using the appropriate separator "
"character (sep1 or sep2). The order of items in the lists is not relevant. "
"The compare is case insensitive."
msgstr "list_equals(list1, sep1, list2, sep2, yes_val, no_val) -- liefert 'yes_val' zurück, falls 'list1' und 'list2' die gleichen Elemente enthalten, andernfalls 'no_val'. Die Elemente werden durch Zerlegung jeder Liste durch das entsprechende Trennzeichen (sep1 oder sep2) bestimmt. Die Reihenfolge der Elemente spielt keine Rolle. Der Vergleich ignoriert die Groß/Kleinschreibung."

# e1273a3a78d6449bbaec067787a22e67
#: ../../template_ref.rst:254
msgid "list_intersection(list1, list2, separator)"
msgstr ""

# 984fb9da3d6e4d78b799cc01453feef9
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListIntersection:1
msgid ""
"list_intersection(list1, list2, separator) -- return a list made by removing"
" from list1 any item not found in list2, using a case-insensitive compare. "
"The items in list1 and list2 are separated by separator, as are the items in"
" the returned list."
msgstr "list_intersection(list1, list2, separator) -- gibt eine Liste aus, bei der jedes Element aus list1 entfernt wird, dass <nicht> in list2 gefunden wird, wobei die Groß- und Kleinschreibung verglichen wird. Die Elemente, in list1 und list2 werden durch ein Trennzeichen getrennt, ebenso wie die Elemente der ausgegebenen Liste."

# 7fb1e208f67e4682977448adc852ca3f
#: ../../template_ref.rst:259
msgid "list_re(src_list, separator, search_re, opt_replace)"
msgstr ""

# 549313286d1b4cf6a4d9da8c7e1356bf
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListRe:1
msgid ""
"list_re(src_list, separator, search_re, opt_replace) -- Construct a list by "
"first separating src_list into items using the separator character. For each"
" item in the list, check if it matches search_re. If it does, then add it to"
" the list to be returned. If opt_replace is not the empty string, then apply"
" the replacement before adding the item to the returned list."
msgstr "list_re(src_list, separator, search_re, opt_replace) -- Konstruiert ein Liste, indem zuerst src_list in Elementen getrennt werden, die das Trennzeichen enthalten. Für jedes Element in der Liste wird überprüft, ob es mit search_re übereinstimmt. Wenn das der Fall ist, dann wird es zur Liste hinzugefügt, die zurückgegeben werden soll. Wenn opt_replace kein leerer String ist, dann wird das Element vor dem Hinzufügen in die Ausgabeliste ersetzt."

# f5931ae9a10949139ae6eefd72c3c9bd
#: ../../template_ref.rst:264
msgid "list_sort(list, direction, separator)"
msgstr ""

# 4a06e8b1a36045b4b07e0ed449d89005
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListSort:1
msgid ""
"list_sort(list, direction, separator) -- return list sorted using a case-"
"insensitive sort. If direction is zero, the list is sorted ascending, "
"otherwise descending. The list items are separated by separator, as are the "
"items in the returned list."
msgstr "list_sort(list, direction, separator) -- liefert eine sortierte Liste ohne Berücksichtigung von Groß/Kleinschreibung zurück. Falls 'direction' Null ist, wird die Liste aufsteigend sortiert, andernfalls absteigend. Die Elemente der Liste sind durch 'separator' getrennt, genauso, wie die Ergebnisliste."

# e5b0a088b7734b59a970c3df0cb8d714
#: ../../template_ref.rst:269
msgid "list_union(list1, list2, separator)"
msgstr ""

# d49bb9de35c440338ce4bd32aeec660d
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListUnion:1
msgid ""
"list_union(list1, list2, separator) -- return a list made by merging the "
"items in list1 and list2, removing duplicate items using a case-insensitive "
"compare. If items differ in case, the one in list1 is used. The items in "
"list1 and list2 are separated by separator, as are the items in the returned"
" list."
msgstr "list_union(list1, list2, separator) -- gibt eine Liste mit den zusammengeführten Elementen aus list1 und list2 zurück, wobei Duplikate durch schreibungsunabhängigen Vergleich entfernt werden. Wenn Elemente sich in der Schreibweise unterscheiden, dann wird das aus list1 verwendet. Die Elemente in list1 und list2 werden durch den separator getrennt."

# 5969a773ad0c465ca27bcf6d420ca277
#: ../../template_ref.rst:274
msgid "subitems(val, start_index, end_index)"
msgstr ""

# db9ae387ba6940bb90a0958ca1531800
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSubitems:1
msgid ""
"subitems(val, start_index, end_index) -- This function is used to break "
"apart lists of items such as genres. It interprets the value as a comma-"
"separated list of items, where each item is a period-separated list. Returns"
" a new list made by first finding all the period-separated items, then for "
"each such item extracting the `start_index` to the `end_index` components, "
"then combining the results back together. The first component in a period-"
"separated list has an index of zero. If an index is negative, then it counts"
" from the end of the list. As a special case, an end_index of zero is "
"assumed to be the length of the list. Example using basic template mode and "
"assuming a #genre value of \"A.B.C\": {#genre:subitems(0,1)} returns \"A\". "
"{#genre:subitems(0,2)} returns \"A.B\". {#genre:subitems(1,0)} returns "
"\"B.C\". Assuming a #genre value of \"A.B.C, D.E.F\", {#genre:subitems(0,1)}"
" returns \"A, D\". {#genre:subitems(0,2)} returns \"A.B, D.E\""
msgstr "subitems(val, start_index, end_index) -- Diese Funktion wird verwendet, um Listen aus Elementen zu trennen, wie z.B. Genres. Es interpretiert den Wert als \"Komma-getrennte\" Liste von Elementen, wobei jedes Element eine periodisch-getrennte Liste ist.\nGibt eine neue Liste aus, indem zuerst alle gefundenen periodisch-getrennte Elemente, dann für jedes dieser Element der `start_index` zur `end_index` Komponente extrahiert wird. Die erste Komponente ist eine periodisch-getrennte Liste mit einem Index von Null. Wenn der Index negativ ist, dann wird vom Ende der Liste gezählt. Im Sonderfall, wenn ein end_index Null ist, wird er als Länge der Liste angenommen. \nBeispiel: bei Verwendung des Basis-Template Modus und unter der Annahme von #genre value gleich  \"A.B.C\"gibt {#genre:subitems(0,1)} den Wert \"A\" aus, {#genre:subitems(0,2)} gibt \"A.B\" aus,  {#genre:subitems(1,0)} gibt \"B.C\".\n Bei #genre value von \"A.B.C, D.E.F\",  {#genre:subitems(0,1)} gibt \"A, D\" aus, {#genre:subitems(0,2)} gibt \"A.B, D.E\" aus"

# f6172e2faf5b4bcb9c1a4f7a1939f161
#: ../../template_ref.rst:279
msgid "sublist(val, start_index, end_index, separator)"
msgstr ""

# ad3cafc60fe144c583aeb8eb73a25db4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSublist:1
msgid ""
"sublist(val, start_index, end_index, separator) -- interpret the value as a "
"list of items separated by `separator`, returning a new list made from the "
"`start_index` to the `end_index` item. The first item is number zero. If an "
"index is negative, then it counts from the end of the list. As a special "
"case, an end_index of zero is assumed to be the length of the list. Examples"
" using basic template mode and assuming that the tags column (which is "
"comma-separated) contains \"A, B, C\": {tags:sublist(0,1,\\,)} returns "
"\"A\". {tags:sublist(-1,0,\\,)} returns \"C\". {tags:sublist(0,-1,\\,)} "
"returns \"A, B\"."
msgstr "sublist(val, start_index, end_index, separator) -- interpretiert den Wert als eine Liste von Elementen, getrennt durch ein `separator` (Trennzeichen). Gibt eine neue Liste, erstellt aus dem `start_index` zum `end_index` Element aus. Das erste Element hat die Zahl Null. Wenn eine Index negativ ist, dann zählt er vom Ende der Liste. Im Sonderfall, wenn end_index  Null ist, wird es als Länge der Liste angenommen. Beispielsweise verwenden wir ein Basis-Template Modus und nehmen an, dass die Schlagwörter-Spalte (die durch Kommata getrennt ist)  \"A, B, C\": {tags:sublist(0,1,\\,)} enthält, dann gibt \"A\". {tags:sublist(-1,0,\\,)} gibt \"C\". {tags:sublist(0,-1,\\,)} gibt \"A, B\" aus."

# 4af0e11897c343d8ab044d73ebb6198b
#: ../../template_ref.rst:284
msgid "Other"
msgstr "Andere"

# 1f8092065f404a909829a36ad9039c16
#: ../../template_ref.rst:287
msgid "assign(id, val)"
msgstr ""

# f679fabdc4954b4989fe18db3fffb9f2
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinAssign:1
msgid ""
"assign(id, val) -- assigns val to id, then returns val. id must be an "
"identifier, not an expression"
msgstr "assign(id, val) -- Zuweisung von val zu id, gibt val zurück. id muss ein Bezeichner sein, kein Ausdruck"

# 9f321e30070d40d5903b906c241d85f6
#: ../../template_ref.rst:292
msgid "print(a, b, ...)"
msgstr ""

# 41c72d75ece84d06854e3d5146f93b82
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinPrint:1
msgid ""
"print(a, b, ...) -- prints the arguments to standard output. Unless you "
"start calibre from the command line (calibre-debug -g), the output will go "
"to a black hole."
msgstr "print(a, b, ...) -- gibt die Argumente auf der Standard-Ausgabe aus. Wenn Sie Calibre nicht über die Befehlszeile gestartet haben (calibre-debug -g), landet die Ausgabe in einem schwarzen Loch."

# 8084a527323f4fd19406077fe481a702
#: ../../template_ref.rst:297
msgid "Recursion"
msgstr ""

# ed7fc41b41a748aa95cf874945c4ffe7
#: ../../template_ref.rst:300
msgid "eval(template)"
msgstr ""

# 7ced77fce4224b79b3801a490f7abc9e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinEval:1
msgid ""
"eval(template) -- evaluates the template, passing the local variables (those"
" 'assign'ed to) instead of the book metadata.  This permits using the "
"template processor to construct complex results from local variables. "
"Because the { and } characters are special, you must use [[ for the { "
"character and ]] for the } character; they are converted automatically. Note"
" also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be "
"used in the argument to this function when using template program mode."
msgstr "eval(template) - Überprüft die Vorlage, die lokalen Variablen (jene die 'eingebunden wurden) anstelle der Buchmetadaten. Dies hat zur Folge, dass der Vorlagenprozessor komplexe Ergebnisse von lokalen Variablen erzeugt. Weil die Zeichen { und } spezielle Funktion haben, musst du für { die Zeichen [[ und für } die Zeichen ]] verwenden; sie werden automatisch umgewandelt. Beachten Sie, dass Vor- und Nachzeiten (die Vorzeichen '|prefix|suffix' Syntax) nicht für diese Funktionen verwendet werden kann, dass der Vorlagenprogrammiermodus verwendet wird."

# dbd5e40f7a25445ab3c4d81554f0ae73
#: ../../template_ref.rst:305
msgid "template(x)"
msgstr ""

# 16864689a8a44ac48f50ca8bdc26b794
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTemplate:1
msgid ""
"template(x) -- evaluates x as a template. The evaluation is done in its own "
"context, meaning that variables are not shared between the caller and the "
"template evaluation. Because the { and } characters are special, you must "
"use [[ for the { character and ]] for the } character; they are converted "
"automatically. For example, template('[[title_sort]]') will evaluate the "
"template {title_sort} and return its value. Note also that prefixes and "
"suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to "
"this function when using template program mode."
msgstr "template(x) -- wertet \"x\" als eine Vorlage. Die Beurteilung geschieht in eigener Umgebung, das heißt, dass Variablen nicht zwischen dem Aufrufer und der Vorlagenbewertung geteilt werden. Da das \"{\" und das \"}\" Zeichen besonders sind, müssen sie \"[[\" für \"{\" und \"]]\" für \"}\" verwenden; Diese werden automatisch umgewandelt. Zum Beispiel: template('[[title_sort]]') bewertet die Vorlage \"{title_sort}\" und gibt deren Wert zurück. Präfixe und Suffixe in der Notation `|prefix|suffix` können nicht als Argument für diese funktion benutzt werden, wenn der Vorlagen-Programmmodus benutzt wird."

# bbb2ce51f0bf48f1b768a737d6b03970
#: ../../template_ref.rst:310
msgid "Relational"
msgstr ""

# ae04e8804a7742eeaec36f340a4a7a44
#: ../../template_ref.rst:313
msgid "cmp(x, y, lt, eq, gt)"
msgstr ""

# 45fdcdc7b95343c68dbefbdb025b1a2b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCmp:1
msgid ""
"cmp(x, y, lt, eq, gt) -- compares x and y after converting both to numbers. "
"Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr "cmp(x, y, lt, eq, gt) -- Vergleich von x und y nachdem diese zu Zahlenwerten konvertiert wurden. Der Rückgabewert ist lt wenn x < y, eq wenn x == y und andernfalls gt."

# 3bddff3db9e74845af3e0da6f1f26434
#: ../../template_ref.rst:318
msgid "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)"
msgstr ""

# 061035d509f9424e897214667622291e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFirstMatchingCmp:1
msgid ""
"first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result) -- "
"compares \"val < cmpN\" in sequence, returning resultN for the first "
"comparison that succeeds. Returns else_result if no comparison succeeds. "
"Example: "
"first_matching_cmp(10,5,\"small\",10,\"middle\",15,\"large\",\"giant\") "
"returns \"large\". The same example with a first value of 16 returns "
"\"giant\"."
msgstr "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result) -- vergleicht nacheinander \"val < cmpN\" und gibt als Ergebnis \"resultN\" für den ersten erfolgreichen Vergleich zurück. Bei einem nicht erfolgreichen Vergleich wird \"else_result\" zurückgegeben. Beispiel: first_matching_cmp(10,5,\"small\",10,\"middle\",15,\"large\",\"giant\") gibt \"large\" zurück. Das gleiche Beispiel mit dem ersten Wert von 16 gibt \"giant\" zurück. Erklärung: Weil der letzte Wert else_result entspricht und 16 nicht in der Liste enthalten ist."

# 2a33d10ae2274755b77453d0fd6baeeb
#: ../../template_ref.rst:323
msgid "strcmp(x, y, lt, eq, gt)"
msgstr ""

# 5b75b83d95514ee7b061a60639629258
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrcmp:1
msgid ""
"strcmp(x, y, lt, eq, gt) -- does a case-insensitive comparison of x and y as"
" strings. Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr "strcmp(x, y, lt, eq, gt) -- führt einen Case-insensitiven Vergleich der Zeichenketten x und y durch. Der Rückgabewert ist lt wenn x < y, eq wenn x == y und andernfalls gt."

# 72447d62e38a4af1ac77694dd3cc8dce
#: ../../template_ref.rst:328
msgid "String case changes"
msgstr ""

# 1fbff04cce6c45f4a81a4a0ec541100b
#: ../../template_ref.rst:331
msgid "capitalize(val)"
msgstr ""

# a504fbf464ca402c878dc7b7bcec7f0b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCapitalize:1
msgid "capitalize(val) -- return value of the field capitalized"
msgstr "capitalize(val) -- gibt den Wert des Feldes val mit großen Anfangsbuchstaben zurück"

# 6574b760de234616a136f33ee82d384f
#: ../../template_ref.rst:336
msgid "lowercase(val)"
msgstr ""

# b7458aea8ff941cd9909686e2de32362
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLowercase:1
msgid "lowercase(val) -- return value of the field in lower case"
msgstr "lowercase(val) -- gibt den Wert des Feldes val in Kleinbuchstaben zurück"

# 2687d41ce5444321927fec7212b57fc9
#: ../../template_ref.rst:341
msgid "titlecase(val)"
msgstr ""

# d0caacd5533b43789ce9a18c563611e6
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTitlecase:1
msgid "titlecase(val) -- return value of the field in title case"
msgstr "titlecase(val) -- gibt den Wert des Feldes val im Überschriftenstil zurück"

# cb6fb1df842c48a99dc23a10f678839d
#: ../../template_ref.rst:346
msgid "uppercase(val)"
msgstr ""

# 7b9ff1aeaad94fc4a4f850438cf44a17
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinUppercase:1
msgid "uppercase(val) -- return value of the field in upper case"
msgstr "uppercase(val) -- gibt den Wert des Feldes val in Großbuchstaben zurück"

# ad3828f6510049b8b9fcca0f48cb045c
#: ../../template_ref.rst:351
msgid "String manipulation"
msgstr ""

# 6eda962facea4eb8b8c504a8ae4e3390
#: ../../template_ref.rst:354
msgid "re(val, pattern, replacement)"
msgstr ""

# 950bc4255b5340188b7c7ea21ec691b4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinRe:1
msgid ""
"re(val, pattern, replacement) -- return the field after applying the regular"
" expression. All instances of `pattern` are replaced with `replacement`. As "
"in all of calibre, these are python-compatible regular expressions"
msgstr "re(val, pattern, replacement) -- Ersetzt alle Teile von val, auf die das Pattern 'pattern' zutrifft mit 'replacement' und gibt das Ergebnis zurück.  Der reguläre Ausdruck des Patterns muss, wie alles bei Calibre, Python Komptaibel sein"

# a864dc7a6e2a42ddaeca8f89c5cd4ca0
#: ../../template_ref.rst:359
msgid "shorten(val, left chars, middle text, right chars)"
msgstr ""

# d46a8a3366764af1aebff8864cc4b380
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinShorten:1
msgid ""
"shorten(val, left chars, middle text, right chars) -- Return a shortened "
"version of the field, consisting of `left chars` characters from the "
"beginning of the field, followed by `middle text`, followed by `right chars`"
" characters from the end of the string. `Left chars` and `right chars` must "
"be integers. For example, assume the title of the book is `Ancient English "
"Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most "
"15 characters. If you use {title:shorten(9,-,5)}, the result will be "
"`Ancient E-nhoe`. If the field's length is less than left chars + right "
"chars + the length of `middle text`, then the field will be used intact. For"
" example, the title `The Dome` would not be changed."
msgstr "shorten(val, left chars, middle text, right chars) -- Gibt eine gekürzte Version des Feldes aus, bestehend aus den Zeichen: `left chars` (linke Zeichen) vom Anfang des Feldes, gefolgt vom `middle text` (Mitteltext), gefolgt von `right chars` (rechte Zeichen) vom Ende des Feldes. `Left chars` und `right chars` müssen ganze Zahlen sein. Nehmen wir beispielsweise an, der Titel eines Buches ist `Ancient English Laws in the Times of Ivanhoe` und Sie möchten, dass es in einen Raum von maximal 15 Zeichen passt. Wenn Sie {title:shorten(9,-,5)} verwenden, wird das Ergebnis `Ancient E-nhoe` sein. Wenn die Feldlänge kürzer als die linken Zeichen + rechte Zeichen + Länge des `middle text` ist, dann wird das Feld unverändert verwendet."

# 9befebdfdd4b4f8bb9d1f9236287f0c5
#: ../../template_ref.rst:364
msgid "strcat(a, b, ...)"
msgstr ""

# ffa25975e31d49a29c69d8487de34fd9
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrcat:1
msgid ""
"strcat(a, b, ...) -- can take any number of arguments. Returns a string "
"formed by concatenating all the arguments"
msgstr "strcat(a, b, ...) -- kann eine beliebige Anzahl von Argumenten verarbeiten. Der Rückgabewert ist eine Zeichenkette, die eine Verkettung aller Argumente darstellt"

# ed4c92c42be148e296c3abf19d9e9793
#: ../../template_ref.rst:369
msgid "strcat_max(max, string1, prefix2, string2, ...)"
msgstr ""

# 2b9826acf2194d39a61cadbf372993d2
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrcatMax:1
msgid ""
"strcat_max(max, string1, prefix2, string2, ...) -- Returns a string formed "
"by concatenating the arguments. The returned value is initialized to "
"string1. `Prefix, string` pairs are added to the end of the value as long as"
" the resulting string length is less than `max`. String1 is returned even if"
" string1 is longer than max. You can pass as many `prefix, string` pairs as "
"you wish."
msgstr "strcat_max(max, string1, prefix2, string2, ...) -- Liefert einen String zurück, der durch Aneinanderhängen der Argumente gebildet wird. Der Rückgabewert wird mit string1 initialisiert. `Prefix, string`-Paare werden an das Ende des Strings angehängt,  solange das Ergebnis kürzer als 'max' ist. String1 wird auch dann zurückggeben, wenn er länger als 'max' ist. Sie können soviele 'prefix, string'-Paare angeben wie sie wollen."

# e14e625fae2a462bacdfe05c76a751fa
#: ../../template_ref.rst:374
msgid "strlen(a)"
msgstr ""

# 91732f037b2d40cc940ff3bb082848e0
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrlen:1
msgid "strlen(a) -- Returns the length of the string passed as the argument"
msgstr "strlen(a) -- Rückgabewert ist die Länge der Zeichenkette die als Argument übergeben wurde"

# c7818fdb5d04468d9c08fc976ce7cd8e
#: ../../template_ref.rst:379
msgid "substr(str, start, end)"
msgstr ""

# 9994484b02ca455eb4bf18adc50925ca
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSubstr:1
msgid ""
"substr(str, start, end) -- returns the start'th through the end'th "
"characters of str. The first character in str is the zero'th character. If "
"end is negative, then it indicates that many characters counting from the "
"right. If end is zero, then it indicates the last character. For example, "
"substr('12345', 1, 0) returns '2345', and substr('12345', 1, -1) returns "
"'234'."
msgstr "substr(str, start, ende) -- gibt das start'te bis ende'te Zeichen von \"str\" zurück. Das erste Zeichen in \"str\" ist das 0te Zeichen, also s. Es hat den Index von 0. Wenn \"ende\" ein negativer Wert ist, heißt das, dass die Rückgabe beim ende-letzten Zeichen aufhört. Wenn ende 0 ist, heißt das, dass die Rückgabe alle Zeichen von \"start\" bis zum Ende von \"str\" umfasst. Zum Beispiel: \"substr('12345', 1, 0)\" gibt '2345', zurück und \"substr('12345', 1, -1)\" gibt '234' zurück."

# 5a46be26c44f4985abe8e15bee54fdf3
#: ../../template_ref.rst:384
msgid "swap_around_comma(val)"
msgstr ""

# e5ff601fc2064e60bbe7d1e92cabfe03
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSwapAroundComma:1
msgid ""
"swap_around_comma(val) -- given a value of the form \"B, A\", return \"A "
"B\". This is most useful for converting names in LN, FN format to FN LN. If "
"there is no comma, the function returns val unchanged"
msgstr "swap_around_comma(val) -- ist ein Wert in der Form \"B, A\" gegeben, gib \"A B\" aus. Das ist sehr nützlich, um Namen im Format LN, FN in FN LN zu konvertieren. Wenn dort kein Komma steht, bleibt die Funktion val unverändert"

# 5d01992fbe514d97a69b1e02cbc9de53
#: ../../template_ref.rst:389
msgid "transliterate(a)"
msgstr ""

# 9ca35508f309442cae0dbb69de9488db
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTransliterate:1
msgid ""
"transliterate(a) -- Returns a string in a latin alphabet formed by "
"approximating the sound of the words in the source string. For example, if "
"the source is \"Фёдор Миха́йлович Достоевский\" the function returns "
"\"Fiodor Mikhailovich Dostoievskii\"."
msgstr ""

# b7dfed5a1abe4f308f56e9a27c5ac9fd
#: ../../template_ref.rst:395
msgid "API of the Metadata objects"
msgstr ""

# fe643ae169ab4ba4bdfd017ae8016606
#: ../../template_ref.rst:397
msgid ""
"The python implementation of the template functions is passed in a Metadata "
"object. Knowing it's API is useful if you want to define your own template "
"functions."
msgstr ""

# 37a0a64316b6431e9ec608702b5b4d4c
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:1
msgid ""
"A class representing all the metadata for a book. The various standard "
"metadata fields are available as attributes of this object. You can also "
"stick arbitrary attributes onto this object."
msgstr ""

# 2b66f74675694877ba671c6a8139eb47
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:5
msgid ""
"Metadata from custom columns should be accessed via the get() method, "
"passing in the lookup name for the column, for example: \"#mytags\"."
msgstr ""

# 91e28d3708a74dc895fb132dbdf484bb
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:8
msgid "Use the :meth:`is_null` method to test if a field is null."
msgstr ""

# c12840d72fc54e219557cb0db2badd71
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:10
msgid "This object also has functions to format fields into strings."
msgstr ""

# a86df87ded51483d872ccaa358a35143
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:12
msgid ""
"The list of standard metadata fields grows with time is in "
":data:`STANDARD_METADATA_FIELDS`."
msgstr ""

# 0fd423d4ce1d48b5970bdd1043319edf
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:15
msgid ""
"Please keep the method based API of this class to a minimum. Every method "
"becomes a reserved field name."
msgstr ""

# 22911447960a42f6be3bbd1f4d1eee97
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.is_null:1
msgid ""
"Return True if the value of field is null in this object. 'null' means it is"
" unknown or evaluates to False. So a title of _('Unknown') is null or a "
"language of 'und' is null."
msgstr ""

# e7f5b3999b764efab2564cba96d0ea6e
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.is_null:5
msgid ""
"Be careful with numeric fields since this will return True for zero as well "
"as None."
msgstr ""

# cd104555c97a4778be60c1bd51e690e0
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.is_null:8
msgid "Also returns True if the field does not exist."
msgstr ""

# 50aed35d2c464da1aa06ce605f5709e9
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.deepcopy:1
msgid ""
"Do not use this method unless you know what you are doing, if you want to "
"create a simple clone of this object, use :meth:`deepcopy_metadata` instead."
" Class_generator must be a function that returns an instance of Metadata or "
"a subclass of it."
msgstr ""

# 8c718b42e7c44762a7672fc9f70f0c1e
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_identifiers:1
msgid ""
"Return a copy of the identifiers dictionary. The dict is small, and the "
"penalty for using a reference where a copy is needed is large. Also, we "
"don't want any manipulations of the returned dict to show up in the book."
msgstr ""

# 80231faea6944c6589890957ec7d6235
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_identifiers:1
msgid ""
"Set all identifiers. Note that if you previously set ISBN, calling this "
"method will delete it."
msgstr ""

# 00785d485b2041148982e3d36046b0d7
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_identifier:1
msgid "If val is empty, deletes identifier of type typ"
msgstr ""

# ca3a29c53a0d492fb45a4d44663f40c3
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.standard_field_keys:1
msgid ""
"return a list of all possible keys, even if this book doesn't have them"
msgstr ""

# 5e325a885d6c4e23b5385c660f35d216
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.custom_field_keys:1
msgid "return a list of the custom fields in this book"
msgstr ""

# 56925b7457e54239934484daa9a3406b
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.all_field_keys:1
msgid "All field keys known by this instance, even if their value is None"
msgstr ""

# 1afa7629f39a41ae823b68d120a536da
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.metadata_for_field:1
msgid "return metadata describing a standard or custom field."
msgstr ""

# 6cb732b912324622a5a936fb9e9414e9
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.all_non_none_fields:1
msgid ""
"Return a dictionary containing all non-None metadata fields, including the "
"custom ones."
msgstr ""

# bf3bcb5124f7414c95dcc8a53cd5f38e
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_standard_metadata:1
msgid ""
"return field metadata from the field if it is there. Otherwise return None. "
"field is the key name, not the label. Return a copy if requested, just in "
"case the user wants to change values in the dict."
msgstr ""

# 9f09451eee4a46488a6f45c8b99753b4
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_all_standard_metadata:1
msgid ""
"return a dict containing all the standard field metadata associated with the"
" book."
msgstr ""

# e7af6f739c4a472784adddd7487e4af1
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_all_user_metadata:1
msgid ""
"return a dict containing all the custom field metadata associated with the "
"book."
msgstr ""

# 1fdad734bddb49bd9d2f4328bdb4db59
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_user_metadata:1
msgid ""
"return field metadata from the object if it is there. Otherwise return None."
" field is the key name, not the label. Return a copy if requested, just in "
"case the user wants to change values in the dict."
msgstr ""

# b956f266fab540068e168807e0f50992
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_all_user_metadata:1
msgid ""
"store custom field metadata into the object. Field is the key name not the "
"label"
msgstr ""

# e3ece89349904438a959e1de5216fbd2
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_user_metadata:1
msgid ""
"store custom field metadata for one column into the object. Field is the key"
" name not the label"
msgstr ""

# 351e274d92c44eb093a5401830602063
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.template_to_attribute:1
msgid ""
"Takes a list [(src,dest), (src,dest)], evaluates the template in the context"
" of other, then copies the result to self[dest]. This is on a best-efforts "
"basis. Some assignments can make no sense."
msgstr ""

# b0a838a9c6834517a632e7700fa02a48
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.smart_update:1
msgid ""
"Merge the information in `other` into self. In case of conflicts, the "
"information in `other` takes precedence, unless the information in `other` "
"is NULL."
msgstr ""

# c05bc40e2c1e4ba8a225583e97c2a12b
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.format_field:1
msgid "Returns the tuple (display_name, formatted_value)"
msgstr ""

# e67e7a2c128d43909b5369b46846bf31
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.to_html:1
msgid "A HTML representation of this object."
msgstr ""

# 523ad4ecba4742139b99c8e91088a13b
#: ../../template_ref.rst:407
msgid "The set of standard metadata fields."
msgstr ""
