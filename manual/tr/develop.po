# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-26 09:31+0530\n"
"PO-Revision-Date: 2014-12-31 01:00+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Turkish (http://www.transifex.com/projects/p/calibre/language/tr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

# 2ee6b632c20742adb8c804e8ab3a002c
#: ../../home/kovid/work/calibre/manual/develop.rst:4
msgid "Setting up a calibre development environment"
msgstr "Bir calibre geliştirme ortamı ayarlamak"

# 864ced44bca1431aabb23c66a5fc9f08
#: ../../home/kovid/work/calibre/manual/develop.rst:6
msgid ""
"calibre is completely open source, licensed under the `GNU GPL v3 "
"<http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to "
"download and modify the program to your heart's content. In this section, "
"you will learn how to get a calibre development environment set up on the "
"operating system of your choice. calibre is written primarily in `Python "
"<https://www.python.org>`_ with some C/C++ code for speed and system "
"interfacing. Note that calibre is not compatible with Python 3 and requires "
"at least Python 2.7."
msgstr ""

# bdc9fc664f0c471199a838d61f9d5513
#: ../../home/kovid/work/calibre/manual/develop.rst:0
msgid "Contents"
msgstr "İçindekiler"

# e2090eb133a44168a8c90d88e50261a5
#: ../../home/kovid/work/calibre/manual/develop.rst:17
msgid "Design philosophy"
msgstr ""

# dff24c5d2f9d403d800ac3ffd35df20a
#: ../../home/kovid/work/calibre/manual/develop.rst:19
msgid ""
"calibre has its roots in the Unix world, which means that its design is "
"highly modular. The modules interact with each other via well defined "
"interfaces. This makes adding new features and fixing bugs in calibre very "
"easy, resulting in a frenetic pace of development. Because of its roots, "
"calibre has a comprehensive command line interface for all its functions, "
"documented in :doc:`generated/en/cli-index`."
msgstr ""

# 991cd936442242ef945ce3be7513a610
#: ../../home/kovid/work/calibre/manual/develop.rst:24
msgid ""
"The modular design of calibre is expressed via ``Plugins``. There is a "
":ref:`tutorial <customize>` on writing calibre plugins. For example, adding "
"support for a new device to calibre typically involves writing less than a "
"100 lines of code in the form of a device driver plugin. You can browse the "
"`built-in drivers "
"<https://github.com/kovidgoyal/calibre/tree/master/src/calibre/devices>`_. "
"Similarly, adding support for new conversion formats involves writing "
"input/output format plugins. Another example of the modular design is the "
":ref:`recipe system <news>` for fetching news. For more examples of plugins "
"designed to add features to calibre, see the `plugin index "
"<http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

# a64a9e24741640c7ab5113b96e040a9e
#: ../../home/kovid/work/calibre/manual/develop.rst:34
msgid "Code layout"
msgstr ""

# a0ea10b3c354466bbd3af34f4a877f3a
#: ../../home/kovid/work/calibre/manual/develop.rst:36
msgid ""
"All the calibre python code is in the ``calibre`` package. This package "
"contains the following main sub-packages"
msgstr ""

# 2ccf47805cc14267a6b31cc4afd3e878
#: ../../home/kovid/work/calibre/manual/develop.rst:38
msgid ""
"devices - All the device drivers. Just look through some of the built-in "
"drivers to get an idea for how they work."
msgstr ""

# 09f7eff7cf1048e2b75e590a196ae717
#: ../../home/kovid/work/calibre/manual/develop.rst:40
msgid ""
"For details, see: ``devices.interface`` which defines the interface "
"supported by device drivers and ``devices.usbms`` which defines a generic "
"driver that connects to a USBMS device. All USBMS based drivers in calibre "
"inherit from it."
msgstr ""

# 5030d00db9ac41d0bb31fd960917b153
#: ../../home/kovid/work/calibre/manual/develop.rst:43
msgid ""
"ebooks  - All the ebook conversion/metadata code. A good starting point is "
"``calibre.ebooks.conversion.cli`` which is the module powering the :command"
":`ebook-convert` command. The conversion process is controlled via "
"``conversion.plumber``. The format independent code is all in ``ebooks.oeb``"
" and the format dependent code is in ``ebooks.format_name``."
msgstr ""

# b0c66bf10dc745eab8ad7c2b35e10cbc
#: ../../home/kovid/work/calibre/manual/develop.rst:47
msgid ""
"Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

# 77faa7a20db44a1ab292d29a2fb4334c
#: ../../home/kovid/work/calibre/manual/develop.rst:48
msgid ""
"Conversion happens in a pipeline, for the structure of the pipeline, see "
":ref:`conversion-introduction`. The pipeline consists of an input plugin, "
"various transforms and an output plugin. The code that constructs and drives"
" the pipeline is in :file:`plumber.py`. The pipeline works on a "
"representation of an ebook that is like an unzipped epub, with manifest, "
"spine, toc, guide, html content, etc. The class that manages this "
"representation is OEBBook in ``ebooks.oeb.base``. The various "
"transformations that are applied to the book during conversions live in "
":file:`oeb/transforms/*.py`. And the input and output plugins live in "
":file:`conversion/plugins/*.py`."
msgstr ""

# 09283ac430db4c25b4af6f3ebbf3b3ca
#: ../../home/kovid/work/calibre/manual/develop.rst:58
msgid ""
"Ebook editing happens using a different container object. It is documented "
"in :ref:`polish_api`."
msgstr ""

# 804c05f5b5b040d0b15fdf143fa59291
#: ../../home/kovid/work/calibre/manual/develop.rst:61
msgid ""
"db - The database back-end. See :ref:`db_api` for the interface to the "
"calibre library."
msgstr ""

# 4bbccfa91f5c46018c7718f9418b9d1f
#: ../../home/kovid/work/calibre/manual/develop.rst:63
msgid "content server: ``library.server`` is the calibre Content Server."
msgstr ""

# 70eb7f66d92d4ad2810b05d44940a5e9
#: ../../home/kovid/work/calibre/manual/develop.rst:65
msgid ""
"gui2 - The Graphical User Interface. GUI initialization happens in "
"``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The "
"ebook editor is in ``gui2.tweak_book``."
msgstr ""

# 9bf4beb9bf17484fafe8a5806b9c629a
#: ../../home/kovid/work/calibre/manual/develop.rst:67
msgid ""
"If you want to locate the entry points for all the various calibre "
"executables, look at the ``entry_points`` structure in `linux.py "
"<https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

# c196711033854fe6a530579387c69929
#: ../../home/kovid/work/calibre/manual/develop.rst:71
msgid ""
"If you need help understanding the code, post in the `development forum "
"<http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will "
"most likely get help from one of calibre's many developers."
msgstr ""

# 5bf98171a5ca4e83b30582f1e9889194
#: ../../home/kovid/work/calibre/manual/develop.rst:75
msgid "Getting the code"
msgstr ""

# 3d03378250a74c0496f76a8722f0e03d
#: ../../home/kovid/work/calibre/manual/develop.rst:77
msgid ""
"You can get the calibre source code in two ways, using a version control "
"system or directly downloading a `tarball <http://status.calibre-"
"ebook.com/dist/src>`_."
msgstr ""

# 1ba526f2965e41e48b1858174ef99e61
#: ../../home/kovid/work/calibre/manual/develop.rst:80
msgid ""
"calibre uses `Git <http://www.git-scm.com/>`_, a distributed version control"
" system. Git is available on all the platforms calibre supports.  After "
"installing Git, you can get the calibre source code with the command::"
msgstr ""

# 874f42d9b3a446f3aa642c518f119796
#: ../../home/kovid/work/calibre/manual/develop.rst:86
msgid ""
"On Windows you will need the complete path name, that will be something like"
" :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

# b82a695417ac45e3b06833b5e851ea69
#: ../../home/kovid/work/calibre/manual/develop.rst:88
msgid ""
"calibre is a very large project with a very long source control history, so "
"the above can take a while (10 mins to an hour depending on your internet "
"speed)."
msgstr ""

# 04619e4ae4e54bff9a12e76980318f83
#: ../../home/kovid/work/calibre/manual/develop.rst:91
msgid ""
"If you want to get the code faster, the source code for the latest release "
"is always available as an `archive <http://status.calibre-"
"ebook.com/dist/src>`_."
msgstr ""

# d24c0272a58049039085f921316a4769
#: ../../home/kovid/work/calibre/manual/develop.rst:94
msgid "To update a branch to the latest code, use the command::"
msgstr ""

# a06fb1a924b947b994fa82d5952b8052
#: ../../home/kovid/work/calibre/manual/develop.rst:99
msgid "Submitting your changes to be included"
msgstr ""

# 58507ca7e9e549fa9bf2babffecc5a39
#: ../../home/kovid/work/calibre/manual/develop.rst:101
msgid ""
"If you only plan to make a few small changes, you can make your changes and "
"create a \"merge directive\" which you can then attach to a ticket in the "
"calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, "
"make your changes, then run::"
msgstr ""

# 597030cf9be94f209e0107b81f1203aa
#: ../../home/kovid/work/calibre/manual/develop.rst:109
msgid ""
"This will create a :file:`my-changes` file in the current directory, simply "
"attach that to a ticket on the calibre `bug tracker "
"<https://bugs.launchpad.net/calibre>`_. Note that this will include *all* "
"the commits you have made. If you only want to send some commits, you have "
"to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

# 1e5b5984955044cdb30883b8b7bc8c7b
#: ../../home/kovid/work/calibre/manual/develop.rst:117
msgid ""
"To send the last *n* commits, replace *1* with *n*, for example, for the "
"last 3 commits::"
msgstr ""

# a59198e49ab04161b6044bbe235fc08e
#: ../../home/kovid/work/calibre/manual/develop.rst:122
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

# 565e4e4634d44fc2ba6356fb60f9a95e
#: ../../home/kovid/work/calibre/manual/develop.rst:124
msgid ""
"If you plan to do a lot of development on calibre, then the best method is "
"to create a `GitHub <https://github.com>`_ account. Below is a basic guide "
"to setting up your own fork of calibre in a way that will allow you to "
"submit pull requests for inclusion into the main calibre repository:"
msgstr ""

# 73840609203a4c50b1a1f4023d709167
#: ../../home/kovid/work/calibre/manual/develop.rst:129
msgid ""
"Setup git on your machine as described in this article: `Setup Git "
"<https://help.github.com/articles/set-up-git>`_"
msgstr ""

# b828e5a3741e4be79ed9ae1869bec749
#: ../../home/kovid/work/calibre/manual/develop.rst:130
msgid ""
"Setup ssh keys for authentication to GitHub, as described here: `Generating "
"SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

# 5c49c361727f43598783c672b00d1279
#: ../../home/kovid/work/calibre/manual/develop.rst:131
msgid ""
"Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` "
"button."
msgstr ""

# 18ae227a02f848f6b3c049da8d848cb8
#: ../../home/kovid/work/calibre/manual/develop.rst:132
msgid "In a Terminal do::"
msgstr ""

# f44070a16cec4748a644bfefad616775
#: ../../home/kovid/work/calibre/manual/develop.rst:137
msgid ""
"Replace <username> above with your github username. That will get your fork "
"checked out locally."
msgstr ""

# 3fa46bed4a3c4207a7ccf2ba9b48bb08
#: ../../home/kovid/work/calibre/manual/develop.rst:138
msgid ""
"You can make changes and commit them whenever you like. When you are ready "
"to have your work merged, do a::"
msgstr ""

# 2177e7d4cdf04ac9950964a7089eb0de
#: ../../home/kovid/work/calibre/manual/develop.rst:142
msgid ""
"and go to ``https://github.com/<username>/calibre`` and click the "
":guilabel:`Pull Request` button to generate a pull request that can be "
"merged."
msgstr ""

# 2145c555637e4156982c868cf835fb71
#: ../../home/kovid/work/calibre/manual/develop.rst:143
msgid ""
"You can update your local copy with code from the main repo at any time by "
"doing::"
msgstr ""

# 77a7fa5538bb4cefb64787e1d4f15fbf
#: ../../home/kovid/work/calibre/manual/develop.rst:148
msgid ""
"You should also keep an eye on the calibre `development forum "
"<http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making "
"major changes, you should discuss them in the forum or contact Kovid "
"directly (his email address is all over the source code)."
msgstr ""

# b2f5602f31564d7baa4a93b4b7224b20
#: ../../home/kovid/work/calibre/manual/develop.rst:154
msgid "Windows development environment"
msgstr ""

# a43cc971aa764675a35a0547a8980d41
# 96b5fc42547a4cdaab83ff61c4afd966
# 1197c92d09034e8ab6fb1144f6cbd8d5
#: ../../home/kovid/work/calibre/manual/develop.rst:156
#: ../../home/kovid/work/calibre/manual/develop.rst:190
#: ../../home/kovid/work/calibre/manual/develop.rst:222
msgid ""
"You must also get the calibre source code separately as described above."
msgstr ""

# 550524852bff4c08a39daf3fb544079d
#: ../../home/kovid/work/calibre/manual/develop.rst:158
msgid ""
"Install calibre normally, using the Windows installer. Then open a Command "
"Prompt and change to the previously checked out calibre code directory. For "
"example::"
msgstr ""

# 92b8ab1ae7394a3f976b374894760d06
# 7c9ead1f14d843118d4d466c806a25c9
#: ../../home/kovid/work/calibre/manual/develop.rst:163
#: ../../home/kovid/work/calibre/manual/develop.rst:234
msgid ""
"calibre is the directory that contains the src and resources sub-"
"directories."
msgstr ""

# 48fd98ac31724ead9ffa4a808c6eabcb
#: ../../home/kovid/work/calibre/manual/develop.rst:165
msgid ""
"The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to"
" the absolute path of the src directory. So, following the example above, it"
" would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide "
"<https://docs.python.org/2/using/windows.html#excursus-setting-environment-"
"variables>`_ to setting environment variables on Windows."
msgstr ""

# 2e3731b47b31403495fa89c6cbe18c7c
#: ../../home/kovid/work/calibre/manual/develop.rst:170
msgid ""
"Once you have set the environment variable, open a new command prompt and "
"check that it was correctly set by using the command::"
msgstr ""

# 003e8041ec524b0d9a6c031bdb08bc5c
# 4f700e94fd404cfdbe4a009c29c02bb7
#: ../../home/kovid/work/calibre/manual/develop.rst:175
#: ../../home/kovid/work/calibre/manual/develop.rst:245
msgid ""
"Setting this environment variable means that calibre will now load all its "
"Python code from the specified location."
msgstr ""

# fa59d54043f14bdd96ce724135c894f2
#: ../../home/kovid/work/calibre/manual/develop.rst:177
msgid ""
"That's it! You are now ready to start hacking on the calibre code. For "
"example, open the file :file:`src\\\\calibre\\\\__init__.py` in your "
"favorite editor and add the line::"
msgstr ""

# c469885d4eca4fa7b7020290fe886a0e
# 7f472cfd204743caa89f751c3367dc87
#: ../../home/kovid/work/calibre/manual/develop.rst:182
#: ../../home/kovid/work/calibre/manual/develop.rst:252
msgid ""
"near the top of the file. Now run the command :command:`calibredb`. The very"
" first line of output should be ``Hello, world!``."
msgstr ""

# 3252ee0db0784ad6baded3b41e1a0777
#: ../../home/kovid/work/calibre/manual/develop.rst:184
msgid ""
"You can also setup a calibre development environment inside the free "
"Microsoft Visual Studio, if you like, following the instructions `here "
"<http://www.mobileread.com/forums/showthread.php?t=251201>`_."
msgstr ""

# 6cd073960cf442d99fcb83f355158394
#: ../../home/kovid/work/calibre/manual/develop.rst:188
msgid "OS X development environment"
msgstr ""

# 3a64e41c0bfc456291de73be0c0a0b01
#: ../../home/kovid/work/calibre/manual/develop.rst:192
msgid ""
"Install calibre normally using the provided .dmg. Then open a Terminal and "
"change to the previously checked out calibre code directory, for example::"
msgstr ""

# f4f8e7bc14904e9da1a3e5ba5969e2f0
#: ../../home/kovid/work/calibre/manual/develop.rst:197
msgid ""
"calibre is the directory that contains the src and resources sub-"
"directories. Ensure you have installed the calibre commandline tools via "
":guilabel:`Preferences->Advanced->Miscellaneous` in the calibre GUI."
msgstr ""

# fe050981b8254603968594d6e5fb3dcf
#: ../../home/kovid/work/calibre/manual/develop.rst:199
msgid ""
"The next step is to create a bash script that will set the environment "
"variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory "
"when running calibre in debug mode."
msgstr ""

# af5e67f67f13459f9d00c4c18b03c2df
#: ../../home/kovid/work/calibre/manual/develop.rst:201
msgid "Create a plain text file::"
msgstr ""

# 0a2d6a8b7c7049e194b3add9c1a8bb57
#: ../../home/kovid/work/calibre/manual/develop.rst:207
msgid ""
"Save this file as ``/usr/bin/calibre-develop``, then set its permissions so "
"that it can be executed::"
msgstr ""

# 5ec3a4d5da1c4f98a4f44dcc384733a4
#: ../../home/kovid/work/calibre/manual/develop.rst:211
msgid "Once you have done this, run::"
msgstr ""

# 3e20ebb0fe0d4c2683df5cf59edc5fae
#: ../../home/kovid/work/calibre/manual/develop.rst:215
msgid ""
"You should see some diagnostic information in the Terminal window as calibre"
" starts up, and you should see an asterisk after the version number in the "
"GUI window, indicating that you are running from source."
msgstr ""

# d1f6b58d9e5d498f98d3f07d603792b8
#: ../../home/kovid/work/calibre/manual/develop.rst:220
msgid "Linux development environment"
msgstr ""

# 8d4d013758b847fdb0c9a494ad8eb039
#: ../../home/kovid/work/calibre/manual/develop.rst:224
msgid ""
"calibre is primarily developed on Linux. You have two choices in setting up "
"the development environment. You can install the calibre binary as normal "
"and use that as a runtime environment to do your development. This approach "
"is similar to that used in Windows and OS X. Alternatively, you can install "
"calibre from source. Instructions for setting up a development environment "
"from source are in the INSTALL file in the source tree. Here we will address"
" using the binary at runtime, which is the recommended method."
msgstr ""

# e0986ca3c6ed4c5d8bf1409f85009b43
#: ../../home/kovid/work/calibre/manual/develop.rst:230
msgid ""
"Install calibre using the binary installer. Then open a terminal and change "
"to the previously checked out calibre code directory, for example::"
msgstr ""

# be16c37e84844786b0879fae187a620f
#: ../../home/kovid/work/calibre/manual/develop.rst:236
msgid ""
"The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to"
" the absolute path of the src directory. So, following the example above, it"
" would be ``/home/kovid/work/calibre/src``. How to set environment variables"
" depends on your Linux distribution and what shell you are using."
msgstr ""

# 075a1dbeabed4a22b72882135390721c
#: ../../home/kovid/work/calibre/manual/develop.rst:240
msgid ""
"Once you have set the environment variable, open a new terminal and check "
"that it was correctly set by using the command::"
msgstr ""

# 5cea84a10afb44a28e256e3420e796ef
#: ../../home/kovid/work/calibre/manual/develop.rst:247
msgid ""
"That's it! You are now ready to start hacking on the calibre code. For "
"example, open the file :file:`src/calibre/__init__.py` in your favorite "
"editor and add the line::"
msgstr ""

# 920ce9d7a71c4c5882c9c256fc8ab08b
#: ../../home/kovid/work/calibre/manual/develop.rst:255
msgid ""
"Having separate \"normal\" and \"development\" calibre installs on the same "
"computer"
msgstr ""

# 8eee1d499fd7485cbc98dc3c127c8ead
#: ../../home/kovid/work/calibre/manual/develop.rst:257
msgid ""
"The calibre source tree is very stable and rarely breaks, but if you feel "
"the need to run from source on a separate test library and run the released "
"calibre version with your everyday library, you can achieve this easily "
"using .bat files or shell scripts to launch calibre. The example below shows"
" how to do this on Windows using .bat files (the instructions for other "
"platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

# 27c0b468b3a042ddba1d0c1d264a29bd
#: ../../home/kovid/work/calibre/manual/develop.rst:262
msgid "To launch the release version of calibre with your everyday library:"
msgstr ""

# 5617553bdb0440bb99fa7348b582c542
#: ../../home/kovid/work/calibre/manual/develop.rst:264
msgid "calibre-normal.bat::"
msgstr ""

# a9b9540ed5644e919c02b20bdc6eac94
#: ../../home/kovid/work/calibre/manual/develop.rst:268
msgid "calibre-dev.bat::"
msgstr ""

# 667403f7d79f441dbc85a0781d61e22f
#: ../../home/kovid/work/calibre/manual/develop.rst:275
msgid "Debugging tips"
msgstr ""

# 8c60b39537ec4f7a9ddbc990add7a5d4
#: ../../home/kovid/work/calibre/manual/develop.rst:277
msgid ""
"Python is a dynamically typed language with excellent facilities for "
"introspection. Kovid wrote the core calibre code without once using a "
"debugger. There are many strategies to debug calibre code:"
msgstr ""

# c7d929bc7b7849419311d695cbe752a6
#: ../../home/kovid/work/calibre/manual/develop.rst:282
msgid "Using print statements"
msgstr ""

# 394e66bca55a49ab9d69053d3aeaf8f9
#: ../../home/kovid/work/calibre/manual/develop.rst:284
msgid ""
"This is Kovid's favorite way to debug. Simply insert print statements at "
"points of interest and run your program in the terminal. For example, you "
"can start the GUI from the terminal as::"
msgstr ""

# 617b51167aee4b3e8226ca1b21a42f2c
#: ../../home/kovid/work/calibre/manual/develop.rst:289
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

# f86f9020bec44efdaf5345b81b1b7569
#: ../../home/kovid/work/calibre/manual/develop.rst:293
msgid "The ebook-editor can be started as::"
msgstr ""

# a9b4fc1d11504edbb2cf8be7de9361a3
#: ../../home/kovid/work/calibre/manual/develop.rst:298
msgid "Using an interactive python interpreter"
msgstr ""

# b4aa993b93f1489399a2b30be349f318
#: ../../home/kovid/work/calibre/manual/develop.rst:300
msgid ""
"You can insert the following two lines of code to start an interactive "
"python session at that point::"
msgstr ""

# 02a9266352ae408a8104ee6864e45cc6
#: ../../home/kovid/work/calibre/manual/develop.rst:305
msgid ""
"When running from the command line, this will start an interactive Python "
"interpreter with access to all locally defined variables (variables in the "
"local scope). The interactive prompt even has TAB completion for object "
"properties and you can use the various Python facilities for introspection, "
"such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

# 3b86ff1484844f4780ac63a8472ca38d
#: ../../home/kovid/work/calibre/manual/develop.rst:311
msgid "Using the python debugger as a remote debugger"
msgstr ""

# bad2999db74c4a9eaabe8fe52ac4ebf6
#: ../../home/kovid/work/calibre/manual/develop.rst:313
msgid ""
"You can use the builtin python debugger (pdb) as a remote debugger from the "
"command line. First, start the remote debugger at the point in the calibre "
"code you are interested in, like this::"
msgstr ""

# fc17232a71794e93b30cb3f52446bb33
#: ../../home/kovid/work/calibre/manual/develop.rst:320
msgid ""
"Then run calibre, either as normal, or using one of the calibre-debug "
"commands described in the previous section. Once the above point in the code"
" is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

# ae48d7dee5fc4d3a95e8466873645dfd
#: ../../home/kovid/work/calibre/manual/develop.rst:324
msgid ""
"Now open a terminal or command prompt and use the following command to start"
" the debugging session::"
msgstr ""

# e2ee5472a5af4c6a9ea75bedaffca5e8
#: ../../home/kovid/work/calibre/manual/develop.rst:329
msgid ""
"You can read about how to use the python debugger in the `python stdlib docs"
" for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-"
"commands>`_."
msgstr ""

# 40f03fcbd3e34f9986e583bd65efdc1d
#: ../../home/kovid/work/calibre/manual/develop.rst:333
msgid ""
"By default, the remote debugger will try to connect on port 4444. You can "
"change it, by passing the port parameter to both the set_trace() and the "
"cli() functions above, like this: ``set_trace(port=1234)`` and "
"``cli(port=1234)``."
msgstr ""

# 62301b384b96428ebe7d04d6916d6c75
#: ../../home/kovid/work/calibre/manual/develop.rst:339
msgid ""
"The python debugger cannot handle multiple threads, so you have to call "
"set_trace once per thread, each time with a different port number."
msgstr ""

# 2d6f334059b74f8ea179602596b1757f
#: ../../home/kovid/work/calibre/manual/develop.rst:343
msgid "Using the debugger in your favorite python IDE"
msgstr ""

# cd15ad6a29a74ef58b29e41c37b32028
#: ../../home/kovid/work/calibre/manual/develop.rst:345
msgid ""
"It is possible to use the builtin debugger in your favorite python IDE, if "
"it supports remote debugging. The first step is to add the calibre src "
"checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory "
"you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the "
"``PYTHONPATH`` of your IDE."
msgstr ""

# 2a9be7f4fa1b4d5b9136c68263cda563
#: ../../home/kovid/work/calibre/manual/develop.rst:350
msgid ""
"Then place the IDE's remote debugger module into the :file:`src` "
"subdirectory of the calibre source code checkout. Add whatever code is "
"needed to launch the remote debugger to calibre at the point of interest, "
"for example in the main function. Then run calibre as normal. Your IDE "
"should now be able to connect to the remote debugger running inside calibre."
msgstr ""

# 70583e24fa734ab19f107dbaf51957bd
#: ../../home/kovid/work/calibre/manual/develop.rst:357
msgid "Executing arbitrary scripts in the calibre python environment"
msgstr ""

# ba6b27084d124244919b8325b8fb18ef
#: ../../home/kovid/work/calibre/manual/develop.rst:359
msgid ""
"The :command:`calibre-debug` command provides a couple of handy switches to "
"execute your own code, with access to the calibre modules::"
msgstr ""

# 5b02baa77c424b6791c84dd1c43c432d
#: ../../home/kovid/work/calibre/manual/develop.rst:364
msgid ""
"is great for testing a little snippet of code on the command line. It works "
"in the same way as the -c switch to the python interpreter::"
msgstr ""

# f66674f4128e416ba6272c7a68a60b58
#: ../../home/kovid/work/calibre/manual/develop.rst:368
msgid ""
"can be used to execute your own Python script. It works in the same way as "
"passing the script to the Python interpreter, except that the calibre "
"environment is fully initialized, so you can use all the calibre code in "
"your script. To use command line arguments with your script, use the form::"
msgstr ""

# 7229a4f02a2945e68b31c935117e0951
#: ../../home/kovid/work/calibre/manual/develop.rst:373
msgid ""
"The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

# 69867ee2cadd4fe3a31477bcbe0b7779
#: ../../home/kovid/work/calibre/manual/develop.rst:377
msgid "Using calibre in your projects"
msgstr ""

# af4a32c9fbcf48e38a7d40f04c447e22
#: ../../home/kovid/work/calibre/manual/develop.rst:379
msgid ""
"It is possible to directly use calibre functions/code in your Python "
"project. Two ways exist to do this:"
msgstr ""

# cb1f14db98e24545a4190855c4b60007
#: ../../home/kovid/work/calibre/manual/develop.rst:382
msgid "Binary install of calibre"
msgstr ""

# 19a12c82a9514a5288fd603fdedaae75
#: ../../home/kovid/work/calibre/manual/develop.rst:384
msgid ""
"If you have a binary install of calibre, you can use the Python interpreter "
"bundled with calibre, like this::"
msgstr ""

# f9409499b89244f7af244f8ee3ca9af2
#: ../../home/kovid/work/calibre/manual/develop.rst:389
msgid "Source install on Linux"
msgstr ""

# f5fff322119e4318a6a52680c85480ce
#: ../../home/kovid/work/calibre/manual/develop.rst:391
msgid ""
"In addition to using the above technique, if you do a source install on "
"Linux, you can also directly import calibre, as follows::"
msgstr ""

# e00fb2188c304538b221872171e5010d
#: ../../home/kovid/work/calibre/manual/develop.rst:399
msgid ""
"It is essential that you import the init_calibre module before any other "
"calibre modules/packages as it sets up the interpreter to run calibre code."
msgstr ""

# d50edf46a8c449cf87b0ddd21d1387dc
#: ../../home/kovid/work/calibre/manual/develop.rst:403
msgid "API documentation for various parts of calibre"
msgstr ""
