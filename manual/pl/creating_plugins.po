# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-28 13:56+0530\n"
"PO-Revision-Date: 2014-06-30 12:24+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Polish (http://www.transifex.com/projects/p/calibre/language/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 4e121476ba044d19adcb5dfe26812422
#: ../../creating_plugins.rst:7
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

# 8a601f1d24be42f191b32b443b43532f
#: ../../creating_plugins.rst:9
msgid ""
"|app| has a very modular design. Almost all functionality in |app| comes in "
"the form of plugins. Plugins are used for conversion, for downloading news "
"(though these are called recipes), for various components of the user "
"interface, to connect to different devices, to process files when adding "
"them to |app| and so on. You can get a complete list of all the built-in "
"plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr "|app| ma budowę dużym stopniu modularną. Niemal wszystkie funkcje w |app| są dostarczane w postaci wtyczek. Wtyczki są używane do konwersji, pobierania wiadomości, do różnych komponentów interfejsu, łączenia z różnymi urządzeniami, przetwarzania plików podczas dodawania ich do |app| itp. Pełną listę wbudowanych wtyczek można uzyskać w :guilabel:`Preferences->Plugins`."

# 4f1f230d08f5469280685b5234ca10d4
#: ../../creating_plugins.rst:11
msgid ""
"Here, we will teach you how to create your own plugins to add new features "
"to |app|."
msgstr ""

# e48652c34ab744efb33eaa07bb8b84a9
#: ../../creating_plugins.rst:0
msgid "Contents"
msgstr ""

# 754ff6b9c4104625a4d3cf21a0fe266d
#: ../../creating_plugins.rst:18
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

# 5cd56a1970a443aabde19a667e2c8cd9
#: ../../creating_plugins.rst:21
msgid "Anatomy of a |app| plugin"
msgstr ""

# 5e5f7af3cd684e0c94b7a2d58da4e4e5
#: ../../creating_plugins.rst:23
msgid ""
"A |app| plugin is very simple, it's just a zip file that contains some "
"python code and any other resources like image files needed by the plugin. "
"Without further ado, let's see a basic example."
msgstr ""

# f96aaf90e9874517942c752bb1716d21
#: ../../creating_plugins.rst:27
msgid ""
"Suppose you have an installation of |app| that you are using to self publish"
" various e-documents in EPUB and MOBI formats. You would like all files "
"generated by |app| to have their publisher set as \"Hello world\", here's "
"how to do it. Create a file named :file:`__init__.py` (this is a special "
"name and must always be used for the main file of your plugin) and enter the"
" following Python code into it:"
msgstr ""

# 79707ad0e2b74ca9af14911e9dce14dd
#: ../../creating_plugins.rst:35
msgid ""
"That's all. To add this code to |app| as a plugin, simply run the following "
"in the directory in which you created :file:`__init__.py`::"
msgstr ""

# 4186ad0077c54d6fa1ccefef0572d4ac
#: ../../creating_plugins.rst:41
msgid ""
"On OS X you have to first install the |app| command line tools, by going to "
":guilabel:`Preferences->Miscellaneous` and clicking the :guilabel:`Install "
"command line tools` button."
msgstr ""

# 7ebbade01feb48b384cd177c5b59234f
#: ../../creating_plugins.rst:45
msgid ""
"You can download the Hello World plugin from `helloworld_plugin.zip  <http"
"://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

# ee77d757d7284b98b685704e339c7d83
#: ../../creating_plugins.rst:48
msgid ""
"Every time you use calibre to convert a book, the plugin's :meth:`run` "
"method will be called and the converted book will have its publisher set to "
"\"Hello World\". This is a trivial plugin, lets move on to a more complex "
"example that actually adds a component to the user interface."
msgstr ""

# bab078e4b4d746ada62434148ed8f47a
#: ../../creating_plugins.rst:53
msgid "A User Interface plugin"
msgstr ""

# eceb90c7f034469497e8be564afb6bc6
#: ../../creating_plugins.rst:55
msgid ""
"This plugin will be spread over a few files (to keep the code clean). It "
"will show you how to get resources (images or data files) from the plugin "
"zip file, allow users to configure your plugin, how to create elements in "
"the |app| user interface and how to access and query the books database in "
"|app|."
msgstr ""

# 61726fe0e79e4c3a9ea61bab8c4791da
#: ../../creating_plugins.rst:60
msgid ""
"You can download this plugin from `interface_demo_plugin.zip <http"
"://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

# 9535d1f4c5e946b689a2b9a77d77d172
#: ../../creating_plugins.rst:62
msgid ""
"The first thing to note is that this zip file has a lot more files in it, "
"explained below, pay particular attention to ``plugin-import-name-"
"interface_demo.txt``."
msgstr ""

# 57ada77536ba42c3a6e7dda612f1717c
#: ../../creating_plugins.rst:78
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

# 11c159efb8904bf2807abd84615b1f84
#: ../../creating_plugins.rst:66
msgid ""
"An empty text file used to enable the multi-file plugin magic. This file "
"must be present in all plugins that use more than one .py file. It should be"
" empty and its filename must be of the form: plugin-import-"
"name-**some_name**.txt The presence of this file allows you to import code "
"from the .py files present inside the zip file, using a statement like::"
msgstr ""

# 29925065654c422287984e33b3669c4e
#: ../../creating_plugins.rst:72
msgid ""
"The prefix ``calibre_plugins`` must always be present. ``some_name`` comes "
"from the filename of the empty text file. ``some_module`` refers to  "
":file:`some_module.py` file inside the zip file. Note that this importing is"
" just as powerful as regular python imports. You can create packages and "
"subpackages of .py modules inside the zip file, just like you would normally"
" (by defining __init__.py in each sub directory), and everything should Just"
" Work."
msgstr ""

# 61754ec16ba24ad2a3f1073cc7e643a2
#: ../../creating_plugins.rst:77
msgid ""
"The name you use for ``some_name`` enters a global namespace shared by all "
"plugins, **so make it as unique as possible**. But remember that it must be "
"a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

# 1be8fb8f171f47da8496635156deb52b
#: ../../creating_plugins.rst:81
msgid "**__init__.py**"
msgstr ""

# f038c150cbad4b2d84dc9f8cdfd0244d
#: ../../creating_plugins.rst:81
msgid "As before, the file that defines the plugin class"
msgstr ""

# 79ebe0a1490a426b83a786b25cec62db
#: ../../creating_plugins.rst:84
msgid "**main.py**"
msgstr ""

# 6d85160a1c3e4f1ba0bdd91c622a6e2b
#: ../../creating_plugins.rst:84
msgid "This file contains the actual code that does something useful"
msgstr ""

# 3f1b55bbfe8b436695e7ff2e33d1945c
#: ../../creating_plugins.rst:87
msgid "**ui.py**"
msgstr ""

# ec4c1d528596499d89f33b8673a07c2d
#: ../../creating_plugins.rst:87
msgid "This file defines the interface part of the plugin"
msgstr ""

# 2ad82004af384516b1ec6882ac5426c0
#: ../../creating_plugins.rst:90
msgid "**images/icon.png**"
msgstr ""

# f9a50112a7744c9ea4b8062a1f8d9c15
#: ../../creating_plugins.rst:90
msgid "The icon for this plugin"
msgstr ""

# df90959cded84b4ea31c8239eabec232
#: ../../creating_plugins.rst:93
msgid "**about.txt**"
msgstr ""

# ad31adbb03734cce9ae9e446422f9d13
#: ../../creating_plugins.rst:93
msgid "A text file with information about the plugin"
msgstr ""

# c8caba8068cf42e9be2b9c9323014683
#: ../../creating_plugins.rst:98
msgid "**translations**"
msgstr ""

# 12c7ae6bc2d44204a196019359b31ca0
#: ../../creating_plugins.rst:96
msgid ""
"A folder containing .mo files with the translations of the user interface of"
" your plugin into different languages. See below for details."
msgstr ""

# 387196c3c89448989f75b383dca71c22
#: ../../creating_plugins.rst:100
msgid "Now let's look at the code."
msgstr ""

# 2008f2944ca8429ba0572ec4b5a7f3a9
#: ../../creating_plugins.rst:103
msgid "__init__.py"
msgstr ""

# ae566da691f5443e9d762add5f317f3a
#: ../../creating_plugins.rst:105
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

# 71c71eb2b3904183a92ea9ed13917698
#: ../../creating_plugins.rst:110
msgid ""
"The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| "
"has both command line and GUI interfaces, GUI plugins like this one should "
"not load any GUI libraries in __init__.py. The actual_plugin field does this"
" for you, by telling |app| that the actual plugin is to be found in another "
"file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

# 7785fc3f534f4fa78552ac457e424d8b
#: ../../creating_plugins.rst:115
msgid ""
"Remember that for this to work, you must have a plugin-import-name-"
"some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

# ea8e3ff2823e4fbe814f24923939159a
#: ../../creating_plugins.rst:118
msgid ""
"Also there are a couple of methods for enabling user configuration of the "
"plugin. These are discussed below."
msgstr ""

# a1d4e7673ade436ea639bd1752d5e6c1
#: ../../creating_plugins.rst:121
msgid "ui.py"
msgstr ""

# 7562d03f38de48598d7a734083a658c2
#: ../../creating_plugins.rst:123
msgid ""
"Now let's look at ui.py which defines the actual GUI plugin. The source code"
" is heavily commented and should be self explanatory:"
msgstr ""

# 8947562ba27345d38e426f35ff4cf953
#: ../../creating_plugins.rst:129
msgid "main.py"
msgstr ""

# 0afdd5c5995c42a98e4e4ee4850b8ff8
#: ../../creating_plugins.rst:131
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

# f2e5daaf027d4b6c8f1cee05ff3f331a
#: ../../creating_plugins.rst:137
msgid "Getting resources from the plugin zip file"
msgstr ""

# 29349956679d47659e7b61cbf15d00cf
#: ../../creating_plugins.rst:139
msgid ""
"|app|'s plugin loading system defines a couple of built-in functions that "
"allow you to conveniently get files from the plugin zip file."
msgstr ""

# de1d46e4b548440693370c9b102b3e37
#: ../../creating_plugins.rst:146
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

# 7bd733b7e9944b61bf4ddb290c926d5a
#: ../../creating_plugins.rst:142
msgid ""
"This function should be called with a list of paths to files inside the zip "
"file. For example to access the file icon.png in the directory images in the"
" zip file, you would use: ``images/icon.png``. Always use a forward slash as"
" the path separator, even on windows. When you pass in a single name, the "
"function will return the raw bytes of that file or None if the name was not "
"found in the zip file. If you pass in more than one name then it returns a "
"dict mapping the names to bytes. If a name is not found, it will not be "
"present in the returned dict."
msgstr ""

# 6bfff74bb6c342f186d4c722b263310e
#: ../../creating_plugins.rst:150
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

# 49b2450fe6f24bec80035030a2848c80
#: ../../creating_plugins.rst:149
msgid ""
"A convenience wrapper for get_resources() that creates QIcon objects from "
"the raw bytes returned by get_resources. If a name is not found in the zip "
"file the corresponding QIcon will be null."
msgstr ""

# d6121951020847d2b2bd99800419a538
#: ../../creating_plugins.rst:153
msgid "Enabling user configuration of your plugin"
msgstr ""

# 8ed3a8d82ad74a30ab252a62210333dc
#: ../../creating_plugins.rst:155
msgid ""
"To allow users to configure your plugin, you must define three methods in "
"your base plugin class, '**is_customizable**, **config_widget** and "
"**save_settings** as shown below:"
msgstr ""

# 7d1e8ea64d7641a693b4edf71cd1c2fe
#: ../../creating_plugins.rst:166
msgid ""
"|app| has many different ways to store configuration data (a legacy of its "
"long history). The recommended way is to use the **JSONConfig** class, which"
" stores your configuration information in a .json file."
msgstr ""

# bd74b15648ab4570a09b8d038eda3580
#: ../../creating_plugins.rst:168
msgid ""
"The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

# 5885678dfa0e4ddca72f2b5c957e1c27
#: ../../creating_plugins.rst:173
msgid ""
"The ``prefs`` object is now available throughout the plugin code by a "
"simple::"
msgstr ""

# 5766f282930a4cf0aad061a0b9989d6f
#: ../../creating_plugins.rst:178
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

# 6627ce77da7d41069431ddbc7cd0f860
#: ../../creating_plugins.rst:184
msgid "Adding translations to your plugin"
msgstr ""

# 9e2da86d8ea748d79bb0320478ec1943
#: ../../creating_plugins.rst:186
msgid ""
"You can have all the user interface strings in your plugin translated and "
"displayed in whatever language is set for the main calibre user interface."
msgstr ""

# 0aab2fa5ef7940c780a4fc061a678337
#: ../../creating_plugins.rst:189
msgid ""
"The first step is to go through your plugin's source code and mark all user "
"visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

# c506d8003b3a486b8dfb33b1e7016e9a
#: ../../creating_plugins.rst:194
msgid ""
"Then use some program to generate .po files from your plugin source code. "
"There should be one .po file for every language you want to translate into. "
"For example: de.po for German, fr.po for French and so on. You can use the "
"`poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

# db7489e9ea7845d9abeb7e7087ec189b
#: ../../creating_plugins.rst:199
msgid ""
"Send these .po files to your translators. Once you get them back, compile "
"them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

# 5ab6491bd68f45619294c09d68be462d
#: ../../creating_plugins.rst:204
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

# 4ba338e35e434285938d6781bd322f42
#: ../../creating_plugins.rst:206
msgid ""
"The last step is to simply call the function `load_translations()` at the "
"top of your plugin's .py files. For performance reasons you should only call"
" this function in those .py files that actually have translatable strings. "
"So in a typical User Interface plugin you would call it at the top of "
"``ui.py`` but not ``__init__.py``."
msgstr ""

# 39aa5fe4be85493b8a0f488f8c6fd073
#: ../../creating_plugins.rst:212
msgid ""
"You can test the translations of your plugins by changing the user interface"
" language in calibre under Preferences->Look & Feel or by running calibre "
"like this::"
msgstr ""

# 0168229c94ad44cf9470e4112eb91b81
#: ../../creating_plugins.rst:218
msgid ""
"Replace ``de`` with the language code of the language you want to test."
msgstr ""

# 8d69706dbf684b78a19625837a9cd79d
#: ../../creating_plugins.rst:221
msgid "The plugin API"
msgstr ""

# e453e5f20245431e9fdd405c9baa52c7
#: ../../creating_plugins.rst:223
msgid ""
"As you may have noticed above, a plugin in |app| is a class. There are "
"different classes for the different types of plugins in |app|. Details on "
"each class, including the base class of all plugins can be found in "
":ref:`plugins`."
msgstr ""

# 0ef78ccf8d03400b928c532661d01687
#: ../../creating_plugins.rst:226
msgid ""
"Your plugin is almost certainly going to use code from |app|. To learn how "
"to find various bits of functionality in the |app| code base, read the "
"section on the |app| :ref:`code_layout`."
msgstr ""

# c1793fcc9f44438c86046243d9af7676
#: ../../creating_plugins.rst:231
msgid "Debugging plugins"
msgstr ""

# c13bfc4f67144870821580af854755cf
#: ../../creating_plugins.rst:233
msgid ""
"The first, most important step is to run |app| in debug mode. You can do "
"this from the command line with::"
msgstr ""

# b218298ae7a24da58e7c7148a02f8190
#: ../../creating_plugins.rst:237
msgid ""
"Or from within calibre by right-clicking the preferences button or using the"
" `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

# bd1b3d985b814ccc9be1b612d4a0cf89
#: ../../creating_plugins.rst:239
msgid ""
"When running from the command line, debug output will be printed to the "
"console, when running from within |app| the output will go to a txt file."
msgstr ""

# 32c53e0d1d584791852f80edccdaf616
#: ../../creating_plugins.rst:241
msgid ""
"You can insert print statements anywhere in your plugin code, they will be "
"output in debug mode. Remember, this is python, you really shouldn't need "
"anything more than print statements to debug ;) I developed all of |app| "
"using just this debugging technique."
msgstr ""

# 33e839a7f8524f7bb3efb43b14667687
#: ../../creating_plugins.rst:243
msgid ""
"You can quickly test changes to your plugin by using the following command "
"line::"
msgstr ""

# 3ae6193208ff49f5a54436292aa2ff95
#: ../../creating_plugins.rst:248
msgid ""
"This will shutdown a running calibre, wait for the shutdown to complete, "
"then update your plugin in |app| and relaunch |app|."
msgstr ""

# c867efcd4ea74c4399ad3f2a248bac50
#: ../../creating_plugins.rst:251
msgid "More plugin examples"
msgstr ""

# 21901a595400411d8a8c5faad4629bc6
#: ../../creating_plugins.rst:253
msgid ""
"You can find a list of many, sophisticated |app| plugins `here "
"<http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

# b6d0b2fc8556471ab595febf49599131
#: ../../creating_plugins.rst:256
msgid "Sharing your plugins with others"
msgstr ""

# 3ec40adee6cc4b03b09d864872b00550
#: ../../creating_plugins.rst:258
msgid ""
"If you would like to share the plugins you have created with other users of "
"|app|, post your plugin in a new thread in the `calibre plugins forum "
"<http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""
