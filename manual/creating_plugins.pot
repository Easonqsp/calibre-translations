# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.26.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-24 08:09+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:4
# 15956ee6324048aa8a079d1360df1115
msgid "Writing your own plugins to extend calibre's functionality"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:6
# fd9a22fe47ce4104a6368088cffe0d74
msgid "calibre has a very modular design. Almost all functionality in calibre comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to calibre and so on. You can get a complete list of all the built-in plugins in calibre by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:8
# 81b3f181d21848c99122374d354525df
msgid "Here, we will teach you how to create your own plugins to add new features to calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:0
# 6c70bfa31ec247c587b0d63963515e55
msgid "Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:15
# c5e31099bb5043bfaed70cc0f91c248f
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:18
# cf78ef5970a94443931b483456a08962
msgid "Anatomy of a calibre plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:20
# e94a346d8ea541e3a5b67e6d24188e5a
msgid "A calibre plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:24
# 9f62dd5b33de4bb68f123bc7aa0177f9
msgid "Suppose you have an installation of calibre that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by calibre to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:32
# 023f2922018b47598a207199c32b3b3b
msgid "That's all. To add this code to calibre as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:38
# 4f9e7b7b7666454ea91d6d0f082bed33
msgid "On OS X, the command line tools are inside the calibre bundle, for example, if you installed calibre in :file:`/Applications` the command line tools are in :file:`/Applications/calibre.app/Contents/console.app/Contents/MacOS/`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:42
# 91caa5f52160470d8a636ae707443e09
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:45
# 924597c538a047848cfe4dc39687731e
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:50
# 2cc3c25a13cf4dbc96ada97ed9cf212a
msgid "A User Interface plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:52
# 4ea2dad61e4448fc88697cdf85db4ecc
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the calibre user interface and how to access and query the books database in calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:57
# fa7d57fc9f2847899cb25de30f828087
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:61
# 697e293e6f374f41919dd7f9c5b07380
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:77
# 1a5bfd111cff4bc58fa849abde4d2768
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:65
# 585a89a7f1af4aa2bcc877ee894880a9
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:71
# 5b599c7290e046f399b698a0a02d7968
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:76
# 0176939e2070497ab4e0e1e0118af2c9
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:80
# 290e9521dc1846f48e0a9185263dc93b
msgid "**__init__.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:80
# 8edc109cd036491a901c1bfe659ebb11
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:83
# c508b29f220543cf8a28978950160713
msgid "**main.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:83
# c73d1700eecb49a1b71f0a9634f60ed3
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:86
# b6ae718a5277431cbb15519dec17023d
msgid "**ui.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:86
# 4e904c1bb2254e8896a5be63cb213c34
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:89
# 20d9915deba0476fb26080bb269431fd
msgid "**images/icon.png**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:89
# 9ccc805e078a4a06ad395b66de776903
msgid "The icon for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:92
# 7da54e0aca5744828a388f2cff981ec6
msgid "**about.txt**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:92
# 617bfca190f5499eb7aa3c151f8ea6d9
msgid "A text file with information about the plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:97
# 4e865beca6454ceea433ae2660d0ca92
msgid "**translations**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:95
# bdf0d080b937457d87dabb0f61a22b18
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:99
# e36aff63090e48b186e1b200c5f18740
msgid "Now let's look at the code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:102
# 62faf99662254c50a945e389d16b60e9
msgid "__init__.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:104
# 3b10f325111b4876983e12e13e9ff6d8
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:109
# 62b917932eec4dc0a96d3df66e14a4d1
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since calibre has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling calibre that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:114
# 3b2e2fb0b9344e5a8b8ad685d077d1cf
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:117
# 6ca44314ecb547f69a6e53a64ce1cc7b
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:120
# 8c216302a6f44b5190ffaf60351a8dc5
msgid "ui.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:122
# 39304faf14a043bdbdb2937cca9f5d56
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:128
#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:212
# fc4e0f6a511d475e8f53fcc68dfb855f
# a8958a7b7de4418ca574e8f2cc233929
msgid "main.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:130
# 4c2b3448536542a2bad09cfcd069a4bd
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:136
# acc9edbc1b104a37b5f390c6cd0e2951
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:138
# 8e8474a1d7ca4becb1e11c5d8179a212
msgid "calibre's plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:145
# fe729a33ddfd4e4694e1db0d823a6671
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:141
# cb4f1a8675994b1dada003a61f8718f6
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:149
# c3030f1f74d749f1aebf67b6e34a2888
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:148
# aa5361db38dc444bad7770ca5901be15
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:152
# 33c1877bb0384cedabe9ac8495123807
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:154
# e1edcd2f53a54e0f9d70c88aacf9635c
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:165
# 16b03c6edb124008af758efa28985db9
msgid "calibre has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:167
# e231a8f64e0b4d18817bbbc3e6f26fe8
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:172
# d623b8cd719b4fddb22da3bd69d2a7ca
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:177
# 56d003e4421549468a104b3a51a6ab7c
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:184
# 1409352fc16746f0ac174f816660923e
msgid "Edit Book plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:186
# 288094ec643c45c4834b25c5ba0feb60
msgid "Now let's change gears for a bit and look at creating a plugin to add tools to the calibre book editor. The plugin is available here: `editor_demo_plugin.zip  <http://calibre-ebook.com/downloads/editor_demo_plugin.zip>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:190
# e004c888254d42b2a3a9e5b24da382b6
msgid "The first step, as for all plugins is to create the import name empty txt file, as described :ref:`above <import_name_txt>`. We shall name the file ``plugin-import-name-editor_plugin_demo.txt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:194
# e9eb57627fe94bc1a4c03de59913b6e5
msgid "Now we create the mandatory ``__init__.py`` file that contains metadata about the plugin -- its name, author, version, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:200
# 5c70c9e9f3234f099fdff4e47305a4dd
msgid "A single editor plugin can provide multiple tools each tool corresponds to a single button in the toolbar and entry in the :guilabel:`Plugins` menu in the editor. These can have sub-menus in case the tool has multiple related actions."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:204
# ff371a605f9a4ccab61829d51368fef3
msgid "The tools must all be defined in the file ``main.py`` in your plugin. Every tool is a class that inherits from the :class:`calibre.gui2.tweak_book.plugin.Tool` class. Let's look at ``main.py`` from the demo plugin, the source code is heavily commented and should be self-explanatory. Read the API documents of the :class:`calibre.gui2.tweak_book.plugin.Tool` class for more details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:214
# 02d7218fbe46453eb585ba84dd62ff1c
msgid "Here we will see the definition of a single tool that will multiply all font sizes in the book by a number provided by the user. This tool demonstrates various important concepts that you will need in developing your own plugins, so you should read the (heavily commented) source code carefully."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:222
# 0716011925b34affbd6c4addfaebd824
msgid "Let's break down ``main.py``. We see that it defines a single tool, named *Magnify fonts*. This tool will ask the user for a number and multiply all font sizes in the book by that number."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:226
# 451cf82bfa4240c4b2080a851b9ad286
msgid "The first important thing is the tool name which you must set to some relatively unique string as it will be used as the key for this tool."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:229
# c749df98666a42fd868d2ccd9f639c4c
msgid "The next important entry point is the :meth:`calibre.gui2.tweak_book.plugin.Tool.create_action`. This method creates the QAction objects that appear in the plugins toolbar and plugin menu. It also, optionally, assigns a keyboard shortcut that the user can customize. The triggered signal from the QAction is connected to the ask_user() method that asks the user for the font size multiplier, and then runs the magnification code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:237
# 6a3b6e95a5ae41299a133de34aad6a90
msgid "The magnification code is well commented and fairly simple. The main things to note are that you get a reference to the editor window as ``self.gui`` and the editor *Boss* as ``self.boss``. The *Boss* is the object that controls the editor user interface. It has many useful methods, that are documented in the :class:`calibre.gui2.tweak_book.boss.Boss` class."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:243
# fdc6ae28210646edb5c390386635afab
msgid "Finally, there is ``self.current_container`` which is a reference to the book being edited as a :class:`calibre.ebooks.oeb.polish.container.Container` object. This represents the book as a collection of its constituent HTML/CSS/image files and has convenience methods for doing many useful things. The container object and various useful utility functions that can be reused in your plugin code are documented in :ref:`polish_api`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:252
# 83a6d781ff1e4b6491cf24e917cea9ca
msgid "Adding translations to your plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:254
# 10a3b1fdbf374303a1fb645efac9f547
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:257
# fa49efdda0e249999ac93c4cd6e2fa7b
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:262
# 1366374d4c4940e9a364ad044cd2fb10
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://poedit.net/>`_ program for this."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:267
# d1d542aaec7a47288f3f099c1ecfd07c
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:272
# 0b9bd0ae7e99470a9f1ffa823f515318
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:274
# 10643211db3a43c283f0376fd40b35c6
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:280
# 5ccd80819e884124b705d0d8473e3ecd
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:286
# 679e6b2f16d544b69fe411ab66b4e720
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:289
# b53d642f56c4483e83e3c9d87bc571a9
msgid "The plugin API"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:291
# 5f796d5762664af4908d7516ea53afb5
msgid "As you may have noticed above, a plugin in calibre is a class. There are different classes for the different types of plugins in calibre. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:294
# 216329c7e6f149669af2851d79cac683
msgid "Your plugin is almost certainly going to use code from calibre. To learn how to find various bits of functionality in the calibre code base, read the section on the calibre :ref:`code_layout`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:299
# 42617d7201ee4612820d45dca587814b
msgid "Debugging plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:301
# c00f034f89f84f1296492d77f9c60dbf
msgid "The first, most important step is to run calibre in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:305
# e29a5b2f3ae446b99238ffbcb59187f1
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:307
# c191636223f3427bbf16e0c3b39d013b
msgid "When running from the command line, debug output will be printed to the console, when running from within calibre the output will go to a txt file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:309
# d996b45eb6ed4f7ca4f6d17320a4592b
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of calibre using just this debugging technique."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:311
# b8038acbce274ae88f5acba808f5d1fc
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:316
# 301740b2dd0d438f9d8546f302156ba3
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in calibre and relaunch calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:319
# b476ebdf34c54f93ac49edc74458ef2c
msgid "More plugin examples"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:321
# 44c8fc03e7bd4369864c2edc4ad5a113
msgid "You can find a list of many, sophisticated calibre plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:324
# 25f5ed7dcab64ae1adac0137844676e7
msgid "Sharing your plugins with others"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:326
# 7a3f80b51869499888e0d07134fc0164
msgid "If you would like to share the plugins you have created with other users of calibre, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

