# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.48.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-11 23:35+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../creating_plugins.rst:5
# 37bb90eb79074b809ebce07e9413b7e3
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

#: ../../creating_plugins.rst:7
# e6a6fb76d4024272bbd87c9b520a6cff
msgid "|app| has a very modular design. Almost all functionality in |app| comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to |app| and so on. You can get a complete list of all the built-in plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../creating_plugins.rst:9
# fe8adfe1ac8c463abe99f5264aa382e5
msgid "Here, we will teach you how to create your own plugins to add new features to |app|."
msgstr ""

#: ../../creating_plugins.rst:0
# a2583abe01c1403bad74bc1590bf7ed3
msgid "Contents"
msgstr ""

#: ../../creating_plugins.rst:16
# 8e2dd74c3e7d4172939be4c78539a80b
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../creating_plugins.rst:19
# 6102193ac0dd403cb37a67a8a1085c64
msgid "Anatomy of a |app| plugin"
msgstr ""

#: ../../creating_plugins.rst:21
# 53ae18e0b0e64fc9aef0de5bb585d919
msgid "A |app| plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../creating_plugins.rst:25
# da316a608f894ac2bafc3de5a19ed554
msgid "Suppose you have an installation of |app| that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by |app| to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../creating_plugins.rst:33
# 165d7163d1f7472583d490817e8cad56
msgid "That's all. To add this code to |app| as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../creating_plugins.rst:39
# 800779961dd7416cb94398077200162a
msgid "On OS X, the command line tools are inside the |app| bundle, for example, if you installed calibre in :file:`/Applications` the command line tools are in :file:`/Applications/calibre.app/Contents/MacOS/calibre`."
msgstr ""

#: ../../creating_plugins.rst:43
# e7283e09feeb4c2ba3d433a433e9ca1c
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:46
# 01b2bfad2dd6486d9433c12aada302d0
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../creating_plugins.rst:51
# 99865779a6694179975fa956d44ba572
msgid "A User Interface plugin"
msgstr ""

#: ../../creating_plugins.rst:53
# f483694e4a6d48db98d43c1f3ac14fe2
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the |app| user interface and how to access and query the books database in |app|."
msgstr ""

#: ../../creating_plugins.rst:58
# 8a2514e43fdf4eeaa1bffd9bd1aef8af
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../creating_plugins.rst:62
# f439d66145204685ad54a4c46e47ee33
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:78
# ec8faa140c25488a87068025b8a36639
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../creating_plugins.rst:66
# baec30f9a3274a50aa84448eab7c1c8f
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../creating_plugins.rst:72
# d9def21c4d514dc4a485bc8ae22da744
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../creating_plugins.rst:77
# 46d56c401d4f481baff01c07e75e6047
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../creating_plugins.rst:81
# 1fdd5fc98b66417f9b132e40a6aa0aa1
msgid "**__init__.py**"
msgstr ""

#: ../../creating_plugins.rst:81
# ff90ebb9ce424b60ac6b5cceb90aa1c2
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../creating_plugins.rst:84
# e280edbb07e94f309fd32dd682ecb7a4
msgid "**main.py**"
msgstr ""

#: ../../creating_plugins.rst:84
# 5345ad0b1175468783861dcf696ad454
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../creating_plugins.rst:87
# ea51b58ebf764e5181d4e7074d16bfc0
msgid "**ui.py**"
msgstr ""

#: ../../creating_plugins.rst:87
# 4c60e11ab0ca488594f8fefa15c1bce4
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../creating_plugins.rst:90
# 1bcdafd298da41d7a586e8353d2da8ed
msgid "**images/icon.png**"
msgstr ""

#: ../../creating_plugins.rst:90
# a4bdf748dc4b4368a6d63fe58981c51f
msgid "The icon for this plugin"
msgstr ""

#: ../../creating_plugins.rst:93
# b80e35afd10e4c39af6eb79df6d00841
msgid "**about.txt**"
msgstr ""

#: ../../creating_plugins.rst:93
# 186763804aaa4413abab6e622648cc5f
msgid "A text file with information about the plugin"
msgstr ""

#: ../../creating_plugins.rst:98
# 0e618cf465dc43b9853c5fbb3c669939
msgid "**translations**"
msgstr ""

#: ../../creating_plugins.rst:96
# 221616f87d43457294984417d8bd8715
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../creating_plugins.rst:100
# 4b309b77ed2e44efa746dfae9ebf3833
msgid "Now let's look at the code."
msgstr ""

#: ../../creating_plugins.rst:103
# 991289b880d840508cefaec208748685
msgid "__init__.py"
msgstr ""

#: ../../creating_plugins.rst:105
# 9ee2ce93be244c23b8cbcacf8379a0c8
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../creating_plugins.rst:110
# c58938c82e88424cbce2a46e289ea0e8
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling |app| that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../creating_plugins.rst:115
# 0bd5e08aea9f47aba450b71a8ee8c654
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../creating_plugins.rst:118
# 1c93209a6a354a7a9a7cc15ba5f70da7
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../creating_plugins.rst:121
# 91d16a3316734bf381d5321a5904dca1
msgid "ui.py"
msgstr ""

#: ../../creating_plugins.rst:123
# bc7e1ccc264c424fa7f34b2f1226a565
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../creating_plugins.rst:129
#: ../../creating_plugins.rst:213
# a6cb27e098ee471b8f1427e32398ed02
# 4f2589332c0f46b88dbf399da6fe33bd
msgid "main.py"
msgstr ""

#: ../../creating_plugins.rst:131
# c0e76f1b68cc45e3aa7231ef56f74c06
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../creating_plugins.rst:137
# c2d19274edaa41eaa3c75afde3aa22b3
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../creating_plugins.rst:139
# 09fc956e0d3e4169921f4c4183ab1b3e
msgid "|app|'s plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../creating_plugins.rst:146
# ef63c790cbb748c3b548cf687a379639
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:142
# 5f479312511d49229011ffd6ae948a36
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../creating_plugins.rst:150
# 7ee1586969cb4c5e9bc0062ad802139f
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:149
# 75e09acd991044c4af619ca7dfcd3a6f
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../creating_plugins.rst:153
# b8699293b6c2480cb8078991297e47e8
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../creating_plugins.rst:155
# b812c14a7923458caa32dcca20632775
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../creating_plugins.rst:166
# a230e52ccdf347a980e9cf6d02d4a69f
msgid "|app| has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../creating_plugins.rst:168
# eb74de4ea59f4f3a8940ece16fd6642f
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../creating_plugins.rst:173
# dd63c858afa54ff1ab81984ed67b609a
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../creating_plugins.rst:178
# b342451c346146d4b51448a67139d008
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../creating_plugins.rst:185
# c9168ec9ca7f48fb820f37a76190f95d
msgid "Edit Book plugins"
msgstr ""

#: ../../creating_plugins.rst:187
# 32d7160e150140d28858b5439399421f
msgid "Now let's change gears for a bit and look at creating a plugin to add tools to the |app| book editor. The plugin is available here: `editor_demo_plugin.zip  <http://calibre-ebook.com/downloads/editor_demo_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:191
# ed8cf9b7526e48d4bc12592c7c951a4a
msgid "The first step, as for all plugins is to create the import name empty txt file, as described :ref:`above <import_name_txt>`. We shall name the file ``plugin-import-name-editor_plugin_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:195
# 706594c2939d4a06afeac1f97f7d8937
msgid "Now we create the mandatory ``__init__.py`` file that contains metadata about the plugin -- its name, author, version, etc."
msgstr ""

#: ../../creating_plugins.rst:201
# a5afd86d56dc4df49e36d9cd5285fd61
msgid "A single editor plugin can provide multiple tools each tool corresponds to a single button in the toolbar and entry in the :guilabel:`Plugins` menu in the editor. These can have sub-menus in case the tool has multiple related actions."
msgstr ""

#: ../../creating_plugins.rst:205
# 0792a534157e4bf0b6871456cbb88a9e
msgid "The tools must all be defined in the file ``main.py`` in your plugin. Every tool is a class that inherits from the :class:`calibre.gui2.tweak_book.plugin.Tool` class. Let's look at ``main.py`` from the demo plugin, the source code is heavily commented and should be self-explanatory. Read the API documents of the :class:`calibre.gui2.tweak_book.plugin.Tool` class for more details."
msgstr ""

#: ../../creating_plugins.rst:215
# 2ab5d48bad9141df8387a74919d1d2c8
msgid "Here we will see the definition of a single tool that will multiply all font sizes in the book by a number provided by the user. This tool demonstrates various important concepts that you will need in developing your own plugins, so you should read the (heavily commented) source code carefully."
msgstr ""

#: ../../creating_plugins.rst:223
# 32aa50d0507f48d78937b8403e67a5ca
msgid "Let's break down ``main.py``. We see that it defines a single tool, named *Magnify fonts*. This tool will ask the user for a number and multiply all font sizes in the book by that number."
msgstr ""

#: ../../creating_plugins.rst:227
# 033858b273914d5bb77fe1ba66ecfc58
msgid "The first important thing is the tool name which you must set to some relatively unique string as it will be used as the key for this tool."
msgstr ""

#: ../../creating_plugins.rst:230
# c11cb5a145d04f2bb0c2354175fa6d90
msgid "The next important entry point is the :meth:`calibre.gui2.tweak_book.plugin.Tool.create_action`. This method creates the QAction objects that appear in the plugins toolbar and plugin menu. It also, optionally, assigns a keyboard shortcut that the user can customize. The triggered signal from the QAction is connected to the ask_user() method that asks the user for the font size multiplier, and then runs the magnification code."
msgstr ""

#: ../../creating_plugins.rst:238
# 20b22d96e09c4326a91e63533e76df40
msgid "The magnification code is well commented and fairly simple. The main things to note are that you get a reference to the editor window as ``self.gui`` and the editor *Boss* as ``self.boss``. The *Boss* is the object that controls the editor user interface. It has many useful methods, that are documented in the :class:`calibre.gui2.tweak_book.boss.Boss` class."
msgstr ""

#: ../../creating_plugins.rst:244
# 9347a67757d74884ba99a796f54d5ca8
msgid "Finally, there is ``self.current_container`` which is a reference to the book being edited as a :class:`calibre.ebooks.oeb.polish.container.Container` object. This represents the book as a collection of its constituent HTML/CSS/image files and has convenience methods for doing many useful things. The container object and various useful utility functions that can be reused in your plugin code are documented in :ref:`polish_api`."
msgstr ""

#: ../../creating_plugins.rst:253
# c9849a82ec434dd0810f5d0698f19434
msgid "Adding translations to your plugin"
msgstr ""

#: ../../creating_plugins.rst:255
# f4687f9dd8e24bac9d3c2ab54ed1e1a0
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../creating_plugins.rst:258
# 6e679b3386fd4df59acf7ef1cd36fbe0
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../creating_plugins.rst:263
# 84d1d0f9b71b4857b5bbbf2dd06bd01d
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

#: ../../creating_plugins.rst:268
# 39e8b56ac00c433b8f38691c6418562b
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../creating_plugins.rst:273
# 5b3ad87d28ea4f01af7317716e54741e
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../creating_plugins.rst:275
# 6bbc41bd1c684dde9c20607c38dbdb2b
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../creating_plugins.rst:281
# fd6447cebdf0444cb1a6b9f2c2f746c3
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../creating_plugins.rst:287
# 8c72da3d333347f7b5b457f6c6e77488
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../creating_plugins.rst:290
# 2f80eb7ef8a14437804c44893e11dbdb
msgid "The plugin API"
msgstr ""

#: ../../creating_plugins.rst:292
# cf33d54a9f1a42378f50e3f6257a23c3
msgid "As you may have noticed above, a plugin in |app| is a class. There are different classes for the different types of plugins in |app|. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../creating_plugins.rst:295
# 082d1a692676481287e460a37b576a72
msgid "Your plugin is almost certainly going to use code from |app|. To learn how to find various bits of functionality in the |app| code base, read the section on the |app| :ref:`code_layout`."
msgstr ""

#: ../../creating_plugins.rst:300
# a728aab33e4b47dd903fe99de6997f84
msgid "Debugging plugins"
msgstr ""

#: ../../creating_plugins.rst:302
# 71c4ddc39d9b4f5586bcbf9f18880d7d
msgid "The first, most important step is to run |app| in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../creating_plugins.rst:306
# 28bbfcb6ff4b4f1e9544f3855a7c1caa
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../creating_plugins.rst:308
# 66762b9f9d604ab2a0d1b14b6bda9a7a
msgid "When running from the command line, debug output will be printed to the console, when running from within |app| the output will go to a txt file."
msgstr ""

#: ../../creating_plugins.rst:310
# 745fda48898043f98e0ef469e6629efe
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of |app| using just this debugging technique."
msgstr ""

#: ../../creating_plugins.rst:312
# f67bd563ff28477da3b564f32752f358
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../creating_plugins.rst:317
# ad37db77a90042a8aa4481e4d5ef65df
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in |app| and relaunch |app|."
msgstr ""

#: ../../creating_plugins.rst:320
# 0fb8fef0dbec4ee5939a483c4d0453a2
msgid "More plugin examples"
msgstr ""

#: ../../creating_plugins.rst:322
# d8346b5e25604866bf866753f3cbf528
msgid "You can find a list of many, sophisticated |app| plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../creating_plugins.rst:325
# 923d04ff156f4c3286e72b25a1a07dac
msgid "Sharing your plugins with others"
msgstr ""

#: ../../creating_plugins.rst:327
# b2a5416b093c49fb8aff77101dd5c9db
msgid "If you would like to share the plugins you have created with other users of |app|, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

