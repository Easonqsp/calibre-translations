# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.47.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-01 08:15+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../creating_plugins.rst:7
# fb44427b6aef45c3970600367eb64270
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

#: ../../creating_plugins.rst:9
# e437d87a292f44ec8f6fd7e4cdfcd5cd
msgid "|app| has a very modular design. Almost all functionality in |app| comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to |app| and so on. You can get a complete list of all the built-in plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../creating_plugins.rst:11
# 70153ba50a3b460d8ed8f064bab599be
msgid "Here, we will teach you how to create your own plugins to add new features to |app|."
msgstr ""

#: ../../creating_plugins.rst:0
# a690797777ab4a67aa2d25950284b520
msgid "Contents"
msgstr ""

#: ../../creating_plugins.rst:18
# b3bada2aede64d97bfee4f1d70d112fc
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../creating_plugins.rst:21
# fd993621352a4c2eac021a1ca04f83c4
msgid "Anatomy of a |app| plugin"
msgstr ""

#: ../../creating_plugins.rst:23
# ef26532813ce491998fb0e1965ccc3fb
msgid "A |app| plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../creating_plugins.rst:27
# c824a52d48a44da381c4935af1ba4ba4
msgid "Suppose you have an installation of |app| that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by |app| to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../creating_plugins.rst:35
# 3f69ea2f86be4101b0e704862e3df900
msgid "That's all. To add this code to |app| as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../creating_plugins.rst:41
# ffe42243acc34f0d89b8346ae66c9f9b
msgid "On OS X you have to first install the |app| command line tools, by going to :guilabel:`Preferences->Miscellaneous` and clicking the :guilabel:`Install command line tools` button."
msgstr ""

#: ../../creating_plugins.rst:45
# 62abb956a0b0447b95690f9599d1da31
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:48
# 81f1ad2ff8c441f18f1f780aa68a6ce8
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../creating_plugins.rst:53
# 01a7f7eb762a497e8c1a0ba0141a8775
msgid "A User Interface plugin"
msgstr ""

#: ../../creating_plugins.rst:55
# f74d17a7575d4dea8fedf21123a42ef3
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the |app| user interface and how to access and query the books database in |app|."
msgstr ""

#: ../../creating_plugins.rst:60
# 4305edcf3e644d30b3ff1e0b1bcb5543
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../creating_plugins.rst:64
# 1ffd1d63d91b46c3a782b5828405d1ea
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:80
# 60b3e3530269495b8a710b8058b5eb38
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../creating_plugins.rst:68
# 6831bf4324064afba13f62b79e0375cd
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../creating_plugins.rst:74
# f8d67bc4e2da40c3905fff4bc3e0a642
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../creating_plugins.rst:79
# 8920b16b831349a3aa8db7cb346740c4
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../creating_plugins.rst:83
# 9a240825c3494b81bea35e9016492e3d
msgid "**__init__.py**"
msgstr ""

#: ../../creating_plugins.rst:83
# 756a81400fde4a4394a63db59a6b6c42
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../creating_plugins.rst:86
# 045c2ce2298b4f5e8b40e7289e5c96ce
msgid "**main.py**"
msgstr ""

#: ../../creating_plugins.rst:86
# b296cfd1a65242a185067b3bf8635d66
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../creating_plugins.rst:89
# 036e489b71ed4a95b98f81c552ddf940
msgid "**ui.py**"
msgstr ""

#: ../../creating_plugins.rst:89
# 46d94d46c4ed48c9b92f3ee7e40b9caf
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../creating_plugins.rst:92
# e25638fce2cf48d396087fb2ca196610
msgid "**images/icon.png**"
msgstr ""

#: ../../creating_plugins.rst:92
# 26005e37e70447e5bf9800eeabbc9673
msgid "The icon for this plugin"
msgstr ""

#: ../../creating_plugins.rst:95
# 67273258f2bb451a83ec8d7d05de115a
msgid "**about.txt**"
msgstr ""

#: ../../creating_plugins.rst:95
# 238bbdb026ee405b9d009844748ba029
msgid "A text file with information about the plugin"
msgstr ""

#: ../../creating_plugins.rst:100
# 835efc67701f461cab582e920227f9b8
msgid "**translations**"
msgstr ""

#: ../../creating_plugins.rst:98
# 1bda8fd66f1846c8bc2fd4fbd99af0c9
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../creating_plugins.rst:102
# b57050bd121b4e0fb44ae748b5fd4a65
msgid "Now let's look at the code."
msgstr ""

#: ../../creating_plugins.rst:105
# 20eade40682f4b268b7b36801b26e5b3
msgid "__init__.py"
msgstr ""

#: ../../creating_plugins.rst:107
# 000e29f3e77b4f968ec01deed8e5bae3
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../creating_plugins.rst:112
# a3c53659df6e47c0a86ea1867219b5f6
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling |app| that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../creating_plugins.rst:117
# 219d4b506fdf432290b26f892e602f83
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../creating_plugins.rst:120
# c73965f0094c467dbfb12efb06e7ff2f
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../creating_plugins.rst:123
# 7fe7585475db415da2eae9071eeaa351
msgid "ui.py"
msgstr ""

#: ../../creating_plugins.rst:125
# 6b895011907e48178a1d06bfb74524f1
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../creating_plugins.rst:131
#: ../../creating_plugins.rst:215
# a85791ebc4144840b5aef57948773b9d
# cad4469300dd4e108bd84c2d2fb528ba
msgid "main.py"
msgstr ""

#: ../../creating_plugins.rst:133
# f449d95737fb47ef86a898f346e24676
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../creating_plugins.rst:139
# f1d38f935c444c739f3bca589cde1c36
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../creating_plugins.rst:141
# da5053b0322a41838d941bd5aa15f187
msgid "|app|'s plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../creating_plugins.rst:148
# 1316526d573f4758947a23ffff1e17a6
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:144
# 5467986d7614441ab67eae65b77aaf67
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../creating_plugins.rst:152
# 01e150a41b5347b88017cc165c0f970d
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:151
# ae7d1df4d89b4a1f81b60ef8fd15c51d
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../creating_plugins.rst:155
# c49cc981ba7844cfabf44330164f2f39
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../creating_plugins.rst:157
# f2369a0e4c1b442f8076ee387bd0af5b
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../creating_plugins.rst:168
# 4ab14daf65f44e2f95f273ff635c92cf
msgid "|app| has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../creating_plugins.rst:170
# 0c13f99f1d454ad6b0412b19d0948ea1
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../creating_plugins.rst:175
# 414b0261fd3146e88900cee4fd2eaf61
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../creating_plugins.rst:180
# 7f3f6f657fe8402c962eebcfc0ca0572
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../creating_plugins.rst:187
# 39c67c987a2e4cadba779443d3ea3d61
msgid "Edit Book plugins"
msgstr ""

#: ../../creating_plugins.rst:189
# 06ac5b9dbeaf46d1aa59eb04375363c3
msgid "Now let's change gears for a bit and look at creating a plugin to add tools to the |app| book editor. The plugin is available here: `editor_demo_plugin.zip  <http://calibre-ebook.com/downloads/editor_demo_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:193
# 07be412d088640c4bbebcf74d9dec2a1
msgid "The first step, as for all plugins is to create the import name empty txt file, as described :ref:`above <import_name_txt>`. We shall name the file ``plugin-import-name-editor_plugin_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:197
# 378ef1679ad34782ae9901b4ef8b6071
msgid "Now we create the mandatory ``__init__.py`` file that contains metadata about the plugin -- its name, author, version, etc."
msgstr ""

#: ../../creating_plugins.rst:203
# e7fc3aa6ce0e4e0f825fa6fc4f67db91
msgid "A single editor plugin can provide multiple tools each tool corresponds to a single button in the toolbar and entry in the :guilabel:`Plugins` menu in the editor. These can have sub-menus in case the tool has multiple related actions."
msgstr ""

#: ../../creating_plugins.rst:207
# 3f9b2acac4ae4a4ebe1acd9cadc8584e
msgid "The tools must all be defined in the file ``main.py`` in your plugin. Every tool is a class that inherits from the :class:`calibre.gui2.tweak_book.plugin.Tool` class. Let's look at ``main.py`` from the demo plugin, the source code is heavily commented and should be self-explanatory. Read the API documents of the :class:`calibre.gui2.tweak_book.plugin.Tool` class for more details."
msgstr ""

#: ../../creating_plugins.rst:217
# 06f730ba1c4140aeb8ee42cec1359f25
msgid "Here we will see the definition of a single tool that will multiply all font sizes in the book by a number provided by the user. This tool demonstrates various important concepts that you will need in developing your own plugins, so you should read the (heavily commented) source code carefully."
msgstr ""

#: ../../creating_plugins.rst:225
# 442c17818f1f4765896a2bbb4ba0aa07
msgid "Let's break down ``main.py``. We see that it defines a single tool, named *Magnify fonts*. This tool will ask the user for a number and multiply all font sizes in the book by that number."
msgstr ""

#: ../../creating_plugins.rst:229
# 89f802850059400283352b0ff02b688a
msgid "The first important thing is the tool name which you must set to some relatively unique string as it will be used as the key for this tool."
msgstr ""

#: ../../creating_plugins.rst:232
# fec029a3a0454254bac855afc7c61184
msgid "The next important entry point is the :meth:`calibre.gui2.tweak_book.plugin.Tool.create_action`. This method creates the QAction objects that appear in the plugins toolbar and plugin menu. It also, optionally, assigns a keyboard shortcut that the user can customize. The triggered signal from the QAction is connected to the ask_user() method that asks the user for the font size multiplier, and then runs the magnification code."
msgstr ""

#: ../../creating_plugins.rst:240
# d600380d0a814f19ac3d2744d2fce1ee
msgid "The magnification code is well commented and fairly simple. The main things to note are that you get a reference to the editor window as ``self.gui`` and the editor *Boss* as ``self.boss``. The *Boss* is the object that controls the editor user interface. It has many useful methods, that are documented in the :class:`calibre.gui2.tweak_book.boss.Boss` class."
msgstr ""

#: ../../creating_plugins.rst:246
# bbc9274c75ab4880b1d1be104f8316fc
msgid "Finally, there is ``self.current_container`` which is a reference to the book being edited as a :class:`calibre.ebooks.oeb.polish.container.Container` object. This represents the book as a collection of its constituent HTML/CSS/image files and has convenience methods for doing many useful things. The container object and various useful utility functions that can be reused in your plugin code are documented in :ref:`polish_api`."
msgstr ""

#: ../../creating_plugins.rst:255
# dcbd88435d9446c9b3ade5bc0ee95212
msgid "Adding translations to your plugin"
msgstr ""

#: ../../creating_plugins.rst:257
# b3726b6990b24063afcec3a1a4158df5
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../creating_plugins.rst:260
# 2aa46d889a6a41fabb59c0d549d349e2
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../creating_plugins.rst:265
# 2eee3abb6e7e4047a46706a76f979457
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

#: ../../creating_plugins.rst:270
# 8a36b3ea021b4525ac1e1fa5d2402e6f
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../creating_plugins.rst:275
# 15995707b4ed4511a5892c7a725d132c
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../creating_plugins.rst:277
# 993f9c6519674c52bf7a9caad2f7adb3
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../creating_plugins.rst:283
# bdbac49ee8cc4163b2ae1ae433a445f1
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../creating_plugins.rst:289
# e4e69e0f9d27435d8f99a97638e67173
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../creating_plugins.rst:292
# db0f9232ae0946e7b4d45e3448607482
msgid "The plugin API"
msgstr ""

#: ../../creating_plugins.rst:294
# 86b747e7340e407eaa1bbfbe5bd0164f
msgid "As you may have noticed above, a plugin in |app| is a class. There are different classes for the different types of plugins in |app|. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../creating_plugins.rst:297
# 908c11bb0f6e42bba1f4b626f961b01c
msgid "Your plugin is almost certainly going to use code from |app|. To learn how to find various bits of functionality in the |app| code base, read the section on the |app| :ref:`code_layout`."
msgstr ""

#: ../../creating_plugins.rst:302
# 98a1ba5ee8d94d68a0b689d26495ca60
msgid "Debugging plugins"
msgstr ""

#: ../../creating_plugins.rst:304
# d3e0401642dd4d8abfcd6277e4440c0d
msgid "The first, most important step is to run |app| in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../creating_plugins.rst:308
# bc343f320eb44a599896c4b9e1e9e4e7
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../creating_plugins.rst:310
# faa314c4925d401b83bf3c267b34982b
msgid "When running from the command line, debug output will be printed to the console, when running from within |app| the output will go to a txt file."
msgstr ""

#: ../../creating_plugins.rst:312
# 2ae313094a724800b57a2cb3e0f3d810
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of |app| using just this debugging technique."
msgstr ""

#: ../../creating_plugins.rst:314
# d0024467730e4e0dbb9814ca1166d44f
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../creating_plugins.rst:319
# 3544de04192943989d123f7543f0f940
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in |app| and relaunch |app|."
msgstr ""

#: ../../creating_plugins.rst:322
# 5c47f428a7b5490e8e2f05e32b967836
msgid "More plugin examples"
msgstr ""

#: ../../creating_plugins.rst:324
# 519eff40b61b4a0aa816d5b3f135033c
msgid "You can find a list of many, sophisticated |app| plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../creating_plugins.rst:327
# bd5df40ed522404aaa297e34ae27b6cb
msgid "Sharing your plugins with others"
msgstr ""

#: ../../creating_plugins.rst:329
# e178ec3645914f949e27966f92b4d3a5
msgid "If you would like to share the plugins you have created with other users of |app|, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

