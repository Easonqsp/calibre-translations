# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.45.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-18 08:08+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../creating_plugins.rst:7
# 367a16cef81b4e5ab386f2af68f5879f
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

#: ../../creating_plugins.rst:9
# d2f94299030a44d0bf77291798687387
msgid "|app| has a very modular design. Almost all functionality in |app| comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to |app| and so on. You can get a complete list of all the built-in plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../creating_plugins.rst:11
# d8824ba322314e0a8ba5794494b74a7a
msgid "Here, we will teach you how to create your own plugins to add new features to |app|."
msgstr ""

#: ../../creating_plugins.rst:0
# 3bcbb657f73d4428a44123c3fede47a1
msgid "Contents"
msgstr ""

#: ../../creating_plugins.rst:18
# 649cb03ae4f44660875e9d37ace12e43
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../creating_plugins.rst:21
# 3bb35111eb4d470593dc6e6d12f278f7
msgid "Anatomy of a |app| plugin"
msgstr ""

#: ../../creating_plugins.rst:23
# ee522794a018467da1799f17a23448dc
msgid "A |app| plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../creating_plugins.rst:27
# 8d338252483345b0b25370aa1441ace0
msgid "Suppose you have an installation of |app| that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by |app| to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../creating_plugins.rst:35
# 203e2b6eaf86438a87496d415651fc43
msgid "That's all. To add this code to |app| as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../creating_plugins.rst:41
# 180cfe7abbce4e23a48da50f733084d4
msgid "On OS X you have to first install the |app| command line tools, by going to :guilabel:`Preferences->Miscellaneous` and clicking the :guilabel:`Install command line tools` button."
msgstr ""

#: ../../creating_plugins.rst:45
# 9c08e52882254ee0bb527d8f0b74f5c5
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:48
# 3c028ad09bb64d9aba5bb41d117545e6
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../creating_plugins.rst:53
# 84c1f9865c534ae9a0bca0fc4a173274
msgid "A User Interface plugin"
msgstr ""

#: ../../creating_plugins.rst:55
# 6130464368314674ad45c54322fc38d2
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the |app| user interface and how to access and query the books database in |app|."
msgstr ""

#: ../../creating_plugins.rst:60
# d3fd6511fa98409ab3cd6b13259c414b
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../creating_plugins.rst:62
# b98947c3a3cf4ad59d71bc3ae67c3099
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:78
# d99bea896de8439ea3b23f8838eddaef
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../creating_plugins.rst:66
# 32a4ee8cf4e14dd49c06e198a3b611b1
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../creating_plugins.rst:72
# 82062beeec0a489bad6427484e152dd5
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../creating_plugins.rst:77
# e4f75a3640024b69b81e8d9702a8f677
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../creating_plugins.rst:81
# f98babebe1774bab9668c82e21b396cf
msgid "**__init__.py**"
msgstr ""

#: ../../creating_plugins.rst:81
# 5d18fad12eba43c98f4de61c4ac9e864
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../creating_plugins.rst:84
# b02cecaed7c84153bfba62d88b5ce6c1
msgid "**main.py**"
msgstr ""

#: ../../creating_plugins.rst:84
# 8f4101c34aa54b2a98ddd7113cd6cc82
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../creating_plugins.rst:87
# 91a1e6278fee4b6fb38c473674196c41
msgid "**ui.py**"
msgstr ""

#: ../../creating_plugins.rst:87
# 301bef6742934627b1247f1feaca85e4
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../creating_plugins.rst:90
# 67c0ad222f264293895dfb5b6d62c08e
msgid "**images/icon.png**"
msgstr ""

#: ../../creating_plugins.rst:90
# 54c1399ea3bf497b83fd83fc3d448743
msgid "The icon for this plugin"
msgstr ""

#: ../../creating_plugins.rst:93
# f121605daacb4fd2b090ee5eb11c9cfe
msgid "**about.txt**"
msgstr ""

#: ../../creating_plugins.rst:93
# a005a84f4cf54814aa53af3349e8cba4
msgid "A text file with information about the plugin"
msgstr ""

#: ../../creating_plugins.rst:98
# bd330551f1c24ca4a98736091f44962b
msgid "**translations**"
msgstr ""

#: ../../creating_plugins.rst:96
# c997aaf1fca4490f8d20f607351563ef
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../creating_plugins.rst:100
# fd71c747eadd4760bfc5c630daa647e8
msgid "Now let's look at the code."
msgstr ""

#: ../../creating_plugins.rst:103
# cd3cfc36d1bd4a43a33eeca8c31f041f
msgid "__init__.py"
msgstr ""

#: ../../creating_plugins.rst:105
# 93edf71dac094106be2557af68b2950a
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../creating_plugins.rst:110
# 7b543ba21e8c4c479c8c0c8a2ab45753
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling |app| that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../creating_plugins.rst:115
# ad8128edb4e6482fa91bc4c63071066f
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../creating_plugins.rst:118
# 4092459199cf4f86a64ca64965208a12
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../creating_plugins.rst:121
# 04f3ea9485d74f9d9558a4df958ddd69
msgid "ui.py"
msgstr ""

#: ../../creating_plugins.rst:123
# 07fbf933c62241c7b9872762b90e190a
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../creating_plugins.rst:129
# 183fbf9f61ae488786307a594afa7376
msgid "main.py"
msgstr ""

#: ../../creating_plugins.rst:131
# 6d93396a695e4892a2edb14fa92e727d
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../creating_plugins.rst:137
# 45eec4ec65504d7d98521f0de0558221
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../creating_plugins.rst:139
# 79173073b5b941029c1958a66ade7466
msgid "|app|'s plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../creating_plugins.rst:146
# 39e369570fcf4f0e8a2513461c6e3912
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:142
# 031dc9869b634b8bbf24fc573b1c2c52
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../creating_plugins.rst:150
# 7583821d5ba94669a9c68e1a3f3af64b
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:149
# 12515ccc846f46eaa08984fad06d6bc7
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../creating_plugins.rst:153
# 2283e08a18ad4794905bee2abaede775
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../creating_plugins.rst:155
# 3097ac45efdd40628b0b98650e16316f
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../creating_plugins.rst:166
# e8d8f5c782b0441aba1e2fc6b1b6454a
msgid "|app| has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../creating_plugins.rst:168
# 8e66e912c8d648d7883bab8303ed8b49
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../creating_plugins.rst:173
# 2ffc8b65509a4fad8e23bcbc2276fe62
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../creating_plugins.rst:178
# 4c931c7db85d483193f63da732fb5dd3
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../creating_plugins.rst:184
# 8f0ccde584694332a0e777e583047e0e
msgid "Adding translations to your plugin"
msgstr ""

#: ../../creating_plugins.rst:186
# a2341a6c7f7243e2a838c8118218cd58
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../creating_plugins.rst:189
# 405b3a40c74b4abd89ae56b86c2e22a8
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../creating_plugins.rst:194
# e6134ecac4b84ed2bb091fe3a020ce04
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

#: ../../creating_plugins.rst:199
# dd058f42740a42c4b7618048274d8c99
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../creating_plugins.rst:204
# 90aff184de8f4142b7189d57dee18d9b
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../creating_plugins.rst:206
# ab2d6a5c2728479fafbe6a7a8a623888
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../creating_plugins.rst:212
# 95e220c42b9842ed9f75a45b086ac17a
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../creating_plugins.rst:218
# cf4d7326cb104e64a58059457626cba1
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../creating_plugins.rst:221
# 9420cc8eb7d3474299cb47cce7d17966
msgid "The plugin API"
msgstr ""

#: ../../creating_plugins.rst:223
# f12e1588274447749df888b78291e813
msgid "As you may have noticed above, a plugin in |app| is a class. There are different classes for the different types of plugins in |app|. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../creating_plugins.rst:226
# 75af601f49614b84ab182c97140a779c
msgid "Your plugin is almost certainly going to use code from |app|. To learn how to find various bits of functionality in the |app| code base, read the section on the |app| :ref:`code_layout`."
msgstr ""

#: ../../creating_plugins.rst:231
# 5e216c065e244c8e94295adfe6c9e720
msgid "Debugging plugins"
msgstr ""

#: ../../creating_plugins.rst:233
# d863515ccc4b4240b1846232a23097a8
msgid "The first, most important step is to run |app| in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../creating_plugins.rst:237
# a182f8d999fe4334b0d4976cb7d70884
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../creating_plugins.rst:239
# b08433a881db4550858153ea64dd8c6c
msgid "When running from the command line, debug output will be printed to the console, when running from within |app| the output will go to a txt file."
msgstr ""

#: ../../creating_plugins.rst:241
# 98daa864e62940c68cf67fb116670ab6
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of |app| using just this debugging technique."
msgstr ""

#: ../../creating_plugins.rst:243
# fdc1ee5012f448518b31d4da28146c12
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../creating_plugins.rst:248
# b0d2e19273dd433ebad7b251ca6c3561
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in |app| and relaunch |app|."
msgstr ""

#: ../../creating_plugins.rst:251
# 3fa9856edf6a4469bfbc7e9b5c54dcf1
msgid "More plugin examples"
msgstr ""

#: ../../creating_plugins.rst:253
# f057d61feaac47548e4131365d0f1485
msgid "You can find a list of many, sophisticated |app| plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../creating_plugins.rst:256
# bff9d66d91f3456cbb9c74b14385bdd3
msgid "Sharing your plugins with others"
msgstr ""

#: ../../creating_plugins.rst:258
# 7856438be34248ee99f518a78d88b00f
msgid "If you would like to share the plugins you have created with other users of |app|, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

