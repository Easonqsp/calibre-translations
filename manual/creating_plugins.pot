# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.40.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-17 12:32+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../creating_plugins.rst:7
# 172395c59e8846dcbe1918f5adde8c59
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

#: ../../creating_plugins.rst:9
# 90e9b49fd7864229a80c453d023d63cd
msgid "|app| has a very modular design. Almost all functionality in |app| comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to |app| and so on. You can get a complete list of all the built-in plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../creating_plugins.rst:11
# 68c4d1b91d71406bbfabd31767fde5dc
msgid "Here, we will teach you how to create your own plugins to add new features to |app|."
msgstr ""

#: ../../creating_plugins.rst:0
# 59bcbece38904d848218f8fa68a56617
msgid "Contents"
msgstr ""

#: ../../creating_plugins.rst:18
# 51b97c9e73e14003b13d6da46cd544a0
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../creating_plugins.rst:21
# a2530e6593324458a3d76199a1e3b3da
msgid "Anatomy of a |app| plugin"
msgstr ""

#: ../../creating_plugins.rst:23
# 6843a37a00e947b3bc406e4767dc3cf4
msgid "A |app| plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../creating_plugins.rst:27
# 4bcb015fea8a4f70a4f488834fe68d45
msgid "Suppose you have an installation of |app| that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by |app| to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../creating_plugins.rst:35
# 08d4cf0b5a4d4652be67c415bc9d280a
msgid "That's all. To add this code to |app| as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../creating_plugins.rst:41
# e5d9723a3074422dace3604c4c619f82
msgid "On OS X you have to first install the |app| command line tools, by going to :guilabel:`Preferences->Miscellaneous` and clicking the :guilabel:`Install command line tools` button."
msgstr ""

#: ../../creating_plugins.rst:45
# 75f0cf855cb941e3a8a18f69e296d20d
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:48
# ac7a7fe6037f4c9b97f11625e304323e
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../creating_plugins.rst:53
# b0ff25efddea43688a3e2bd3dfb02e43
msgid "A User Interface plugin"
msgstr ""

#: ../../creating_plugins.rst:55
# 5b12e3e89fb04fd0b0f154590aeb94e8
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the |app| user interface and how to access and query the books database in |app|."
msgstr ""

#: ../../creating_plugins.rst:60
# 22cd073b7a8243c2b5e05cf7de28dd96
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../creating_plugins.rst:62
# 0275bdd6c69d41d88f6a3fb32247631a
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:78
# adf028b845314800b37d9b77f3b80a17
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../creating_plugins.rst:66
# b53fa6fcfe804416b640ec8cd2069976
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../creating_plugins.rst:72
# 39de1f8b4a8445c58926ffed51b29656
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../creating_plugins.rst:77
# 772bf9c5caeb4ca9ab79b161e93e42cc
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../creating_plugins.rst:81
# e96ae17af752431ab860a3547f0244fd
msgid "**__init__.py**"
msgstr ""

#: ../../creating_plugins.rst:81
# 9eee50c7c1fe45d396d14b36b6c58a47
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../creating_plugins.rst:84
# 07f25ab4fa4e48fb86f1b57182a89e2a
msgid "**main.py**"
msgstr ""

#: ../../creating_plugins.rst:84
# c1cdc5cb8442486a993860b53f44d83c
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../creating_plugins.rst:87
# 1a02328cf48448ecbcf75268f5a9b5c2
msgid "**ui.py**"
msgstr ""

#: ../../creating_plugins.rst:87
# e3274c48e2644743a74c1b347244f158
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../creating_plugins.rst:90
# cd64a34a55914f15b994d55bc3378d96
msgid "**images/icon.png**"
msgstr ""

#: ../../creating_plugins.rst:90
# 9d8affdf3f354df5a2d6873a32ec3f17
msgid "The icon for this plugin"
msgstr ""

#: ../../creating_plugins.rst:93
# 0c3c94179169495799f7febdb3ecea35
msgid "**about.txt**"
msgstr ""

#: ../../creating_plugins.rst:93
# 3ecf694fce424bcbb9767e7d6bf158dd
msgid "A text file with information about the plugin"
msgstr ""

#: ../../creating_plugins.rst:98
# a93822af219e4ea6bd5efc663c953b55
msgid "**translations**"
msgstr ""

#: ../../creating_plugins.rst:96
# 5ca284f3ed1b426cb03e78a16f07afab
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../creating_plugins.rst:100
# ce4ef88c41b849cba5f782b23252d82a
msgid "Now let's look at the code."
msgstr ""

#: ../../creating_plugins.rst:103
# 1b882fe58de5440584fd45c2049d0a2b
msgid "__init__.py"
msgstr ""

#: ../../creating_plugins.rst:105
# d9cdda37ce7448d1a4c1d2c66379f150
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../creating_plugins.rst:110
# 5c11b253f10e40cca96425b0c618ff7b
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling |app| that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../creating_plugins.rst:115
# b22a958f88074413aff0cf37648e5f05
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../creating_plugins.rst:118
# 713300e578f0401da21c55c859686518
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../creating_plugins.rst:121
# d3858ea475a848aeba93d6f196e3661a
msgid "ui.py"
msgstr ""

#: ../../creating_plugins.rst:123
# 49786296be684a4997f66453e7bd0bde
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../creating_plugins.rst:129
# 393d0da446924302816df8d777744c02
msgid "main.py"
msgstr ""

#: ../../creating_plugins.rst:131
# 34362a9b3c7c46fe842224cd14dcffac
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../creating_plugins.rst:137
# eb58bd12748842e3b4293d8f7b9b9480
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../creating_plugins.rst:139
# d19f90852b964d72a9ed225c92f4ea4b
msgid "|app|'s plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../creating_plugins.rst:146
# 77421779cd524de49e8302511566c3f6
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:142
# 6a3b8c74b79840c1b022c539632a650f
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../creating_plugins.rst:150
# eb19116701bb4cbdae36a24bc0605c56
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:149
# 43fef42f394c42c3a74698785225dd25
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../creating_plugins.rst:153
# 2971b0cb5e264fb3b368429f82c754cb
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../creating_plugins.rst:155
# bddf6a1b06ce4d4b8c11f2e9820a1826
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../creating_plugins.rst:166
# a0e6b1fbd9ae45a08ea5d62e67dd28ac
msgid "|app| has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../creating_plugins.rst:168
# 609ffbc5065e457286074d028d1b8f5d
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../creating_plugins.rst:173
# f4a706ac678d4a0095e91b10a63cdce9
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../creating_plugins.rst:178
# b8827e3e73f447529f7157f59630ba3a
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../creating_plugins.rst:184
# c775b7163d994cf2a20a534534ff9b58
msgid "Adding translations to your plugin"
msgstr ""

#: ../../creating_plugins.rst:186
# dca41d6606e54015810e7593e12d4010
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../creating_plugins.rst:189
# 4e5c53a44ef14cb8a89974e02208911d
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../creating_plugins.rst:194
# f6d0e7ab98fb4a8aa4513e7816fac6ee
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

#: ../../creating_plugins.rst:199
# 163751f04bd048cd9925f6fcebb9c1ad
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../creating_plugins.rst:204
# 5408736624904582ade50735a075b71c
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../creating_plugins.rst:206
# c9974a57baaf4a91a3dad02ea1d90023
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../creating_plugins.rst:212
# 9b7ed054870845eeb667050b923be828
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../creating_plugins.rst:218
# 5b748cca95d8494b9eea9c4db6058591
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../creating_plugins.rst:221
# 33b90996fea24fd7a0ec23bbaefeb30f
msgid "The plugin API"
msgstr ""

#: ../../creating_plugins.rst:223
# c3d8fc42ad74489795ec65f3e34ab64d
msgid "As you may have noticed above, a plugin in |app| is a class. There are different classes for the different types of plugins in |app|. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../creating_plugins.rst:226
# e6e16d5129014aef823e50cb73a2c884
msgid "Your plugin is almost certainly going to use code from |app|. To learn how to find various bits of functionality in the |app| code base, read the section on the |app| :ref:`code_layout`."
msgstr ""

#: ../../creating_plugins.rst:231
# bb4dfe978b21451a924579fe4b3436e7
msgid "Debugging plugins"
msgstr ""

#: ../../creating_plugins.rst:233
# 0d6a678aea3944eea62cb3d27ad8b714
msgid "The first, most important step is to run |app| in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../creating_plugins.rst:237
# 216fb920c2804c2dbfe85c92396b7772
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../creating_plugins.rst:239
# 5131de5d61e74fce8999ec362f7de508
msgid "When running from the command line, debug output will be printed to the console, when running from within |app| the output will go to a txt file."
msgstr ""

#: ../../creating_plugins.rst:241
# 5796b5211cee46cb9c12dd5fcfd9fea7
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of |app| using just this debugging technique."
msgstr ""

#: ../../creating_plugins.rst:243
# 6a37bdaeb0b74ff39a0733af0f12acf3
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../creating_plugins.rst:248
# eb3771428e8340d9891569fd7ff40d46
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in |app| and relaunch |app|."
msgstr ""

#: ../../creating_plugins.rst:251
# b263cb08448b4af9bf265654c997ba79
msgid "More plugin examples"
msgstr ""

#: ../../creating_plugins.rst:253
# 62690380dc564d4493bd6c960b9d41d1
msgid "You can find a list of many, sophisticated |app| plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../creating_plugins.rst:256
# 7f1c047d6ea9468ca15c4d7c3c75f58a
msgid "Sharing your plugins with others"
msgstr ""

#: ../../creating_plugins.rst:258
# 2c96a4a5322e47f8991a022e9d43b34b
msgid "If you would like to share the plugins you have created with other users of |app|, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

