# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.48.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-08 08:53+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../creating_plugins.rst:7
# 1c8c290e5ff4456cbeb9d85312253f4c
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

#: ../../creating_plugins.rst:9
# f63f3d1fa7e64ec3bea40088a0d7522d
msgid "|app| has a very modular design. Almost all functionality in |app| comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to |app| and so on. You can get a complete list of all the built-in plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../creating_plugins.rst:11
# 0a123b4fd8494a8fa393b18cf27dfb5a
msgid "Here, we will teach you how to create your own plugins to add new features to |app|."
msgstr ""

#: ../../creating_plugins.rst:0
# 928dd90f3d2545849062a65bd7e2bc34
msgid "Contents"
msgstr ""

#: ../../creating_plugins.rst:18
# 3f689f8f45f54bcca0bdc74504490dd4
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../creating_plugins.rst:21
# 6d893b05d9fa4bef9a79b1a1fa675d3a
msgid "Anatomy of a |app| plugin"
msgstr ""

#: ../../creating_plugins.rst:23
# 4bf94b89a9574e5c9b473cd0e6bae4a2
msgid "A |app| plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../creating_plugins.rst:27
# dcf0930f04054892b8e1845f06512b50
msgid "Suppose you have an installation of |app| that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by |app| to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../creating_plugins.rst:35
# 993a4069b5994dc980608a648830f137
msgid "That's all. To add this code to |app| as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../creating_plugins.rst:41
# 2070143e7f84498f95e78b90ae5e2368
msgid "On OS X you have to first install the |app| command line tools, by going to :guilabel:`Preferences->Miscellaneous` and clicking the :guilabel:`Install command line tools` button."
msgstr ""

#: ../../creating_plugins.rst:45
# 9c06af58f9a04a99821f8211e77d1b5c
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:48
# ffb08f4fd7d64a279cdeae95e1163db8
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../creating_plugins.rst:53
# 09d3deab9bba4a35bd8b5da7cb8fe727
msgid "A User Interface plugin"
msgstr ""

#: ../../creating_plugins.rst:55
# 429c52cbdc3245c08fbbe67bfacd5ec8
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the |app| user interface and how to access and query the books database in |app|."
msgstr ""

#: ../../creating_plugins.rst:60
# 1ae46d737ad747e6a268afbdb43cc8ba
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../creating_plugins.rst:64
# c1fe031ae90b459cb2358230d336a1d5
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:80
# 1223ac1860d34b4fbd28754e6d6b43e7
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../creating_plugins.rst:68
# 1c1208e9cb28439bb5f6f6ae1fa2a74e
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../creating_plugins.rst:74
# 19f1ece823ea47888f708a4c304bddc3
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../creating_plugins.rst:79
# a37bb66e95ca4e0e885a5db22ef73b3c
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../creating_plugins.rst:83
# 5fd21d6965bf452589dd77be32244c4b
msgid "**__init__.py**"
msgstr ""

#: ../../creating_plugins.rst:83
# 126a29e76f8445f29862b2b3301a1458
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../creating_plugins.rst:86
# 48bef750836545a78c211cbb6539eb7b
msgid "**main.py**"
msgstr ""

#: ../../creating_plugins.rst:86
# 1af1bd10bf0e42aaaa2549f47900aad0
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../creating_plugins.rst:89
# 768651bf425d45169e82921ba0cf200d
msgid "**ui.py**"
msgstr ""

#: ../../creating_plugins.rst:89
# b46a04d74ed240ceb05c83435de1bd00
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../creating_plugins.rst:92
# 5754577e7d904472bfeba73addd484e4
msgid "**images/icon.png**"
msgstr ""

#: ../../creating_plugins.rst:92
# e1183235cc85452d9a5c3821f4c73323
msgid "The icon for this plugin"
msgstr ""

#: ../../creating_plugins.rst:95
# 93c12ec721ed4978a5581ea3306bfde8
msgid "**about.txt**"
msgstr ""

#: ../../creating_plugins.rst:95
# 166584dc55ee4ea4a4f59044e8d09562
msgid "A text file with information about the plugin"
msgstr ""

#: ../../creating_plugins.rst:100
# f740d318ea8e466393e6aa84706637b0
msgid "**translations**"
msgstr ""

#: ../../creating_plugins.rst:98
# 8e04aa8d9e92475688f75a982f8e5f64
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../creating_plugins.rst:102
# bbe05a0d08cb42c8b23ab692d8fadfea
msgid "Now let's look at the code."
msgstr ""

#: ../../creating_plugins.rst:105
# ed9a670a20284c72a0641a0d17d04cdd
msgid "__init__.py"
msgstr ""

#: ../../creating_plugins.rst:107
# 3a55e0304f4a4e60aa2e21ffaf09627b
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../creating_plugins.rst:112
# c3ee987dc5254d4fa9207974c1fbcae3
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling |app| that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../creating_plugins.rst:117
# 42e6edb2f87644c8b48e8a157a682067
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../creating_plugins.rst:120
# b2c86a5665c748fd92d7ae3031e7c5f4
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../creating_plugins.rst:123
# 7de0540d05a04c9292b28622fce2c24c
msgid "ui.py"
msgstr ""

#: ../../creating_plugins.rst:125
# a5c86be41bf94faf88f926a98eea2203
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../creating_plugins.rst:131
#: ../../creating_plugins.rst:215
# 20ad41ac36d044b58d1447011c187eb0
# e194a09506e14106ba88a78b4ec8cf1f
msgid "main.py"
msgstr ""

#: ../../creating_plugins.rst:133
# d2ba82a3b23e4430a5bec3e97613df09
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../creating_plugins.rst:139
# 60370c9f78cc4ffaba35baf3d8ce7b17
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../creating_plugins.rst:141
# fcd9fbc99366490882432b30611773eb
msgid "|app|'s plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../creating_plugins.rst:148
# 07c63b12184444c19bc7d354eefe2bc7
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:144
# f1b3c90447ee49ed951b23edd28354cb
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../creating_plugins.rst:152
# 8379b2e56f9d454aade54099c299a225
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:151
# e7eb8806891c4593abd89f6de23e9c1a
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../creating_plugins.rst:155
# 08b03d18ea594ead9d0da66d93f67984
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../creating_plugins.rst:157
# abd056ee63bb4c07a4580169b1c6f5ca
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../creating_plugins.rst:168
# 517174feee24438d864058f7718e1e4f
msgid "|app| has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../creating_plugins.rst:170
# 8d95f0df7bff4f8aa2c4ab29be817fa7
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../creating_plugins.rst:175
# 0629283e2cc14d3e8e5b39d499a0d181
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../creating_plugins.rst:180
# 5b5b7fd2056a4bb58fcb5df6d8cda78b
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../creating_plugins.rst:187
# bce2f0891d23456a8e27e4e62424371d
msgid "Edit Book plugins"
msgstr ""

#: ../../creating_plugins.rst:189
# a7bf4042423c4300ad2e54e1b986eba3
msgid "Now let's change gears for a bit and look at creating a plugin to add tools to the |app| book editor. The plugin is available here: `editor_demo_plugin.zip  <http://calibre-ebook.com/downloads/editor_demo_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:193
# b4b81fdd93664db9aec5658e6e4f06f2
msgid "The first step, as for all plugins is to create the import name empty txt file, as described :ref:`above <import_name_txt>`. We shall name the file ``plugin-import-name-editor_plugin_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:197
# 245a44ff28414786bb74ef8ded5b17ef
msgid "Now we create the mandatory ``__init__.py`` file that contains metadata about the plugin -- its name, author, version, etc."
msgstr ""

#: ../../creating_plugins.rst:203
# fc7c61d0f6804e689b67a49c3b2fea95
msgid "A single editor plugin can provide multiple tools each tool corresponds to a single button in the toolbar and entry in the :guilabel:`Plugins` menu in the editor. These can have sub-menus in case the tool has multiple related actions."
msgstr ""

#: ../../creating_plugins.rst:207
# f4e9f1e25b8742bc8c8643a801a1deb8
msgid "The tools must all be defined in the file ``main.py`` in your plugin. Every tool is a class that inherits from the :class:`calibre.gui2.tweak_book.plugin.Tool` class. Let's look at ``main.py`` from the demo plugin, the source code is heavily commented and should be self-explanatory. Read the API documents of the :class:`calibre.gui2.tweak_book.plugin.Tool` class for more details."
msgstr ""

#: ../../creating_plugins.rst:217
# a8200827292f4042bec60571a7baed43
msgid "Here we will see the definition of a single tool that will multiply all font sizes in the book by a number provided by the user. This tool demonstrates various important concepts that you will need in developing your own plugins, so you should read the (heavily commented) source code carefully."
msgstr ""

#: ../../creating_plugins.rst:225
# 69c43ee0bd704fbe99e107f027ccf395
msgid "Let's break down ``main.py``. We see that it defines a single tool, named *Magnify fonts*. This tool will ask the user for a number and multiply all font sizes in the book by that number."
msgstr ""

#: ../../creating_plugins.rst:229
# e1c56e9cc1bc433e93f67eca671003a9
msgid "The first important thing is the tool name which you must set to some relatively unique string as it will be used as the key for this tool."
msgstr ""

#: ../../creating_plugins.rst:232
# f0139dbde4504e17b0cd52de763dfc72
msgid "The next important entry point is the :meth:`calibre.gui2.tweak_book.plugin.Tool.create_action`. This method creates the QAction objects that appear in the plugins toolbar and plugin menu. It also, optionally, assigns a keyboard shortcut that the user can customize. The triggered signal from the QAction is connected to the ask_user() method that asks the user for the font size multiplier, and then runs the magnification code."
msgstr ""

#: ../../creating_plugins.rst:240
# 0b948214cf404e7ab62e11b7406e3ed6
msgid "The magnification code is well commented and fairly simple. The main things to note are that you get a reference to the editor window as ``self.gui`` and the editor *Boss* as ``self.boss``. The *Boss* is the object that controls the editor user interface. It has many useful methods, that are documented in the :class:`calibre.gui2.tweak_book.boss.Boss` class."
msgstr ""

#: ../../creating_plugins.rst:246
# d57c65d68b594fe6b083ef589fe745a0
msgid "Finally, there is ``self.current_container`` which is a reference to the book being edited as a :class:`calibre.ebooks.oeb.polish.container.Container` object. This represents the book as a collection of its constituent HTML/CSS/image files and has convenience methods for doing many useful things. The container object and various useful utility functions that can be reused in your plugin code are documented in :ref:`polish_api`."
msgstr ""

#: ../../creating_plugins.rst:255
# cb1f59c45f6f4571a10a2bbcd60e3064
msgid "Adding translations to your plugin"
msgstr ""

#: ../../creating_plugins.rst:257
# aa2c536ae3514a059f17eca662bc32d3
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../creating_plugins.rst:260
# 24f7ad9344e74800a315e77dbe6edd08
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../creating_plugins.rst:265
# fb5c38df6bfd4bb1ad78c7a413370286
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

#: ../../creating_plugins.rst:270
# 6037137805a04b7e838dfbad56d6cea4
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../creating_plugins.rst:275
# 03f4297db31d4e9eb6a2a6c4517bf29a
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../creating_plugins.rst:277
# f6d461258476479b9ed1c938c49b4b73
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../creating_plugins.rst:283
# a987e35bdbc74e249701c23cfd004d8e
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../creating_plugins.rst:289
# 8eab8fbc6bc14d2eaddcaad90a183316
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../creating_plugins.rst:292
# 32ffd3058cee4616bda0a7539124e0a1
msgid "The plugin API"
msgstr ""

#: ../../creating_plugins.rst:294
# eb3514ddd97d4d178ad0ada5a903a71b
msgid "As you may have noticed above, a plugin in |app| is a class. There are different classes for the different types of plugins in |app|. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../creating_plugins.rst:297
# bd3d4643850d4ccf8850e2eda6baf019
msgid "Your plugin is almost certainly going to use code from |app|. To learn how to find various bits of functionality in the |app| code base, read the section on the |app| :ref:`code_layout`."
msgstr ""

#: ../../creating_plugins.rst:302
# b3f1b1fda2e94168a4b66646e8669e13
msgid "Debugging plugins"
msgstr ""

#: ../../creating_plugins.rst:304
# 72944f09e99a42269b990fb804842256
msgid "The first, most important step is to run |app| in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../creating_plugins.rst:308
# a29747cc18494942b0e6391c40884e23
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../creating_plugins.rst:310
# 1bc44dc4cfd9465e82f1afe4d1d5ef2c
msgid "When running from the command line, debug output will be printed to the console, when running from within |app| the output will go to a txt file."
msgstr ""

#: ../../creating_plugins.rst:312
# 4e85e32f7a4b40a8abc6c14cc210f3db
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of |app| using just this debugging technique."
msgstr ""

#: ../../creating_plugins.rst:314
# 99cbcb64af8f4263aa9ef6a138e2b873
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../creating_plugins.rst:319
# e4bec5942fba4b3d96f7b82712accc21
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in |app| and relaunch |app|."
msgstr ""

#: ../../creating_plugins.rst:322
# 85c909d1971d4ba4b017746a8469c5fd
msgid "More plugin examples"
msgstr ""

#: ../../creating_plugins.rst:324
# ea6283820a7a4e4f882d13d375fa6cb2
msgid "You can find a list of many, sophisticated |app| plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../creating_plugins.rst:327
# bd4c35182dd14458bad0bff288b2ad66
msgid "Sharing your plugins with others"
msgstr ""

#: ../../creating_plugins.rst:329
# ffde5722d93045f29a2aadbad542bf96
msgid "If you would like to share the plugins you have created with other users of |app|, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

