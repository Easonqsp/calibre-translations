# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.42.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-27 09:25+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../creating_plugins.rst:7
# db0f10ddbc3c44e593ece3f05f98e6fa
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

#: ../../creating_plugins.rst:9
# be3cb4aa30f5412ca7817b41ff4be3e6
msgid "|app| has a very modular design. Almost all functionality in |app| comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to |app| and so on. You can get a complete list of all the built-in plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../creating_plugins.rst:11
# d83c982dd11745aca90c35b8d3b5c0a5
msgid "Here, we will teach you how to create your own plugins to add new features to |app|."
msgstr ""

#: ../../creating_plugins.rst:0
# 6941bbb03a7f447083e51a4e4ff01360
msgid "Contents"
msgstr ""

#: ../../creating_plugins.rst:18
# 8ffead9c3c4a4e099114c1a8d9d20004
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../creating_plugins.rst:21
# 39b85bfb8018416c82218b70eb4fa03b
msgid "Anatomy of a |app| plugin"
msgstr ""

#: ../../creating_plugins.rst:23
# e0b496f26ed44e15ba11070dd3011416
msgid "A |app| plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../creating_plugins.rst:27
# ce547a70c0dc45d08ab9dd2a60dab14f
msgid "Suppose you have an installation of |app| that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by |app| to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../creating_plugins.rst:35
# bf0ecfb862a24fc1964dc1c117001588
msgid "That's all. To add this code to |app| as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../creating_plugins.rst:41
# 8c80983999714052b5a26cb4ea26faed
msgid "On OS X you have to first install the |app| command line tools, by going to :guilabel:`Preferences->Miscellaneous` and clicking the :guilabel:`Install command line tools` button."
msgstr ""

#: ../../creating_plugins.rst:45
# 40111c093acf411bb27468500d7ce7ea
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:48
# 332081c35f5e47ab964bd749c640f1cb
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../creating_plugins.rst:53
# 191398946bac4eb79c82a054cba8a349
msgid "A User Interface plugin"
msgstr ""

#: ../../creating_plugins.rst:55
# efa4862b3b6d419aa2a8fe6050212334
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the |app| user interface and how to access and query the books database in |app|."
msgstr ""

#: ../../creating_plugins.rst:60
# c1c428fc0f654aa58a41b1a62837bc38
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../creating_plugins.rst:62
# 54ba45d373814ea0aa825bf28de479ee
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:78
# 7884250551bc4056b7ddb9a67b21a905
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../creating_plugins.rst:66
# 61e5b6ba456e4aaa949a3dbb9794a8f8
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../creating_plugins.rst:72
# e46aac900c9b4ef78835652b42f77e26
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../creating_plugins.rst:77
# 7628f022fd1e4e5a93cb8e8101ab0a8d
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../creating_plugins.rst:81
# 2a92ea12d2d249e39257ca9995c03cd0
msgid "**__init__.py**"
msgstr ""

#: ../../creating_plugins.rst:81
# d3d015347cf742509c0b26f678d85df6
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../creating_plugins.rst:84
# f8a0a82326e94008bc4039d7fc4d6cc7
msgid "**main.py**"
msgstr ""

#: ../../creating_plugins.rst:84
# 1c70d1f285894dc3974006ce77ce07c3
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../creating_plugins.rst:87
# a6a4f0eb9279478fa1da27253b1280b4
msgid "**ui.py**"
msgstr ""

#: ../../creating_plugins.rst:87
# 1779584b4c4742cd8e01176b768ad703
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../creating_plugins.rst:90
# 4f54a5e04a194769bdcf7a9679fdb7a7
msgid "**images/icon.png**"
msgstr ""

#: ../../creating_plugins.rst:90
# 8c4148f1e85946fe8b1cc486d74e489b
msgid "The icon for this plugin"
msgstr ""

#: ../../creating_plugins.rst:93
# 668a110ee5ea424eaf3442a6412197e3
msgid "**about.txt**"
msgstr ""

#: ../../creating_plugins.rst:93
# 857d8497f50246cea6522a67854c98d1
msgid "A text file with information about the plugin"
msgstr ""

#: ../../creating_plugins.rst:98
# eeaedc4684df4b80b2c5ad648ce538bd
msgid "**translations**"
msgstr ""

#: ../../creating_plugins.rst:96
# 663c748b42d14d1c8004cbdee06a4a7b
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../creating_plugins.rst:100
# 2784e70ca7bb4259b6174ac98909418a
msgid "Now let's look at the code."
msgstr ""

#: ../../creating_plugins.rst:103
# 5ff1347bc8524e47a2093193398eb0f2
msgid "__init__.py"
msgstr ""

#: ../../creating_plugins.rst:105
# 7c0ea942722e4c83bdcef975d2f07936
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../creating_plugins.rst:110
# 13285cf157814acb97e53dd9ac1dd795
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling |app| that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../creating_plugins.rst:115
# 35809f43deb64d7097328156f5a0366f
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../creating_plugins.rst:118
# b4fe84ff975043428843b0bead4d26b8
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../creating_plugins.rst:121
# 9508e0ce6cb344f7b92a317e9cfb5467
msgid "ui.py"
msgstr ""

#: ../../creating_plugins.rst:123
# 867dc555b18042b0a2a67ff1fb14b21b
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../creating_plugins.rst:129
# c8b373a10d6340b2b86ceb89707555a2
msgid "main.py"
msgstr ""

#: ../../creating_plugins.rst:131
# 07b8a47ea68140e7bd71f4fd9e4cab92
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../creating_plugins.rst:137
# d1bbf77470784c3b818f0d9b74a53fc9
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../creating_plugins.rst:139
# 0f28fe16d9b84515980bf83ce8491446
msgid "|app|'s plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../creating_plugins.rst:146
# ccdf6308bdc54b5398d2ca0243249264
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:142
# c9f4ee4676384360823014415217a974
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../creating_plugins.rst:150
# 6380852e901f421ba314c7f55db5d70d
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:149
# 7562215eadb34285a28e9a03ac6473a6
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../creating_plugins.rst:153
# 3da84fd04377495fb73a391fdf9c7559
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../creating_plugins.rst:155
# 5a1e52bb3a9747a089bd9831d31bbe2e
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../creating_plugins.rst:166
# 2f4204ed377b4baea4f32516c9bd66c5
msgid "|app| has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../creating_plugins.rst:168
# 1ed8297bfbdb405cbde5db669850d3af
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../creating_plugins.rst:173
# 7660f6f7e458466ea213eda94abe2ae9
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../creating_plugins.rst:178
# ad50a4983c4f4d55be16e9c04054a4a3
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../creating_plugins.rst:184
# a5c13c0210b0462a9bb82a4d0c1adae8
msgid "Adding translations to your plugin"
msgstr ""

#: ../../creating_plugins.rst:186
# 13f68e9677904de8967b8d410bcd3f71
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../creating_plugins.rst:189
# 0846e22a3272497680240743c00c2022
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../creating_plugins.rst:194
# 43ecd58ba9c441c9af7ef16b4dffd041
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

#: ../../creating_plugins.rst:199
# 0e112415e6ce4d2fbeebd98fd03f2029
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../creating_plugins.rst:204
# ffddef0fd21245119565bee3283c4c26
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../creating_plugins.rst:206
# 42fc98c4fdb64812b770e03c2524d4b2
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../creating_plugins.rst:212
# eef5a4154e024844a306ec27568d0bac
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../creating_plugins.rst:218
# d4cfb6974b184384b0d42ce6c2fcfe46
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../creating_plugins.rst:221
# 537e8253a42c48799d98d5bae954d2a6
msgid "The plugin API"
msgstr ""

#: ../../creating_plugins.rst:223
# cb96f935f3b54a2a95eb42b5ad120b97
msgid "As you may have noticed above, a plugin in |app| is a class. There are different classes for the different types of plugins in |app|. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../creating_plugins.rst:226
# 7207b74215514ff881197ea6b3bdbe3e
msgid "Your plugin is almost certainly going to use code from |app|. To learn how to find various bits of functionality in the |app| code base, read the section on the |app| :ref:`code_layout`."
msgstr ""

#: ../../creating_plugins.rst:231
# 3589618617b94d7480b675b24a4a5279
msgid "Debugging plugins"
msgstr ""

#: ../../creating_plugins.rst:233
# cfb66104237d4c899977b415dac6ab58
msgid "The first, most important step is to run |app| in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../creating_plugins.rst:237
# d49254b6b9544abdb0d8288e8ab54c03
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../creating_plugins.rst:239
# e0ec83f4a4b64bf89753a528ec05fc73
msgid "When running from the command line, debug output will be printed to the console, when running from within |app| the output will go to a txt file."
msgstr ""

#: ../../creating_plugins.rst:241
# 3524e07ad9164648ae7efeb9cfa886b4
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of |app| using just this debugging technique."
msgstr ""

#: ../../creating_plugins.rst:243
# e2308c7504d24221b323ca0512d6ab02
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../creating_plugins.rst:248
# 62c83c619e634c1c9144174b1bdd289c
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in |app| and relaunch |app|."
msgstr ""

#: ../../creating_plugins.rst:251
# 2930bc8ca6b8487f9a19f2924905be62
msgid "More plugin examples"
msgstr ""

#: ../../creating_plugins.rst:253
# ea53bbae9f99461cbee92a009d74b9ab
msgid "You can find a list of many, sophisticated |app| plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../creating_plugins.rst:256
# 0d6c7c887a3541bf90dc3a5a5312effd
msgid "Sharing your plugins with others"
msgstr ""

#: ../../creating_plugins.rst:258
# a164e8cc535b4920931df582e895d194
msgid "If you would like to share the plugins you have created with other users of |app|, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

