# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.43.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-06 17:44+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../creating_plugins.rst:7
# 27a13434db9e461bbaadb76384b6e3fe
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

#: ../../creating_plugins.rst:9
# 1986a7dd90cf48158e201c4629034df0
msgid "|app| has a very modular design. Almost all functionality in |app| comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to |app| and so on. You can get a complete list of all the built-in plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../creating_plugins.rst:11
# 793a64aa93a3466d8dce401e4254f04c
msgid "Here, we will teach you how to create your own plugins to add new features to |app|."
msgstr ""

#: ../../creating_plugins.rst:0
# a03de1e1d84e430a9ba3bf749f4bde40
msgid "Contents"
msgstr ""

#: ../../creating_plugins.rst:18
# b0d481f2e9184be29e5c8b1d68153e86
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../creating_plugins.rst:21
# 337e95e9b56f421a97aabee92e2d7b26
msgid "Anatomy of a |app| plugin"
msgstr ""

#: ../../creating_plugins.rst:23
# f14a219d60704cb3afc170191345b4e4
msgid "A |app| plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../creating_plugins.rst:27
# f4f69c6e56964fc59635ee8cdd690e97
msgid "Suppose you have an installation of |app| that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by |app| to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../creating_plugins.rst:35
# ce7b5114836949bbaa7521571f0d4e61
msgid "That's all. To add this code to |app| as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../creating_plugins.rst:41
# a85b83dfffba4b6db9384c538da28edd
msgid "On OS X you have to first install the |app| command line tools, by going to :guilabel:`Preferences->Miscellaneous` and clicking the :guilabel:`Install command line tools` button."
msgstr ""

#: ../../creating_plugins.rst:45
# c3086a16904f42ca9a18b3781ebd53d5
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:48
# b8d04ddefda3465d979d921edeed5f90
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../creating_plugins.rst:53
# 3c13f241857546f2bdddb872656c7952
msgid "A User Interface plugin"
msgstr ""

#: ../../creating_plugins.rst:55
# cca4ee7d316540898b42784f2e94e114
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the |app| user interface and how to access and query the books database in |app|."
msgstr ""

#: ../../creating_plugins.rst:60
# 63ef9e84c218445190bc8bbf4737e425
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../creating_plugins.rst:62
# 5aeccb4d17ef40158126b2ac08ae03b8
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:78
# 76523c7092d8486597391d68496a68c1
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../creating_plugins.rst:66
# aca86509e83b4bddb13e6faaeeb210cd
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../creating_plugins.rst:72
# 7a8c83fd9195454da4577a8bfc746b80
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../creating_plugins.rst:77
# 051015a2ac7b49c8b3861c21cab99519
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../creating_plugins.rst:81
# 1e181cda3c6b483f88146efc8d29d16e
msgid "**__init__.py**"
msgstr ""

#: ../../creating_plugins.rst:81
# a2926c3dc64f4b59bd58400fd149ebcd
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../creating_plugins.rst:84
# 4bd4af04ab034d86bfb5a6f061a71198
msgid "**main.py**"
msgstr ""

#: ../../creating_plugins.rst:84
# 9555288b3cf041c3b2be2bcc24f733e5
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../creating_plugins.rst:87
# e0fe90ca347149eeaa32571d4d8f6987
msgid "**ui.py**"
msgstr ""

#: ../../creating_plugins.rst:87
# 2e139a5cb07240e3a607938f4c982756
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../creating_plugins.rst:90
# bc20ab4c6cd2491a9de196ccd0df4a26
msgid "**images/icon.png**"
msgstr ""

#: ../../creating_plugins.rst:90
# 31c2250e3fa44d59a82b3419612202d0
msgid "The icon for this plugin"
msgstr ""

#: ../../creating_plugins.rst:93
# 80b5421a77a34c99946ebd5427825402
msgid "**about.txt**"
msgstr ""

#: ../../creating_plugins.rst:93
# 4d573dd1f52b4a31b45823f55bcaaa4c
msgid "A text file with information about the plugin"
msgstr ""

#: ../../creating_plugins.rst:98
# a843e2c8883c4f69bdb52851d6bef5cb
msgid "**translations**"
msgstr ""

#: ../../creating_plugins.rst:96
# e318cf82c7954d6cbff693ec72300365
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../creating_plugins.rst:100
# 4b71d57312b349df8746e83d1b6d3dad
msgid "Now let's look at the code."
msgstr ""

#: ../../creating_plugins.rst:103
# 1ebeb83b24564344af30ae3befad398f
msgid "__init__.py"
msgstr ""

#: ../../creating_plugins.rst:105
# 94bd0231e0334b219f5bdac3a8fbf266
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../creating_plugins.rst:110
# e939ca3b42c741299c2d976e853f9110
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling |app| that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../creating_plugins.rst:115
# 31e8df2fad4c4375af0df1b68154bce6
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../creating_plugins.rst:118
# 7a3957e9355946ae83ba9387ce99e68c
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../creating_plugins.rst:121
# 3d462bd7edcb41ce88fa5213ce515900
msgid "ui.py"
msgstr ""

#: ../../creating_plugins.rst:123
# 605f47447bf14bdf9ca88ea5cdfa57ee
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../creating_plugins.rst:129
# a658ece8dd4c4b6fa12c11540c3f94dd
msgid "main.py"
msgstr ""

#: ../../creating_plugins.rst:131
# 4cbd8a1a490e43a5a85e1080656d45ac
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../creating_plugins.rst:137
# 8a05005b53004a4a9b6450d3147aefcc
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../creating_plugins.rst:139
# c0ad459467824275987b43899da4ec94
msgid "|app|'s plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../creating_plugins.rst:146
# c3646583762d48b0b35965b0aa810d6b
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:142
# d3344ca65c4645d88655605ed50692e6
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../creating_plugins.rst:150
# e7b0481f4b274639a151c738fb2c34bd
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:149
# 9372a0ae643143fc8c1d8d778682e5fe
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../creating_plugins.rst:153
# bed083f926b342f0b8004d9199af97da
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../creating_plugins.rst:155
# 56ad49f245bb412a9d1cc0f410b84a4a
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../creating_plugins.rst:166
# af795cd5e35f48b29e27a24e4938e774
msgid "|app| has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../creating_plugins.rst:168
# 52da0c8a2e6b40a487eea83b837955a3
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../creating_plugins.rst:173
# 546c0e172fec4999ac490b3b4626d35c
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../creating_plugins.rst:178
# 90463ea5747b41e39276261ee3b502ef
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../creating_plugins.rst:184
# 998052ccd56d444ea19c23a089ee9b7a
msgid "Adding translations to your plugin"
msgstr ""

#: ../../creating_plugins.rst:186
# 904b865ad6944cad9be0949d7438a60c
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../creating_plugins.rst:189
# f2a416eac6a94c77a0043920d804eb74
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../creating_plugins.rst:194
# 922859792e564251a7d0f98f4f23a0f1
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

#: ../../creating_plugins.rst:199
# 0a813a38c4bd464cb1f43469bebc2e8d
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../creating_plugins.rst:204
# 0a8ae05079f442d98db1aed32739b3d8
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../creating_plugins.rst:206
# 9aae37be935343328110204a44bbc8c9
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../creating_plugins.rst:212
# 5f4cf53308ee4c4b9c062710cb43db08
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../creating_plugins.rst:218
# 7c777a2d31ec476fa0511b1c64549389
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../creating_plugins.rst:221
# 91787e07c50e4c358b9bb73c97765268
msgid "The plugin API"
msgstr ""

#: ../../creating_plugins.rst:223
# 63e8d43151b64a6d9eeb6906c8a721dc
msgid "As you may have noticed above, a plugin in |app| is a class. There are different classes for the different types of plugins in |app|. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../creating_plugins.rst:226
# 2240cc49e2f345dca3617e319bd5b4ae
msgid "Your plugin is almost certainly going to use code from |app|. To learn how to find various bits of functionality in the |app| code base, read the section on the |app| :ref:`code_layout`."
msgstr ""

#: ../../creating_plugins.rst:231
# 986df809139f4955a55ab2c3f2792a25
msgid "Debugging plugins"
msgstr ""

#: ../../creating_plugins.rst:233
# 0c9388fde3054b8aa42e9cc7f137f3f1
msgid "The first, most important step is to run |app| in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../creating_plugins.rst:237
# 60a1348e817d4bc3949ddace279664b0
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../creating_plugins.rst:239
# 4ffdecb58a8e42b1b05734ef67fc4a29
msgid "When running from the command line, debug output will be printed to the console, when running from within |app| the output will go to a txt file."
msgstr ""

#: ../../creating_plugins.rst:241
# 0adac4cc6ca8458fbe74338d1e0f1a90
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of |app| using just this debugging technique."
msgstr ""

#: ../../creating_plugins.rst:243
# 292ff64b067749ba9eebd1000ba88c46
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../creating_plugins.rst:248
# 4dccf4fc97a64c21bf7f18ad89ea69d8
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in |app| and relaunch |app|."
msgstr ""

#: ../../creating_plugins.rst:251
# f485afc99d554a32a89f3b8aeefcb763
msgid "More plugin examples"
msgstr ""

#: ../../creating_plugins.rst:253
# 422c10a1fa3946f1904dec2626775671
msgid "You can find a list of many, sophisticated |app| plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../creating_plugins.rst:256
# cb389122ad1f42f58c156fd3c0627269
msgid "Sharing your plugins with others"
msgstr ""

#: ../../creating_plugins.rst:258
# 7833b276d1c249a497b19fd022c0a2ad
msgid "If you would like to share the plugins you have created with other users of |app|, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

