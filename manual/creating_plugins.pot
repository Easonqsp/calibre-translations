# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.43.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-05 22:19+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../creating_plugins.rst:7
# 80bf4d6ded754c7ab0153fa7cfada021
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

#: ../../creating_plugins.rst:9
# 5a6084975c414d1da0560b916f1ee886
msgid "|app| has a very modular design. Almost all functionality in |app| comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to |app| and so on. You can get a complete list of all the built-in plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../creating_plugins.rst:11
# 80e90307a946495483573fa6787a0a58
msgid "Here, we will teach you how to create your own plugins to add new features to |app|."
msgstr ""

#: ../../creating_plugins.rst:0
# 418015d44e0c4252a245f19537f71e44
msgid "Contents"
msgstr ""

#: ../../creating_plugins.rst:18
# 02a8b0abc81545688cf93e3ab129a19a
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../creating_plugins.rst:21
# 663a9cb727534ac882f0adb2eed8a2aa
msgid "Anatomy of a |app| plugin"
msgstr ""

#: ../../creating_plugins.rst:23
# 97b5b4bfcbea4e2faf2d8b2305a3eb2e
msgid "A |app| plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../creating_plugins.rst:27
# 985343735bf94e13aa8967ba79b49583
msgid "Suppose you have an installation of |app| that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by |app| to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../creating_plugins.rst:35
# 1bdf85ecbfc8448f92a59a8c14b8238c
msgid "That's all. To add this code to |app| as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../creating_plugins.rst:41
# 05e86a5bb518464280235df644e94a76
msgid "On OS X you have to first install the |app| command line tools, by going to :guilabel:`Preferences->Miscellaneous` and clicking the :guilabel:`Install command line tools` button."
msgstr ""

#: ../../creating_plugins.rst:45
# b16d32efdf7240d695037324d657b530
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:48
# 207ee53f4b524463bdb0acc0b5f13191
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../creating_plugins.rst:53
# 9e7b757ce0514d50a15683b8ce9979a8
msgid "A User Interface plugin"
msgstr ""

#: ../../creating_plugins.rst:55
# a49fe343bd7a42b0aa1d091b76a8a373
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the |app| user interface and how to access and query the books database in |app|."
msgstr ""

#: ../../creating_plugins.rst:60
# b91a58f8ef3842ec8cf43ff1f0a74e2d
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../creating_plugins.rst:62
# b6f34197399645ce8423ac69b716ae71
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:78
# e4443b3bda684139aee5e2fbd6f7125b
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../creating_plugins.rst:66
# 5635e73431be47d1a61394bf42d46444
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../creating_plugins.rst:72
# a5d0cb44fd854b6eb66760d2fbb1d853
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../creating_plugins.rst:77
# ba7e47a1ef8e49a18aa3205e227d49c1
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../creating_plugins.rst:81
# e6232ae5e30d4ad3bdef858d9b2b2c43
msgid "**__init__.py**"
msgstr ""

#: ../../creating_plugins.rst:81
# 140a7f7f6b64442aa13c4a1a4f42d085
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../creating_plugins.rst:84
# 37601b0c40084a2f9b6303397a8bda3f
msgid "**main.py**"
msgstr ""

#: ../../creating_plugins.rst:84
# a1986d5cab8645c8b16c3c43d59abfd6
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../creating_plugins.rst:87
# 95622f1105ad4ca288e44916a3e6a505
msgid "**ui.py**"
msgstr ""

#: ../../creating_plugins.rst:87
# baedabb1fc864cb083d787f12dc4c6bb
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../creating_plugins.rst:90
# a2ad5fc24b2d4131b74f10a3ee64625b
msgid "**images/icon.png**"
msgstr ""

#: ../../creating_plugins.rst:90
# ca988e8159b8409db99d5d95908e3c30
msgid "The icon for this plugin"
msgstr ""

#: ../../creating_plugins.rst:93
# 78484bbbbb0440d8b7cc212a3f2c0a2c
msgid "**about.txt**"
msgstr ""

#: ../../creating_plugins.rst:93
# f0ce09db6eee440b9443f1443c0399ee
msgid "A text file with information about the plugin"
msgstr ""

#: ../../creating_plugins.rst:98
# 05d3c13bbed74f26aef43f7d4242c5ea
msgid "**translations**"
msgstr ""

#: ../../creating_plugins.rst:96
# 16e1ef53a73f4b558e6a62aedd830ea1
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../creating_plugins.rst:100
# eb3ee9429b50406ca53b864794412966
msgid "Now let's look at the code."
msgstr ""

#: ../../creating_plugins.rst:103
# 86325a286b2b4dae9098cfcad302526e
msgid "__init__.py"
msgstr ""

#: ../../creating_plugins.rst:105
# b2296ef76add44a499ac9537d66e64ef
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../creating_plugins.rst:110
# 1f6694daae7b4eebaaac7c40c0ba422f
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling |app| that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../creating_plugins.rst:115
# d743404e79aa40bea6d44f1752b6f2ec
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../creating_plugins.rst:118
# 7dce4fe99ac442b7a7f03a468c8122d2
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../creating_plugins.rst:121
# 27804cb4fa6e400c85a271dd879f8f7f
msgid "ui.py"
msgstr ""

#: ../../creating_plugins.rst:123
# 1b1ffaa698924ccb936a01097e1ea20b
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../creating_plugins.rst:129
# 0526b38926d345a3aea75a584d2a57e5
msgid "main.py"
msgstr ""

#: ../../creating_plugins.rst:131
# 6a67753693724483ae6be60884e89e11
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../creating_plugins.rst:137
# eaffce0c057f4c1aa0c50c9827f003e5
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../creating_plugins.rst:139
# 6c73a3a0d35642e68221be88bf70d9c8
msgid "|app|'s plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../creating_plugins.rst:146
# a3201bf27c7d4e2c9f4f80a93fa32a64
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:142
# 5334890bbd9e4c6981488da0d697f7c5
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../creating_plugins.rst:150
# 88c4ae3de10b448984cb66c1a0581545
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:149
# 4ff7e250e57b4d76a0dd93451261c1a2
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../creating_plugins.rst:153
# ed4a16b167124443bbfc8235b8005623
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../creating_plugins.rst:155
# 4ab5d06a7cf14ff2a79ed564fa69f74d
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../creating_plugins.rst:166
# 2dd9e4741a2443bab3e35b4bbdddf745
msgid "|app| has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../creating_plugins.rst:168
# 3ebaa8b0820d41609ab4591df4b3841a
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../creating_plugins.rst:173
# 4699a658dc684dbf84a38fcbb0cab380
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../creating_plugins.rst:178
# dd0f6bc69cec443a962dfcc16911baf4
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../creating_plugins.rst:184
# d92a2b75d3a44ae584c1c96d90545385
msgid "Adding translations to your plugin"
msgstr ""

#: ../../creating_plugins.rst:186
# e4fa045126e64cb49692f4ad4c8c2fc2
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../creating_plugins.rst:189
# 067b411e259244aca0e9b40689d8316f
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../creating_plugins.rst:194
# cd85aab494884d2f87edbef1f38cf6dd
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

#: ../../creating_plugins.rst:199
# 2a9d9ff98e6841969ae5f1a90e8105d0
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../creating_plugins.rst:204
# 2740001885c244ef9e7edf24a184dc1c
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../creating_plugins.rst:206
# 21b4f5e519da4f97afc5be0f5da1bbe9
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../creating_plugins.rst:212
# d3a62795952f4cea8b0d1a858d9de92b
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../creating_plugins.rst:218
# fa2328ba6ffc46b7bb5a826671bd6fa6
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../creating_plugins.rst:221
# 9727b2597e614923931bf8421db3017d
msgid "The plugin API"
msgstr ""

#: ../../creating_plugins.rst:223
# ee19fe6857c4448e9d3302f22abc7ac9
msgid "As you may have noticed above, a plugin in |app| is a class. There are different classes for the different types of plugins in |app|. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../creating_plugins.rst:226
# b2403ede81bc46b6b82431d73b1458c8
msgid "Your plugin is almost certainly going to use code from |app|. To learn how to find various bits of functionality in the |app| code base, read the section on the |app| :ref:`code_layout`."
msgstr ""

#: ../../creating_plugins.rst:231
# bdaa8dd36b5e413f9093c0426ae2e785
msgid "Debugging plugins"
msgstr ""

#: ../../creating_plugins.rst:233
# be3e65c9bd4545499c4f8c43804f9e69
msgid "The first, most important step is to run |app| in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../creating_plugins.rst:237
# 5f0fedeb7c8a462f996353225fb3c23e
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../creating_plugins.rst:239
# 24b4d20b5c7e418a9ec9ec4183173edb
msgid "When running from the command line, debug output will be printed to the console, when running from within |app| the output will go to a txt file."
msgstr ""

#: ../../creating_plugins.rst:241
# 8783663b73564fecb021e805ea239815
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of |app| using just this debugging technique."
msgstr ""

#: ../../creating_plugins.rst:243
# 9cc1149572644cf3b4217299377acd74
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../creating_plugins.rst:248
# b5b8987d749c45a496a7a4e50c13e2f6
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in |app| and relaunch |app|."
msgstr ""

#: ../../creating_plugins.rst:251
# 51aa9713aa034f2b9b9573b4adb80d86
msgid "More plugin examples"
msgstr ""

#: ../../creating_plugins.rst:253
# 9fdbeb8fd12644cf90115ede9a7c98c5
msgid "You can find a list of many, sophisticated |app| plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../creating_plugins.rst:256
# 945b8fbdde424a5ba46f725601c9acee
msgid "Sharing your plugins with others"
msgstr ""

#: ../../creating_plugins.rst:258
# 611537639f944f7ab91feb78b5975bf6
msgid "If you would like to share the plugins you have created with other users of |app|, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

