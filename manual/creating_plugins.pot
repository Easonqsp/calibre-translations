# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.11.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-26 14:20+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:4
# 9f8c0b2ef99c4bb89c2273a9f02724d2
msgid "Writing your own plugins to extend calibre's functionality"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:6
# 5238b3cfeac64af3996303167f5f4d2c
msgid "calibre has a very modular design. Almost all functionality in calibre comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to calibre and so on. You can get a complete list of all the built-in plugins in calibre by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:8
# 97bda1699f454b999771e343c73b2ecf
msgid "Here, we will teach you how to create your own plugins to add new features to calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:0
# 1e7a92e75f8f40248792e3df3824a558
msgid "Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:15
# 22ee3233cbbb4d93ac6ca95953304c69
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:18
# 0587f4366a77466aa42718eac5ec964b
msgid "Anatomy of a calibre plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:20
# 3e2ff2eb9ff94333a7d7dd87499dcdea
msgid "A calibre plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:24
# c6b30593030c49db98e34159dda9fb0f
msgid "Suppose you have an installation of calibre that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by calibre to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:32
# da37fa2a5e4d4a4c8b79ea0eacf39465
msgid "That's all. To add this code to calibre as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:38
# fd826bef489144979f4ed192ceb2f8a8
msgid "On OS X, the command line tools are inside the calibre bundle, for example, if you installed calibre in :file:`/Applications` the command line tools are in :file:`/Applications/calibre.app/Contents/console.app/Contents/MacOS/`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:42
# b826babbb5bd4f0b9ed0e0399a426287
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:45
# 33e7a44d608349b2b0de453302c95a7b
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:50
# fe4225dc54404d5ca2cfafcbac1ec672
msgid "A User Interface plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:52
# 28c05ca7b7be4b4cb5657cb208229950
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the calibre user interface and how to access and query the books database in calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:57
# 6dbe7ad5118342a0a71c436d907279d4
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:61
# 4efedef0cdea4eb7b32303b1ccee2c47
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:77
# 5198c4102e7c4d68a5456ce449eb9a84
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:65
# 84891f48c2e44d74ad66892adfefb38f
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:71
# 0135213198324ab8ab42eb76df750e05
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:76
# 47f231418b5d438590d6934b9ce622e0
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:80
# fce74a9180344ed786298119895870a6
msgid "**__init__.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:80
# edba85fbab814a02bbd77a71e4f4af67
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:83
# e24ea15f6bf64242a89cb11b05b64305
msgid "**main.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:83
# 3e86cb8fb4c54e0eb3971e67da629367
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:86
# 5ffcd25604e24cda825147a2bc10d880
msgid "**ui.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:86
# fe1e50ecc107467ba7847590d0c351de
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:89
# 5908e2951c51480fac67b41f5e3594a8
msgid "**images/icon.png**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:89
# 25b8290b2ca948a4a93cf0d6fb9da68c
msgid "The icon for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:92
# 26010e71b0a4405ebe1bafbb9ea83667
msgid "**about.txt**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:92
# 42c610a58b7944549fd80d6cb2aaa232
msgid "A text file with information about the plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:97
# 519318c42c954e558725d2d2ee8e8056
msgid "**translations**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:95
# b78a28cd86954360add88e9556e3dc61
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:99
# 553c124df8724a88a4548997a1bb5f88
msgid "Now let's look at the code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:102
# 4c1490b34202440ebf628dbecfbe08a8
msgid "__init__.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:104
# 5d05ef9a7960420cb9d5d99eb811c9da
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:109
# 3a74c18f90004b8b8c00a5a4ae6bae8f
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since calibre has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling calibre that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:114
# 9474b90a0a0f440099c7e44660ef3f4a
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:117
# df76b39c673c4db0aba3535aa1acb4d9
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:120
# c1569ec667934bdf9b882601ce00b553
msgid "ui.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:122
# 5b0cd6a15f014fcda8b24be47e5e8f31
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:128
#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:212
# 40a95de6401045ca886ca6f78f5bd571
# d6bb0b9ba1d64d7c981a956aec17af87
msgid "main.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:130
# 0de244031f834629bdf893cbe4673f4f
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:136
# 3605b73b8e534e378ccb3b9f93fe1d73
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:138
# b2d392cf4438428a81b3cf50b0d279bf
msgid "calibre's plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:145
# 48238592695d4e8fbc6301351eaaebac
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:141
# 241eca8f6b384acf91c26a29972a8ad8
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:149
# 23edb805d0854bb0b12317d0917ed6c7
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:148
# 441accb77d8d4f62a10b6ed8bcb6bf9d
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:152
# 05729c5944da466b9d58036ecfaa0931
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:154
# 0e62219a5790442a8b858d41cf2b8c3b
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:165
# 35659760eb8049468ab064cf6106a8fc
msgid "calibre has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:167
# 8e141f1e0c024dea8b709073b55c5743
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:172
# 55ba14148d2e4ad588612e91fe503931
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:177
# b8b32a1999b84dbd9ee3aad05c00cc3d
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:184
# e97b6c50a7fa4657be52dac172c8970b
msgid "Edit Book plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:186
# 8ffd6348c81a472babb6e63e10282b1a
msgid "Now let's change gears for a bit and look at creating a plugin to add tools to the calibre book editor. The plugin is available here: `editor_demo_plugin.zip  <http://calibre-ebook.com/downloads/editor_demo_plugin.zip>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:190
# 32c662fceeb8416e8a5696844849ac57
msgid "The first step, as for all plugins is to create the import name empty txt file, as described :ref:`above <import_name_txt>`. We shall name the file ``plugin-import-name-editor_plugin_demo.txt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:194
# e8ff41e595814d489c2ec93dde530bb4
msgid "Now we create the mandatory ``__init__.py`` file that contains metadata about the plugin -- its name, author, version, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:200
# b11133d017244e76a6539f13ab4b60da
msgid "A single editor plugin can provide multiple tools each tool corresponds to a single button in the toolbar and entry in the :guilabel:`Plugins` menu in the editor. These can have sub-menus in case the tool has multiple related actions."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:204
# 721a4275656148b8b9033c0d39a2ac56
msgid "The tools must all be defined in the file ``main.py`` in your plugin. Every tool is a class that inherits from the :class:`calibre.gui2.tweak_book.plugin.Tool` class. Let's look at ``main.py`` from the demo plugin, the source code is heavily commented and should be self-explanatory. Read the API documents of the :class:`calibre.gui2.tweak_book.plugin.Tool` class for more details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:214
# fac7db9f2f0741ddb9fca926d9cfbbc5
msgid "Here we will see the definition of a single tool that will multiply all font sizes in the book by a number provided by the user. This tool demonstrates various important concepts that you will need in developing your own plugins, so you should read the (heavily commented) source code carefully."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:222
# 55bb1bc3b6cb49909b5486141e5baf86
msgid "Let's break down ``main.py``. We see that it defines a single tool, named *Magnify fonts*. This tool will ask the user for a number and multiply all font sizes in the book by that number."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:226
# 9d9686a77e7d472f9283dc2b3a0281bb
msgid "The first important thing is the tool name which you must set to some relatively unique string as it will be used as the key for this tool."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:229
# 41528b935af6418da057e66ac2015385
msgid "The next important entry point is the :meth:`calibre.gui2.tweak_book.plugin.Tool.create_action`. This method creates the QAction objects that appear in the plugins toolbar and plugin menu. It also, optionally, assigns a keyboard shortcut that the user can customize. The triggered signal from the QAction is connected to the ask_user() method that asks the user for the font size multiplier, and then runs the magnification code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:237
# 861db88dfeff48608a86876696a48e9a
msgid "The magnification code is well commented and fairly simple. The main things to note are that you get a reference to the editor window as ``self.gui`` and the editor *Boss* as ``self.boss``. The *Boss* is the object that controls the editor user interface. It has many useful methods, that are documented in the :class:`calibre.gui2.tweak_book.boss.Boss` class."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:243
# 67cd8f9475644fcbad8686d68d06ff8d
msgid "Finally, there is ``self.current_container`` which is a reference to the book being edited as a :class:`calibre.ebooks.oeb.polish.container.Container` object. This represents the book as a collection of its constituent HTML/CSS/image files and has convenience methods for doing many useful things. The container object and various useful utility functions that can be reused in your plugin code are documented in :ref:`polish_api`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:252
# 1546abf61b59469eb68e9a80e3c7203a
msgid "Adding translations to your plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:254
# 009984e6a647430a870e150706344687
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:257
# c3bd8656f6ce4196a05b4a4dc40ec41e
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:262
# fcb1cec942c345fba8f10fa2c05705d2
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://poedit.net/>`_ program for this."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:267
# 7b69ee27ad274e2482f845c789b4e7a7
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:272
# 75972f6f19a9492bb64960f708ae5f55
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:274
# 1d9acebf68b84681ab67de9db0d185aa
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:280
# df133c19fe124d87a343ae1218bcadbc
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:286
# 3ad29774839a4b638f3169daf198a265
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:289
# 25115c3592bb449ba92a2c52a9cfc213
msgid "The plugin API"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:291
# 9698481ce95046f5a47a7e185161f2c0
msgid "As you may have noticed above, a plugin in calibre is a class. There are different classes for the different types of plugins in calibre. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:294
# c77b33db123649ec9879e668c469f977
msgid "Your plugin is almost certainly going to use code from calibre. To learn how to find various bits of functionality in the calibre code base, read the section on the calibre :ref:`code_layout`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:299
# bb407adfb69e4e0489975d67e1fc4a94
msgid "Debugging plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:301
# adc8fcbff6c946b49ec80c3567facf88
msgid "The first, most important step is to run calibre in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:305
# 065ab060a7bf48849ac6cf747054d94d
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:307
# d6e6947a2e664674b61f595f7a0ba6a6
msgid "When running from the command line, debug output will be printed to the console, when running from within calibre the output will go to a txt file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:309
# ea467d8d63b6457ba7c51ac35ee49f7e
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of calibre using just this debugging technique."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:311
# ff8e7f74157e4f129e91c621fc6e1a50
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:316
# 9be1a2c6b83542a2b830ebf36160c9c0
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in calibre and relaunch calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:319
# 643f854200ad4109851b2cb1a243ff53
msgid "More plugin examples"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:321
# a44dc8d8ab44477bbf279400390f9bd8
msgid "You can find a list of many, sophisticated calibre plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:324
# 3574545ab58444f18f79e715bbea9b2c
msgid "Sharing your plugins with others"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:326
# 04a2703536724eeeb4efca7c0e3a4f3d
msgid "If you would like to share the plugins you have created with other users of calibre, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

