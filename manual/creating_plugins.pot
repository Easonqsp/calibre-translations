# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.11.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-21 08:24+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:4
# e64652401e1e422ea1d44b93425e6096
msgid "Writing your own plugins to extend calibre's functionality"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:6
# 93029acdce024a849f4f90a7e1a3f43a
msgid "calibre has a very modular design. Almost all functionality in calibre comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to calibre and so on. You can get a complete list of all the built-in plugins in calibre by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:8
# c21b1eaa3b1746ffb3cb7d527ea9d34a
msgid "Here, we will teach you how to create your own plugins to add new features to calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:0
# df4bd9bb5b384bc1af77a3fbc783268c
msgid "Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:15
# 22bca7d0052b453abaaa3af203863d60
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:18
# 0e1b23aeff294c108b8857215510cfc0
msgid "Anatomy of a calibre plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:20
# 722f326c0a144b85a4e12a4becda56e3
msgid "A calibre plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:24
# 40892b2179f04d439e4b3af702329592
msgid "Suppose you have an installation of calibre that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by calibre to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:32
# c666cacaf477411ead27589bcec3ea33
msgid "That's all. To add this code to calibre as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:38
# 4d5fcc189078404ebde99db52d348f78
msgid "On OS X, the command line tools are inside the calibre bundle, for example, if you installed calibre in :file:`/Applications` the command line tools are in :file:`/Applications/calibre.app/Contents/console.app/Contents/MacOS/`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:42
# 186f6ec84c9c4046b332c7b7d9d77fa7
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:45
# d05ec830591a4847a2895400e4676a2f
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:50
# 2403885228d54c24984b89c5b26048aa
msgid "A User Interface plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:52
# 1fd7e64ac24d402481b82de431040f62
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the calibre user interface and how to access and query the books database in calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:57
# 66fb26e70154440f9dd67fccae96f133
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:61
# fb0a100f3129452a982fc3cdcf84bc3d
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:77
# ad914dd0cf094220a516a9ef5fe62d55
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:65
# ce022b4fd65543eca5f8c2dce9d8f4e8
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:71
# 07d16c7d598a4068a8981251e1ef423d
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:76
# 994431cad0524ccf9655cc090c5ca9e3
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:80
# b2e7a500f5c3452fb72df8f5e1adedf9
msgid "**__init__.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:80
# 15501368dba7445cae61855cf2a957a0
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:83
# 565ccf4323894e3aba05cfef8a0b7c9c
msgid "**main.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:83
# 383aae24465e428991dcd82b4fb907f2
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:86
# 5af89465dddf4d2783d9d9a61749e04f
msgid "**ui.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:86
# 12ff62e685cb4f99b4bebc78fda61624
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:89
# d6131982fa344ba9bfa37c3e248bd945
msgid "**images/icon.png**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:89
# 2f4432ad34564625beca59d543196d2d
msgid "The icon for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:92
# 36652b3e4bb94bc298ab7158a1388991
msgid "**about.txt**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:92
# 5612454b90cb45dfa4e28507742693de
msgid "A text file with information about the plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:97
# 7182e2425bda4532854677812a039501
msgid "**translations**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:95
# e9bb908750604581a159e8d77b168540
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:99
# 79de05db0db14f119cd9f7b3c500cbcc
msgid "Now let's look at the code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:102
# 085591ba0f4b4feb97a3c4648e132e01
msgid "__init__.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:104
# 4a70889f1b4b420fa44ed0a1892738b8
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:109
# 98e8e63424c64c038396836c6614e765
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since calibre has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling calibre that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:114
# ab5cd3f5b7e641c78427c6bef2f687c4
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:117
# a39df2451a114bd4b4c0db42d1aaa2c0
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:120
# 49517250060a45c2a29852eb7d756f4f
msgid "ui.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:122
# cd9f531599b6421387ee281839fa8aa8
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:128
#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:212
# 6e95ad13c2f3425791a4e0af815a7b07
# a52465b9787342678fb5385e86c3a31d
msgid "main.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:130
# 86d704b2a22e486baae9865b53827138
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:136
# 2374cb35743344268f9a4704e5fbfac4
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:138
# 24d2eb776a3b4a5499d6f103eb40701f
msgid "calibre's plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:145
# 7f5b2f64a1b14f89aeaff35efa9c7962
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:141
# 78abeea2de1a4a228bf9c53e50a61779
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:149
# 1f373dbb2628446d85fcf38dfd5b4e2c
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:148
# a64b91d7d76b48cdb05f1ab1cf42a96f
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:152
# 129111c8adce48bbbb96321dda863617
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:154
# 872e6c041bd24a0e8c04edf16ea7ba75
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:165
# 4d611bfbb4e5474b899edc3c607b6f24
msgid "calibre has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:167
# 5a35897e35054cb3a9e56b1a90da862e
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:172
# d81750f1a91e481bafed532fd96a9b78
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:177
# c85fa434eba44c1d9befe2832b73b98c
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:184
# 417b53ad1c154aff9a5a25b3aa5af83c
msgid "Edit Book plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:186
# 09592da1adf74ed3a26e766195ae8d37
msgid "Now let's change gears for a bit and look at creating a plugin to add tools to the calibre book editor. The plugin is available here: `editor_demo_plugin.zip  <http://calibre-ebook.com/downloads/editor_demo_plugin.zip>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:190
# 0f261a9184964c318809fd43a0b36a58
msgid "The first step, as for all plugins is to create the import name empty txt file, as described :ref:`above <import_name_txt>`. We shall name the file ``plugin-import-name-editor_plugin_demo.txt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:194
# 11ff779ffd0c45b780c6870861b1aee0
msgid "Now we create the mandatory ``__init__.py`` file that contains metadata about the plugin -- its name, author, version, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:200
# 0effe949727d4917827ca8aa2a38a81e
msgid "A single editor plugin can provide multiple tools each tool corresponds to a single button in the toolbar and entry in the :guilabel:`Plugins` menu in the editor. These can have sub-menus in case the tool has multiple related actions."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:204
# 132787a0efc54c3cbfdb2d4fb67c1fb0
msgid "The tools must all be defined in the file ``main.py`` in your plugin. Every tool is a class that inherits from the :class:`calibre.gui2.tweak_book.plugin.Tool` class. Let's look at ``main.py`` from the demo plugin, the source code is heavily commented and should be self-explanatory. Read the API documents of the :class:`calibre.gui2.tweak_book.plugin.Tool` class for more details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:214
# e7f5921a7f0f4f0d804c1273c252fd91
msgid "Here we will see the definition of a single tool that will multiply all font sizes in the book by a number provided by the user. This tool demonstrates various important concepts that you will need in developing your own plugins, so you should read the (heavily commented) source code carefully."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:222
# e3aac2919ceb47328518e76e9d861947
msgid "Let's break down ``main.py``. We see that it defines a single tool, named *Magnify fonts*. This tool will ask the user for a number and multiply all font sizes in the book by that number."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:226
# 7ef36f2ea17a4e4ab3fa5ee77caca8cd
msgid "The first important thing is the tool name which you must set to some relatively unique string as it will be used as the key for this tool."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:229
# 7239b6460bad4747be558fad845da9a2
msgid "The next important entry point is the :meth:`calibre.gui2.tweak_book.plugin.Tool.create_action`. This method creates the QAction objects that appear in the plugins toolbar and plugin menu. It also, optionally, assigns a keyboard shortcut that the user can customize. The triggered signal from the QAction is connected to the ask_user() method that asks the user for the font size multiplier, and then runs the magnification code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:237
# cedea600ab384cce9251a861d887e026
msgid "The magnification code is well commented and fairly simple. The main things to note are that you get a reference to the editor window as ``self.gui`` and the editor *Boss* as ``self.boss``. The *Boss* is the object that controls the editor user interface. It has many useful methods, that are documented in the :class:`calibre.gui2.tweak_book.boss.Boss` class."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:243
# 926124e36d214be7b5b25693bb3a0309
msgid "Finally, there is ``self.current_container`` which is a reference to the book being edited as a :class:`calibre.ebooks.oeb.polish.container.Container` object. This represents the book as a collection of its constituent HTML/CSS/image files and has convenience methods for doing many useful things. The container object and various useful utility functions that can be reused in your plugin code are documented in :ref:`polish_api`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:252
# ee350ec6bde5415a923b2d3aae7d2df3
msgid "Adding translations to your plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:254
# 2151246384d8434d9517721c22010919
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:257
# 98daca3feade4c6dbaadd82f014308ad
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:262
# 796f0d8d4e0643aeba4fb7f5049a6e28
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://poedit.net/>`_ program for this."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:267
# 11a585dcb9f3427384c88106a5dfc88b
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:272
# 2d5fe1d66895426499df544be20db70f
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:274
# 8c7c09bc849f4695b61c1bdeaed0e29e
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:280
# 95e14abbd8d14c24b4bc057f0d05ed55
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:286
# 9e70eac5d45c445583d107fad970e037
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:289
# 0c03a00fcf1f434a9fa544192e9f0e0b
msgid "The plugin API"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:291
# 0f0f931ed0094e2ea36cebecfb0c3255
msgid "As you may have noticed above, a plugin in calibre is a class. There are different classes for the different types of plugins in calibre. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:294
# 437e8eeb3bdf4ce48c4c416ce4df214a
msgid "Your plugin is almost certainly going to use code from calibre. To learn how to find various bits of functionality in the calibre code base, read the section on the calibre :ref:`code_layout`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:299
# b1982f41be874b37af04998cf8fdf7d0
msgid "Debugging plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:301
# 993b1661dd094bc6a98d9d023158e889
msgid "The first, most important step is to run calibre in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:305
# 2b91e88d0c42411e9a59075524a568fa
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:307
# 51997940cf814f38a66949bbae7760fc
msgid "When running from the command line, debug output will be printed to the console, when running from within calibre the output will go to a txt file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:309
# 00e3c275037a4b7c88e6ba8efe354285
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of calibre using just this debugging technique."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:311
# 5a539c610d5b42f497d7cc933e53d5bc
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:316
# c3ed576d3d0f4ff08e69bc396a8f9415
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in calibre and relaunch calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:319
# 8c74f68bfb224688a895606751d98673
msgid "More plugin examples"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:321
# 691657d599744914b57f57d1fb314565
msgid "You can find a list of many, sophisticated calibre plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:324
# dae8b4e1e13749c29dc6ff7877df6047
msgid "Sharing your plugins with others"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:326
# 9b038866da494645b678905d43ace5db
msgid "If you would like to share the plugins you have created with other users of calibre, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

