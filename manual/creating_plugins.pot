# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.41.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-21 08:59+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../creating_plugins.rst:7
# 32e68b28ac6645b5bbfa67204db5a7b9
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

#: ../../creating_plugins.rst:9
# 4aa6fd567a90406790fbb514fa25f082
msgid "|app| has a very modular design. Almost all functionality in |app| comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to |app| and so on. You can get a complete list of all the built-in plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../creating_plugins.rst:11
# 47fc5660339b425d9d98c5a3bf1a9d0d
msgid "Here, we will teach you how to create your own plugins to add new features to |app|."
msgstr ""

#: ../../creating_plugins.rst:0
# 3d543d52a9b649a2bd9dac73266799c0
msgid "Contents"
msgstr ""

#: ../../creating_plugins.rst:18
# 6cef4a5b343d4948a9bf6aec9bfba227
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../creating_plugins.rst:21
# 495084b3724a4189b764b3530028b127
msgid "Anatomy of a |app| plugin"
msgstr ""

#: ../../creating_plugins.rst:23
# f33ee9ec963c4b77bfae1fb29d831539
msgid "A |app| plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../creating_plugins.rst:27
# d0604e7e8bd9409b9126543397da026e
msgid "Suppose you have an installation of |app| that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by |app| to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../creating_plugins.rst:35
# 9f78cddd7a4348aab14643170f4e17c7
msgid "That's all. To add this code to |app| as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../creating_plugins.rst:41
# 7f675c2d78374c778c7141c8bb3f1c71
msgid "On OS X you have to first install the |app| command line tools, by going to :guilabel:`Preferences->Miscellaneous` and clicking the :guilabel:`Install command line tools` button."
msgstr ""

#: ../../creating_plugins.rst:45
# 43ce9d6780e74a51b2650190faf68c19
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../creating_plugins.rst:48
# 060fe84e9f114cb7a760a2f5271ab0e0
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../creating_plugins.rst:53
# 4270a3300e7747c187e863e83f0950d5
msgid "A User Interface plugin"
msgstr ""

#: ../../creating_plugins.rst:55
# 47d683449d644b3e9d5b92426ea60539
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the |app| user interface and how to access and query the books database in |app|."
msgstr ""

#: ../../creating_plugins.rst:60
# 3198fb7769874a12afae607d8231bbda
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../creating_plugins.rst:62
# be3f946671394d20ade2688d618389ea
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../creating_plugins.rst:78
# 3860b4e6d4a542018bdd5a7c9e32295f
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../creating_plugins.rst:66
# d60374810ace43c09fe3499ea86774a8
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../creating_plugins.rst:72
# 5cd39835094449a9adc615106aff6093
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../creating_plugins.rst:77
# 8c49b29b63d6426a99c51db8c9f2b143
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../creating_plugins.rst:81
# 0ac1e7fd1cc24650bc56d75f3861d757
msgid "**__init__.py**"
msgstr ""

#: ../../creating_plugins.rst:81
# 623ceba384e8467a873eef9f4f3da72a
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../creating_plugins.rst:84
# fd28ba3e5c854a70808f490f6bdfb636
msgid "**main.py**"
msgstr ""

#: ../../creating_plugins.rst:84
# 913dbccc47814b4fa685ce85b03e4250
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../creating_plugins.rst:87
# fa375bdc26ec4ab59d24b880275b88ad
msgid "**ui.py**"
msgstr ""

#: ../../creating_plugins.rst:87
# e5c82f395d3b40849337f141b867c090
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../creating_plugins.rst:90
# af4ba3b67b8f4d9eb95fc22e08bf626e
msgid "**images/icon.png**"
msgstr ""

#: ../../creating_plugins.rst:90
# 65e203ad20ee4ead9e452a8fb5b8be56
msgid "The icon for this plugin"
msgstr ""

#: ../../creating_plugins.rst:93
# 853f690990b04b2ebc6569e5ae9f90ac
msgid "**about.txt**"
msgstr ""

#: ../../creating_plugins.rst:93
# aa44cccc922b4737816f4d79595bbf0f
msgid "A text file with information about the plugin"
msgstr ""

#: ../../creating_plugins.rst:98
# 8e3cac0960ac40c6ad30e5f6463971ed
msgid "**translations**"
msgstr ""

#: ../../creating_plugins.rst:96
# 931c0a5b65b24a9c99997c47c94a9ec7
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../creating_plugins.rst:100
# 7f6ae80016aa4f72825490b1c3698a0d
msgid "Now let's look at the code."
msgstr ""

#: ../../creating_plugins.rst:103
# 1ce6142371b041369237e8c98df8658f
msgid "__init__.py"
msgstr ""

#: ../../creating_plugins.rst:105
# c339be4e0d924268b3382ced666a28c9
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../creating_plugins.rst:110
# 3b3db569f82449419c5128b82cfcd6dc
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling |app| that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../creating_plugins.rst:115
# 0ec9f715768745bcb2cf9729a1e413c9
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../creating_plugins.rst:118
# e8d48545767c4c7593f4050cdd4ad2d0
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../creating_plugins.rst:121
# 258e014f2dbf4da38f29b78ef392ba88
msgid "ui.py"
msgstr ""

#: ../../creating_plugins.rst:123
# 48314bbbb9f34e08adf855895cf3d4da
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../creating_plugins.rst:129
# 2bf7fa1b67f44af586e6a49309965a2e
msgid "main.py"
msgstr ""

#: ../../creating_plugins.rst:131
# 29255b5714a049d19e1b681c440aab60
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../creating_plugins.rst:137
# b1fad527704a4704b6c5f06201c15a0e
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../creating_plugins.rst:139
# 10f0b0c21f7d4d288d3e00df2209d767
msgid "|app|'s plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../creating_plugins.rst:146
# 160df721eabc47228efe07e4aa47af10
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:142
# 69c098f6164841d890849acce9d4cfc3
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../creating_plugins.rst:150
# d5f9167d609b48f8b8ceb795198f85b3
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../creating_plugins.rst:149
# 5e7f98ecfb1d4cf1a791163c0c4addcc
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../creating_plugins.rst:153
# f3c85311d7624801bd396fa441e1ad0e
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../creating_plugins.rst:155
# 22e17d3991d24e188566cef41c5e2612
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../creating_plugins.rst:166
# 5e03b8f258e34e8f884413ad740798fc
msgid "|app| has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../creating_plugins.rst:168
# 1d44b1297df746429800fdb513241049
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../creating_plugins.rst:173
# 77379441bf6543dd835cc991e7997dbc
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../creating_plugins.rst:178
# bdecb3c90f844270b0bac426dd354403
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../creating_plugins.rst:184
# a2b25a6ee97146cbb1c1340f2c181204
msgid "Adding translations to your plugin"
msgstr ""

#: ../../creating_plugins.rst:186
# 8126abd56f984172ac9fbb904f054440
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../creating_plugins.rst:189
# e91a9300e9cf4fff832064c2d3e71822
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../creating_plugins.rst:194
# d28e77e89e4a4869a55af9ad5ca390da
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

#: ../../creating_plugins.rst:199
# 15bbab540755473bbb11943c3af44d81
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../creating_plugins.rst:204
# 6796c91fe20c40999df67f1d32984ab2
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../creating_plugins.rst:206
# a923d8e8318d4c7eb27d97271c92c94a
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../creating_plugins.rst:212
# 3249501d21f64370b006208bae3ebd11
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../creating_plugins.rst:218
# eeb4d033af2b4daea0bf1ef567aa601b
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../creating_plugins.rst:221
# e9eaefc96f3c4228b77bf38deac0470c
msgid "The plugin API"
msgstr ""

#: ../../creating_plugins.rst:223
# 52e599ee8d3b4fc482b1726e28157b24
msgid "As you may have noticed above, a plugin in |app| is a class. There are different classes for the different types of plugins in |app|. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../creating_plugins.rst:226
# 84b2670e819742e99361bfd99a2e3f94
msgid "Your plugin is almost certainly going to use code from |app|. To learn how to find various bits of functionality in the |app| code base, read the section on the |app| :ref:`code_layout`."
msgstr ""

#: ../../creating_plugins.rst:231
# 58be9ffc7c8947c58b34bc4653c4961f
msgid "Debugging plugins"
msgstr ""

#: ../../creating_plugins.rst:233
# bf8a6e9c27844611af0ece4a8a5d8b6e
msgid "The first, most important step is to run |app| in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../creating_plugins.rst:237
# 97af4af45b5141e5942f064ed3302900
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../creating_plugins.rst:239
# b8931e5e38d94da2b3dc1d0458b1809b
msgid "When running from the command line, debug output will be printed to the console, when running from within |app| the output will go to a txt file."
msgstr ""

#: ../../creating_plugins.rst:241
# 34b7700c4957450c9f004e90fcafe50a
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of |app| using just this debugging technique."
msgstr ""

#: ../../creating_plugins.rst:243
# 775955c21161439884c4b7074d15e6aa
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../creating_plugins.rst:248
# 95fe90c870524487ae26763c8396197d
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in |app| and relaunch |app|."
msgstr ""

#: ../../creating_plugins.rst:251
# 20960689be974afa893f6fe72688a157
msgid "More plugin examples"
msgstr ""

#: ../../creating_plugins.rst:253
# 42c46bbc029140ac8e6c17f69e6ede5b
msgid "You can find a list of many, sophisticated |app| plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../creating_plugins.rst:256
# 82b4fa7c71fa4bc1b6ce31fe122a5164
msgid "Sharing your plugins with others"
msgstr ""

#: ../../creating_plugins.rst:258
# 87a28884f4954ba989e55695503f9387
msgid "If you would like to share the plugins you have created with other users of |app|, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

