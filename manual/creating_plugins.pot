# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.21.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-13 08:58+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:4
# 10e4179917744f3a9f51fe16d495ec75
msgid "Writing your own plugins to extend calibre's functionality"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:6
# 6a1b0b4be7da46369f50a94db912a986
msgid "calibre has a very modular design. Almost all functionality in calibre comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to calibre and so on. You can get a complete list of all the built-in plugins in calibre by going to :guilabel:`Preferences->Plugins`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:8
# ba89337ba1ef4b9d899b62cbfa06832e
msgid "Here, we will teach you how to create your own plugins to add new features to calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:0
# 88c2b917464b47488bd418a3e536a357
msgid "Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:15
# dde5630b64f54ccf9c57e8251a748e35
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:18
# b94211ec9dfb455cb6e27bb7f1766678
msgid "Anatomy of a calibre plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:20
# e22de54ff22145a5b4b3f7db462646fb
msgid "A calibre plugin is very simple, it's just a zip file that contains some python code and any other resources like image files needed by the plugin. Without further ado, let's see a basic example."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:24
# 5965a19bc25e41e187bdfd26261a5d61
msgid "Suppose you have an installation of calibre that you are using to self publish various e-documents in EPUB and MOBI formats. You would like all files generated by calibre to have their publisher set as \"Hello world\", here's how to do it. Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin) and enter the following Python code into it:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:32
# 3ffb906090824a9993ff812ba7afad4d
msgid "That's all. To add this code to calibre as a plugin, simply run the following in the directory in which you created :file:`__init__.py`::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:38
# 8332f31aabbe42f18808337622a6c512
msgid "On OS X, the command line tools are inside the calibre bundle, for example, if you installed calibre in :file:`/Applications` the command line tools are in :file:`/Applications/calibre.app/Contents/console.app/Contents/MacOS/`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:42
# 814b48e52d124034952b502f0e9600db
msgid "You can download the Hello World plugin from `helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:45
# 1f5a2a8de2dc423c916dfa888ac03ba1
msgid "Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the converted book will have its publisher set to \"Hello World\". This is a trivial plugin, lets move on to a more complex example that actually adds a component to the user interface."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:50
# babbd1fdd78f4091999bae7d58b55a7e
msgid "A User Interface plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:52
# 2fafb231ee8748f681df6053668bbb22
msgid "This plugin will be spread over a few files (to keep the code clean). It will show you how to get resources (images or data files) from the plugin zip file, allow users to configure your plugin, how to create elements in the calibre user interface and how to access and query the books database in calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:57
# 9a44c4411b7246dd994955ef22220895
msgid "You can download this plugin from `interface_demo_plugin.zip <http://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:61
# 298d7b7fbcb8432eb3df0ce072093f61
msgid "The first thing to note is that this zip file has a lot more files in it, explained below, pay particular attention to ``plugin-import-name-interface_demo.txt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:77
# 11b32fbcb83c4c54aab8387d29f3f3fe
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:65
# b8861f6980e64602825fc903f9eb793f
msgid "An empty text file used to enable the multi-file plugin magic. This file must be present in all plugins that use more than one .py file. It should be empty and its filename must be of the form: plugin-import-name-**some_name**.txt The presence of this file allows you to import code from the .py files present inside the zip file, using a statement like::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:71
# 9f04750b12094ff897818919814c2337
msgid "The prefix ``calibre_plugins`` must always be present. ``some_name`` comes from the filename of the empty text file. ``some_module`` refers to  :file:`some_module.py` file inside the zip file. Note that this importing is just as powerful as regular python imports. You can create packages and subpackages of .py modules inside the zip file, just like you would normally (by defining __init__.py in each sub directory), and everything should Just Work."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:76
# 866e324aa51545af8eaf5f5ff1612406
msgid "The name you use for ``some_name`` enters a global namespace shared by all plugins, **so make it as unique as possible**. But remember that it must be a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:80
# aaf3f0704cd24ca5a3ff99d5fbb89a9d
msgid "**__init__.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:80
# 1e20ba4f78b14eae90291ea494b0e449
msgid "As before, the file that defines the plugin class"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:83
# 8b8342c445e14ac58d11a5482232a155
msgid "**main.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:83
# 6e9e3e09199445baa95bf4cb742273e3
msgid "This file contains the actual code that does something useful"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:86
# 6fd4bc307a32481a9f9c0fc44e5d0bbe
msgid "**ui.py**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:86
# 181241a06dfd42bc93edfce2893703a8
msgid "This file defines the interface part of the plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:89
# d5158a0b3fef4a6f941ee4911d7ec938
msgid "**images/icon.png**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:89
# 6508ff6fe66f46d28d8f22c90d8f23ff
msgid "The icon for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:92
# 193f7192c4484134ab55c7ebca56badf
msgid "**about.txt**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:92
# be2fedc3c3cb4239a79ac41bc9712fda
msgid "A text file with information about the plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:97
# 76fb48b37820406485388121d48461f5
msgid "**translations**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:95
# a934863ac7214bcbaa81e5637b220c56
msgid "A folder containing .mo files with the translations of the user interface of your plugin into different languages. See below for details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:99
# 5bc8deea3ada4e61a768f16037e3f007
msgid "Now let's look at the code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:102
# 380a8d551b254738ae3c3ccb7feb8e19
msgid "__init__.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:104
# 391ce52d4df842209ffa693a739ce6ed
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:109
# 9f1d51f124464172a831f683d591a927
msgid "The only noteworthy feature is the field :attr:`actual_plugin`. Since calibre has both command line and GUI interfaces, GUI plugins like this one should not load any GUI libraries in __init__.py. The actual_plugin field does this for you, by telling calibre that the actual plugin is to be found in another file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:114
# 3e58301feba44ea3accd579b8d68fe6b
msgid "Remember that for this to work, you must have a plugin-import-name-some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:117
# 81c8a06493c74978960bc5895b14a7bc
msgid "Also there are a couple of methods for enabling user configuration of the plugin. These are discussed below."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:120
# df238b6421284cd2b8e085ac9c91fd22
msgid "ui.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:122
# 99a2132819b84fab95bf2994ec8714fa
msgid "Now let's look at ui.py which defines the actual GUI plugin. The source code is heavily commented and should be self explanatory:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:128
#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:212
# 21d8dec83fed4763bbcb0596551a00f0
# ad63f263b23d41ebbb25c8e3b63f809f
msgid "main.py"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:130
# 6a2c12c7bdfd44e58c5386a2eb237126
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:136
# 23268d72d2f547d7b5c9bffa9a5a89ee
msgid "Getting resources from the plugin zip file"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:138
# 29862c5596c543c08bfb0635099b58b4
msgid "calibre's plugin loading system defines a couple of built-in functions that allow you to conveniently get files from the plugin zip file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:145
# a67f07b81ede4c09b1742d741a9c03df
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:141
# 7ad5df098b6f49d2b24864f366e243e1
msgid "This function should be called with a list of paths to files inside the zip file. For example to access the file icon.png in the directory images in the zip file, you would use: ``images/icon.png``. Always use a forward slash as the path separator, even on windows. When you pass in a single name, the function will return the raw bytes of that file or None if the name was not found in the zip file. If you pass in more than one name then it returns a dict mapping the names to bytes. If a name is not found, it will not be present in the returned dict."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:149
# cda243a3690f45198a322d3dd95b7366
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:148
# 07953019f5184568bb2fb17583527a5e
msgid "A convenience wrapper for get_resources() that creates QIcon objects from the raw bytes returned by get_resources. If a name is not found in the zip file the corresponding QIcon will be null."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:152
# 02262f48b93c42ab88f76d1c431c36f3
msgid "Enabling user configuration of your plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:154
# 608871894927429d919e54e77f5c205a
msgid "To allow users to configure your plugin, you must define three methods in your base plugin class, '**is_customizable**, **config_widget** and **save_settings** as shown below:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:165
# d9b669d69e774fa4a8baf4d1337f918a
msgid "calibre has many different ways to store configuration data (a legacy of its long history). The recommended way is to use the **JSONConfig** class, which stores your configuration information in a .json file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:167
# d92d5ca220ea4732ae41e79c3a44d8ed
msgid "The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:172
# 260e90b525dc4220962f901c9fa1edaa
msgid "The ``prefs`` object is now available throughout the plugin code by a simple::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:177
# d84a4c224ffc41889f9225ebbde5674b
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:184
# caa06c228d46435ea13730d08840ce48
msgid "Edit Book plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:186
# 829ecce113754f81b58a4ed81467f9b5
msgid "Now let's change gears for a bit and look at creating a plugin to add tools to the calibre book editor. The plugin is available here: `editor_demo_plugin.zip  <http://calibre-ebook.com/downloads/editor_demo_plugin.zip>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:190
# cc578300ebf247b7a0eb9c275494359e
msgid "The first step, as for all plugins is to create the import name empty txt file, as described :ref:`above <import_name_txt>`. We shall name the file ``plugin-import-name-editor_plugin_demo.txt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:194
# e3c4a908b338466fb5f9c96f30832ca3
msgid "Now we create the mandatory ``__init__.py`` file that contains metadata about the plugin -- its name, author, version, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:200
# d1dd69ca09ad47cea419a6dcbc101d36
msgid "A single editor plugin can provide multiple tools each tool corresponds to a single button in the toolbar and entry in the :guilabel:`Plugins` menu in the editor. These can have sub-menus in case the tool has multiple related actions."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:204
# f9ad3c7ed3b34ff2b18bba67aa91cbf4
msgid "The tools must all be defined in the file ``main.py`` in your plugin. Every tool is a class that inherits from the :class:`calibre.gui2.tweak_book.plugin.Tool` class. Let's look at ``main.py`` from the demo plugin, the source code is heavily commented and should be self-explanatory. Read the API documents of the :class:`calibre.gui2.tweak_book.plugin.Tool` class for more details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:214
# c73312c6a1ac41309555672b8553974e
msgid "Here we will see the definition of a single tool that will multiply all font sizes in the book by a number provided by the user. This tool demonstrates various important concepts that you will need in developing your own plugins, so you should read the (heavily commented) source code carefully."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:222
# 18b41abea1c54d3889721894dfc4a2e1
msgid "Let's break down ``main.py``. We see that it defines a single tool, named *Magnify fonts*. This tool will ask the user for a number and multiply all font sizes in the book by that number."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:226
# ba9c5d82bee54f6ab5d6f868738fec7c
msgid "The first important thing is the tool name which you must set to some relatively unique string as it will be used as the key for this tool."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:229
# 5d3169aa1a4243babff36467e21f1d7b
msgid "The next important entry point is the :meth:`calibre.gui2.tweak_book.plugin.Tool.create_action`. This method creates the QAction objects that appear in the plugins toolbar and plugin menu. It also, optionally, assigns a keyboard shortcut that the user can customize. The triggered signal from the QAction is connected to the ask_user() method that asks the user for the font size multiplier, and then runs the magnification code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:237
# 3572c267d7424c4e8ecf75265f2df8d7
msgid "The magnification code is well commented and fairly simple. The main things to note are that you get a reference to the editor window as ``self.gui`` and the editor *Boss* as ``self.boss``. The *Boss* is the object that controls the editor user interface. It has many useful methods, that are documented in the :class:`calibre.gui2.tweak_book.boss.Boss` class."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:243
# 07799089b75547f4bdbdba48bbf4240d
msgid "Finally, there is ``self.current_container`` which is a reference to the book being edited as a :class:`calibre.ebooks.oeb.polish.container.Container` object. This represents the book as a collection of its constituent HTML/CSS/image files and has convenience methods for doing many useful things. The container object and various useful utility functions that can be reused in your plugin code are documented in :ref:`polish_api`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:252
# a7a1218904bd4b3e817f4d5f541e0808
msgid "Adding translations to your plugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:254
# 25c4445914264a8f9770f0dbff515f97
msgid "You can have all the user interface strings in your plugin translated and displayed in whatever language is set for the main calibre user interface."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:257
# 363f3172e978453a96f2e2ad9defcafc
msgid "The first step is to go through your plugin's source code and mark all user visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:262
# 2a660cfed443478998b62aa06bbecc84
msgid "Then use some program to generate .po files from your plugin source code. There should be one .po file for every language you want to translate into. For example: de.po for German, fr.po for French and so on. You can use the `poedit <http://poedit.net/>`_ program for this."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:267
# 38058c23e5784b078bde05a0153d67a4
msgid "Send these .po files to your translators. Once you get them back, compile them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:272
# 20e5d913c4424a54b20c762e1b6d99d1
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:274
# b84d69e861f34673983e24ff144778de
msgid "The last step is to simply call the function `load_translations()` at the top of your plugin's .py files. For performance reasons you should only call this function in those .py files that actually have translatable strings. So in a typical User Interface plugin you would call it at the top of ``ui.py`` but not ``__init__.py``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:280
# ed64a75caf7f48c6a4fabbc37f2d7af6
msgid "You can test the translations of your plugins by changing the user interface language in calibre under Preferences->Look & Feel or by running calibre like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:286
# 638b6681658a464e9fe2cad84ca4cade
msgid "Replace ``de`` with the language code of the language you want to test."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:289
# 0c270182c77f46388255ea2192c171ac
msgid "The plugin API"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:291
# 0c189ae6c5184c5e993b7e7d7592c5b0
msgid "As you may have noticed above, a plugin in calibre is a class. There are different classes for the different types of plugins in calibre. Details on each class, including the base class of all plugins can be found in :ref:`plugins`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:294
# 4b2e1894e4b144ec914e5b36f4a75daf
msgid "Your plugin is almost certainly going to use code from calibre. To learn how to find various bits of functionality in the calibre code base, read the section on the calibre :ref:`code_layout`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:299
# d0e51dceec5f430eb3184aa28fb35f40
msgid "Debugging plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:301
# efc5e91f188045fbb98f6a8a6f5347db
msgid "The first, most important step is to run calibre in debug mode. You can do this from the command line with::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:305
# 972602d305cf4766a15e19de312393b0
msgid "Or from within calibre by right-clicking the preferences button or using the `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:307
# 1839d039449f4a94818a7523811a89e8
msgid "When running from the command line, debug output will be printed to the console, when running from within calibre the output will go to a txt file."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:309
# 787486e59b4d4a318bd264cae6b273db
msgid "You can insert print statements anywhere in your plugin code, they will be output in debug mode. Remember, this is python, you really shouldn't need anything more than print statements to debug ;) I developed all of calibre using just this debugging technique."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:311
# fb7017ce83af4ebc9479637a82779ea0
msgid "You can quickly test changes to your plugin by using the following command line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:316
# 4b80b7e73ba145c6be5207ddf074543e
msgid "This will shutdown a running calibre, wait for the shutdown to complete, then update your plugin in calibre and relaunch calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:319
# ffdb8d628c5a4fb28b17e25bb6b98a02
msgid "More plugin examples"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:321
# 1414db5df3ef49e188e0bb73e6114f26
msgid "You can find a list of many, sophisticated calibre plugins `here <http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:324
# 16adc49b98744dfbb262cd4ec7851f84
msgid "Sharing your plugins with others"
msgstr ""

#: ../../home/kovid/work/calibre/manual/creating_plugins.rst:326
# 2256ecc0382644dd9a4412b3a71392aa
msgid "If you would like to share the plugins you have created with other users of calibre, post your plugin in a new thread in the `calibre plugins forum <http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""

