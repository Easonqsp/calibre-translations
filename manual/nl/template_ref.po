# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-17 18:11+0530\n"
"PO-Revision-Date: 2014-06-18 03:40+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Dutch (http://www.transifex.com/projects/p/calibre/language/nl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: nl\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 6efec453731240908f167641cd0c7338
#: ../../template_ref.rst:6
msgid "Reference for all built-in template language functions"
msgstr ""

# 6523ce6c80f442e8acf955bcd2a599ef
#: ../../template_ref.rst:8
msgid ""
"Here, we document all the built-in functions available in the |app| template"
" language. Every function is implemented as a class in python and you can "
"click the source links to see the source code, in case the documentation is "
"insufficient. The functions are arranged in logical groups by type."
msgstr ""

# bd004eea62854d6fb9f5443acc5a6502
#: ../../template_ref.rst:17
msgid "Arithmetic"
msgstr ""

# 000f754700ef45b6b414f5c565681713
#: ../../template_ref.rst:20
msgid "add(x, y)"
msgstr ""

# 9df6c2211d4044c08f357c84348f14d1
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinAdd:1
msgid ""
"add(x, y) -- returns x + y. Throws an exception if either x or y are not "
"numbers."
msgstr "add(x, y) -- geeft x + y terug. Geeft een waarschuwing als x of y geen getal is."

# 81f5f4ec24cd43fd9686b66c82aba53a
#: ../../template_ref.rst:25
msgid "divide(x, y)"
msgstr ""

# 2f435944f0bb48dfbb902c378d211a79
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinDivide:1
msgid ""
"divide(x, y) -- returns x / y. Throws an exception if either x or y are not "
"numbers."
msgstr "divide(x, y) -- geeft x / y terug. Geeft een waarschuwing als x of y geen getal is."

# 0c331537b81a41168655faf4f5a1e91a
#: ../../template_ref.rst:30
msgid "multiply(x, y)"
msgstr ""

# 286fa57cbe4f49ab8849f50ab776d245
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinMultiply:1
msgid ""
"multiply(x, y) -- returns x * y. Throws an exception if either x or y are "
"not numbers."
msgstr "multiply(x, y) -- geeft x * y terug. Geeft een waarschuwing als x of y geen getal is."

# 05c7b9ea4f394387962a5219d41f302b
#: ../../template_ref.rst:35
msgid "subtract(x, y)"
msgstr ""

# 1709bf4f84d44d47bb91d2c47f5fe3e0
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSubtract:1
msgid ""
"subtract(x, y) -- returns x - y. Throws an exception if either x or y are "
"not numbers."
msgstr "subtract(x, y) -- geeft x - y terug. Geeft een waarschuwing als x of y geen getal is."

# 4a563aaf293749d1bde8388cf4b0bc67
#: ../../template_ref.rst:40
msgid "Boolean"
msgstr ""

# ffeb42d9f9334813977295cfd3ed2fac
#: ../../template_ref.rst:43
msgid "and(value, value, ...)"
msgstr ""

# 460f42bc0dd9433f93108080378d03b1
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinAnd:1
msgid ""
"and(value, value, ...) -- returns the string \"1\" if all values are not "
"empty, otherwise returns the empty string. This function works well with "
"test or first_non_empty. You can have as many values as you want."
msgstr "and(waarde, waarde, ...) -- geeft de string \"1\" terug indien alle waarden niet leeg zijn, anders wordt een lege string terug gegeven. Deze functie werkt goed met test of first_non_empty. U kunt een onbeperkt aantal waarden opgeven."

# 2e32489318e946eda70b1d8976eb286a
#: ../../template_ref.rst:48
msgid "not(value)"
msgstr ""

# c2cfbfbd69e64cab8c2bfe024c290cd9
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinNot:1
msgid ""
"not(value) -- returns the string \"1\" if the value is empty, otherwise "
"returns the empty string. This function works well with test or "
"first_non_empty. You can have as many values as you want."
msgstr "not(waarde) -- geeft de string \"1\" terug als de waarde leeg is, anders wordt een lege string terug gegeven. Deze functie werkt goed met test of first_non_empty. U kunt een onbeperkt aantal waarden opgeven."

# abdef009167947df95aa9779ed58c758
#: ../../template_ref.rst:53
msgid "or(value, value, ...)"
msgstr ""

# e88d2626115f4340b933ca3cf2952d7c
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinOr:1
msgid ""
"or(value, value, ...) -- returns the string \"1\" if any value is not empty,"
" otherwise returns the empty string. This function works well with test or "
"first_non_empty. You can have as many values as you want."
msgstr "or(waarde, waarde, ...) -- geeft de string \"1\" terug indien één of meerdere waarden niet leeg zijn, anders wordt een lege string terug gegeven. Deze functie werkt goed met test of first_non_empty. U kunt een onbeperkt aantal waarden opgeven."

# b15f94963c474e1498f9cf8c3ddb9668
#: ../../template_ref.rst:58
msgid "Date functions"
msgstr ""

# fbfb42bea98b4cad927052cbf9e65862
#: ../../template_ref.rst:61
msgid "days_between(date1, date2)"
msgstr ""

# 3b29ad94cc53484cb56f4a4c660d1c7a
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinDaysBetween:1
msgid ""
"days_between(date1, date2) -- return the number of days between date1 and "
"date2. The number is positive if date1 is greater than date2, otherwise "
"negative. If either date1 or date2 are not dates, the function returns the "
"empty string."
msgstr "days_between(datum1, datum2) -- geeft het aantal dagen tussen datum1 en datum2 terug. Het aantal is positief als datum1 groter is dan datum2, anders negatief. Als ofwel datum1 ofwel datum2 geen datum is, wordt een lege string terug gegeven."

# 54ea38bbef6f4816a6351e00ae7d1f48
#: ../../template_ref.rst:66
msgid "today()"
msgstr ""

# dcd1cf7fd0d048e49efaa3e1c9a66b00
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinToday:1
msgid ""
"today() -- return a date string for today. This value is designed for use in"
" format_date or days_between, but can be manipulated like any other string. "
"The date is in ISO format."
msgstr "today() -- geeft een datumstring voor vandaag. Deze waarde is gemaakt voor gebruik in de format_date of days_between, maar kan worden aangepast in iedere andere string. De datum is in ISO-formaat."

# 004fa17c02684cd19277bec2e38dc616
#: ../../template_ref.rst:71
msgid "Formatting values"
msgstr ""

# 3b4942dc5992491894ad3e0c61295260
#: ../../template_ref.rst:74
msgid "finish_formatting(val, fmt, prefix, suffix)"
msgstr ""

# 67b91c66948a42d18c0045ca1f8fa732
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFinishFormatting:1
msgid ""
"finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and"
" suffix to a value in the same way as done in a template like "
"`{series_index:05.2f| - |- }`. For example, the following program produces "
"the same output as the above template: program: "
"finish_formatting(field(\"series_index\"), \"05.2f\", \" - \", \" - \")"
msgstr "finish_formatting(val, fmt, prefix, suffix) -- toepassing van formaat, voor- en achtervoegsel op een waarde op dezelfde manier als in een sjabloon zoals`{series_index:05.2f| - |- }`. Bijvoorbeeld, het volgende programma produceert dezelfde uitvoer als bovenstaand sjabloon: programma: finish_formatting(field(\"series_index\"), \"05.2f\", \" - \", \" - \")"

# 1cc1bd8bb7514908bf7f0e7a101c2442
#: ../../template_ref.rst:79
msgid "format_date(val, format_string)"
msgstr ""

# d63408dfafdf4985852d5f51e73519d4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatDate:1
msgid ""
"format_date(val, format_string) -- format the value, which must be a date, "
"using the format_string, returning a string. The formatting codes are: d    "
": the day as number without a leading zero (1 to 31) dd   : the day as "
"number with a leading zero (01 to 31) ddd  : the abbreviated localized day "
"name (e.g. \"Mon\" to \"Sun\"). dddd : the long localized day name (e.g. "
"\"Monday\" to \"Sunday\"). M    : the month as number without a leading zero"
" (1 to 12). MM   : the month as number with a leading zero (01 to 12) MMM  :"
" the abbreviated localized month name (e.g. \"Jan\" to \"Dec\"). MMMM : the "
"long localized month name (e.g. \"January\" to \"December\"). yy   : the "
"year as two digit number (00 to 99). yyyy : the year as four digit number. h"
"    : the hours without a leading 0 (0 to 11 or 0 to 23, depending on am/pm)"
" hh   : the hours with a leading 0 (00 to 11 or 00 to 23, depending on "
"am/pm) m    : the minutes without a leading 0 (0 to 59) mm   : the minutes "
"with a leading 0 (00 to 59) s    : the seconds without a leading 0 (0 to 59)"
" ss   : the seconds with a leading 0 (00 to 59) ap   : use a 12-hour clock "
"instead of a 24-hour clock, with \"ap\" replaced by the localized string for"
" am or pm AP   : use a 12-hour clock instead of a 24-hour clock, with \"AP\""
" replaced by the localized string for AM or PM iso  : the date with time and"
" timezone. Must be the only format present"
msgstr "format_date(waarde, opmaak_string) -- opmaak van de waarde, welke een datum moet zijn, gebruik makend van de opmaak_string, geeft een string terug. De opmaak codes zijn: d    : de dag als nummer zonder voorloopnullen (1 t/m 31) dd   : de dag als nummer met voorloopnullen (01 t/m 31) ddd  : de afgekorte locale dag naam (bv. \"Maa\" t/m \"Zon\"). dddd : de lange locale dag naam (bv. \"Maandag\" t/m \"Zondag\"). M    : de maand als nummer zonder voorloopnullen (1 t/m 12). MM   : de maand als nummer met voorloopnullen (01 t/m 12) MMM  : de afgekorte locale maand naam (bv. \"Jan\" t/m \"Dec\"). MMMM : de lange locale maand naam (bv. \"Januari\" t/m \"December\"). yy   : Het jaartal als 2 getallen (00 t/m 99). yyyy : het jaartal als vier getallen. h    : de uren zonder voorloopnullen (0 t/m 11 of 0 t/m 23, afhankelijk van am/pm) hh   : de uren met voorloopnullen (00 t/m 11 of 00 t/m 23, afhankelijk van am/pm) m    : de minuten zonder voorloopnullen (0 t/m 59) mm   : de minuten met voorloopnullen (00 t/m 59) s    : de seconden zonder voorloopnullen (0 t/m 59) ss   : de seconden met voorloopnullen (00 to 59) ap   : gebruik een 12-uurs notatie in plaats van een 24-uurs notatie, met \"ap\" vervangen door de locale string voor am of pm AP   : gebruik een 12-uurs notatie in plaats van een 24-uurs notatie, met \"AP\" vervangen door door de locale string voor AM of PM iso  : de datum met tijd en tijdzone. Kan alleen los van de rest gebruikt worden"

# 1b6f70c05940466f946c8879bd253e9f
#: ../../template_ref.rst:84
msgid "format_number(v, template)"
msgstr ""

# 82c732926ac64a7b8240cf55179ccbc2
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatNumber:1
msgid ""
"format_number(v, template) -- format the number v using a python formatting "
"template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The "
"field_name part of the template must be a 0 (zero) (the \"{0:\" in the above"
" examples). See the template language and python documentation for more "
"examples. Returns the empty string if formatting fails."
msgstr "format_number(v, template) -- formatteer het getal v met een python formatting template, zoals \"{0:5.2f}\" of \"{0:,d}\" of \"${0:5,.2f}\". Het field_name-deel van de template moet een 0 (nul)  zijn (het \"{0:\"deel in het voorbeeld). Zie de template language en python-documentatie voor meer voorbeelden. Geeft een lege string terug als het formatteren mislukt."

# 1be5a800766443fbb5d0c40cdf741201
#: ../../template_ref.rst:89
msgid "human_readable(v)"
msgstr ""

# cc406c30e1d149debd8afb08188c494e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinHumanReadable:1
msgid ""
"human_readable(v) -- return a string representing the number v in KB, MB, "
"GB, etc."
msgstr "human_readable(w) -- geeft een string terug  die de waarde van getal w representeerd in KB, MB, GB, enz."

# 8b1fc7a43be947debeff0d0c6751c99e
#: ../../template_ref.rst:94
msgid "Get values from metadata"
msgstr ""

# 3331c442eaf44f06a9836e609d2e24ad
#: ../../template_ref.rst:97
msgid "approximate_formats()"
msgstr ""

# 9abe5fe6d31442a08a384d9e3d4828f1
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinApproximateFormats:1
msgid ""
"approximate_formats() -- return a comma-separated list of formats that at "
"one point were associated with the book. There is no guarantee that this "
"list is correct, although it probably is. This function can be called in "
"template program mode using the template \"{:'approximate_formats()'}\". "
"Note that format names are always uppercase, as in EPUB. This function works"
" only in the GUI. If you want to use these values in save-to-disk or send-"
"to-device templates then you must make a custom \"Column built from other "
"columns\", use the function in that column's template, and use that column's"
" value in your save/send templates"
msgstr "approximate_formats() -- geeft een komma-gescheiden lijst van formaten die ooit zijn geassocieerd met het boek. Het is niet gegarandeerd dat de lijst correct is, alhoewel dat wel waarschijnlijk is. Deze functie kan worden aangeroepen in sjabloon programma modus met gebruik van het sjabloon \"{:'approximate_formats()'}\". Merk op dat de namen van de formaten altijd in hoofdletters staan, zoals in EPUB. Deze functie werkt alleen in de GUI. als u deze waarden wilt gebruiken in bewaren-op-schijf of verzenden-naar-apparaat sjablonen dan moet een aangepaste \"Kolom gebouwd van andere kolommen\" gemaakt worden, met gebruik van de functies in dat kolomsjabloon en waarde van die kolom gebruiken in uw bewaren/versturen sjablonen"

# 777450b87610421cb704e10bf3de76b3
#: ../../template_ref.rst:102
msgid "booksize()"
msgstr ""

# 1d4ab3b49f3a420ca493355c49c1fe45
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinBooksize:1
msgid ""
"booksize() -- return value of the size field. This function works only in "
"the GUI. If you want to use this value in save-to-disk or send-to-device "
"templates then you must make a custom \"Column built from other columns\", "
"use the function in that column's template, and use that column's value in "
"your save/send templates"
msgstr "booksize() -- geeft de waarde van het grootte veld. Deze functie werkt alleen in de GUI. als u deze waarden wilt gebruiken in bewaren-op-schijf of verzenden-naar-apparaat sjablonen dan moet een aangepaste \"Kolom gebouwd van andere kolommen\" gemaakt worden, met gebruik van de functies in dat kolomsjabloon en waarde van die kolom gebruiken in uw bewaren/versturen sjablonen"

# 5895083e9e834d499fa1e27fbee1d764
#: ../../template_ref.rst:107
msgid "current_library_name()"
msgstr ""

# f9461dc008cd408a902f5747adcc098b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCurrentLibraryName:1
msgid ""
"current_library_name() -- return the last name on the path to the current "
"calibre library. This function can be called in template program mode using "
"the template \"{:'current_library_name()'}\"."
msgstr "current_library_name() -- Geeft de laatste naam in het pad van de huidige Calibre-bibliotheek. Deze functie kunt u aanroepen in sjabloon programmeer modus met \"{:'current_library_name()'}\"."

# 9f6bf5836b744f51b3f32e85b34a7637
#: ../../template_ref.rst:112
msgid "current_library_path()"
msgstr ""

# baff53eb0be840e7853655851b14eac3
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCurrentLibraryPath:1
msgid ""
"current_library_path() -- return the path to the current calibre library. "
"This function can be called in template program mode using the template "
"\"{:'current_library_path()'}\"."
msgstr "current_library_path() -- geef het pad naar de huidige calibre bibliotheek terug. Deze functie kan worden aangeroepen in sjabloon programmeer modus door het sjabloon \"{:'current_library_path()'}\" te gebruiken."

# 8821e40b3f954017a8ca21cde20082ff
#: ../../template_ref.rst:117
msgid "field(name)"
msgstr ""

# 17edf073a1ba4050a37fc1b1615dafcc
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinField:1
msgid "field(name) -- returns the metadata field named by name"
msgstr "field(naam) -- geeft de metadata van het veld naam"

# 4fb82b9a5963438ca1ac6aebaa92cf57
#: ../../template_ref.rst:122
msgid "formats_modtimes(date_format)"
msgstr ""

# fbeb78434f314d65b8cb8728689cfb45
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatsModtimes:1
msgid ""
"formats_modtimes(date_format) -- return a comma-separated list of "
"colon_separated items representing modification times for the formats of a "
"book. The date_format parameter specifies how the date is to be formatted. "
"See the date_format function for details. You can use the select function to"
" get the mod time for a specific format. Note that format names are always "
"uppercase, as in EPUB."
msgstr "formats_modtimes(date_format) -- geeft een komma-gescheiden lijst van colon_separated items terug die de wijzigingsdata van een boek weergeven. De date_format parameter geeft aan hoe de datum geformatteerd moet worden. Zie de functie date_format voor details. U kunt de select functie gebruiken om de wijzigingsdatum van een specifiek formaat op te vragen. Let op dat formaatnamen altijd in hoofdletters zijn, zoals EPUB."

# 2356f5942f9546a086b3bab5640c8de5
#: ../../template_ref.rst:127
msgid "formats_paths()"
msgstr ""

# 48017182f6ba404faea851dbe528d639
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatsPaths:1
msgid ""
"formats_paths() -- return a comma-separated list of colon_separated items "
"representing full path to the formats of a book. You can use the select "
"function to get the path for a specific format. Note that format names are "
"always uppercase, as in EPUB."
msgstr "formats_paths() -- retourneert een door komma's gescheiden lijst van door dubbele punt gescheiden items die het volledige pad naar de formaten van een boek geven. U kunt gebruik maken van de select-functie om het pad te krijgen voor een specifiek formaat. Merk op dat formaat namen altijd in hoofdletters zijn, zoals in EPUB."

# 05465c0966e94c92a7b0a96b20adcaeb
#: ../../template_ref.rst:132
msgid "formats_sizes()"
msgstr ""

# 95931191391e462892c35c98f9b1b856
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatsSizes:1
msgid ""
"formats_sizes() -- return a comma-separated list of colon_separated items "
"representing sizes in bytes of the formats of a book. You can use the select"
" function to get the size for a specific format. Note that format names are "
"always uppercase, as in EPUB."
msgstr "formats_sizes() -- geeft een komma-gescheiden lijst van colon_separated items terug die de grootte van formaten van een boek in bytes weergeven. U kunt de select functie gebruiken om de grootte van een specifiek formaat op te vragen. Let op dat formaatnamen altijd in hoofdletters zijn, zoals EPUB."

# b00d02e1795b4fbe90ea5776475a761e
#: ../../template_ref.rst:137
msgid "has_cover()"
msgstr ""

# 781a5894bd5b4856a7f8dcbcda7d94e1
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinHasCover:1
msgid ""
"has_cover() -- return Yes if the book has a cover, otherwise return the "
"empty string"
msgstr "has_cover() -- geeft Yes terug als het boek een omslag heeft, anders wordt een lege string terug gegeven"

# b75a10a1450a4cb2b6c16ec56322e3c1
#: ../../template_ref.rst:142
msgid "language_codes(lang_strings)"
msgstr ""

# f785f599cbf54d6f974473c93563da3b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLanguageCodes:1
msgid ""
"language_codes(lang_strings) -- return the language codes for the strings "
"passed in lang_strings. The strings must be in the language of the current "
"locale. Lang_strings is a comma-separated list."
msgstr "language_codes(language_strings) -- geeft de taalcodes terug voor de string die is meegegeven in lang_strings. De strings moeten in de huidig gebruikte vertaling worden ingevoerd. Lang_strings is een kommagescheiden lijst."

# b025efd1986e43f3b0ce733c4623f097
#: ../../template_ref.rst:147
msgid "language_strings(lang_codes, localize)"
msgstr ""

# a276fb070f274000a47e6b3f2856edfe
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLanguageStrings:1
msgid ""
"language_strings(lang_codes, localize) -- return the strings for the "
"language codes passed in lang_codes. If localize is zero, return the strings"
" in English. If localize is not zero, return the strings in the language of "
"the current locale. Lang_codes is a comma-separated list."
msgstr "language_strings(lang_codes, vertaling) -- geeft de strings voor de taalcode meegegeven in lang_codes. Indien vertaling nu is, wordt de string in het Engels terug gegeven. Als de vertaling niet nul is, geef de strings terug in de huidige vertaling. Lang_codes is een kommagescheiden lijst."

# bf4424a72334459aa952e96615dc3191
#: ../../template_ref.rst:152
msgid "ondevice()"
msgstr ""

# d2ea6ba2636a40eabb3275042efbc30a
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinOndevice:1
msgid ""
"ondevice() -- return Yes if ondevice is set, otherwise return the empty "
"string. This function works only in the GUI. If you want to use this value "
"in save-to-disk or send-to-device templates then you must make a custom "
"\"Column built from other columns\", use the function in that column's "
"template, and use that column's value in your save/send templates"
msgstr "ondevice() -- geeft Ja als ondevice is ingesteld, anders een lege tekenreeks. Deze functie werkt alleen in de GUI. als u deze waarden wilt gebruiken in bewaren-op-schijf of verzenden-naar-apparaat sjablonen dan moet een aangepaste \"Kolom gebouwd van andere kolommen\" gemaakt worden, met gebruik van de functies in dat kolomsjabloon en waarde van die kolom gebruiken in uw bewaren/versturen sjablonen"

# 2b756531a0bb44fc88e2c5132fe763b4
#: ../../template_ref.rst:157
msgid "raw_field(name)"
msgstr ""

# a8f2d1343f7b47178c82ec69d4a2655e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinRawField:1
msgid ""
"raw_field(name) -- returns the metadata field named by name without applying"
" any formatting."
msgstr "raw_field(naam) -- geeft de metadata van het veld naam, zonder enige opmaak toe te passen."

# 2bbf6f206c3d429bb6b7916a889c625e
#: ../../template_ref.rst:162
msgid "series_sort()"
msgstr ""

# 9d966ac3732842b1afb4b6504580592d
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSeriesSort:1
msgid "series_sort() -- return the series sort value"
msgstr "series_sort() -- Geeft de seriesorteerwaarde"

# c6812768bbd4466f88bdc1d1721c6ce1
#: ../../template_ref.rst:167
msgid "virtual_libraries()"
msgstr ""

# ab46577e080840178dde8de00517047e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinVirtualLibraries:1
msgid ""
"virtual_libraries() -- return a comma-separated list of virtual libraries "
"that contain this book. This function works only in the GUI. If you want to "
"use these values in save-to-disk or send-to-device templates then you must "
"make a custom \"Column built from other columns\", use the function in that "
"column's template, and use that column's value in your save/send templates"
msgstr "virtual_libraries() -- geeft een komma-gescheiden lijst van virtuele bibliotheken waarin dit boek voorkomt. Deze functie werkt alleen in de GUI. als u deze waarden wilt gebruiken in bewaren-op-schijf of verzenden-naar-apparaat sjablonen dan moet een aangepaste \"Kolom gebouwd van andere kolommen\" gemaakt worden, met gebruik van de functies in dat kolomsjabloon en waarde van die kolom gebruiken in uw bewaren/versturen sjablonen"

# 008daa4646b44e318266a356cf7f0444
#: ../../template_ref.rst:172
msgid "If-then-else"
msgstr ""

# 03440f763d8a420da913fb8c70aeaa5a
#: ../../template_ref.rst:175
msgid "contains(val, pattern, text if match, text if not match)"
msgstr ""

# bbc0becf60fd453588955fad57d30bd0
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinContains:1
msgid ""
"contains(val, pattern, text if match, text if not match) -- checks if field "
"contains matches for the regular expression `pattern`. Returns `text if "
"match` if matches are found, otherwise it returns `text if no match`"
msgstr "contains(waarde, patroon, tekst voor overeenkomst, tekst voor geen overeenkomst) -- controleert of veld waarde bevat overeenkomend met de regexp `patroon`. Geeft `tekst voor overeenkomst`  als een overeenkomst is gevonden, anders wordt `tekst voor geen overeenkomst` teruggegeven"

# 7d84358453e24a94b1cd68a45cea1347
#: ../../template_ref.rst:180
msgid "ifempty(val, text if empty)"
msgstr ""

# 4ffc93cd686148e297833674e4aa4c54
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinIfempty:1
msgid ""
"ifempty(val, text if empty) -- return val if val is not empty, otherwise "
"return `text if empty`"
msgstr "ifempty(waarde, tekst indien leeg) -- geeft waarde terug als het veld niet leeg is, anders 'tekst indien leeg'"

# f2aa4f636a4648a19802dd43fba9f8e1
#: ../../template_ref.rst:185
msgid "test(val, text if not empty, text if empty)"
msgstr ""

# 8c0a050303d04feeb534ac1be35ac8fa
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTest:1
msgid ""
"test(val, text if not empty, text if empty) -- return `text if not empty` if"
" the field is not empty, otherwise return `text if empty`"
msgstr "test(waarde, tekst indien niet leeg, tekst indien leeg) -- geeft `tekst indien niet leeg` terug als het veld niet leeg is, anders word `tekst indien leeg` teruggegeven"

# 7a77a4d33b21429f842a55d1a0be45f6
#: ../../template_ref.rst:190
msgid "Iterating over values"
msgstr ""

# 063f17dbb6ae403caab0ebbd2df35f00
#: ../../template_ref.rst:193
msgid "first_non_empty(value, value, ...)"
msgstr ""

# 47242b2974734833adc1f6fbfeef4e7d
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFirstNonEmpty:1
msgid ""
"first_non_empty(value, value, ...) -- returns the first value that is not "
"empty. If all values are empty, then the empty value is returned. You can "
"have as many values as you want."
msgstr "first_non_empty(waarde, waarde, ...) -- geeft de eerste waarde terug welke niet leeg is. Als alle waardes leeg zijn, zal een lege waarde worden terug gegeven. U kan zo veel waardes opgeven als u wilt."

# 65a9dc195e304e349f6f724ba84c95f7
#: ../../template_ref.rst:198
msgid "lookup(val, pattern, field, pattern, field, ..., else_field)"
msgstr ""

# f4e5ced8eed74fce88802ad2194ad8a7
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLookup:1
msgid ""
"lookup(val, pattern, field, pattern, field, ..., else_field) -- like switch,"
" except the arguments are field (metadata) names, not text. The value of the"
" appropriate field will be fetched and used. Note that because composite "
"columns are fields, you can use this function in one composite field to use "
"the value of some other composite field. This is extremely useful when "
"constructing variable save paths"
msgstr "lookup(waarde, patroon, veld, patroon, veld, ..., anders_veld) -- zoals switch, met het verschil dat de parameters namen zijn van (metadata)velden, geen tekst. De waarde van de geschikte velden zal worden binnengehaald en gebruikt. Nb. doordat samengestelde kolommen velden zijn, kunt u deze functie in een samengesteld veld gebruiken om de waarde van een ander samengesteld veld te gebruiken. Dit is uitermate geschikt als u variabele opslaglocaties wilt opstellen"

# 81382ed56c9d4ef0bff0e626a19e7e2b
#: ../../template_ref.rst:203
msgid "switch(val, pattern, value, pattern, value, ..., else_value)"
msgstr ""

# ebe66236c16a44c18e48116f1572f00f
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSwitch:1
msgid ""
"switch(val, pattern, value, pattern, value, ..., else_value) -- for each "
"`pattern, value` pair, checks if the field matches the regular expression "
"`pattern` and if so, returns that `value`. If no pattern matches, then "
"else_value is returned. You can have as many `pattern, value` pairs as you "
"want"
msgstr "switch(inhoud, patroon, waarde, patroon, waarde, ..., waarde_anders) -- voor ieder `patroon, waarde` paar, controleer of het veld overeen komt met de reguliere expressie in 'patroon' en geef deze waarde terug als dit klopt. Als geen enkel patroon overeen komt, dan wordt waarde_anders terug gegeven. U kunt een onbeperkt aantal 'patroon, waarde'-paren opgeven"

# b7e63762e0b94b149353432e2bbfc817
#: ../../template_ref.rst:208
msgid "List lookup"
msgstr ""

# b0519240a97844b8bbf808ef3d09abe8
#: ../../template_ref.rst:211
msgid "identifier_in_list(val, id, found_val, not_found_val)"
msgstr ""

# ef833871df7648f295044d287c4cc045
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinIdentifierInList:1
msgid ""
"identifier_in_list(val, id, found_val, not_found_val) -- treat val as a list"
" of identifiers separated by commas, comparing the string against each value"
" in the list. An identifier has the format \"identifier:value\". The id "
"parameter should be either \"id\" or \"id:regexp\". The first case matches "
"if there is any identifier with that id. The second case matches if the "
"regexp matches the identifier's value. If there is a match, return "
"found_val, otherwise return not_found_val."
msgstr "identifier_in_list(waarde, id, waarde_gevonden, geen_waarde_gevonden) -- behandelt ‘waarde’ als een lijst van identifiers, gescheiden door komma's, en vergelijkt de string met elke waarde in de lijst. Een identifier heeft het formaat \"identifier:waarde\". De id-parameter moet \"id\" of \"id:regexp\" zijn. In het eerste geval is er een overeenkomst als er een identifier met een dergelijk id bestaat. In het tweede geval is er alleen een overeenkomst als de regexp met de waarde van de identifier overeenkomt. Als er een overeenkomst is wordt waarde_gevonden teruggegeven, anders geen_waarde_gevonden."

# 7a76a931f6a84fb29fb3aad768c930ad
#: ../../template_ref.rst:216
msgid "in_list(val, separator, pattern, found_val, not_found_val)"
msgstr ""

# e00c93a3d4454aa2827e9f1509c681ab
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinInList:1
msgid ""
"in_list(val, separator, pattern, found_val, not_found_val) -- treat val as a"
" list of items separated by separator, comparing the pattern against each "
"value in the list. If the pattern matches a value, return found_val, "
"otherwise return not_found_val."
msgstr "in_list(waarde, scheiding, patroon, waarde_gevonden, geen_waarde_gevonden) -- behandel waarde als een lijst van items, gescheiden door scheiding, vergelijk patroon met ieder item uit de lijst. Als het patroon overeenkomt met een item, geef waarde_gevonden terug, anders geef geen_waarde_gevonden terug."

# 35a2521b89994869abe8aba908b8a3e6
#: ../../template_ref.rst:221
msgid "list_item(val, index, separator)"
msgstr ""

# 2893b066bbd84addacbd16830729fd1c
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListitem:1
msgid ""
"list_item(val, index, separator) -- interpret the value as a list of items "
"separated by `separator`, returning the `index`th item. The first item is "
"number zero. The last item can be returned using `list_item(-1,separator)`. "
"If the item is not in the list, then the empty value is returned. The "
"separator has the same meaning as in the count function."
msgstr "list_item(waarde, index, scheiding) -- verwerk de waarde als een lijst van items gescheiden door 'scheiding' en geef het 'index'de item terug. Het eerste item heeft index nul. Het laatste item kan worden teruggegeven door gebruik te maken van `list_item(-1,scheiding)`. Als het item niet in de lijst zit zal een lege waarde worden terug gegeven. De scheiding heeft de zelfde functie als in de count functie."

# 8a81519cfeb84e628be943f330f363f2
#: ../../template_ref.rst:226
msgid "select(val, key)"
msgstr ""

# ea68c1fdb12b440cabcce2bdd404a32d
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSelect:1
msgid ""
"select(val, key) -- interpret the value as a comma-separated list of items, "
"with the items being \"id:value\". Find the pair with the id equal to key, "
"and return the corresponding value."
msgstr "select(waarde, sleutel) -- interpreteerd de waarde als een komma-gescheden lijst van items met de items in de vorm \"id:waarde\". Vind het paar met het id gelijk aan sleuten en geef de corresponderende waarde terug."

# 90b4d21d6e514347b21a2c7618417966
#: ../../template_ref.rst:231
msgid "str_in_list(val, separator, string, found_val, not_found_val)"
msgstr ""

# 43c1423cbedb408ca75cf7cadbb2b7bc
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrInList:1
msgid ""
"str_in_list(val, separator, string, found_val, not_found_val) -- treat val "
"as a list of items separated by separator, comparing the string against each"
" value in the list. If the string matches a value, return found_val, "
"otherwise return not_found_val. If the string contains separators, then it "
"is also treated as a list and each value is checked."
msgstr "str_in_list(waarde, scheiding, string, waarde_gevonden, geen_waarde_gevonden) -- behandelt ‘waarde’ als een lijst items die door ‘scheiding’ gescheiden worden, en vergelijkt de string met elke waarde in de lijst. Als de string met een waarde overeenkomt wordt waarde_gevonden teruggegeven, anders geen_waarde_gevonden. Als de string zelf scheidingen bevat wordt deze als een lijst beschouwd, en worden alle waardes in de lijst gecontroleerd."

# 528b96c84d9742428ecc53535b61f646
#: ../../template_ref.rst:236
msgid "List manipulation"
msgstr ""

# 6095515bcdca429e95151005f50decfb
#: ../../template_ref.rst:239
msgid "count(val, separator)"
msgstr ""

# aa87da5e3fad4845a55b4cc569cd01d4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCount:1
msgid ""
"count(val, separator) -- interprets the value as a list of items separated "
"by `separator`, returning the number of items in the list. Most lists use a "
"comma as the separator, but authors uses an ampersand. Examples: "
"{tags:count(,)}, {authors:count(&)}"
msgstr "count(waarde, scheiding) -- interpreteert de waarde als een lijst van termen gescheiden door 'scheiding', geeft het aantal items in de lijst terug. Meeste lijsten gebruiken een komma als scheiding maar auteurs gebruiken een ampersand (&). Voorbeeld: {tags:count{,}}, {authors:count{&}}"

# 7fd83219f5a7434684694527d8d42165
#: ../../template_ref.rst:244
msgid "list_difference(list1, list2, separator)"
msgstr ""

# 21c8195b9bfd41838fec187bfa05fd7a
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListDifference:1
msgid ""
"list_difference(list1, list2, separator) -- return a list made by removing "
"from list1 any item found in list2, using a case-insensitive compare. The "
"items in list1 and list2 are separated by separator, as are the items in the"
" returned list."
msgstr "list_difference(lijst1, lijst2, scheiding) -- geeft een lijst, gemaakt door alle items in lijst2 uit lijst1 te verwijderen, waarbij niet hoofdlettergevoelig wordt vergeleken.  De items in lijst1 en lijst2 worden gescheiden door scheiding, zo ook de items in de teruggegeven lijst."

# 4676aa2851b34a61b53a05f6ce69e40b
#: ../../template_ref.rst:249
msgid "list_equals(list1, sep1, list2, sep2, yes_val, no_val)"
msgstr ""

# 0e24b0fada7f4ccd887d143f134ca378
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListEquals:1
msgid ""
"list_equals(list1, sep1, list2, sep2, yes_val, no_val) -- return yes_val if "
"list1 and list2 contain the same items, otherwise return no_val. The items "
"are determined by splitting each list using the appropriate separator "
"character (sep1 or sep2). The order of items in the lists is not relevant. "
"The compare is case insensitive."
msgstr "list_equals(lijst1, scheiding1, lijst2, scheiding2, ja_waarde, nee_waarde) -- geeft ja_waarde als antwoord wanneer lijst1 en lijst2 het zelfde items bevatten, zo niet, dan wordt het antwoord nee_waarde. De items worden bepaald door iedere lijst te splitsen door het juiste scheidingsteken te gebruiken (scheiding1 of scheiding2). De volgorde van items in de lijst is niet relevant. De vergelijking is ongevoelig voor hoofd- en kleine letters."

# e1273a3a78d6449bbaec067787a22e67
#: ../../template_ref.rst:254
msgid "list_intersection(list1, list2, separator)"
msgstr ""

# 984fb9da3d6e4d78b799cc01453feef9
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListIntersection:1
msgid ""
"list_intersection(list1, list2, separator) -- return a list made by removing"
" from list1 any item not found in list2, using a case-insensitive compare. "
"The items in list1 and list2 are separated by separator, as are the items in"
" the returned list."
msgstr "list_intersection(lijst1, lijst2, scheiding) -- geeft een lijst, gemaakt door alle items die niet in lijst2 aanwezig zijn uit lijst1 te verwijderen, waarbij niet hoofdlettergevoelig wordt vergeleken.  De items in lijst1 en lijst2 worden gescheiden door scheiding, zo ook de items in de teruggegeven lijst."

# 7fb1e208f67e4682977448adc852ca3f
#: ../../template_ref.rst:259
msgid "list_re(src_list, separator, search_re, opt_replace)"
msgstr ""

# 549313286d1b4cf6a4d9da8c7e1356bf
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListRe:1
msgid ""
"list_re(src_list, separator, search_re, opt_replace) -- Construct a list by "
"first separating src_list into items using the separator character. For each"
" item in the list, check if it matches search_re. If it does, then add it to"
" the list to be returned. If opt_replace is not the empty string, then apply"
" the replacement before adding the item to the returned list."
msgstr "list_re(bron_lijst, scheidingsteken, zoek_re, opt_vervang) -- maakt een lijst door de bon_lijst te scheiden in items, gebruikmakend van het schiedingsteken. Voor ietder item in de lijst wordt gecontroleerd of het overeenkomst met zoek_re. Als dat zo is, wordt het toegevoerd aan de terug te geven lijst. Als opt_vervang geen lege string is, wordt deze vervanging toegepast voor het item wordt toegevoegd aan de teruggegeven lijst."

# f5931ae9a10949139ae6eefd72c3c9bd
#: ../../template_ref.rst:264
msgid "list_sort(list, direction, separator)"
msgstr ""

# 4a06e8b1a36045b4b07e0ed449d89005
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListSort:1
msgid ""
"list_sort(list, direction, separator) -- return list sorted using a case-"
"insensitive sort. If direction is zero, the list is sorted ascending, "
"otherwise descending. The list items are separated by separator, as are the "
"items in the returned list."
msgstr "list_sort(lijst, richting, scheiding) -- geef een lijst, gesorteerd zonder op hoofdletters te letten. Als richting nul is wordt de lijst oplopend gesorteerd, anders aflopend. De items in lijst worden gescheiden door scheiding, zo ook de items in de teruggegeven lijst."

# e5b0a088b7734b59a970c3df0cb8d714
#: ../../template_ref.rst:269
msgid "list_union(list1, list2, separator)"
msgstr ""

# d49bb9de35c440338ce4bd32aeec660d
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListUnion:1
msgid ""
"list_union(list1, list2, separator) -- return a list made by merging the "
"items in list1 and list2, removing duplicate items using a case-insensitive "
"compare. If items differ in case, the one in list1 is used. The items in "
"list1 and list2 are separated by separator, as are the items in the returned"
" list."
msgstr "lists_union(lijst1, lijst2, scheiding) -- geeft een lijst gemaakt door het samenvoegen van de items in lijst1 en lijst2, waarbij dubbels worden verwijderd (hoofdletterongevoelig). Als items verschillen in hoofdletter-gebruik, zal de versie van lijst1 gebruikt worden. De items in lijst1 en lijst2 worden gescheiden door scheiding, zo ook de items in de teruggegeven lijst."

# 5969a773ad0c465ca27bcf6d420ca277
#: ../../template_ref.rst:274
msgid "subitems(val, start_index, end_index)"
msgstr ""

# db9ae387ba6940bb90a0958ca1531800
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSubitems:1
msgid ""
"subitems(val, start_index, end_index) -- This function is used to break "
"apart lists of items such as genres. It interprets the value as a comma-"
"separated list of items, where each item is a period-separated list. Returns"
" a new list made by first finding all the period-separated items, then for "
"each such item extracting the `start_index` to the `end_index` components, "
"then combining the results back together. The first component in a period-"
"separated list has an index of zero. If an index is negative, then it counts"
" from the end of the list. As a special case, an end_index of zero is "
"assumed to be the length of the list. Example using basic template mode and "
"assuming a #genre value of \"A.B.C\": {#genre:subitems(0,1)} returns \"A\". "
"{#genre:subitems(0,2)} returns \"A.B\". {#genre:subitems(1,0)} returns "
"\"B.C\". Assuming a #genre value of \"A.B.C, D.E.F\", {#genre:subitems(0,1)}"
" returns \"A, D\". {#genre:subitems(0,2)} returns \"A.B, D.E\""
msgstr "subitems(val, start_index, end_index) -- Deze functie wordt gebruikt om lijsten van items zoals genres op te delen. Het interpreteert de waarde als een door komma's gescheiden lijst met items, waarbij elk item een door punten gescheiden lijst is. Geeft een nieuwe lijst door eerst alle met punten gescheiden items  te vinden, vervolgens voor elk item de waarde van de `start_index` tot `end_index` componenten te extraheren, en dan de resultaten wederom terug te combineren. De eerste component in een punt gescheiden lijst heeft een index van nul. Als een index negatief is, dan telt het vanaf het einde van de lijst. Als speciaal geval wordt een end_index van nul verondersteld de lengte van de lijst te zijn. Voorbeeld met gebruik van de basis sjabloon mode en uitgaande van een #genre waarde van \"A.B.C\": {#genre:subitems(0,1)} retourneert \"A\". {#genre:subitems(0,2)} retourneert \"A.B\". {#genre:subitems(1,0)} retourneert \"B.C\". Uitgaande van een  #genre waarde van \"A.B.C, D.E.F\", {#genre:subitems(0,1)} retourneert \"A, D\". {#genre:subitems(0,2)} retourneert \"A.B, D.E\""

# f6172e2faf5b4bcb9c1a4f7a1939f161
#: ../../template_ref.rst:279
msgid "sublist(val, start_index, end_index, separator)"
msgstr ""

# ad3cafc60fe144c583aeb8eb73a25db4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSublist:1
msgid ""
"sublist(val, start_index, end_index, separator) -- interpret the value as a "
"list of items separated by `separator`, returning a new list made from the "
"`start_index` to the `end_index` item. The first item is number zero. If an "
"index is negative, then it counts from the end of the list. As a special "
"case, an end_index of zero is assumed to be the length of the list. Examples"
" using basic template mode and assuming that the tags column (which is "
"comma-separated) contains \"A, B, C\": {tags:sublist(0,1,\\,)} returns "
"\"A\". {tags:sublist(-1,0,\\,)} returns \"C\". {tags:sublist(0,-1,\\,)} "
"returns \"A, B\"."
msgstr "sublist(waarde, start_index, eind_index, scheiding) -- interpreteert waarde als een lijst van items, gescheiden door `scheiding`, en geeft een nieuwe lijst terug die de items van `start_index` tot `eind_index` bevatten. Het nummer van het eerste item is nul. Als een index negatief is wordt vanaf het einde van de lijst geteld. Als eind_index nul is wordt dit als de lengte van de lijst geïnterpreteerd. Voorbeelden met gebruik van basis sjabloon modus en de labels \"A, B, C\" : {tags:sublist(0,1,\\,)} geeft \"A\". {tags:sublist(-1,0,\\,)} geeft \"C\". {tags:sublist(0,-1,\\,)} geeft \"A, B\"."

# 4af0e11897c343d8ab044d73ebb6198b
#: ../../template_ref.rst:284
msgid "Other"
msgstr "Overige"

# 1f8092065f404a909829a36ad9039c16
#: ../../template_ref.rst:287
msgid "assign(id, val)"
msgstr ""

# f679fabdc4954b4989fe18db3fffb9f2
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinAssign:1
msgid ""
"assign(id, val) -- assigns val to id, then returns val. id must be an "
"identifier, not an expression"
msgstr "assign(id, waarde) -- stelt id in op waarde en geeft waarde terug. id moet een identificator zijn, geen uitdrukking"

# 9f321e30070d40d5903b906c241d85f6
#: ../../template_ref.rst:292
msgid "print(a, b, ...)"
msgstr ""

# 41c72d75ece84d06854e3d5146f93b82
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinPrint:1
msgid ""
"print(a, b, ...) -- prints the arguments to standard output. Unless you "
"start calibre from the command line (calibre-debug -g), the output will go "
"to a black hole."
msgstr "print(a, b, ...) -- geeft meegegeven informatie weer in standaarduitvoer. Als u calibre niet vanuit de commandoregel start (calibre-debug -g) zal deze uitvoer verdwijnen."

# 8084a527323f4fd19406077fe481a702
#: ../../template_ref.rst:297
msgid "Recursion"
msgstr ""

# ed7fc41b41a748aa95cf874945c4ffe7
#: ../../template_ref.rst:300
msgid "eval(template)"
msgstr ""

# 7ced77fce4224b79b3801a490f7abc9e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinEval:1
msgid ""
"eval(template) -- evaluates the template, passing the local variables (those"
" 'assign'ed to) instead of the book metadata.  This permits using the "
"template processor to construct complex results from local variables. "
"Because the { and } characters are special, you must use [[ for the { "
"character and ]] for the } character; they are converted automatically. Note"
" also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be "
"used in the argument to this function when using template program mode."
msgstr "eval(template) -- evalueert het sjabloon, geeft lokale variabelen door (die 'assign'ed zijn) in plaats van de metadata van het boek.   Hierdoor kan met behulp van de sjabloon processor complexe resultaten geconstrueerd worden van lokale variabelen. Omdat de { en } karakters speciaal zijn, dient u [[ voor het { karakter en ]] voor het } karakter te gebruiken; deze worden automatisch omgezet. Merk ook op dat voor- en achtervoegsels (de `|prefix|suffix` syntaxis) niet gebruikt kunnen worden in het argument voor deze functie bij gebruik in sjabloon programmeer modus."

# dbd5e40f7a25445ab3c4d81554f0ae73
#: ../../template_ref.rst:305
msgid "template(x)"
msgstr ""

# 16864689a8a44ac48f50ca8bdc26b794
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTemplate:1
msgid ""
"template(x) -- evaluates x as a template. The evaluation is done in its own "
"context, meaning that variables are not shared between the caller and the "
"template evaluation. Because the { and } characters are special, you must "
"use [[ for the { character and ]] for the } character; they are converted "
"automatically. For example, template('[[title_sort]]') will evaluate the "
"template {title_sort} and return its value. Note also that prefixes and "
"suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to "
"this function when using template program mode."
msgstr "template(x) -- evalueert x als sjabloon. De evaluatie gebeurt in haar eigen samenhang, hetgeen betekent dat variabelen niet gedeeld worden tussen de  aanroeper van de functie en de sjabloon evaluatie. Omdat de { en } karakters speciaal zijn, moet u [[ voor het { karakter en ]] voor het } karakter gebruiken; zij worden automatisch omgezet. Bijvoorbeeld, template('[[title_sort]]') evalueert het sjabloon {title_sort} en geeft haar waarde terug. Merk op dat ook voorvoegsels en achtervoegsels (de `|prefix|suffix` syntaxis) niet gebruikt kunnen worden in het meegegeven argument naar deze functie wanneer u de sjabloon programmeer modus gebruikt."

# bbb2ce51f0bf48f1b768a737d6b03970
#: ../../template_ref.rst:310
msgid "Relational"
msgstr ""

# ae04e8804a7742eeaec36f340a4a7a44
#: ../../template_ref.rst:313
msgid "cmp(x, y, lt, eq, gt)"
msgstr ""

# 45fdcdc7b95343c68dbefbdb025b1a2b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCmp:1
msgid ""
"cmp(x, y, lt, eq, gt) -- compares x and y after converting both to numbers. "
"Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr "cmp(x, y, lt, eq, gt) -- vergelijkt x met y nadat beide zijn omgezet in getallen. Geeft lt als x < y. Geeft eq als x == y. Anders wordt gt teruggegeven."

# 3bddff3db9e74845af3e0da6f1f26434
#: ../../template_ref.rst:318
msgid "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)"
msgstr ""

# 061035d509f9424e897214667622291e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFirstMatchingCmp:1
msgid ""
"first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result) -- "
"compares \"val < cmpN\" in sequence, returning resultN for the first "
"comparison that succeeds. Returns else_result if no comparison succeeds. "
"Example: "
"first_matching_cmp(10,5,\"small\",10,\"middle\",15,\"large\",\"giant\") "
"returns \"large\". The same example with a first value of 16 returns "
"\"giant\"."
msgstr "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result) -- vergelijkt \"val < cmpN\" in volgorde, retourneert resultN voor de eerste succesvolle vergelijking. Retourneert else_result als de vergelijking mislukt. Voorbeeld: first_matching_cmp(10,5,\"klein\",10,\"middelmatig\",15,\"groot\",\"reusachtig\") returns \"groot\". Hetzelfde voorbeeld met een eerste waarde van 16 retourneert \"reusachtig\"."

# 2a33d10ae2274755b77453d0fd6baeeb
#: ../../template_ref.rst:323
msgid "strcmp(x, y, lt, eq, gt)"
msgstr ""

# 5b75b83d95514ee7b061a60639629258
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrcmp:1
msgid ""
"strcmp(x, y, lt, eq, gt) -- does a case-insensitive comparison of x and y as"
" strings. Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr "strcmp(x, y, lt, eq, gt) -- doet een hoofdletter-ongevoelige vergelijking van x en y als string. Geeft lt als x < y/ Geeft eq als x ==y. Anders wordt gt teruggegeven."

# 72447d62e38a4af1ac77694dd3cc8dce
#: ../../template_ref.rst:328
msgid "String case changes"
msgstr ""

# 1fbff04cce6c45f4a81a4a0ec541100b
#: ../../template_ref.rst:331
msgid "capitalize(val)"
msgstr ""

# a504fbf464ca402c878dc7b7bcec7f0b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCapitalize:1
msgid "capitalize(val) -- return value of the field capitalized"
msgstr "capitalize(waarde) -- geeft de waarde van het veld terug in hoofdletters"

# 6574b760de234616a136f33ee82d384f
#: ../../template_ref.rst:336
msgid "lowercase(val)"
msgstr ""

# b7458aea8ff941cd9909686e2de32362
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLowercase:1
msgid "lowercase(val) -- return value of the field in lower case"
msgstr "lowercase(waarde) -- geeft waarde van het veld terug in kleine letters"

# 2687d41ce5444321927fec7212b57fc9
#: ../../template_ref.rst:341
msgid "titlecase(val)"
msgstr ""

# d0caacd5533b43789ce9a18c563611e6
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTitlecase:1
msgid "titlecase(val) -- return value of the field in title case"
msgstr "titlecase(waarde) -- geeft de waarde van het veld terug in (Engelstalige) title-case (Elke Woord Met Hoofdletter)"

# cb6fb1df842c48a99dc23a10f678839d
#: ../../template_ref.rst:346
msgid "uppercase(val)"
msgstr ""

# 7b9ff1aeaad94fc4a4f850438cf44a17
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinUppercase:1
msgid "uppercase(val) -- return value of the field in upper case"
msgstr "uppercase(waarde) -- geeft waarde van het veld terug in hoofdletters"

# ad3828f6510049b8b9fcca0f48cb045c
#: ../../template_ref.rst:351
msgid "String manipulation"
msgstr ""

# 6eda962facea4eb8b8c504a8ae4e3390
#: ../../template_ref.rst:354
msgid "re(val, pattern, replacement)"
msgstr ""

# 950bc4255b5340188b7c7ea21ec691b4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinRe:1
msgid ""
"re(val, pattern, replacement) -- return the field after applying the regular"
" expression. All instances of `pattern` are replaced with `replacement`. As "
"in all of calibre, these are python-compatible regular expressions"
msgstr "re(waarde, patroon, vervanging) -- geeft het veld terug na toepassen van reguliere expressies. Alle instanties van `patroon` worden vervangen door `vervanging`. Zoals in heel calibre, zijn dit python-compatible reguliere expressies"

# a864dc7a6e2a42ddaeca8f89c5cd4ca0
#: ../../template_ref.rst:359
msgid "shorten(val, left chars, middle text, right chars)"
msgstr ""

# d46a8a3366764af1aebff8864cc4b380
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinShorten:1
msgid ""
"shorten(val, left chars, middle text, right chars) -- Return a shortened "
"version of the field, consisting of `left chars` characters from the "
"beginning of the field, followed by `middle text`, followed by `right chars`"
" characters from the end of the string. `Left chars` and `right chars` must "
"be integers. For example, assume the title of the book is `Ancient English "
"Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most "
"15 characters. If you use {title:shorten(9,-,5)}, the result will be "
"`Ancient E-nhoe`. If the field's length is less than left chars + right "
"chars + the length of `middle text`, then the field will be used intact. For"
" example, the title `The Dome` would not be changed."
msgstr "shorten(waarde, tekens links, midden tekst, tekens rechts) -- geeft een verkorte versie van het veld, bestaande uit 'tekens links' tekens vanaf het begin van het veld, gevolgd door 'midden tekst', gevolgd' door 'tekens rechts' tekens van het einde van de string. 'Tekens links' en 'tekens rechts' moeten gehele getallen zijn. Bijvoorbeeld, neem aan dat de titel van een boek gelijk is aan 'Van den vos Reynaerde en andere oud-hollandse verhalen', en u wilt een tekst van maximaal 15 tekens. Zal {title:shorten(9,-,5)} resulteren in 'Van den V-halen'. Als de veldlengte korter is dan 'tekens links' + 'tekens recht' + de lengte van 'midden tekst', zal de tekst gelijk blijven. Bijvoorbeeld 'Anna Bijns' zal niet veranderen."

# 9befebdfdd4b4f8bb9d1f9236287f0c5
#: ../../template_ref.rst:364
msgid "strcat(a, b, ...)"
msgstr ""

# ffa25975e31d49a29c69d8487de34fd9
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrcat:1
msgid ""
"strcat(a, b, ...) -- can take any number of arguments. Returns a string "
"formed by concatenating all the arguments"
msgstr "strcat(a, b, ...) -- kan een willekeurig aantal parameters verwerken. Geeft een string terug bestaande uit de samengevoegde parameters"

# ed4c92c42be148e296c3abf19d9e9793
#: ../../template_ref.rst:369
msgid "strcat_max(max, string1, prefix2, string2, ...)"
msgstr ""

# 2b9826acf2194d39a61cadbf372993d2
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrcatMax:1
msgid ""
"strcat_max(max, string1, prefix2, string2, ...) -- Returns a string formed "
"by concatenating the arguments. The returned value is initialized to "
"string1. `Prefix, string` pairs are added to the end of the value as long as"
" the resulting string length is less than `max`. String1 is returned even if"
" string1 is longer than max. You can pass as many `prefix, string` pairs as "
"you wish."
msgstr "strcat_max(max, string1, prefix2, string2, ...) -- Geeft een string, gevormd door het samenvoegen van de argumenten. De teruggegeven waarde wordt aan string1 toegewezen. Paren van `Prefix, string` worden aan het einde van die waarde toegevoegd, zolang de daaruit volgende string niet langer dan `max` is. string1 wordt teruggegeven, zelfs als string1 langer dan max is. U kunt een onbeperkt aantal waarden opgeven."

# e14e625fae2a462bacdfe05c76a751fa
#: ../../template_ref.rst:374
msgid "strlen(a)"
msgstr ""

# 91732f037b2d40cc940ff3bb082848e0
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrlen:1
msgid "strlen(a) -- Returns the length of the string passed as the argument"
msgstr "strlen(a) -- Geeft de lengte van de string die als argument wordt meegegeven"

# c7818fdb5d04468d9c08fc976ce7cd8e
#: ../../template_ref.rst:379
msgid "substr(str, start, end)"
msgstr ""

# 9994484b02ca455eb4bf18adc50925ca
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSubstr:1
msgid ""
"substr(str, start, end) -- returns the start'th through the end'th "
"characters of str. The first character in str is the zero'th character. If "
"end is negative, then it indicates that many characters counting from the "
"right. If end is zero, then it indicates the last character. For example, "
"substr('12345', 1, 0) returns '2345', and substr('12345', 1, -1) returns "
"'234'."
msgstr "substr(str, begin, eind) -- geeft de tekens uit str die tussen begin en eind voorkomen. Het eerste teken in str is het 0-de teken. Als einde negatief is betekend dit ‘tot zoveel teken vanaf rechts’. Als einde nul is betekend dit het laatste teken. Bijvoorbeeld: substr('12345', 1, 0) geeft '2345', en substr('12345', 1, -1) geeft '234'."

# 5a46be26c44f4985abe8e15bee54fdf3
#: ../../template_ref.rst:384
msgid "swap_around_comma(val)"
msgstr ""

# e5ff601fc2064e60bbe7d1e92cabfe03
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSwapAroundComma:1
msgid ""
"swap_around_comma(val) -- given a value of the form \"B, A\", return \"A "
"B\". This is most useful for converting names in LN, FN format to FN LN. If "
"there is no comma, the function returns val unchanged"
msgstr "swap_around_comma(waarde) -- bij een gegeven waarde van de vorm \"B, A\", wordt \"A B\" terug gegeven. Dit is vooral nuttig voor het omzetten van namen in de vorm AN, VN naar VN AN. Als er geen komma is, zal de waarde onveranderd teruggegeven worden."

# 5d01992fbe514d97a69b1e02cbc9de53
#: ../../template_ref.rst:389
msgid "transliterate(a)"
msgstr ""

# 9ca35508f309442cae0dbb69de9488db
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTransliterate:1
msgid ""
"transliterate(a) -- Returns a string in a latin alphabet formed by "
"approximating the sound of the words in the source string. For example, if "
"the source is \"Фёдор Миха́йлович Достоевский\" the function returns "
"\"Fiodor Mikhailovich Dostoievskii\"."
msgstr ""

# b7dfed5a1abe4f308f56e9a27c5ac9fd
#: ../../template_ref.rst:395
msgid "API of the Metadata objects"
msgstr ""

# fe643ae169ab4ba4bdfd017ae8016606
#: ../../template_ref.rst:397
msgid ""
"The python implementation of the template functions is passed in a Metadata "
"object. Knowing it's API is useful if you want to define your own template "
"functions."
msgstr ""

# 37a0a64316b6431e9ec608702b5b4d4c
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:1
msgid ""
"A class representing all the metadata for a book. The various standard "
"metadata fields are available as attributes of this object. You can also "
"stick arbitrary attributes onto this object."
msgstr ""

# 2b66f74675694877ba671c6a8139eb47
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:5
msgid ""
"Metadata from custom columns should be accessed via the get() method, "
"passing in the lookup name for the column, for example: \"#mytags\"."
msgstr ""

# 91e28d3708a74dc895fb132dbdf484bb
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:8
msgid "Use the :meth:`is_null` method to test if a field is null."
msgstr ""

# c12840d72fc54e219557cb0db2badd71
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:10
msgid "This object also has functions to format fields into strings."
msgstr ""

# a86df87ded51483d872ccaa358a35143
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:12
msgid ""
"The list of standard metadata fields grows with time is in "
":data:`STANDARD_METADATA_FIELDS`."
msgstr ""

# 0fd423d4ce1d48b5970bdd1043319edf
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:15
msgid ""
"Please keep the method based API of this class to a minimum. Every method "
"becomes a reserved field name."
msgstr ""

# 22911447960a42f6be3bbd1f4d1eee97
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.is_null:1
msgid ""
"Return True if the value of field is null in this object. 'null' means it is"
" unknown or evaluates to False. So a title of _('Unknown') is null or a "
"language of 'und' is null."
msgstr ""

# e7f5b3999b764efab2564cba96d0ea6e
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.is_null:5
msgid ""
"Be careful with numeric fields since this will return True for zero as well "
"as None."
msgstr ""

# cd104555c97a4778be60c1bd51e690e0
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.is_null:8
msgid "Also returns True if the field does not exist."
msgstr ""

# 50aed35d2c464da1aa06ce605f5709e9
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.deepcopy:1
msgid ""
"Do not use this method unless you know what you are doing, if you want to "
"create a simple clone of this object, use :meth:`deepcopy_metadata` instead."
" Class_generator must be a function that returns an instance of Metadata or "
"a subclass of it."
msgstr ""

# 8c718b42e7c44762a7672fc9f70f0c1e
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_identifiers:1
msgid ""
"Return a copy of the identifiers dictionary. The dict is small, and the "
"penalty for using a reference where a copy is needed is large. Also, we "
"don't want any manipulations of the returned dict to show up in the book."
msgstr ""

# 80231faea6944c6589890957ec7d6235
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_identifiers:1
msgid ""
"Set all identifiers. Note that if you previously set ISBN, calling this "
"method will delete it."
msgstr ""

# 00785d485b2041148982e3d36046b0d7
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_identifier:1
msgid "If val is empty, deletes identifier of type typ"
msgstr ""

# ca3a29c53a0d492fb45a4d44663f40c3
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.standard_field_keys:1
msgid ""
"return a list of all possible keys, even if this book doesn't have them"
msgstr ""

# 5e325a885d6c4e23b5385c660f35d216
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.custom_field_keys:1
msgid "return a list of the custom fields in this book"
msgstr ""

# 56925b7457e54239934484daa9a3406b
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.all_field_keys:1
msgid "All field keys known by this instance, even if their value is None"
msgstr ""

# 1afa7629f39a41ae823b68d120a536da
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.metadata_for_field:1
msgid "return metadata describing a standard or custom field."
msgstr ""

# 6cb732b912324622a5a936fb9e9414e9
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.all_non_none_fields:1
msgid ""
"Return a dictionary containing all non-None metadata fields, including the "
"custom ones."
msgstr ""

# bf3bcb5124f7414c95dcc8a53cd5f38e
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_standard_metadata:1
msgid ""
"return field metadata from the field if it is there. Otherwise return None. "
"field is the key name, not the label. Return a copy if requested, just in "
"case the user wants to change values in the dict."
msgstr ""

# 9f09451eee4a46488a6f45c8b99753b4
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_all_standard_metadata:1
msgid ""
"return a dict containing all the standard field metadata associated with the"
" book."
msgstr ""

# e7af6f739c4a472784adddd7487e4af1
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_all_user_metadata:1
msgid ""
"return a dict containing all the custom field metadata associated with the "
"book."
msgstr ""

# 1fdad734bddb49bd9d2f4328bdb4db59
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_user_metadata:1
msgid ""
"return field metadata from the object if it is there. Otherwise return None."
" field is the key name, not the label. Return a copy if requested, just in "
"case the user wants to change values in the dict."
msgstr ""

# b956f266fab540068e168807e0f50992
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_all_user_metadata:1
msgid ""
"store custom field metadata into the object. Field is the key name not the "
"label"
msgstr ""

# e3ece89349904438a959e1de5216fbd2
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_user_metadata:1
msgid ""
"store custom field metadata for one column into the object. Field is the key"
" name not the label"
msgstr ""

# 351e274d92c44eb093a5401830602063
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.template_to_attribute:1
msgid ""
"Takes a list [(src,dest), (src,dest)], evaluates the template in the context"
" of other, then copies the result to self[dest]. This is on a best-efforts "
"basis. Some assignments can make no sense."
msgstr ""

# b0a838a9c6834517a632e7700fa02a48
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.smart_update:1
msgid ""
"Merge the information in `other` into self. In case of conflicts, the "
"information in `other` takes precedence, unless the information in `other` "
"is NULL."
msgstr ""

# c05bc40e2c1e4ba8a225583e97c2a12b
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.format_field:1
msgid "Returns the tuple (display_name, formatted_value)"
msgstr ""

# e67e7a2c128d43909b5369b46846bf31
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.to_html:1
msgid "A HTML representation of this object."
msgstr ""

# 523ad4ecba4742139b99c8e91088a13b
#: ../../template_ref.rst:407
msgid "The set of standard metadata fields."
msgstr ""
