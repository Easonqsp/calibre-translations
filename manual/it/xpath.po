# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# Vincenzo Reale <vinx.reale@gmail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-24 10:09+0530\n"
"PO-Revision-Date: 2014-08-24 13:10+0000\n"
"Last-Translator: Vincenzo Reale <vinx.reale@gmail.com>\n"
"Language-Team: Italian (http://www.transifex.com/projects/p/calibre/language/it/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: it\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 83de8ad0e83e4ac29a7da3116308e6fe
#: ../../home/kovid/work/calibre/manual/xpath.rst:5
msgid "XPath Tutorial"
msgstr "Guida XPath"

# 4075bd6545a44d45aff7ea31168afd3a
#: ../../home/kovid/work/calibre/manual/xpath.rst:7
msgid ""
"In this tutorial, you will be given a gentle introduction to `XPath "
"<http://en.wikipedia.org/wiki/XPath>`_, a query language that can be used to"
" select arbitrary parts of `HTML <http://en.wikipedia.org/wiki/HTML>`_ "
"documents in |app|. XPath is a widely used standard, and googling it will "
"yield a ton of information. This tutorial, however, focuses on using XPath "
"for ebook related tasks like finding chapter headings in an unstructured "
"HTML document."
msgstr ""

# 8b3b14b4b03c43f8857d7405bb584b3c
#: ../../home/kovid/work/calibre/manual/xpath.rst:0
msgid "Contents"
msgstr "Contenuti"

# 20e23d6228a144bf9c4f9b236b410fd5
#: ../../home/kovid/work/calibre/manual/xpath.rst:20
msgid "Selecting by tagname"
msgstr "Selezione per nome del tag"

# 6d6b6ea71a8649de9efb8e708d92b2fd
#: ../../home/kovid/work/calibre/manual/xpath.rst:22
msgid ""
"The simplest form of selection is to select tags by name. For example, "
"suppose you want to select all the ``<h2>`` tags in a document. The XPath "
"query for this is simply::"
msgstr ""

# 8e7ba788511644419afebeacf2bc0c76
#: ../../home/kovid/work/calibre/manual/xpath.rst:28
msgid ""
"The prefix `//` means *search at any level of the document*. Now suppose you"
" want to search for ``<span>`` tags that are inside ``<a>`` tags. That can "
"be achieved with::"
msgstr ""

# f0a62edffcea4163b7521f591ee24ba5
#: ../../home/kovid/work/calibre/manual/xpath.rst:34
msgid ""
"If you want to search for tags at a particular level in the document, change"
" the prefix::"
msgstr ""

# ab988e7e539a4934aaa9d81683773fe2
#: ../../home/kovid/work/calibre/manual/xpath.rst:40
msgid ""
"This will match only ``<p>A very short ebook to demonstrate the use of "
"XPath.</p>`` in the :ref:`sample_ebook` but not any of the other ``<p>`` "
"tags. The ``h:`` prefix in the above examples is needed to match XHTML tags."
" This is because internally, |app| represents all content as XHTML. In XHTML"
" tags have a *namespace*, and ``h:`` is the namespace prefix for HTML tags."
msgstr ""

# c9b95208a481493a947a93e1f63c4114
#: ../../home/kovid/work/calibre/manual/xpath.rst:46
msgid ""
"Now suppose you want to select both ``<h1>`` and ``<h2>`` tags. To do that, "
"we need a XPath construct called *predicate*. A :dfn:`predicate` is simply a"
" test that is used to select tags. Tests can be arbitrarily powerful and as "
"this tutorial progresses, you will see more powerful examples. A predicate "
"is created by enclosing the test expression in square brackets::"
msgstr ""

# c15eac9f052e4f66aa8adc23318b91c3
#: ../../home/kovid/work/calibre/manual/xpath.rst:54
msgid ""
"There are several new features in this XPath expression. The first is the "
"use of the wildcard ``*``. It means *match any tag*. Now look at the test "
"expression ``name()='h1' or name()='h2'``. :term:`name()` is an example of a"
" *built-in function*. It simply evaluates to the name of the tag. So by "
"using it, we can select tags whose names are either `h1` or `h2`. Note that "
"the :term:`name()` function ignores namespaces so that there is no need for "
"the ``h:`` prefix. XPath has several useful built-in functions. A few more "
"will be introduced in this tutorial."
msgstr ""

# f97e1527b8814386a7a1c98292c28b22
#: ../../home/kovid/work/calibre/manual/xpath.rst:63
msgid "Selecting by attributes"
msgstr "Selezione per attributi"

# 380bf9adad4c4435bb8d24f1993cdc23
#: ../../home/kovid/work/calibre/manual/xpath.rst:65
msgid ""
"To select tags based on their attributes, the use of predicates is "
"required::"
msgstr ""

# dccac06eeb0c48b8b6175bf49b07f1d7
#: ../../home/kovid/work/calibre/manual/xpath.rst:71
msgid ""
"Here, the ``@`` operator refers to the attributes of the tag. You can use "
"some of the `XPath built-in functions`_ to perform more sophisticated "
"matching on attribute values."
msgstr ""

# d747e319939742c29d677e6dc440db9c
#: ../../home/kovid/work/calibre/manual/xpath.rst:77
msgid "Selecting by tag content"
msgstr "Selezione per contenuto del tag"

# 788fba221661420f9000005fbc302992
#: ../../home/kovid/work/calibre/manual/xpath.rst:79
msgid ""
"Using XPath, you can even select tags based on the text they contain. The "
"best way to do this is to use the power of *regular expressions* via the "
"built-in function :term:`re:test()`::"
msgstr ""

# f828b99ea17f4653949b4698fa99f327
#: ../../home/kovid/work/calibre/manual/xpath.rst:85
msgid ""
"Here the ``.`` operator refers to the contents of the tag, just as the ``@``"
" operator referred to its attributes."
msgstr ""

# 50bda773d0b84b2c873b664b3a0b6854
#: ../../home/kovid/work/calibre/manual/xpath.rst:91
msgid "Sample ebook"
msgstr "Ebook di esempio"

# 2e621c54bc294b34ac6e853cd1ba1ef7
#: ../../home/kovid/work/calibre/manual/xpath.rst:97
msgid "XPath built-in functions"
msgstr "Funzioni interne di XPath"

# 06b2aaf0b6ac40a288589c89ac651240
#: ../../home/kovid/work/calibre/manual/xpath.rst:100
msgid "name()"
msgstr "name()"

# d729912d890b4e6cb02a2b3febbf2e41
#: ../../home/kovid/work/calibre/manual/xpath.rst:102
msgid "The name of the current tag."
msgstr ""

# 5828c040efd7456898be76f454dd9ddf
#: ../../home/kovid/work/calibre/manual/xpath.rst:103
msgid "contains()"
msgstr "contains()"

# d1bf7e2bf75c486a8a1f55ce5de0692e
#: ../../home/kovid/work/calibre/manual/xpath.rst:105
msgid "``contains(s1, s2)`` returns `true` if s1 contains s2."
msgstr "``contains(s1, s2)`` restituisce `true` se s1 contiene s2."

# 51f6197a92404c0ea3794b104e80733a
#: ../../home/kovid/work/calibre/manual/xpath.rst:106
msgid "re:test()"
msgstr "re:test()"

# 2b44ef230800462cb5703d39b11c9138
#: ../../home/kovid/work/calibre/manual/xpath.rst:108
msgid ""
"``re:test(src, pattern, flags)`` returns `true` if the string `src` matches "
"the regular expression `pattern`. A particularly useful flag is ``i``, it "
"makes matching case insensitive. A good primer on the syntax for regular "
"expressions can be found at `regexp syntax <http://docs.python.org/lib/re-"
"syntax.html>`_"
msgstr ""
