# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.43.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-06 17:44+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../news.rst:6
# e51902c90261412dabd5d231a9d5baf9
msgid "Adding your favorite news website"
msgstr ""

#: ../../news.rst:8
# 3518bee18b1142bb8a7de806f89ea50a
msgid "|app| has a powerful, flexible and easy-to-use framework for downloading news from the Internet and converting it into an ebook. The following will show you, by means of examples, how to get news from various websites."
msgstr ""

#: ../../news.rst:10
# 5b799836160f41c5ab373ffb7454b248
msgid "To gain an understanding of how to use the framework, follow the examples in the order listed below:"
msgstr ""

#: ../../news.rst:17
# aa4557452e7d48549790ce1881aeac8d
msgid "Completely automatic fetching"
msgstr ""

#: ../../news.rst:19
# cd371187cf35431ca5b325bc392994b8
msgid "If your news source is simple enough, |app| may well be able to fetch it completely automatically, all you need to do is provide the URL. |app| gathers all the information needed to download a news source into a :term:`recipe`. In order to tell |app| about a news source, you have to create a :term:`recipe` for it. Let's see some examples:"
msgstr ""

#: ../../news.rst:24
# db169fda720c46a38fa09b21699942e7
msgid "portfolio.com"
msgstr ""

#: ../../news.rst:26
# f8fa078e92e24176b28ed11e886168b3
msgid "*portfolio.com* is the website for *Cond√© Nast Portfolio*, a business related magazine. In order to download articles from the magazine and convert them to ebooks, we rely on the :term:`RSS` feeds of portfolio.com. A list of such feeds is available at http://www.portfolio.com/rss/."
msgstr ""

#: ../../news.rst:28
# dc01683817c2459e92bc3d0cb4e32148
msgid "Lets pick a couple of feeds that look interesting:"
msgstr ""

#: ../../news.rst:30
# 904f1b7b9a8f49f9b8d67eef3657a361
msgid "Business Travel: http://feeds.portfolio.com/portfolio/businesstravel"
msgstr ""

#: ../../news.rst:31
# 414c01fc148b457fb1e7638de2357bb8
msgid "Tech Observer: http://feeds.portfolio.com/portfolio/thetechobserver"
msgstr ""

#: ../../news.rst:33
# 26bfd0c021fc4a40be771d15f6228690
msgid "I got the URLs by clicking the little orange RSS icon next to each feed name. To make |app| download the feeds and convert them into an ebook, you should right click the :guilabel:`Fetch news` button and then the :guilabel:`Add a custom news source` menu item. A dialog similar to that shown below should open up."
msgstr ""

#: ../../news.rst:38
# 3ec3d6dc514a42989e99aa26fcf4139e
msgid "First enter ``Portfolio`` into the :guilabel:`Recipe title` field. This will be the title of the ebook that will be created from the articles in the above feeds."
msgstr ""

#: ../../news.rst:40
# d80f3c69d03246b1afbcf0e48c867230
msgid "The next two fields (:guilabel:`Oldest article` and :guilabel:`Max. number of articles`) allow you some control over how many articles should be downloaded from each feed, and they are pretty self explanatory."
msgstr ""

#: ../../news.rst:42
# a3401f8060244e9cb599806f2a1f5dab
msgid "To add the feeds to the recipe, enter the feed title and the feed URL and click the :guilabel:`Add feed` button. Once you have added both feeds, simply click the :guilabel:`Add/update recipe` button and you're done! Close the dialog."
msgstr ""

#: ../../news.rst:44
# 7fd7d9b812e3479182bf7a1e1de1372d
msgid "To test your new :term:`recipe`, click the :guilabel:`Fetch news` button and in the :guilabel:`Custom news sources` sub-menu click :guilabel:`Portfolio`. After a couple of minutes, the newly downloaded Portfolio ebook will appear in the main library view (if you have your reader connected, it will be put onto the reader instead of into the library). Select it and hit the :guilabel:`View` button to read!"
msgstr ""

#: ../../news.rst:46
# 3ddc71e6d3f6480189b1e87f2b5e2e04
msgid "The reason this worked so well, with so little effort is that *portfolio.com* provides *full-content* :term:`RSS` feeds, i.e., the article content is embedded in the feed itself. For most news sources that provide news in this fashion, with *full-content* feeds, you don't need any more effort to convert them to ebooks. Now we will look at a news source that does not provide full content feeds. In such feeds, the full article is a webpage and the feed only contains a link to the webpage with a short summary of the article."
msgstr ""

#: ../../news.rst:51
# 58fb3ebbf3d84eb98363050e7d0aba76
msgid "bbc.co.uk"
msgstr ""

#: ../../news.rst:53
# 0ef2f69b8fa74ba783882d9d14bee8c9
msgid "Lets try the following two feeds from *The BBC*:"
msgstr ""

#: ../../news.rst:55
# 49e05356ac864c2ca36dee84f5de4fb8
msgid "News Front Page: http://newsrss.bbc.co.uk/rss/newsonline_world_edition/front_page/rss.xml"
msgstr ""

#: ../../news.rst:56
# 67feb98d2d444ac6a84e36a6b6ffddff
msgid "Science/Nature: http://newsrss.bbc.co.uk/rss/newsonline_world_edition/science/nature/rss.xml"
msgstr ""

#: ../../news.rst:58
# 1343fdcf74cd4665a70ea0d0f19dee32
msgid "Follow the procedure outlined in :ref:`portfolio` to create a recipe for *The BBC* (using the feeds above). Looking at the downloaded ebook, we see that |app| has done a creditable job of extracting only the content you care about from each article's webpage. However, the extraction process is not perfect. Sometimes it leaves in undesirable content like menus and navigation aids or it removes content that should have been left alone, like article headings. In order, to have perfect content extraction, we will need to customize the fetch process, as described in the next section."
msgstr ""

#: ../../news.rst:61
# 34bfd78572014ce9aa7c2f57997f6e18
msgid "Customizing the fetch process"
msgstr ""

#: ../../news.rst:63
# 4f7c7391e8ff4f1d83ac1ea4976a7ef7
msgid "When you want to perfect the download process, or download content from a particularly complex website, you can avail yourself of all the power and flexibility of the :term:`recipe` framework. In order to do that, in the :guilabel:`Add custom news sources` dialog, simply click the :guilabel:`Switch to Advanced mode` button."
msgstr ""

#: ../../news.rst:65
# 88c9bbf12cd84bd2aa9c83a9ddc70657
msgid "The easiest and often most productive customization is to use the print version of the online articles. The print version typically has much less cruft and translates much more smoothly to an ebook. Let's try to use the print version of the articles from *The BBC*."
msgstr ""

#: ../../news.rst:68
# ed6905b3cda64cd585d08828823bac11
msgid "Using the print version of bbc.co.uk"
msgstr ""

#: ../../news.rst:70
# af907dc7cc7d4736bc859752eaa96179
msgid "The first step is to look at the ebook we downloaded previously from :ref:`bbc`. At the end of each article, in the ebook is a little blurb telling you where the article was downloaded from. Copy and paste that URL into a browser. Now on the article webpage look for a link that points to the \"Printable version\". Click it to see the print version of the article. It looks much neater! Now compare the two URLs. For me they were:"
msgstr ""

#: ../../news.rst:73
# 53614ff14ca94bc4801f60b2e0208703
msgid "Article URL"
msgstr ""

#: ../../news.rst:73
# 75593026f72548c28003d4158a5c10e1
msgid "http://news.bbc.co.uk/2/hi/science/nature/7312016.stm"
msgstr ""

#: ../../news.rst:76
# e202928084dc417a83ed34e6b6c62c53
msgid "Print version URL"
msgstr ""

#: ../../news.rst:76
# 3a65411a2e6542d9b55f5ea07503cccc
msgid "http://newsvote.bbc.co.uk/mpapps/pagetools/print/news.bbc.co.uk/2/hi/science/nature/7312016.stm"
msgstr ""

#: ../../news.rst:78
# d700cde9419e4e3e99c997288c204cd0
msgid "So it looks like to get the print version, we need to prefix every article URL with:"
msgstr ""

#: ../../news.rst:80
# 964d3d73c64044ff9492384b6c4c5657
msgid "newsvote.bbc.co.uk/mpapps/pagetools/print/"
msgstr ""

#: ../../news.rst:82
# d0f3168aa78d46abb4d3290fbfb37905
msgid "Now in the :guilabel:`Advanced Mode` of the Custom  news sources dialog, you should see something like (remember to select *The BBC* recipe before switching to advanced mode):"
msgstr ""

#: ../../news.rst:87
# feef580625b64a78815997fb2d96eafd
msgid "You can see that the fields from the :guilabel:`Basic mode` have been translated to python code in a straightforward manner. We need to add instructions to this recipe to use the print version of the articles. All that's needed is to add the following two lines:"
msgstr ""

#: ../../news.rst:94
# 8113cb80e3754941bbe8def0ab6dc24b
msgid "This is python, so indentation is important. After you've added the lines, it should look like:"
msgstr ""

#: ../../news.rst:99
# 06dc1e6d3ab44f418f6c1a80c90a09e1
msgid "In the above, ``def print_version(self, url)`` defines a *method* that is called by |app| for every article. ``url`` is the URL of the original article. What ``print_version`` does is take that url and replace it with the new URL that points to the print version of the article. To learn about `python <http://www.python.org>`_ see the `tutorial <http://docs.python.org/tut/>`_."
msgstr ""

#: ../../news.rst:101
# 26bee76ba7094402b760555c4b2aaa35
msgid "Now, click the :guilabel:`Add/update recipe` button and your changes will be saved. Re-download the ebook. You should have a much improved ebook. One of the problems with the new version is that the fonts on the print version webpage are too small. This is automatically fixed when converting to an ebook, but even after the fixing process, the font size of the menus and navigation bar to become too large relative to the article text. To fix this, we will do some more customization, in the next section."
msgstr ""

#: ../../news.rst:104
# 98d2bf38ead54f2397c74e2eb1251814
msgid "Replacing article styles"
msgstr ""

#: ../../news.rst:106
# ef691a01b60f41fda8df7b19a5fc55f5
msgid "In the previous section, we saw that the font size for articles from the print version of *The BBC* was too small. In most websites, *The BBC* included, this font size is set by means of :term:`CSS` stylesheets. We can disable the fetching of such stylesheets by adding the line::"
msgstr ""

#: ../../news.rst:110
# be878107bd10497b813235ba7b5f637c
msgid "The recipe now looks like:"
msgstr ""

#: ../../news.rst:117
# 83381b5012c241d7b4f54902d7f1a92c
msgid "The new version looks pretty good. If you're a perfectionist, you'll want to read the next section, which deals with actually modifying the downloaded content."
msgstr ""

#: ../../news.rst:120
# 201d5c267bf54b608c036b25ef81e431
msgid "Slicing and dicing"
msgstr ""

#: ../../news.rst:122
# 6f277e2cd9094afab0a7005100b4c08e
msgid "|app| contains very powerful and flexible abilities when it comes to manipulating downloaded content. To show off a couple of these, let's look at our old friend the :ref:`The BBC <bbc1>` recipe again. Looking at the source code (:term:`HTML`) of a couple of articles (print version), we see that they have a footer that contains no useful information, contained in"
msgstr ""

#: ../../news.rst:130
# cb3359087f624ab5a68470089f85f4a5
msgid "This can be removed by adding::"
msgstr ""

#: ../../news.rst:134
# b087066eae4f4b7ab13e46c8e098af8c
msgid "to the recipe. Finally, lets replace some of the :term:`CSS` that we disabled earlier, with our own :term:`CSS` that is suitable for conversion to an ebook::"
msgstr ""

#: ../../news.rst:138
# 84b1b6f01f59467ab3a877ac00d6d267
msgid "With these additions, our recipe has become \"production quality\", indeed it is very close to the actual recipe used by |app| for the *BBC*, shown below:"
msgstr ""

#: ../../news.rst:142
# d9a1ee14465d4d8fa610e6ca0c9dc338
msgid "This :term:`recipe` explores only the tip of the iceberg when it comes to the power of |app|. To explore more of the abilities of |app| we'll examine a more complex real life example in the next section."
msgstr ""

#: ../../news.rst:145
# 57fa4b1aaf87494487ea12ba836be8c8
msgid "Real life example"
msgstr ""

#: ../../news.rst:147
# c81e297ab3534c92a37853f40163465d
msgid "A reasonably complex real life example that exposes more of the :term:`API` of ``BasicNewsRecipe`` is the :term:`recipe` for *The New York Times*"
msgstr ""

#: ../../news.rst:233
# c1ff67662ab54b5698989b731b21f9cf
msgid "We see several new features in this :term:`recipe`. First, we have::"
msgstr ""

#: ../../news.rst:237
# d70d46be7f5845fbbb3642332b8bf44c
msgid "This sets the displayed time on the front page of the created ebook to be in the format, ``Day, Day_Number Month, Year``. See :attr:`timefmt <calibre.web.feeds.news.BasicNewsRecipe.timefmt>`."
msgstr ""

#: ../../news.rst:240
# 25c84be08c1144e5bb2c1fbb2097af54
msgid "Then we see a group of directives to cleanup the downloaded :term:`HTML`::"
msgstr ""

#: ../../news.rst:246
# 8f8278f5d5f749ef988ead9f3baa100e
msgid "These remove everything before the first ``<h1>`` tag and everything after the first tag whose id is ``footer``. See :attr:`remove_tags <calibre.web.feeds.news.BasicNewsRecipe.remove_tags>`, :attr:`remove_tags_before <calibre.web.feeds.news.BasicNewsRecipe.remove_tags_before>`, :attr:`remove_tags_after <calibre.web.feeds.news.BasicNewsRecipe.remove_tags_after>`."
msgstr ""

#: ../../news.rst:248
# 4e0eba6bbb704eefa6aeb57d80b19696
msgid "The next interesting feature is::"
msgstr ""

#: ../../news.rst:255
# 6b74c0dd21e645e09242ef1e14f38926
msgid "``needs_subscription = True`` tells |app| that this recipe needs a username and password in order to access the content. This causes, |app| to ask for a username and password whenever you try to use this recipe. The code in :meth:`calibre.web.feeds.news.BasicNewsRecipe.get_browser` actually does the login into the NYT website. Once logged in, |app| will use the same, logged in, browser instance to fetch all content. See `mechanize <http://wwwsearch.sourceforge.net/mechanize/>`_ to understand the code in ``get_browser``."
msgstr ""

#: ../../news.rst:257
# 95c0206a7f5b4f07a5a823fb4eddeb8b
msgid "The next new feature is the :meth:`calibre.web.feeds.news.BasicNewsRecipe.parse_index` method. Its job is to go to http://www.nytimes.com/pages/todayspaper/index.html and fetch the list of articles that appear in *todays* paper. While more complex than simply using :term:`RSS`, the recipe creates an ebook that corresponds very closely to the days paper. ``parse_index`` makes heavy use of `BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/documentation.html>`_ to parse the daily paper webpage. You can also use other, more modern parsers if you dislike BeatifulSoup. calibre comes with `lxml <http://lxml.de/>`_ and `html5lib <https://github.com/html5lib/html5lib-python>`_, which are the recommended parsers. To use them, replace the call to ``index_to_soup()`` with the following::"
msgstr ""

#: ../../news.rst:278
# bcd3c1222491470884ee770e57182d3c
msgid "The final new feature is the :meth:`calibre.web.feeds.news.BasicNewsRecipe.preprocess_html` method. It can be used to perform arbitrary transformations on every downloaded HTML page. Here it is used to bypass the ads that the nytimes shows you before each article."
msgstr ""

#: ../../news.rst:281
# bbe8e91473e5419e9f3e2be96e335249
msgid "Tips for developing new recipes"
msgstr ""

#: ../../news.rst:283
# 1b5dc6bcab034effab66ec49c1331b49
msgid "The best way to develop new recipes is to use the command line interface. Create the recipe using your favorite python editor and save it to a file say :file:`myrecipe.recipe`. The `.recipe` extension is required. You can download content using this recipe with the command::"
msgstr ""

#: ../../news.rst:287
# 9a265b5612fd4d529c1ff2570320bbd1
msgid "The command :command:`ebook-convert` will download all the webpages and save them to the EPUB file :file:`myrecipe.epub`. The :option:`-vv` makes ebook-convert spit out a lot of information about what it is doing. The :option:`--test` makes it download only a couple of articles from at most two feeds. In addition, ebook-convert will put the downloaded HTML into the ``debug/input`` directory, where ``debug`` is the directory you specified in the :option:`--debug-pipeline` option."
msgstr ""

#: ../../news.rst:289
# 619b8e0fb0774f6abb9763ce20dc8727
msgid "Once the download is complete, you can look at the downloaded :term:`HTML` by opening the file :file:`debug/input/index.html` in a browser. Once you're satisfied that the download and preprocessing is happening correctly, you can generate ebooks in different formats as shown below::"
msgstr ""

#: ../../news.rst:296
# a198fe178f404e76a4586ffebb7c142c
msgid "If you're satisfied with your recipe, and you feel there is enough demand to justify its inclusion into the set of built-in recipes, post your recipe in the `calibre recipes forum <http://www.mobileread.com/forums/forumdisplay.php?f=228>`_ to share it with other calibre users."
msgstr ""

#: ../../news.rst:298
# 14174c152d1449849eb7326085be7f57
msgid "On OS X, the ebook-convert command will not be available by default. Go to Preferences->Miscellaneous and click the install command line tools button to make it available."
msgstr ""

#: ../../news.rst:302
# 0d900105da2a42fa900023fa9dab4274
msgid ":ref:`ebook-convert`"
msgstr ""

#: ../../news.rst:303
# dbf21825d7a74a4aa4279eee025bcdca
msgid "The command line interface for all ebook conversion."
msgstr ""

#: ../../news.rst:307
# 384a05c780c441be8e488477ec3db616
msgid "Further reading"
msgstr ""

#: ../../news.rst:309
# ba33b2a865644457945c47b61e8f944b
msgid "To learn more about writing advanced recipes using some of the facilities, available in ``BasicNewsRecipe`` you should consult the following sources:"
msgstr ""

#: ../../news.rst:312
# 4bed613b552c42b19e5a812796e2ef1c
msgid ":ref:`API Documentation <news_recipe>`"
msgstr ""

#: ../../news.rst:312
# bdb72b14e92847ec881dce1cc40925a4
msgid "Documentation of the ``BasicNewsRecipe`` class and all its important methods and fields."
msgstr ""

#: ../../news.rst:315
# a72d9406aa364429b00f4a2c5bec8b97
msgid "`BasicNewsRecipe <http://bazaar.launchpad.net/~kovid/calibre/trunk/annotate/head:/src/calibre/web/feeds/news.py>`_"
msgstr ""

#: ../../news.rst:315
# 170d3841e23647c58d23682ce7dc5aad
msgid "The source code of ``BasicNewsRecipe``"
msgstr ""

#: ../../news.rst:318
# b2950b9e2bc24d279e98160200184812
msgid "`Built-in recipes <http://bazaar.launchpad.net/~kovid/calibre/trunk/files/head:/recipes/>`_"
msgstr ""

#: ../../news.rst:318
# 22db183d818e4164903f3912b1a6ba65
msgid "The source code for the built-in recipes that come with |app|"
msgstr ""

#: ../../news.rst:322
# 74ab1144834e452aa3297303a05122e1
msgid "`The calibre recipes forum <http://www.mobileread.com/forums/forumdisplay.php?f=228>`_"
msgstr ""

#: ../../news.rst:321
# d8a6ff5d67fc4828a2c5d4d93b398e13
msgid "Lots of knowledgeable |app| recipe writers hang out here."
msgstr ""

#: ../../news.rst:325
# 4f50b96a4c0b4b44a954ffba11b548ae
msgid "API documentation"
msgstr ""

