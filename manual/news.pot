# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.45.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-18 08:08+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../news.rst:6
# e5d0b453040a4230b4841a0609508b8d
msgid "Adding your favorite news website"
msgstr ""

#: ../../news.rst:8
# ac63bcd2f963471990e30c8b52522749
msgid "|app| has a powerful, flexible and easy-to-use framework for downloading news from the Internet and converting it into an ebook. The following will show you, by means of examples, how to get news from various websites."
msgstr ""

#: ../../news.rst:10
# afe29207e6834f6c981d85655176e2af
msgid "To gain an understanding of how to use the framework, follow the examples in the order listed below:"
msgstr ""

#: ../../news.rst:17
# 202666acd1674a25b3edf8f62ba57105
msgid "Completely automatic fetching"
msgstr ""

#: ../../news.rst:19
# ba1c13e551c44621bcbefce45fe83fc9
msgid "If your news source is simple enough, |app| may well be able to fetch it completely automatically, all you need to do is provide the URL. |app| gathers all the information needed to download a news source into a :term:`recipe`. In order to tell |app| about a news source, you have to create a :term:`recipe` for it. Let's see some examples:"
msgstr ""

#: ../../news.rst:24
# 3d7fee41880846f88f3852d115af95b9
msgid "portfolio.com"
msgstr ""

#: ../../news.rst:26
# ca3caed0539f40c887927dc91758eac2
msgid "*portfolio.com* is the website for *Cond√© Nast Portfolio*, a business related magazine. In order to download articles from the magazine and convert them to ebooks, we rely on the :term:`RSS` feeds of portfolio.com. A list of such feeds is available at http://www.portfolio.com/rss/."
msgstr ""

#: ../../news.rst:28
# 23217b7b00a0448eaa5e8d96494bfb62
msgid "Lets pick a couple of feeds that look interesting:"
msgstr ""

#: ../../news.rst:30
# cf042bf334634e799c7560246d6e5be6
msgid "Business Travel: http://feeds.portfolio.com/portfolio/businesstravel"
msgstr ""

#: ../../news.rst:31
# 6640b3f2faec414f887e2434c3df48ec
msgid "Tech Observer: http://feeds.portfolio.com/portfolio/thetechobserver"
msgstr ""

#: ../../news.rst:33
# 5703ec89f2f54725a93af84603fc26a2
msgid "I got the URLs by clicking the little orange RSS icon next to each feed name. To make |app| download the feeds and convert them into an ebook, you should right click the :guilabel:`Fetch news` button and then the :guilabel:`Add a custom news source` menu item. A dialog similar to that shown below should open up."
msgstr ""

#: ../../news.rst:38
# c0e646027bbd49bebf6a95a100ec0a11
msgid "First enter ``Portfolio`` into the :guilabel:`Recipe title` field. This will be the title of the ebook that will be created from the articles in the above feeds."
msgstr ""

#: ../../news.rst:40
# 9edcbd26a15e4e80986ffe9a81c6a4d3
msgid "The next two fields (:guilabel:`Oldest article` and :guilabel:`Max. number of articles`) allow you some control over how many articles should be downloaded from each feed, and they are pretty self explanatory."
msgstr ""

#: ../../news.rst:42
# a2a3471c200c423992732eae3e9e5dc8
msgid "To add the feeds to the recipe, enter the feed title and the feed URL and click the :guilabel:`Add feed` button. Once you have added both feeds, simply click the :guilabel:`Add/update recipe` button and you're done! Close the dialog."
msgstr ""

#: ../../news.rst:44
# 7baa9ee023124bf9b859fe9380b4f428
msgid "To test your new :term:`recipe`, click the :guilabel:`Fetch news` button and in the :guilabel:`Custom news sources` sub-menu click :guilabel:`Portfolio`. After a couple of minutes, the newly downloaded Portfolio ebook will appear in the main library view (if you have your reader connected, it will be put onto the reader instead of into the library). Select it and hit the :guilabel:`View` button to read!"
msgstr ""

#: ../../news.rst:46
# 4c91e1564fbc45faa30421be190d7d4b
msgid "The reason this worked so well, with so little effort is that *portfolio.com* provides *full-content* :term:`RSS` feeds, i.e., the article content is embedded in the feed itself. For most news sources that provide news in this fashion, with *full-content* feeds, you don't need any more effort to convert them to ebooks. Now we will look at a news source that does not provide full content feeds. In such feeds, the full article is a webpage and the feed only contains a link to the webpage with a short summary of the article."
msgstr ""

#: ../../news.rst:51
# cf87b2042d2845a08e15862e498f8a90
msgid "bbc.co.uk"
msgstr ""

#: ../../news.rst:53
# 1de13f5fbb6143a99000fe8158a446fa
msgid "Lets try the following two feeds from *The BBC*:"
msgstr ""

#: ../../news.rst:55
# af0845ab28fa42a1bc0095d32c93e1b3
msgid "News Front Page: http://newsrss.bbc.co.uk/rss/newsonline_world_edition/front_page/rss.xml"
msgstr ""

#: ../../news.rst:56
# c07461c99605411899252019ab059660
msgid "Science/Nature: http://newsrss.bbc.co.uk/rss/newsonline_world_edition/science/nature/rss.xml"
msgstr ""

#: ../../news.rst:58
# a8f43631dcc443f386967356c5faeb7e
msgid "Follow the procedure outlined in :ref:`portfolio` to create a recipe for *The BBC* (using the feeds above). Looking at the downloaded ebook, we see that |app| has done a creditable job of extracting only the content you care about from each article's webpage. However, the extraction process is not perfect. Sometimes it leaves in undesirable content like menus and navigation aids or it removes content that should have been left alone, like article headings. In order, to have perfect content extraction, we will need to customize the fetch process, as described in the next section."
msgstr ""

#: ../../news.rst:61
# 9b20a598e50f4868921cf6b3c5965a55
msgid "Customizing the fetch process"
msgstr ""

#: ../../news.rst:63
# 60aa6b6223844d8f9f75c24429d59880
msgid "When you want to perfect the download process, or download content from a particularly complex website, you can avail yourself of all the power and flexibility of the :term:`recipe` framework. In order to do that, in the :guilabel:`Add custom news sources` dialog, simply click the :guilabel:`Switch to Advanced mode` button."
msgstr ""

#: ../../news.rst:65
# 1f3ee5a69f534783abbc24935688ee61
msgid "The easiest and often most productive customization is to use the print version of the online articles. The print version typically has much less cruft and translates much more smoothly to an ebook. Let's try to use the print version of the articles from *The BBC*."
msgstr ""

#: ../../news.rst:68
# 43443e9af52a48b9a4d2aa3627d90ea4
msgid "Using the print version of bbc.co.uk"
msgstr ""

#: ../../news.rst:70
# 46cec91ad8f9485aa5e176c670b372ed
msgid "The first step is to look at the ebook we downloaded previously from :ref:`bbc`. At the end of each article, in the ebook is a little blurb telling you where the article was downloaded from. Copy and paste that URL into a browser. Now on the article webpage look for a link that points to the \"Printable version\". Click it to see the print version of the article. It looks much neater! Now compare the two URLs. For me they were:"
msgstr ""

#: ../../news.rst:73
# 29aa8783ad7142dcb4e0772dac7fd355
msgid "Article URL"
msgstr ""

#: ../../news.rst:73
# 5f55c30c4f9f407fafd8c0edc060178c
msgid "http://news.bbc.co.uk/2/hi/science/nature/7312016.stm"
msgstr ""

#: ../../news.rst:76
# 33be8be0e6894df5b0200f51c247fefa
msgid "Print version URL"
msgstr ""

#: ../../news.rst:76
# 07556fb919204a18a3a0b2105fcbe9fb
msgid "http://newsvote.bbc.co.uk/mpapps/pagetools/print/news.bbc.co.uk/2/hi/science/nature/7312016.stm"
msgstr ""

#: ../../news.rst:78
# 587b4968de8e405d90e022d430230660
msgid "So it looks like to get the print version, we need to prefix every article URL with:"
msgstr ""

#: ../../news.rst:80
# c83d568700634951b181daa4f61d2a43
msgid "newsvote.bbc.co.uk/mpapps/pagetools/print/"
msgstr ""

#: ../../news.rst:82
# 5ae6ca9a907c4f089554059d1e36e17b
msgid "Now in the :guilabel:`Advanced Mode` of the Custom  news sources dialog, you should see something like (remember to select *The BBC* recipe before switching to advanced mode):"
msgstr ""

#: ../../news.rst:87
# 018ea29e55444f9caee1553b30d8d1c1
msgid "You can see that the fields from the :guilabel:`Basic mode` have been translated to python code in a straightforward manner. We need to add instructions to this recipe to use the print version of the articles. All that's needed is to add the following two lines:"
msgstr ""

#: ../../news.rst:94
# ecf60e37bcc04c3e9dfee0abbe0c359f
msgid "This is python, so indentation is important. After you've added the lines, it should look like:"
msgstr ""

#: ../../news.rst:99
# c27c7ee4ad4f4d728626bf5f9d5d53bb
msgid "In the above, ``def print_version(self, url)`` defines a *method* that is called by |app| for every article. ``url`` is the URL of the original article. What ``print_version`` does is take that url and replace it with the new URL that points to the print version of the article. To learn about `python <http://www.python.org>`_ see the `tutorial <http://docs.python.org/tut/>`_."
msgstr ""

#: ../../news.rst:101
# 70fa795a0a6c4b3bb5a6c9e51e16ccfe
msgid "Now, click the :guilabel:`Add/update recipe` button and your changes will be saved. Re-download the ebook. You should have a much improved ebook. One of the problems with the new version is that the fonts on the print version webpage are too small. This is automatically fixed when converting to an ebook, but even after the fixing process, the font size of the menus and navigation bar to become too large relative to the article text. To fix this, we will do some more customization, in the next section."
msgstr ""

#: ../../news.rst:104
# 5e92a5e7b6d74767a4733198d766e15f
msgid "Replacing article styles"
msgstr ""

#: ../../news.rst:106
# 7b21bb7356324dcfb2721465a68b36b0
msgid "In the previous section, we saw that the font size for articles from the print version of *The BBC* was too small. In most websites, *The BBC* included, this font size is set by means of :term:`CSS` stylesheets. We can disable the fetching of such stylesheets by adding the line::"
msgstr ""

#: ../../news.rst:110
# b8db395469c548d68efac9d8a158a710
msgid "The recipe now looks like:"
msgstr ""

#: ../../news.rst:117
# 730a6d9aa01f46c598b5efd2fd82b442
msgid "The new version looks pretty good. If you're a perfectionist, you'll want to read the next section, which deals with actually modifying the downloaded content."
msgstr ""

#: ../../news.rst:120
# c9ef16e0c3b7492d97ca0ba0939dcfc0
msgid "Slicing and dicing"
msgstr ""

#: ../../news.rst:122
# 500d8f3286254034bae552c2c6480322
msgid "|app| contains very powerful and flexible abilities when it comes to manipulating downloaded content. To show off a couple of these, let's look at our old friend the :ref:`The BBC <bbc1>` recipe again. Looking at the source code (:term:`HTML`) of a couple of articles (print version), we see that they have a footer that contains no useful information, contained in"
msgstr ""

#: ../../news.rst:130
# c7527dce0f374b08abd3f83b521e7a9b
msgid "This can be removed by adding::"
msgstr ""

#: ../../news.rst:134
# 64e64c66bc7d4816a574c8547c4d3c80
msgid "to the recipe. Finally, lets replace some of the :term:`CSS` that we disabled earlier, with our own :term:`CSS` that is suitable for conversion to an ebook::"
msgstr ""

#: ../../news.rst:138
# a466435d3b834c6b9ee88e5f1de46c16
msgid "With these additions, our recipe has become \"production quality\", indeed it is very close to the actual recipe used by |app| for the *BBC*, shown below:"
msgstr ""

#: ../../news.rst:142
# 910f7e9ddf6b44b0b665b84ec31729d2
msgid "This :term:`recipe` explores only the tip of the iceberg when it comes to the power of |app|. To explore more of the abilities of |app| we'll examine a more complex real life example in the next section."
msgstr ""

#: ../../news.rst:145
# 33f63ec0c63b4e91b25d63e81d6ad99e
msgid "Real life example"
msgstr ""

#: ../../news.rst:147
# 63cdf773845e4eda886806971d020e0e
msgid "A reasonably complex real life example that exposes more of the :term:`API` of ``BasicNewsRecipe`` is the :term:`recipe` for *The New York Times*"
msgstr ""

#: ../../news.rst:233
# 6dbd5691226347efb5e8ee7797524ef2
msgid "We see several new features in this :term:`recipe`. First, we have::"
msgstr ""

#: ../../news.rst:237
# 8886418547cd423b89e0e334a1e77f4a
msgid "This sets the displayed time on the front page of the created ebook to be in the format, ``Day, Day_Number Month, Year``. See :attr:`timefmt <calibre.web.feeds.news.BasicNewsRecipe.timefmt>`."
msgstr ""

#: ../../news.rst:240
# 905347a284844389985b6a38e6405fe4
msgid "Then we see a group of directives to cleanup the downloaded :term:`HTML`::"
msgstr ""

#: ../../news.rst:246
# b6bd6f10355246df9c6cde2ad4c481de
msgid "These remove everything before the first ``<h1>`` tag and everything after the first tag whose id is ``footer``. See :attr:`remove_tags <calibre.web.feeds.news.BasicNewsRecipe.remove_tags>`, :attr:`remove_tags_before <calibre.web.feeds.news.BasicNewsRecipe.remove_tags_before>`, :attr:`remove_tags_after <calibre.web.feeds.news.BasicNewsRecipe.remove_tags_after>`."
msgstr ""

#: ../../news.rst:248
# 457076133b4b4a7b9ebc18139827a4d9
msgid "The next interesting feature is::"
msgstr ""

#: ../../news.rst:255
# 314e7003e6ea48ebba09860d669bd2d7
msgid "``needs_subscription = True`` tells |app| that this recipe needs a username and password in order to access the content. This causes, |app| to ask for a username and password whenever you try to use this recipe. The code in :meth:`calibre.web.feeds.news.BasicNewsRecipe.get_browser` actually does the login into the NYT website. Once logged in, |app| will use the same, logged in, browser instance to fetch all content. See `mechanize <http://wwwsearch.sourceforge.net/mechanize/>`_ to understand the code in ``get_browser``."
msgstr ""

#: ../../news.rst:257
# fcdacf66e32c4bc1a7a902166b1f54ba
msgid "The next new feature is the :meth:`calibre.web.feeds.news.BasicNewsRecipe.parse_index` method. Its job is to go to http://www.nytimes.com/pages/todayspaper/index.html and fetch the list of articles that appear in *todays* paper. While more complex than simply using :term:`RSS`, the recipe creates an ebook that corresponds very closely to the days paper. ``parse_index`` makes heavy use of `BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/documentation.html>`_ to parse the daily paper webpage. You can also use other, more modern parsers if you dislike BeatifulSoup. calibre comes with `lxml <http://lxml.de/>`_ and `html5lib <https://github.com/html5lib/html5lib-python>`_, which are the recommended parsers. To use them, replace the call to ``index_to_soup()`` with the following::"
msgstr ""

#: ../../news.rst:278
# 7f7fe423fdf548a2b8041de712022f05
msgid "The final new feature is the :meth:`calibre.web.feeds.news.BasicNewsRecipe.preprocess_html` method. It can be used to perform arbitrary transformations on every downloaded HTML page. Here it is used to bypass the ads that the nytimes shows you before each article."
msgstr ""

#: ../../news.rst:281
# 3d1683bd5dcf4ea7aba1dafe8b137d43
msgid "Tips for developing new recipes"
msgstr ""

#: ../../news.rst:283
# 5d92713150944a4fa39670daeb1f7fc1
msgid "The best way to develop new recipes is to use the command line interface. Create the recipe using your favorite python editor and save it to a file say :file:`myrecipe.recipe`. The `.recipe` extension is required. You can download content using this recipe with the command::"
msgstr ""

#: ../../news.rst:287
# 4c6c0fd489784136b50c1fb9a944bf3d
msgid "The command :command:`ebook-convert` will download all the webpages and save them to the EPUB file :file:`myrecipe.epub`. The :option:`-vv` makes ebook-convert spit out a lot of information about what it is doing. The :option:`--test` makes it download only a couple of articles from at most two feeds. In addition, ebook-convert will put the downloaded HTML into the ``debug/input`` directory, where ``debug`` is the directory you specified in the :option:`--debug-pipeline` option."
msgstr ""

#: ../../news.rst:289
# 7323df17ed224dd4917f2009ac162bc3
msgid "Once the download is complete, you can look at the downloaded :term:`HTML` by opening the file :file:`debug/input/index.html` in a browser. Once you're satisfied that the download and preprocessing is happening correctly, you can generate ebooks in different formats as shown below::"
msgstr ""

#: ../../news.rst:296
# 3426fa8fd7af4612bbb3094876c3c51f
msgid "If you're satisfied with your recipe, and you feel there is enough demand to justify its inclusion into the set of built-in recipes, post your recipe in the `calibre recipes forum <http://www.mobileread.com/forums/forumdisplay.php?f=228>`_ to share it with other calibre users."
msgstr ""

#: ../../news.rst:298
# 76b9b1c95d2745ff8c920e156f825bff
msgid "On OS X, the ebook-convert command will not be available by default. Go to Preferences->Miscellaneous and click the install command line tools button to make it available."
msgstr ""

#: ../../news.rst:302
# e886dcb4b42a42f197123245d2495b59
msgid ":ref:`ebook-convert`"
msgstr ""

#: ../../news.rst:303
# 6464fab1aed2466ea5ea7110d9c611ed
msgid "The command line interface for all ebook conversion."
msgstr ""

#: ../../news.rst:307
# e3a68b0d2c28473cb9c72d701a3a97bc
msgid "Further reading"
msgstr ""

#: ../../news.rst:309
# 32adf039004d4cff8448a1a8af43b60a
msgid "To learn more about writing advanced recipes using some of the facilities, available in ``BasicNewsRecipe`` you should consult the following sources:"
msgstr ""

#: ../../news.rst:312
# 223abd7e15f3415586f788a5cac4684a
msgid ":ref:`API Documentation <news_recipe>`"
msgstr ""

#: ../../news.rst:312
# 7f1d82db8085487fbf78713f9fa28c64
msgid "Documentation of the ``BasicNewsRecipe`` class and all its important methods and fields."
msgstr ""

#: ../../news.rst:315
# de951200a6dd40428e2f17cb70ab1719
msgid "`BasicNewsRecipe <http://bazaar.launchpad.net/~kovid/calibre/trunk/annotate/head:/src/calibre/web/feeds/news.py>`_"
msgstr ""

#: ../../news.rst:315
# 0a96a3d6d1b641d49a11ec94c25b1f2f
msgid "The source code of ``BasicNewsRecipe``"
msgstr ""

#: ../../news.rst:318
# 81a826762dbf46379dd8d213412be8a8
msgid "`Built-in recipes <http://bazaar.launchpad.net/~kovid/calibre/trunk/files/head:/recipes/>`_"
msgstr ""

#: ../../news.rst:318
# a71326f55c8b475caef18fb987a6c626
msgid "The source code for the built-in recipes that come with |app|"
msgstr ""

#: ../../news.rst:322
# c27749178dd147f8a3fb3c28a8b503be
msgid "`The calibre recipes forum <http://www.mobileread.com/forums/forumdisplay.php?f=228>`_"
msgstr ""

#: ../../news.rst:321
# b2ac0d621a974f468172a01e82b0ed5d
msgid "Lots of knowledgeable |app| recipe writers hang out here."
msgstr ""

#: ../../news.rst:325
# 88ed1b52e3344297b84e0b4015410308
msgid "API documentation"
msgstr ""

