# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.48.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-11 23:35+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../news.rst:5
# fd060fe36f0b4a79949239eb897c58f7
msgid "Adding your favorite news website"
msgstr ""

#: ../../news.rst:7
# 635fd1dbdda34cbd9ab774d0c243bdf6
msgid "|app| has a powerful, flexible and easy-to-use framework for downloading news from the Internet and converting it into an ebook. The following will show you, by means of examples, how to get news from various websites."
msgstr ""

#: ../../news.rst:9
# d71e77f6e5394105a689aae2210c9696
msgid "To gain an understanding of how to use the framework, follow the examples in the order listed below:"
msgstr ""

#: ../../news.rst:16
# b5202623a2364b8594cac9529612f5de
msgid "Completely automatic fetching"
msgstr ""

#: ../../news.rst:18
# 97d2dbfad0c54e71b252a776fb124c17
msgid "If your news source is simple enough, |app| may well be able to fetch it completely automatically, all you need to do is provide the URL. |app| gathers all the information needed to download a news source into a :term:`recipe`. In order to tell |app| about a news source, you have to create a :term:`recipe` for it. Let's see some examples:"
msgstr ""

#: ../../news.rst:23
# a79a9602a4ff4eaba6a15c97eea8b631
msgid "portfolio.com"
msgstr ""

#: ../../news.rst:25
# 6aceb9c02e5340b9a3233c56ce2083e1
msgid "*portfolio.com* is the website for *Cond√© Nast Portfolio*, a business related magazine. In order to download articles from the magazine and convert them to ebooks, we rely on the :term:`RSS` feeds of portfolio.com. A list of such feeds is available at http://www.portfolio.com/rss/."
msgstr ""

#: ../../news.rst:27
# 1eb503d919ee4191902e304e8c79b3b2
msgid "Lets pick a couple of feeds that look interesting:"
msgstr ""

#: ../../news.rst:29
# bb67405c594447bdb4dd318e67ea6f8b
msgid "Business Travel: http://feeds.portfolio.com/portfolio/businesstravel"
msgstr ""

#: ../../news.rst:30
# 272dc9483d7443ceafd238dc4a6bd7bf
msgid "Tech Observer: http://feeds.portfolio.com/portfolio/thetechobserver"
msgstr ""

#: ../../news.rst:32
# 026860d7141b47389f90a406ead14beb
msgid "I got the URLs by clicking the little orange RSS icon next to each feed name. To make |app| download the feeds and convert them into an ebook, you should right click the :guilabel:`Fetch news` button and then the :guilabel:`Add a custom news source` menu item. A dialog similar to that shown below should open up."
msgstr ""

#: ../../news.rst:37
# 9bee06d9490840ecb15c47198dffd7c1
msgid "First enter ``Portfolio`` into the :guilabel:`Recipe title` field. This will be the title of the ebook that will be created from the articles in the above feeds."
msgstr ""

#: ../../news.rst:39
# f888b3306cf24ef5b74c58975b805b35
msgid "The next two fields (:guilabel:`Oldest article` and :guilabel:`Max. number of articles`) allow you some control over how many articles should be downloaded from each feed, and they are pretty self explanatory."
msgstr ""

#: ../../news.rst:41
# 40281b721959470dbcdf3782fa9bd627
msgid "To add the feeds to the recipe, enter the feed title and the feed URL and click the :guilabel:`Add feed` button. Once you have added both feeds, simply click the :guilabel:`Add/update recipe` button and you're done! Close the dialog."
msgstr ""

#: ../../news.rst:43
# 15f4721f09274709bc3dbd305d9b83f0
msgid "To test your new :term:`recipe`, click the :guilabel:`Fetch news` button and in the :guilabel:`Custom news sources` sub-menu click :guilabel:`Portfolio`. After a couple of minutes, the newly downloaded Portfolio ebook will appear in the main library view (if you have your reader connected, it will be put onto the reader instead of into the library). Select it and hit the :guilabel:`View` button to read!"
msgstr ""

#: ../../news.rst:45
# 27a89d74b41f43e98e667dc4a2a05a1b
msgid "The reason this worked so well, with so little effort is that *portfolio.com* provides *full-content* :term:`RSS` feeds, i.e., the article content is embedded in the feed itself. For most news sources that provide news in this fashion, with *full-content* feeds, you don't need any more effort to convert them to ebooks. Now we will look at a news source that does not provide full content feeds. In such feeds, the full article is a webpage and the feed only contains a link to the webpage with a short summary of the article."
msgstr ""

#: ../../news.rst:50
# dbbfe2bf328547d78d390634c4b3497c
msgid "bbc.co.uk"
msgstr ""

#: ../../news.rst:52
# a456402657774241888d4ec0bf54888b
msgid "Lets try the following two feeds from *The BBC*:"
msgstr ""

#: ../../news.rst:54
# 754af6541f6e44428912aababfff1621
msgid "News Front Page: http://newsrss.bbc.co.uk/rss/newsonline_world_edition/front_page/rss.xml"
msgstr ""

#: ../../news.rst:55
# 8cd0dba5b75c4770bfd64deee98ecbc1
msgid "Science/Nature: http://newsrss.bbc.co.uk/rss/newsonline_world_edition/science/nature/rss.xml"
msgstr ""

#: ../../news.rst:57
# 0efed7b8f7a54de18fdaf8284e9040a1
msgid "Follow the procedure outlined in :ref:`portfolio` to create a recipe for *The BBC* (using the feeds above). Looking at the downloaded ebook, we see that |app| has done a creditable job of extracting only the content you care about from each article's webpage. However, the extraction process is not perfect. Sometimes it leaves in undesirable content like menus and navigation aids or it removes content that should have been left alone, like article headings. In order, to have perfect content extraction, we will need to customize the fetch process, as described in the next section."
msgstr ""

#: ../../news.rst:60
# 7bce13ca2756477a8777938948a6369f
msgid "Customizing the fetch process"
msgstr ""

#: ../../news.rst:62
# 0dbdb8e1a79942aeb5b5ba47a530710c
msgid "When you want to perfect the download process, or download content from a particularly complex website, you can avail yourself of all the power and flexibility of the :term:`recipe` framework. In order to do that, in the :guilabel:`Add custom news sources` dialog, simply click the :guilabel:`Switch to Advanced mode` button."
msgstr ""

#: ../../news.rst:64
# 5cb7d7fbe4dc456a9e9981f7893cde42
msgid "The easiest and often most productive customization is to use the print version of the online articles. The print version typically has much less cruft and translates much more smoothly to an ebook. Let's try to use the print version of the articles from *The BBC*."
msgstr ""

#: ../../news.rst:67
# c87a0010e77e47e0b89875d2bf409583
msgid "Using the print version of bbc.co.uk"
msgstr ""

#: ../../news.rst:69
# fd826be2ddb94bf9936613e83193b286
msgid "The first step is to look at the ebook we downloaded previously from :ref:`bbc`. At the end of each article, in the ebook is a little blurb telling you where the article was downloaded from. Copy and paste that URL into a browser. Now on the article webpage look for a link that points to the \"Printable version\". Click it to see the print version of the article. It looks much neater! Now compare the two URLs. For me they were:"
msgstr ""

#: ../../news.rst:72
# e8856871326c4155995cb81b571ed46d
msgid "Article URL"
msgstr ""

#: ../../news.rst:72
# 80948afd54a148f7a3c64c3b7d6240ad
msgid "http://news.bbc.co.uk/2/hi/science/nature/7312016.stm"
msgstr ""

#: ../../news.rst:75
# 1e758d195cfe4ee8a4fc17a6c9a83ecf
msgid "Print version URL"
msgstr ""

#: ../../news.rst:75
# ca249294200d4ea38ce76262d2adef35
msgid "http://newsvote.bbc.co.uk/mpapps/pagetools/print/news.bbc.co.uk/2/hi/science/nature/7312016.stm"
msgstr ""

#: ../../news.rst:77
# a0e08e853558495fbb76a5baeefa2f7f
msgid "So it looks like to get the print version, we need to prefix every article URL with:"
msgstr ""

#: ../../news.rst:79
# 774c5fec650d474db4077c1a58f50ef8
msgid "newsvote.bbc.co.uk/mpapps/pagetools/print/"
msgstr ""

#: ../../news.rst:81
# 84649acac9994a049471409cabb1fde0
msgid "Now in the :guilabel:`Advanced Mode` of the Custom  news sources dialog, you should see something like (remember to select *The BBC* recipe before switching to advanced mode):"
msgstr ""

#: ../../news.rst:86
# 87a456d6c3264806822711a995f39d41
msgid "You can see that the fields from the :guilabel:`Basic mode` have been translated to python code in a straightforward manner. We need to add instructions to this recipe to use the print version of the articles. All that's needed is to add the following two lines:"
msgstr ""

#: ../../news.rst:93
# 0a2f017b413f443c97e6e595be9475fb
msgid "This is python, so indentation is important. After you've added the lines, it should look like:"
msgstr ""

#: ../../news.rst:98
# 0a366ad091d54cd0850f3497c1a61e84
msgid "In the above, ``def print_version(self, url)`` defines a *method* that is called by |app| for every article. ``url`` is the URL of the original article. What ``print_version`` does is take that url and replace it with the new URL that points to the print version of the article. To learn about `python <http://www.python.org>`_ see the `tutorial <http://docs.python.org/tut/>`_."
msgstr ""

#: ../../news.rst:100
# 2a5f3b3530b740b9ab28382aa7cb1b9a
msgid "Now, click the :guilabel:`Add/update recipe` button and your changes will be saved. Re-download the ebook. You should have a much improved ebook. One of the problems with the new version is that the fonts on the print version webpage are too small. This is automatically fixed when converting to an ebook, but even after the fixing process, the font size of the menus and navigation bar to become too large relative to the article text. To fix this, we will do some more customization, in the next section."
msgstr ""

#: ../../news.rst:103
# 5451e6fa31fd4394b23085f34d34c57f
msgid "Replacing article styles"
msgstr ""

#: ../../news.rst:105
# fdb625afe4984e63b764f4d6ef27633d
msgid "In the previous section, we saw that the font size for articles from the print version of *The BBC* was too small. In most websites, *The BBC* included, this font size is set by means of :term:`CSS` stylesheets. We can disable the fetching of such stylesheets by adding the line::"
msgstr ""

#: ../../news.rst:109
# 9ccb1480e8d345abb323b6f28d661b80
msgid "The recipe now looks like:"
msgstr ""

#: ../../news.rst:116
# 93530862fbb04e4aa15ac77b655a8a3a
msgid "The new version looks pretty good. If you're a perfectionist, you'll want to read the next section, which deals with actually modifying the downloaded content."
msgstr ""

#: ../../news.rst:119
# eafe3283bf594465b5f424d15f1924cd
msgid "Slicing and dicing"
msgstr ""

#: ../../news.rst:121
# c84489d8bb8f4016a3824a13945d947b
msgid "|app| contains very powerful and flexible abilities when it comes to manipulating downloaded content. To show off a couple of these, let's look at our old friend the :ref:`The BBC <bbc1>` recipe again. Looking at the source code (:term:`HTML`) of a couple of articles (print version), we see that they have a footer that contains no useful information, contained in"
msgstr ""

#: ../../news.rst:129
# fa80093eb2084a878c1f44215a868041
msgid "This can be removed by adding::"
msgstr ""

#: ../../news.rst:133
# 1790468b656545b9884c5adf7831ea8f
msgid "to the recipe. Finally, lets replace some of the :term:`CSS` that we disabled earlier, with our own :term:`CSS` that is suitable for conversion to an ebook::"
msgstr ""

#: ../../news.rst:137
# 25a37ad00d744a67988190367df81e03
msgid "With these additions, our recipe has become \"production quality\", indeed it is very close to the actual recipe used by |app| for the *BBC*, shown below:"
msgstr ""

#: ../../news.rst:141
# 0fc9b190f49d4b1d8e346dbda3daf383
msgid "This :term:`recipe` explores only the tip of the iceberg when it comes to the power of |app|. To explore more of the abilities of |app| we'll examine a more complex real life example in the next section."
msgstr ""

#: ../../news.rst:144
# ec8b528f16f44144b187fe043874ca4c
msgid "Real life example"
msgstr ""

#: ../../news.rst:146
# 86a0534eaff443b49d7bfde235797f53
msgid "A reasonably complex real life example that exposes more of the :term:`API` of ``BasicNewsRecipe`` is the :term:`recipe` for *The New York Times*"
msgstr ""

#: ../../news.rst:232
# 4d0ac925333241b1a2534b982ae7fd9d
msgid "We see several new features in this :term:`recipe`. First, we have::"
msgstr ""

#: ../../news.rst:236
# 75f5c321e64745dc86bc9e18fe0b5133
msgid "This sets the displayed time on the front page of the created ebook to be in the format, ``Day, Day_Number Month, Year``. See :attr:`timefmt <calibre.web.feeds.news.BasicNewsRecipe.timefmt>`."
msgstr ""

#: ../../news.rst:239
# 8cc2dbf1304847e5a275896b061b8844
msgid "Then we see a group of directives to cleanup the downloaded :term:`HTML`::"
msgstr ""

#: ../../news.rst:245
# bd43e3329ca847a985f3c158c30a94c2
msgid "These remove everything before the first ``<h1>`` tag and everything after the first tag whose id is ``footer``. See :attr:`remove_tags <calibre.web.feeds.news.BasicNewsRecipe.remove_tags>`, :attr:`remove_tags_before <calibre.web.feeds.news.BasicNewsRecipe.remove_tags_before>`, :attr:`remove_tags_after <calibre.web.feeds.news.BasicNewsRecipe.remove_tags_after>`."
msgstr ""

#: ../../news.rst:247
# 242cf4ab3a8446c092ff38a4f14dda2f
msgid "The next interesting feature is::"
msgstr ""

#: ../../news.rst:254
# eead52739bed44ef8dd5e1f9f7b84558
msgid "``needs_subscription = True`` tells |app| that this recipe needs a username and password in order to access the content. This causes, |app| to ask for a username and password whenever you try to use this recipe. The code in :meth:`calibre.web.feeds.news.BasicNewsRecipe.get_browser` actually does the login into the NYT website. Once logged in, |app| will use the same, logged in, browser instance to fetch all content. See `mechanize <http://wwwsearch.sourceforge.net/mechanize/>`_ to understand the code in ``get_browser``."
msgstr ""

#: ../../news.rst:256
# 2a0c274e9f6f47b89068497e5ae4cc95
msgid "The next new feature is the :meth:`calibre.web.feeds.news.BasicNewsRecipe.parse_index` method. Its job is to go to http://www.nytimes.com/pages/todayspaper/index.html and fetch the list of articles that appear in *todays* paper. While more complex than simply using :term:`RSS`, the recipe creates an ebook that corresponds very closely to the days paper. ``parse_index`` makes heavy use of `BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/documentation.html>`_ to parse the daily paper webpage. You can also use other, more modern parsers if you dislike BeatifulSoup. calibre comes with `lxml <http://lxml.de/>`_ and `html5lib <https://github.com/html5lib/html5lib-python>`_, which are the recommended parsers. To use them, replace the call to ``index_to_soup()`` with the following::"
msgstr ""

#: ../../news.rst:277
# 453b2bbd5ba543f5a0268baa0bfef265
msgid "The final new feature is the :meth:`calibre.web.feeds.news.BasicNewsRecipe.preprocess_html` method. It can be used to perform arbitrary transformations on every downloaded HTML page. Here it is used to bypass the ads that the nytimes shows you before each article."
msgstr ""

#: ../../news.rst:280
# 08127ad5bb744174acceb4984db4c726
msgid "Tips for developing new recipes"
msgstr ""

#: ../../news.rst:282
# 574eb5bf3fb54bcdba89135b9be8190b
msgid "The best way to develop new recipes is to use the command line interface. Create the recipe using your favorite python editor and save it to a file say :file:`myrecipe.recipe`. The `.recipe` extension is required. You can download content using this recipe with the command::"
msgstr ""

#: ../../news.rst:286
# 77bff1ffac3d4334844c6ce111231e34
msgid "The command :command:`ebook-convert` will download all the webpages and save them to the EPUB file :file:`myrecipe.epub`. The :option:`-vv` makes ebook-convert spit out a lot of information about what it is doing. The :option:`--test` makes it download only a couple of articles from at most two feeds. In addition, ebook-convert will put the downloaded HTML into the ``debug/input`` directory, where ``debug`` is the directory you specified in the :option:`--debug-pipeline` option."
msgstr ""

#: ../../news.rst:288
# ea8898906dc342429bcf113533020c9f
msgid "Once the download is complete, you can look at the downloaded :term:`HTML` by opening the file :file:`debug/input/index.html` in a browser. Once you're satisfied that the download and preprocessing is happening correctly, you can generate ebooks in different formats as shown below::"
msgstr ""

#: ../../news.rst:295
# 30832a8b4592461c8e005ad9301356f7
msgid "If you're satisfied with your recipe, and you feel there is enough demand to justify its inclusion into the set of built-in recipes, post your recipe in the `calibre recipes forum <http://www.mobileread.com/forums/forumdisplay.php?f=228>`_ to share it with other calibre users."
msgstr ""

#: ../../news.rst:298
# 5b7588ef37c1423e82d5a5e791358e45
msgid "On OS X, the command line tools are inside the |app| bundle, for example, if you installed calibre in :file:`/Applications` the command line tools are in :file:`/Applications/calibre.app/Contents/MacOS/calibre`."
msgstr ""

#: ../../news.rst:304
# 0069c0464aab47f59f5a3540dd25c27c
msgid ":ref:`ebook-convert`"
msgstr ""

#: ../../news.rst:305
# 9c38b5e5938f471793308d7f47ddcbf4
msgid "The command line interface for all ebook conversion."
msgstr ""

#: ../../news.rst:309
# 249a5fd02e7342d29f15ac2a995f9dad
msgid "Further reading"
msgstr ""

#: ../../news.rst:311
# b1ab015c9c644d84a6c781b65141ed57
msgid "To learn more about writing advanced recipes using some of the facilities, available in ``BasicNewsRecipe`` you should consult the following sources:"
msgstr ""

#: ../../news.rst:314
# 4c2f8aa209944bbd806824f5733f7ced
msgid ":ref:`API Documentation <news_recipe>`"
msgstr ""

#: ../../news.rst:314
# 43fe68caaf6e422dabff1f57f4d6195c
msgid "Documentation of the ``BasicNewsRecipe`` class and all its important methods and fields."
msgstr ""

#: ../../news.rst:317
# f74e53f7bede432684b804826c951322
msgid "`BasicNewsRecipe <http://bazaar.launchpad.net/~kovid/calibre/trunk/annotate/head:/src/calibre/web/feeds/news.py>`_"
msgstr ""

#: ../../news.rst:317
# bf8658f1316546e0b8af294b92582856
msgid "The source code of ``BasicNewsRecipe``"
msgstr ""

#: ../../news.rst:320
# 48e0c0e1a650402893a68f2f0950e3a9
msgid "`Built-in recipes <http://bazaar.launchpad.net/~kovid/calibre/trunk/files/head:/recipes/>`_"
msgstr ""

#: ../../news.rst:320
# 947143ab345c4ac3b061c24aff0d7cf4
msgid "The source code for the built-in recipes that come with |app|"
msgstr ""

#: ../../news.rst:324
# 49773bf7b36e4f6cbeab5894ef2ff440
msgid "`The calibre recipes forum <http://www.mobileread.com/forums/forumdisplay.php?f=228>`_"
msgstr ""

#: ../../news.rst:323
# a828d29bf81a47df86c4b3b396f1e91e
msgid "Lots of knowledgeable |app| recipe writers hang out here."
msgstr ""

#: ../../news.rst:327
# 16dfcb016bd042ea8647395f53071a8e
msgid "API documentation"
msgstr ""

