# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.42.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-27 09:25+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../news.rst:6
# 4c339a8996484585bdbeab071b202a21
msgid "Adding your favorite news website"
msgstr ""

#: ../../news.rst:8
# 6818959ff92f4ea3a6de8171e0dc27ec
msgid "|app| has a powerful, flexible and easy-to-use framework for downloading news from the Internet and converting it into an ebook. The following will show you, by means of examples, how to get news from various websites."
msgstr ""

#: ../../news.rst:10
# a22523c59bb946a3a0ab03b3d4a2fa80
msgid "To gain an understanding of how to use the framework, follow the examples in the order listed below:"
msgstr ""

#: ../../news.rst:17
# e508754a1b81481ba9019a9bce96a6a4
msgid "Completely automatic fetching"
msgstr ""

#: ../../news.rst:19
# 1d4d8d8bd044415f8313ccb669cb5cde
msgid "If your news source is simple enough, |app| may well be able to fetch it completely automatically, all you need to do is provide the URL. |app| gathers all the information needed to download a news source into a :term:`recipe`. In order to tell |app| about a news source, you have to create a :term:`recipe` for it. Let's see some examples:"
msgstr ""

#: ../../news.rst:24
# d21540c1dea44ed6a164566c1d956283
msgid "portfolio.com"
msgstr ""

#: ../../news.rst:26
# 427dc7e1df67407e8dede7cbdbea65e8
msgid "*portfolio.com* is the website for *Cond√© Nast Portfolio*, a business related magazine. In order to download articles from the magazine and convert them to ebooks, we rely on the :term:`RSS` feeds of portfolio.com. A list of such feeds is available at http://www.portfolio.com/rss/."
msgstr ""

#: ../../news.rst:28
# 36e988813037415b9ed66d38f2fcb556
msgid "Lets pick a couple of feeds that look interesting:"
msgstr ""

#: ../../news.rst:30
# c7af368a4ff34080b54e767c95f266a8
msgid "Business Travel: http://feeds.portfolio.com/portfolio/businesstravel"
msgstr ""

#: ../../news.rst:31
# a7432ddcaa9444e19286ab2f0b89bbf7
msgid "Tech Observer: http://feeds.portfolio.com/portfolio/thetechobserver"
msgstr ""

#: ../../news.rst:33
# f8dc956858734363926174a6f0795f75
msgid "I got the URLs by clicking the little orange RSS icon next to each feed name. To make |app| download the feeds and convert them into an ebook, you should right click the :guilabel:`Fetch news` button and then the :guilabel:`Add a custom news source` menu item. A dialog similar to that shown below should open up."
msgstr ""

#: ../../news.rst:38
# f25f11fbc6c24ebb99d4fc84277c3faf
msgid "First enter ``Portfolio`` into the :guilabel:`Recipe title` field. This will be the title of the ebook that will be created from the articles in the above feeds."
msgstr ""

#: ../../news.rst:40
# f0e5147791c1493daf9012b412833ad5
msgid "The next two fields (:guilabel:`Oldest article` and :guilabel:`Max. number of articles`) allow you some control over how many articles should be downloaded from each feed, and they are pretty self explanatory."
msgstr ""

#: ../../news.rst:42
# 4677bdcb476e4c63bd0093c026e23d38
msgid "To add the feeds to the recipe, enter the feed title and the feed URL and click the :guilabel:`Add feed` button. Once you have added both feeds, simply click the :guilabel:`Add/update recipe` button and you're done! Close the dialog."
msgstr ""

#: ../../news.rst:44
# 9e3201942bfb4038936ad4f22462a787
msgid "To test your new :term:`recipe`, click the :guilabel:`Fetch news` button and in the :guilabel:`Custom news sources` sub-menu click :guilabel:`Portfolio`. After a couple of minutes, the newly downloaded Portfolio ebook will appear in the main library view (if you have your reader connected, it will be put onto the reader instead of into the library). Select it and hit the :guilabel:`View` button to read!"
msgstr ""

#: ../../news.rst:46
# ab5576b254744556b387da5685b9a238
msgid "The reason this worked so well, with so little effort is that *portfolio.com* provides *full-content* :term:`RSS` feeds, i.e., the article content is embedded in the feed itself. For most news sources that provide news in this fashion, with *full-content* feeds, you don't need any more effort to convert them to ebooks. Now we will look at a news source that does not provide full content feeds. In such feeds, the full article is a webpage and the feed only contains a link to the webpage with a short summary of the article."
msgstr ""

#: ../../news.rst:51
# 9e7c0b8c44204ecc924f1b99ac4c9c25
msgid "bbc.co.uk"
msgstr ""

#: ../../news.rst:53
# deeecdc020714bb48259546af23c8a51
msgid "Lets try the following two feeds from *The BBC*:"
msgstr ""

#: ../../news.rst:55
# 9d5a35b1cbc04688bcf99ec0a057cf85
msgid "News Front Page: http://newsrss.bbc.co.uk/rss/newsonline_world_edition/front_page/rss.xml"
msgstr ""

#: ../../news.rst:56
# 1f612ef71cf9497385356c036063246c
msgid "Science/Nature: http://newsrss.bbc.co.uk/rss/newsonline_world_edition/science/nature/rss.xml"
msgstr ""

#: ../../news.rst:58
# c2726794c3214d599542db4aab315794
msgid "Follow the procedure outlined in :ref:`portfolio` to create a recipe for *The BBC* (using the feeds above). Looking at the downloaded ebook, we see that |app| has done a creditable job of extracting only the content you care about from each article's webpage. However, the extraction process is not perfect. Sometimes it leaves in undesirable content like menus and navigation aids or it removes content that should have been left alone, like article headings. In order, to have perfect content extraction, we will need to customize the fetch process, as described in the next section."
msgstr ""

#: ../../news.rst:61
# 231ff715a354472cb7a4cb005d6935ab
msgid "Customizing the fetch process"
msgstr ""

#: ../../news.rst:63
# 605f63a7ead7480192e3594f4b98fd83
msgid "When you want to perfect the download process, or download content from a particularly complex website, you can avail yourself of all the power and flexibility of the :term:`recipe` framework. In order to do that, in the :guilabel:`Add custom news sources` dialog, simply click the :guilabel:`Switch to Advanced mode` button."
msgstr ""

#: ../../news.rst:65
# a9a5cb341ffb4fb4b782f00b35fca892
msgid "The easiest and often most productive customization is to use the print version of the online articles. The print version typically has much less cruft and translates much more smoothly to an ebook. Let's try to use the print version of the articles from *The BBC*."
msgstr ""

#: ../../news.rst:68
# 3cd8edb97fc74176a0daefddd3831dc8
msgid "Using the print version of bbc.co.uk"
msgstr ""

#: ../../news.rst:70
# 3fa6b6970dc1499da73b893a0a57fa5e
msgid "The first step is to look at the ebook we downloaded previously from :ref:`bbc`. At the end of each article, in the ebook is a little blurb telling you where the article was downloaded from. Copy and paste that URL into a browser. Now on the article webpage look for a link that points to the \"Printable version\". Click it to see the print version of the article. It looks much neater! Now compare the two URLs. For me they were:"
msgstr ""

#: ../../news.rst:73
# b6ea821b066b4154a3980c8291ac6d33
msgid "Article URL"
msgstr ""

#: ../../news.rst:73
# c5c2d01790c140f3bbb4be558df2a130
msgid "http://news.bbc.co.uk/2/hi/science/nature/7312016.stm"
msgstr ""

#: ../../news.rst:76
# 0bc9c29f904f4680a265349efb1e1554
msgid "Print version URL"
msgstr ""

#: ../../news.rst:76
# 78e970b083a147219452ea277764acf4
msgid "http://newsvote.bbc.co.uk/mpapps/pagetools/print/news.bbc.co.uk/2/hi/science/nature/7312016.stm"
msgstr ""

#: ../../news.rst:78
# ca41d8d19b9c4fa4807dc7531dd02526
msgid "So it looks like to get the print version, we need to prefix every article URL with:"
msgstr ""

#: ../../news.rst:80
# f7174287a518410b8b483d23cbb50996
msgid "newsvote.bbc.co.uk/mpapps/pagetools/print/"
msgstr ""

#: ../../news.rst:82
# 5867f7414c0f4920a72d4438580b16e3
msgid "Now in the :guilabel:`Advanced Mode` of the Custom  news sources dialog, you should see something like (remember to select *The BBC* recipe before switching to advanced mode):"
msgstr ""

#: ../../news.rst:87
# 68fd8b96421344f6a3436626feaefdc7
msgid "You can see that the fields from the :guilabel:`Basic mode` have been translated to python code in a straightforward manner. We need to add instructions to this recipe to use the print version of the articles. All that's needed is to add the following two lines:"
msgstr ""

#: ../../news.rst:94
# 7c7f53483360491cb784b1937c288106
msgid "This is python, so indentation is important. After you've added the lines, it should look like:"
msgstr ""

#: ../../news.rst:99
# 020ac1f1e9da4f858da96e4457474f99
msgid "In the above, ``def print_version(self, url)`` defines a *method* that is called by |app| for every article. ``url`` is the URL of the original article. What ``print_version`` does is take that url and replace it with the new URL that points to the print version of the article. To learn about `python <http://www.python.org>`_ see the `tutorial <http://docs.python.org/tut/>`_."
msgstr ""

#: ../../news.rst:101
# c862da39dc0e4aadabd22d495901603e
msgid "Now, click the :guilabel:`Add/update recipe` button and your changes will be saved. Re-download the ebook. You should have a much improved ebook. One of the problems with the new version is that the fonts on the print version webpage are too small. This is automatically fixed when converting to an ebook, but even after the fixing process, the font size of the menus and navigation bar to become too large relative to the article text. To fix this, we will do some more customization, in the next section."
msgstr ""

#: ../../news.rst:104
# 304eec3f4fdf4218bb4099722e500bde
msgid "Replacing article styles"
msgstr ""

#: ../../news.rst:106
# a4ee53f707054cb4a95286f844206cd6
msgid "In the previous section, we saw that the font size for articles from the print version of *The BBC* was too small. In most websites, *The BBC* included, this font size is set by means of :term:`CSS` stylesheets. We can disable the fetching of such stylesheets by adding the line::"
msgstr ""

#: ../../news.rst:110
# b039b224af8c435d8788037a3886f849
msgid "The recipe now looks like:"
msgstr ""

#: ../../news.rst:117
# 1d4208ccdab24859a83e607f31e6f058
msgid "The new version looks pretty good. If you're a perfectionist, you'll want to read the next section, which deals with actually modifying the downloaded content."
msgstr ""

#: ../../news.rst:120
# 51ba5aab8e7d4cde9eebf1a7f5e6312b
msgid "Slicing and dicing"
msgstr ""

#: ../../news.rst:122
# 585f1cad4bc5420ea09809801a6ce038
msgid "|app| contains very powerful and flexible abilities when it comes to manipulating downloaded content. To show off a couple of these, let's look at our old friend the :ref:`The BBC <bbc1>` recipe again. Looking at the source code (:term:`HTML`) of a couple of articles (print version), we see that they have a footer that contains no useful information, contained in"
msgstr ""

#: ../../news.rst:130
# 7f630be7891540c7b78eac64029690e6
msgid "This can be removed by adding::"
msgstr ""

#: ../../news.rst:134
# c6d7ee6a58c2451fa910d9f8c6f0714f
msgid "to the recipe. Finally, lets replace some of the :term:`CSS` that we disabled earlier, with our own :term:`CSS` that is suitable for conversion to an ebook::"
msgstr ""

#: ../../news.rst:138
# c2bb1370b690448b94658539595da71e
msgid "With these additions, our recipe has become \"production quality\", indeed it is very close to the actual recipe used by |app| for the *BBC*, shown below:"
msgstr ""

#: ../../news.rst:142
# 49fb0a651f49435a91297ee90055513c
msgid "This :term:`recipe` explores only the tip of the iceberg when it comes to the power of |app|. To explore more of the abilities of |app| we'll examine a more complex real life example in the next section."
msgstr ""

#: ../../news.rst:145
# b558f54b787f4e2f958f1bc63d4a6bcf
msgid "Real life example"
msgstr ""

#: ../../news.rst:147
# 02a1903a931a4721a9b208595d18033d
msgid "A reasonably complex real life example that exposes more of the :term:`API` of ``BasicNewsRecipe`` is the :term:`recipe` for *The New York Times*"
msgstr ""

#: ../../news.rst:233
# 48c4997d19df4ed99f24a97776803dd8
msgid "We see several new features in this :term:`recipe`. First, we have::"
msgstr ""

#: ../../news.rst:237
# 59a7cefa7cbf4f51bf8c9e03ca9af695
msgid "This sets the displayed time on the front page of the created ebook to be in the format, ``Day, Day_Number Month, Year``. See :attr:`timefmt <calibre.web.feeds.news.BasicNewsRecipe.timefmt>`."
msgstr ""

#: ../../news.rst:240
# 1a20dea3b0d64e3495d2f156146b126e
msgid "Then we see a group of directives to cleanup the downloaded :term:`HTML`::"
msgstr ""

#: ../../news.rst:246
# b046739d869f41c79428bce805f83137
msgid "These remove everything before the first ``<h1>`` tag and everything after the first tag whose id is ``footer``. See :attr:`remove_tags <calibre.web.feeds.news.BasicNewsRecipe.remove_tags>`, :attr:`remove_tags_before <calibre.web.feeds.news.BasicNewsRecipe.remove_tags_before>`, :attr:`remove_tags_after <calibre.web.feeds.news.BasicNewsRecipe.remove_tags_after>`."
msgstr ""

#: ../../news.rst:248
# 4ec3bdc50cf942cc926b127a21f06125
msgid "The next interesting feature is::"
msgstr ""

#: ../../news.rst:255
# bf448326cdd743ae9bd9b6b2e665868b
msgid "``needs_subscription = True`` tells |app| that this recipe needs a username and password in order to access the content. This causes, |app| to ask for a username and password whenever you try to use this recipe. The code in :meth:`calibre.web.feeds.news.BasicNewsRecipe.get_browser` actually does the login into the NYT website. Once logged in, |app| will use the same, logged in, browser instance to fetch all content. See `mechanize <http://wwwsearch.sourceforge.net/mechanize/>`_ to understand the code in ``get_browser``."
msgstr ""

#: ../../news.rst:257
# 948ceade730e40b5a67be216603d9a00
msgid "The next new feature is the :meth:`calibre.web.feeds.news.BasicNewsRecipe.parse_index` method. Its job is to go to http://www.nytimes.com/pages/todayspaper/index.html and fetch the list of articles that appear in *todays* paper. While more complex than simply using :term:`RSS`, the recipe creates an ebook that corresponds very closely to the days paper. ``parse_index`` makes heavy use of `BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/documentation.html>`_ to parse the daily paper webpage. You can also use other, more modern parsers if you dislike BeatifulSoup. calibre comes with `lxml <http://lxml.de/>`_ and `html5lib <https://github.com/html5lib/html5lib-python>`_, which are the recommended parsers. To use them, replace the call to ``index_to_soup()`` with the following::"
msgstr ""

#: ../../news.rst:278
# f9dcd2173cc341f690e9e81d8b2ab8b2
msgid "The final new feature is the :meth:`calibre.web.feeds.news.BasicNewsRecipe.preprocess_html` method. It can be used to perform arbitrary transformations on every downloaded HTML page. Here it is used to bypass the ads that the nytimes shows you before each article."
msgstr ""

#: ../../news.rst:281
# 7bd9f39c26fb46ef8562f22e853865c1
msgid "Tips for developing new recipes"
msgstr ""

#: ../../news.rst:283
# d464c99a949b4943b2f24143db301b44
msgid "The best way to develop new recipes is to use the command line interface. Create the recipe using your favorite python editor and save it to a file say :file:`myrecipe.recipe`. The `.recipe` extension is required. You can download content using this recipe with the command::"
msgstr ""

#: ../../news.rst:287
# d153dafa360b4dffbf31afddf4c1bd44
msgid "The command :command:`ebook-convert` will download all the webpages and save them to the EPUB file :file:`myrecipe.epub`. The :option:`-vv` makes ebook-convert spit out a lot of information about what it is doing. The :option:`--test` makes it download only a couple of articles from at most two feeds. In addition, ebook-convert will put the downloaded HTML into the ``debug/input`` directory, where ``debug`` is the directory you specified in the :option:`--debug-pipeline` option."
msgstr ""

#: ../../news.rst:289
# e36ec0c71f11477cb66516a3519d994c
msgid "Once the download is complete, you can look at the downloaded :term:`HTML` by opening the file :file:`debug/input/index.html` in a browser. Once you're satisfied that the download and preprocessing is happening correctly, you can generate ebooks in different formats as shown below::"
msgstr ""

#: ../../news.rst:296
# cd7bf3d96f574902aa8aa0e1e7161dba
msgid "If you're satisfied with your recipe, and you feel there is enough demand to justify its inclusion into the set of built-in recipes, post your recipe in the `calibre recipes forum <http://www.mobileread.com/forums/forumdisplay.php?f=228>`_ to share it with other calibre users."
msgstr ""

#: ../../news.rst:298
# 9b447ecd466f48e294343e60ae7e5f42
msgid "On OS X, the ebook-convert command will not be available by default. Go to Preferences->Miscellaneous and click the install command line tools button to make it available."
msgstr ""

#: ../../news.rst:302
# 2bee7349d00c485d85a24939e57d37d7
msgid ":ref:`ebook-convert`"
msgstr ""

#: ../../news.rst:303
# b4a65fcb0d324dc2aec4de779cb9abb3
msgid "The command line interface for all ebook conversion."
msgstr ""

#: ../../news.rst:307
# d7262b65cad64972ae5a1362526b3507
msgid "Further reading"
msgstr ""

#: ../../news.rst:309
# 4cf111869a1d449185764288f381f486
msgid "To learn more about writing advanced recipes using some of the facilities, available in ``BasicNewsRecipe`` you should consult the following sources:"
msgstr ""

#: ../../news.rst:312
# b72b79e3f5304f4fb2a1206384e5e912
msgid ":ref:`API Documentation <news_recipe>`"
msgstr ""

#: ../../news.rst:312
# 986364d9d47040f79ee591d4bfd2250e
msgid "Documentation of the ``BasicNewsRecipe`` class and all its important methods and fields."
msgstr ""

#: ../../news.rst:315
# 42d877571c324f8e860f076da555b8ce
msgid "`BasicNewsRecipe <http://bazaar.launchpad.net/~kovid/calibre/trunk/annotate/head:/src/calibre/web/feeds/news.py>`_"
msgstr ""

#: ../../news.rst:315
# 2f00e451842446ea93d847ab1101a34b
msgid "The source code of ``BasicNewsRecipe``"
msgstr ""

#: ../../news.rst:318
# 5d59819ac8bc41429f6760795c785ad4
msgid "`Built-in recipes <http://bazaar.launchpad.net/~kovid/calibre/trunk/files/head:/recipes/>`_"
msgstr ""

#: ../../news.rst:318
# b8dc88f1a1384e3fbd12899c46ff01d2
msgid "The source code for the built-in recipes that come with |app|"
msgstr ""

#: ../../news.rst:322
# 00243935a5b54437a5c4178fbcc868e0
msgid "`The calibre recipes forum <http://www.mobileread.com/forums/forumdisplay.php?f=228>`_"
msgstr ""

#: ../../news.rst:321
# 3a5d4e8c20fb424e83976b913658b2f8
msgid "Lots of knowledgeable |app| recipe writers hang out here."
msgstr ""

#: ../../news.rst:325
# 3ce6d51aeb1248df8cf1fe81c611a8b3
msgid "API documentation"
msgstr ""

