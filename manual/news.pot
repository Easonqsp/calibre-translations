# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.48.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-08 08:53+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../news.rst:6
# 2a884c9f4b1143c9b65d63ad01b27925
msgid "Adding your favorite news website"
msgstr ""

#: ../../news.rst:8
# e6c5eda844544b19882bfd521136d42d
msgid "|app| has a powerful, flexible and easy-to-use framework for downloading news from the Internet and converting it into an ebook. The following will show you, by means of examples, how to get news from various websites."
msgstr ""

#: ../../news.rst:10
# 4a3150f25a3048ba8d19a1423ea42060
msgid "To gain an understanding of how to use the framework, follow the examples in the order listed below:"
msgstr ""

#: ../../news.rst:17
# 55df5c68089a4c0a90f58a92343d41e5
msgid "Completely automatic fetching"
msgstr ""

#: ../../news.rst:19
# bb2ce93fd47f4c6eaac17011c656c287
msgid "If your news source is simple enough, |app| may well be able to fetch it completely automatically, all you need to do is provide the URL. |app| gathers all the information needed to download a news source into a :term:`recipe`. In order to tell |app| about a news source, you have to create a :term:`recipe` for it. Let's see some examples:"
msgstr ""

#: ../../news.rst:24
# 5a22665087ed441992c4d12a3a1cd347
msgid "portfolio.com"
msgstr ""

#: ../../news.rst:26
# 62c36fafa69740e7804a9986adce00ca
msgid "*portfolio.com* is the website for *Cond√© Nast Portfolio*, a business related magazine. In order to download articles from the magazine and convert them to ebooks, we rely on the :term:`RSS` feeds of portfolio.com. A list of such feeds is available at http://www.portfolio.com/rss/."
msgstr ""

#: ../../news.rst:28
# 00be1187fdfe4b50b39656df18f1f071
msgid "Lets pick a couple of feeds that look interesting:"
msgstr ""

#: ../../news.rst:30
# 4e800dcc7f214a478435e5b7cbb7b1f7
msgid "Business Travel: http://feeds.portfolio.com/portfolio/businesstravel"
msgstr ""

#: ../../news.rst:31
# 6cf9fa71a4734e6ca75b3b1683a05f50
msgid "Tech Observer: http://feeds.portfolio.com/portfolio/thetechobserver"
msgstr ""

#: ../../news.rst:33
# 0255c1608b474b509df0377c5da84ec3
msgid "I got the URLs by clicking the little orange RSS icon next to each feed name. To make |app| download the feeds and convert them into an ebook, you should right click the :guilabel:`Fetch news` button and then the :guilabel:`Add a custom news source` menu item. A dialog similar to that shown below should open up."
msgstr ""

#: ../../news.rst:38
# 0a6b13a2eb1548d982ff1a190588f0d2
msgid "First enter ``Portfolio`` into the :guilabel:`Recipe title` field. This will be the title of the ebook that will be created from the articles in the above feeds."
msgstr ""

#: ../../news.rst:40
# 192798806eec484fbe12608bebdb7c7e
msgid "The next two fields (:guilabel:`Oldest article` and :guilabel:`Max. number of articles`) allow you some control over how many articles should be downloaded from each feed, and they are pretty self explanatory."
msgstr ""

#: ../../news.rst:42
# c6fa3b4d3ca246babf251d50f3ed47bf
msgid "To add the feeds to the recipe, enter the feed title and the feed URL and click the :guilabel:`Add feed` button. Once you have added both feeds, simply click the :guilabel:`Add/update recipe` button and you're done! Close the dialog."
msgstr ""

#: ../../news.rst:44
# 953be65c29674639bde3a98f8de01a22
msgid "To test your new :term:`recipe`, click the :guilabel:`Fetch news` button and in the :guilabel:`Custom news sources` sub-menu click :guilabel:`Portfolio`. After a couple of minutes, the newly downloaded Portfolio ebook will appear in the main library view (if you have your reader connected, it will be put onto the reader instead of into the library). Select it and hit the :guilabel:`View` button to read!"
msgstr ""

#: ../../news.rst:46
# 9f9197de9c5d49e79af93a9f467c7e04
msgid "The reason this worked so well, with so little effort is that *portfolio.com* provides *full-content* :term:`RSS` feeds, i.e., the article content is embedded in the feed itself. For most news sources that provide news in this fashion, with *full-content* feeds, you don't need any more effort to convert them to ebooks. Now we will look at a news source that does not provide full content feeds. In such feeds, the full article is a webpage and the feed only contains a link to the webpage with a short summary of the article."
msgstr ""

#: ../../news.rst:51
# 56f3bde7ebc54c778c347959c9ae04a6
msgid "bbc.co.uk"
msgstr ""

#: ../../news.rst:53
# a627fea38c5144cebcbe9a8d661a87cc
msgid "Lets try the following two feeds from *The BBC*:"
msgstr ""

#: ../../news.rst:55
# d08d540464634d768a3bcb05b6f23efc
msgid "News Front Page: http://newsrss.bbc.co.uk/rss/newsonline_world_edition/front_page/rss.xml"
msgstr ""

#: ../../news.rst:56
# 0e8496ceda0144648d7afd95c1460ce5
msgid "Science/Nature: http://newsrss.bbc.co.uk/rss/newsonline_world_edition/science/nature/rss.xml"
msgstr ""

#: ../../news.rst:58
# b4fed13d03ce4509b27a7f5c00ede546
msgid "Follow the procedure outlined in :ref:`portfolio` to create a recipe for *The BBC* (using the feeds above). Looking at the downloaded ebook, we see that |app| has done a creditable job of extracting only the content you care about from each article's webpage. However, the extraction process is not perfect. Sometimes it leaves in undesirable content like menus and navigation aids or it removes content that should have been left alone, like article headings. In order, to have perfect content extraction, we will need to customize the fetch process, as described in the next section."
msgstr ""

#: ../../news.rst:61
# 2294e0999d694e1fb6e4e9fedf26c71a
msgid "Customizing the fetch process"
msgstr ""

#: ../../news.rst:63
# 08439283068e44868f20b7dc508dd07e
msgid "When you want to perfect the download process, or download content from a particularly complex website, you can avail yourself of all the power and flexibility of the :term:`recipe` framework. In order to do that, in the :guilabel:`Add custom news sources` dialog, simply click the :guilabel:`Switch to Advanced mode` button."
msgstr ""

#: ../../news.rst:65
# 120099a3f9784597bff4bcb36c62bf39
msgid "The easiest and often most productive customization is to use the print version of the online articles. The print version typically has much less cruft and translates much more smoothly to an ebook. Let's try to use the print version of the articles from *The BBC*."
msgstr ""

#: ../../news.rst:68
# 5da79faa60cb4c8f890486a23e38ca31
msgid "Using the print version of bbc.co.uk"
msgstr ""

#: ../../news.rst:70
# bfef702339814452a11e1abcb169a85a
msgid "The first step is to look at the ebook we downloaded previously from :ref:`bbc`. At the end of each article, in the ebook is a little blurb telling you where the article was downloaded from. Copy and paste that URL into a browser. Now on the article webpage look for a link that points to the \"Printable version\". Click it to see the print version of the article. It looks much neater! Now compare the two URLs. For me they were:"
msgstr ""

#: ../../news.rst:73
# 3fdc34e2e62c4a51ba9ba2abd1422812
msgid "Article URL"
msgstr ""

#: ../../news.rst:73
# 184706a376914217b13002288786942b
msgid "http://news.bbc.co.uk/2/hi/science/nature/7312016.stm"
msgstr ""

#: ../../news.rst:76
# 5ad25095c38a49ec9e21ac0527307847
msgid "Print version URL"
msgstr ""

#: ../../news.rst:76
# 1bd6d49ae1224ff2b3b1b8c9258b926d
msgid "http://newsvote.bbc.co.uk/mpapps/pagetools/print/news.bbc.co.uk/2/hi/science/nature/7312016.stm"
msgstr ""

#: ../../news.rst:78
# aa393673aea347b68a2c7a8b99637e69
msgid "So it looks like to get the print version, we need to prefix every article URL with:"
msgstr ""

#: ../../news.rst:80
# d03bfd6d776f4875aafdc8c4de3fee94
msgid "newsvote.bbc.co.uk/mpapps/pagetools/print/"
msgstr ""

#: ../../news.rst:82
# 387571d485c04b41ab5caa85d6704c94
msgid "Now in the :guilabel:`Advanced Mode` of the Custom  news sources dialog, you should see something like (remember to select *The BBC* recipe before switching to advanced mode):"
msgstr ""

#: ../../news.rst:87
# 294031f620d0453ab7b87b448b755c51
msgid "You can see that the fields from the :guilabel:`Basic mode` have been translated to python code in a straightforward manner. We need to add instructions to this recipe to use the print version of the articles. All that's needed is to add the following two lines:"
msgstr ""

#: ../../news.rst:94
# 14ecfe014c2a414395aeb48ed5beeb8e
msgid "This is python, so indentation is important. After you've added the lines, it should look like:"
msgstr ""

#: ../../news.rst:99
# 101517460f8c4be08acf83c8409e40b0
msgid "In the above, ``def print_version(self, url)`` defines a *method* that is called by |app| for every article. ``url`` is the URL of the original article. What ``print_version`` does is take that url and replace it with the new URL that points to the print version of the article. To learn about `python <http://www.python.org>`_ see the `tutorial <http://docs.python.org/tut/>`_."
msgstr ""

#: ../../news.rst:101
# 429236544066437b957b3294a1e25f37
msgid "Now, click the :guilabel:`Add/update recipe` button and your changes will be saved. Re-download the ebook. You should have a much improved ebook. One of the problems with the new version is that the fonts on the print version webpage are too small. This is automatically fixed when converting to an ebook, but even after the fixing process, the font size of the menus and navigation bar to become too large relative to the article text. To fix this, we will do some more customization, in the next section."
msgstr ""

#: ../../news.rst:104
# 8cfd56729419436e9dfb8a0a5908c540
msgid "Replacing article styles"
msgstr ""

#: ../../news.rst:106
# 6168782d84f649aaa28d443247e177ea
msgid "In the previous section, we saw that the font size for articles from the print version of *The BBC* was too small. In most websites, *The BBC* included, this font size is set by means of :term:`CSS` stylesheets. We can disable the fetching of such stylesheets by adding the line::"
msgstr ""

#: ../../news.rst:110
# b3256c0d3f714d1b82eba142e3210242
msgid "The recipe now looks like:"
msgstr ""

#: ../../news.rst:117
# ac07396207b64d9b86350894050979fc
msgid "The new version looks pretty good. If you're a perfectionist, you'll want to read the next section, which deals with actually modifying the downloaded content."
msgstr ""

#: ../../news.rst:120
# 274547064f4249c28fa0894edd11bd3a
msgid "Slicing and dicing"
msgstr ""

#: ../../news.rst:122
# 1e9a57b21c334f938e7c2fc64c657247
msgid "|app| contains very powerful and flexible abilities when it comes to manipulating downloaded content. To show off a couple of these, let's look at our old friend the :ref:`The BBC <bbc1>` recipe again. Looking at the source code (:term:`HTML`) of a couple of articles (print version), we see that they have a footer that contains no useful information, contained in"
msgstr ""

#: ../../news.rst:130
# 5a7f645185c04f8c82f48411b0aaacd7
msgid "This can be removed by adding::"
msgstr ""

#: ../../news.rst:134
# 26da113c58f94fd39eb663c2a585547f
msgid "to the recipe. Finally, lets replace some of the :term:`CSS` that we disabled earlier, with our own :term:`CSS` that is suitable for conversion to an ebook::"
msgstr ""

#: ../../news.rst:138
# 5b7d07e7a8194d359f7d6b8a34c8e4e4
msgid "With these additions, our recipe has become \"production quality\", indeed it is very close to the actual recipe used by |app| for the *BBC*, shown below:"
msgstr ""

#: ../../news.rst:142
# a543e7a894084216b20f1d93d82098bf
msgid "This :term:`recipe` explores only the tip of the iceberg when it comes to the power of |app|. To explore more of the abilities of |app| we'll examine a more complex real life example in the next section."
msgstr ""

#: ../../news.rst:145
# dc365fe657cc451ea25f760beda16c6b
msgid "Real life example"
msgstr ""

#: ../../news.rst:147
# 92f5624539b1458791028cca03721135
msgid "A reasonably complex real life example that exposes more of the :term:`API` of ``BasicNewsRecipe`` is the :term:`recipe` for *The New York Times*"
msgstr ""

#: ../../news.rst:233
# edff011f0e6743d9b5148d9473e2b829
msgid "We see several new features in this :term:`recipe`. First, we have::"
msgstr ""

#: ../../news.rst:237
# 14a1cac187cc442e9d212b77bcc63b7b
msgid "This sets the displayed time on the front page of the created ebook to be in the format, ``Day, Day_Number Month, Year``. See :attr:`timefmt <calibre.web.feeds.news.BasicNewsRecipe.timefmt>`."
msgstr ""

#: ../../news.rst:240
# cdca066d354f48ca96edd218001ef967
msgid "Then we see a group of directives to cleanup the downloaded :term:`HTML`::"
msgstr ""

#: ../../news.rst:246
# 050a7208bd684ced9eb054466eceb3a6
msgid "These remove everything before the first ``<h1>`` tag and everything after the first tag whose id is ``footer``. See :attr:`remove_tags <calibre.web.feeds.news.BasicNewsRecipe.remove_tags>`, :attr:`remove_tags_before <calibre.web.feeds.news.BasicNewsRecipe.remove_tags_before>`, :attr:`remove_tags_after <calibre.web.feeds.news.BasicNewsRecipe.remove_tags_after>`."
msgstr ""

#: ../../news.rst:248
# f2cc43eb6b3b47b3917a900e3d05b41f
msgid "The next interesting feature is::"
msgstr ""

#: ../../news.rst:255
# 28e6f910dc314226ae3ef0d633c2349f
msgid "``needs_subscription = True`` tells |app| that this recipe needs a username and password in order to access the content. This causes, |app| to ask for a username and password whenever you try to use this recipe. The code in :meth:`calibre.web.feeds.news.BasicNewsRecipe.get_browser` actually does the login into the NYT website. Once logged in, |app| will use the same, logged in, browser instance to fetch all content. See `mechanize <http://wwwsearch.sourceforge.net/mechanize/>`_ to understand the code in ``get_browser``."
msgstr ""

#: ../../news.rst:257
# 6a3a7253d7694780ab8c40e7cc16e271
msgid "The next new feature is the :meth:`calibre.web.feeds.news.BasicNewsRecipe.parse_index` method. Its job is to go to http://www.nytimes.com/pages/todayspaper/index.html and fetch the list of articles that appear in *todays* paper. While more complex than simply using :term:`RSS`, the recipe creates an ebook that corresponds very closely to the days paper. ``parse_index`` makes heavy use of `BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/documentation.html>`_ to parse the daily paper webpage. You can also use other, more modern parsers if you dislike BeatifulSoup. calibre comes with `lxml <http://lxml.de/>`_ and `html5lib <https://github.com/html5lib/html5lib-python>`_, which are the recommended parsers. To use them, replace the call to ``index_to_soup()`` with the following::"
msgstr ""

#: ../../news.rst:278
# 6139187fe5f64ae3ae0afa05f1abbee2
msgid "The final new feature is the :meth:`calibre.web.feeds.news.BasicNewsRecipe.preprocess_html` method. It can be used to perform arbitrary transformations on every downloaded HTML page. Here it is used to bypass the ads that the nytimes shows you before each article."
msgstr ""

#: ../../news.rst:281
# 2e975e545556423d90610a74deb58207
msgid "Tips for developing new recipes"
msgstr ""

#: ../../news.rst:283
# 436519eb493d4c05bd26e44ab5f0eb83
msgid "The best way to develop new recipes is to use the command line interface. Create the recipe using your favorite python editor and save it to a file say :file:`myrecipe.recipe`. The `.recipe` extension is required. You can download content using this recipe with the command::"
msgstr ""

#: ../../news.rst:287
# c745695cd7ce4e19bfe1771793047af3
msgid "The command :command:`ebook-convert` will download all the webpages and save them to the EPUB file :file:`myrecipe.epub`. The :option:`-vv` makes ebook-convert spit out a lot of information about what it is doing. The :option:`--test` makes it download only a couple of articles from at most two feeds. In addition, ebook-convert will put the downloaded HTML into the ``debug/input`` directory, where ``debug`` is the directory you specified in the :option:`--debug-pipeline` option."
msgstr ""

#: ../../news.rst:289
# 96e2bb9603514b90a672f2f8920e8cd0
msgid "Once the download is complete, you can look at the downloaded :term:`HTML` by opening the file :file:`debug/input/index.html` in a browser. Once you're satisfied that the download and preprocessing is happening correctly, you can generate ebooks in different formats as shown below::"
msgstr ""

#: ../../news.rst:296
# 11ed50523b5d4c478dbb65c6d4d54b97
msgid "If you're satisfied with your recipe, and you feel there is enough demand to justify its inclusion into the set of built-in recipes, post your recipe in the `calibre recipes forum <http://www.mobileread.com/forums/forumdisplay.php?f=228>`_ to share it with other calibre users."
msgstr ""

#: ../../news.rst:298
# 71df23d764004731aec08f68c2a8818e
msgid "On OS X, the ebook-convert command will not be available by default. Go to Preferences->Miscellaneous and click the install command line tools button to make it available."
msgstr ""

#: ../../news.rst:302
# 330c258f4bc7413dad01bf3aeabe2cc5
msgid ":ref:`ebook-convert`"
msgstr ""

#: ../../news.rst:303
# f9943a96795e4ec8816361be447e4bb1
msgid "The command line interface for all ebook conversion."
msgstr ""

#: ../../news.rst:307
# 2cff06bac142405eb2c449fe6fc1581d
msgid "Further reading"
msgstr ""

#: ../../news.rst:309
# 2e482cb5695741faab115dfb7e2216db
msgid "To learn more about writing advanced recipes using some of the facilities, available in ``BasicNewsRecipe`` you should consult the following sources:"
msgstr ""

#: ../../news.rst:312
# c00e18c8934647398bd3f96cfb3ea4bf
msgid ":ref:`API Documentation <news_recipe>`"
msgstr ""

#: ../../news.rst:312
# 1df678dfd2d74aceb6cbc8943139ad7e
msgid "Documentation of the ``BasicNewsRecipe`` class and all its important methods and fields."
msgstr ""

#: ../../news.rst:315
# 9b74243a818d4da395358f5ede7d33bf
msgid "`BasicNewsRecipe <http://bazaar.launchpad.net/~kovid/calibre/trunk/annotate/head:/src/calibre/web/feeds/news.py>`_"
msgstr ""

#: ../../news.rst:315
# 29d265b5f0ce45ad83b59740f96c866a
msgid "The source code of ``BasicNewsRecipe``"
msgstr ""

#: ../../news.rst:318
# 28213d31f7aa44749f314b3feb9db30e
msgid "`Built-in recipes <http://bazaar.launchpad.net/~kovid/calibre/trunk/files/head:/recipes/>`_"
msgstr ""

#: ../../news.rst:318
# 28e4cd2cab7a47d38a0d6741144c31f7
msgid "The source code for the built-in recipes that come with |app|"
msgstr ""

#: ../../news.rst:322
# f4999ecf7bf14c37ad998078edfca2a5
msgid "`The calibre recipes forum <http://www.mobileread.com/forums/forumdisplay.php?f=228>`_"
msgstr ""

#: ../../news.rst:321
# 22234515b4ed4f7a86ddf33e4dee42c0
msgid "Lots of knowledgeable |app| recipe writers hang out here."
msgstr ""

#: ../../news.rst:325
# 034a20131dd04e1587a11de72ca7e9cf
msgid "API documentation"
msgstr ""

