# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.42.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-27 09:25+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../develop.rst:6
# a0e8df509de3405683cf902ca0ee0e08
msgid "Setting up a |app| development environment"
msgstr ""

#: ../../develop.rst:8
# 21eeb68652cd48d99c0042f1683c2d1a
msgid "|app| is completely open source, licensed under the `GNU GPL v3 <http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to download and modify the program to your heart's content. In this section, you will learn how to get a |app| development environment set up on the operating system of your choice. |app| is written primarily in `Python <http://www.python.org>`_ with some C/C++ code for speed and system interfacing. Note that |app| is not compatible with Python 3 and requires at least Python 2.7."
msgstr ""

#: ../../develop.rst:0
# 0cba4b7b317641ea93951f04b9c55232
msgid "Contents"
msgstr ""

#: ../../develop.rst:19
# 0dc78f71b6d444ec8d2ae85ebd5d676d
msgid "Design philosophy"
msgstr ""

#: ../../develop.rst:21
# a1f60e00814f435da1fc1d4faf96d187
msgid "|app| has its roots in the Unix world, which means that its design is highly modular. The modules interact with each other via well defined interfaces. This makes adding new features and fixing bugs in |app| very easy, resulting in a frenetic pace of development. Because of its roots, |app| has a comprehensive command line interface for all its functions, documented in :ref:`cli`."
msgstr ""

#: ../../develop.rst:26
# d3d73ad8f0074837aec25bb5f118f3ae
msgid "The modular design of |app| is expressed via ``Plugins``. There is a :ref:`tutorial <customize>` on writing |app| plugins. For example, adding support for a new device to |app| typically involves writing less than a 100 lines of code in the form of a device driver plugin. You can browse the `built-in drivers <http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_. Similarly, adding support for new conversion formats involves writing input/output format plugins. Another example of the modular design is the :ref:`recipe system <news>` for fetching news. For more examples of plugins designed to add features to |app|, see the `plugin index <http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

#: ../../develop.rst:36
# 0952f629b5d8438d9f6731118628bb8e
msgid "Code layout"
msgstr ""

#: ../../develop.rst:38
# a3583ab038d24d419e22297da01058dc
msgid "All the |app| python code is in the ``calibre`` package. This package contains the following main sub-packages"
msgstr ""

#: ../../develop.rst:40
# af32d693190f43c2959d3a3d97ba207e
msgid "devices - All the device drivers. Just look through some of the built-in drivers to get an idea for how they work."
msgstr ""

#: ../../develop.rst:42
# 8bc30fc26af04cdb9f93bac27ba4d109
msgid "For details, see: ``devices.interface`` which defines the interface supported by device drivers and ``devices.usbms`` which defines a generic driver that connects to a USBMS device. All USBMS based drivers in |app| inherit from it."
msgstr ""

#: ../../develop.rst:45
# c2f6d07828e34ae8b42b1e44773e2dec
msgid "ebooks  - All the ebook conversion/metadata code. A good starting point is ``calibre.ebooks.conversion.cli`` which is the module powering the :command:`ebook-convert` command. The conversion process is controlled via ``conversion.plumber``. The format independent code is all in ``ebooks.oeb`` and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../develop.rst:49
# 0673f6d290004be1977b18cc077b7cf1
msgid "Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

#: ../../develop.rst:50
# 39037c33b43d418b96e5bf52341ffd36
msgid "Conversion happens in a pipeline, for the structure of the pipeline, see :ref:`conversion-introduction`. The pipeline consists of an input plugin, various transforms and an output plugin. The code that constructs and drives the pipeline is in :file:`plumber.py`. The pipeline works on a representation of an ebook that is like an unzipped epub, with manifest, spine, toc, guide, html content, etc. The class that manages this representation is OEBBook in ``ebooks.oeb.base``. The various transformations that are applied to the book during conversions live in :file:`oeb/transforms/*.py`. And the input and output plugins live in :file:`conversion/plugins/*.py`."
msgstr ""

#: ../../develop.rst:60
# 39ad5522767944b7a420466ef102e2dc
msgid "Ebook editing happens using a different container object. All the code for editing is in ``ebooks.oeb.polish`` in particular the container object is in ``ebooks.oeb.polish.container``."
msgstr ""

#: ../../develop.rst:64
# c5f2edf2c0f449e692c07888f7f19288
msgid "db - The database back-end. See ``db.cache`` for the interface to the |app| library. With a DB object you can access this API via ``db.new_api``. The db object itself exposes a legacy API that should not be used in new code. The legacy API is in ``library.database2``."
msgstr ""

#: ../../develop.rst:65
# 8206ea52a73a43a58463709b37f8d786
msgid "content server: ``library.server`` is the |app| Content Server."
msgstr ""

#: ../../develop.rst:66
# 84c4e8f78cad4d559c57ae570cbdec2a
msgid "gui2 - The Graphical User Interface. GUI initialization happens in ``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The ebook editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../develop.rst:68
# c24e8feb96a741238af4308443f495c4
msgid "If you want to locate the entry points for all the various |app| executables, look at the ``entry_points`` structure in `linux.py <https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../develop.rst:72
# 7e44b739de26446c8bcf2a8ffe114920
msgid "If you need help understanding the code, post in the `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will most likely get help from one of |app|'s many developers."
msgstr ""

#: ../../develop.rst:76
# 65baf106f34944adb7f7b3a167d7d0a4
msgid "Getting the code"
msgstr ""

#: ../../develop.rst:78
# 1735c9705f3c40a9bc57157b1c8ce220
msgid "You can get the |app| source code in two ways, using a version control system or directly downloading a `tarball <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:81
# 38b42bed1f6842caa8f87595bc935877
msgid "|app| uses `Git <http://www.git-scm.com/>`_, a distributed version control system. Git is available on all the platforms |app| supports.  After installing Git, you can get the |app| source code with the command::"
msgstr ""

#: ../../develop.rst:87
# cf2ea0a77e3244debc4faedd8d4d8450
msgid "On Windows you will need the complete path name, that will be something like :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

#: ../../develop.rst:89
# 37ecb240cefc44558ce87211f3457952
msgid "|app| is a very large project with a very long source control history, so the above can take a while (10mins to an hour depending on your internet speed)."
msgstr ""

#: ../../develop.rst:92
# d4d6a411f35444bbb5786702f91fabac
msgid "If you want to get the code faster, the sourcecode for the latest release is always available as an `archive <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:95
# 154e8934d1854c1d85daf8aa39444314
msgid "To update a branch to the latest code, use the command::"
msgstr ""

#: ../../develop.rst:100
# 3f8ca0fe57b94efea2e32c99b7c6eb1a
msgid "Submitting your changes to be included"
msgstr ""

#: ../../develop.rst:102
# 5c1454ed4f3046f9be570efac1b8d6e8
msgid "If you only plan to make a few small changes, you can make your changes and create a \"merge directive\" which you can then attach to a ticket in the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, make your changes, then run::"
msgstr ""

#: ../../develop.rst:110
# 13dfc52aafe14bbd97f85ea3e1ea76f5
msgid "This will create a :file:`my-changes` file in the current directory, simply attach that to a ticket on the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. Note that this will include *all* the commits you have made. If you only want to send some commits, you have to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../develop.rst:118
# ec6386ebfa704072ae1c170a04441758
msgid "To send the last *n* commits, replace *1* with *n*, for example, for the last 3 commits::"
msgstr ""

#: ../../develop.rst:123
# 89f2004195a14ba1b3ccc237074a5ee9
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

#: ../../develop.rst:125
# a7900ce0e7254649b9cb57d6ed6c3035
msgid "If you plan to do a lot of development on |app|, then the best method is to create a `GitHub <http://github.com>`_ account. Below is a basic guide to setting up your own fork of calibre in a way that will allow you to submit pull requests for inclusion into the main |app| repository:"
msgstr ""

#: ../../develop.rst:130
# 5179b2cff40c4214a2a0e2b17744ca95
msgid "Setup git on your machine as described in this article: `Setup Git <https://help.github.com/articles/set-up-git>`_"
msgstr ""

#: ../../develop.rst:131
# d07744c9ae7a4aa3a0c7c86ead20cff9
msgid "Setup ssh keys for authentication to GitHub, as described here: `Generating SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

#: ../../develop.rst:132
# 5f56d819822e425f90a4301972a786e0
msgid "Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` button."
msgstr ""

#: ../../develop.rst:133
# 84b51a90f766480a859629462daf86f9
msgid "In a Terminal do::"
msgstr ""

#: ../../develop.rst:137
# c10819be6fa4414baf9b0398c1ea195f
msgid "Replace <username> above with your github username. That will get your fork checked out locally."
msgstr ""

#: ../../develop.rst:138
# 76688900f3cf44bf919908dab2037e44
msgid "You can make changes and commit them whenever you like. When you are ready to have your work merged, do a::"
msgstr ""

#: ../../develop.rst:142
# d550f96d3f874a669cb7f9e9b4bb6830
msgid "and go to ``https://github.com/<username>/calibre`` and click the :guilabel:`Pull Request` button to generate a pull request that can be merged."
msgstr ""

#: ../../develop.rst:143
# 9f95bfa9caba404db75f08d0d4691196
msgid "You can update your local copy with code from the main repo at any time by doing::"
msgstr ""

#: ../../develop.rst:148
# 03933ae5e524445abc3dd8e2836bd998
msgid "You should also keep an eye on the |app| `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making major changes, you should discuss them in the forum or contact Kovid directly (his email address is all over the source code)."
msgstr ""

#: ../../develop.rst:154
# 248f738933d54e689e053325dbfbcc06
msgid "Windows development environment"
msgstr ""

#: ../../develop.rst:156
#: ../../develop.rst:187
#: ../../develop.rst:219
# d5b91f36f7e94d30bad4f4e5f6c551c6
# 26d7701ee67f4291b313ae3e0bab60d3
# 2c654454eed54c64bf1c26f1739d09a7
msgid "You must also get the |app| source code separately as described above."
msgstr ""

#: ../../develop.rst:158
# 6063fab9be404b01bd7d6be4fe34d80c
msgid "Install |app| normally, using the Windows installer. Then open a Command Prompt and change to the previously checked out |app| code directory. For example::"
msgstr ""

#: ../../develop.rst:163
#: ../../develop.rst:231
# b9498e851288464a9392b3be96c11b2e
# 9b20197afc2d469297dbcb87cc70ee4b
msgid "calibre is the directory that contains the src and resources sub-directories."
msgstr ""

#: ../../develop.rst:165
# 8713629dbc7d411aa7122d4bbbd48071
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide <http://docs.python.org/using/windows.html#excursus-setting-environment-variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../develop.rst:170
# c10a2109f33845448c78f3f87d62b4d3
msgid "Once you have set the environment variable, open a new command prompt and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:175
#: ../../develop.rst:242
# ce8f0903a98f4895977819d5f5323026
# d529a35cdfb84338a78ecf47baf43bc3
msgid "Setting this environment variable means that |app| will now load all its Python code from the specified location."
msgstr ""

#: ../../develop.rst:177
# cfbcbd3e79f6486daa2b06ec36864e89
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src\\\\calibre\\\\__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:182
#: ../../develop.rst:249
# 4579ec6a33ff4faaa0547b92c46f17e0
# 75387d1e457a4d1bb5bca0fd4d9fcf8e
msgid "near the top of the file. Now run the command :command:`calibredb`. The very first line of output should be ``Hello, world!``."
msgstr ""

#: ../../develop.rst:185
# 47c22eb257dd4530bd0c70a664185fd0
msgid "OS X development environment"
msgstr ""

#: ../../develop.rst:189
# 5d206ac22014450d82756a9c55cb611c
msgid "Install |app| normally using the provided .dmg. Then open a Terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:194
# 2572eb93f1ed49658a7d310bf3fc9679
msgid "calibre is the directory that contains the src and resources sub-directories. Ensure you have installed the |app| commandline tools via :guilabel:`Preferences->Advanced->Miscellaneous` in the |app| GUI."
msgstr ""

#: ../../develop.rst:196
# 52b55e9f7ced44afbe06b5b61629a0fc
msgid "The next step is to create a bash script that will set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory when running calibre in debug mode."
msgstr ""

#: ../../develop.rst:198
# 6532bd79483f4d919acef497a2fc0c4e
msgid "Create a plain text file::"
msgstr ""

#: ../../develop.rst:204
# 5a4ff30125f040898b2fd2f56db02110
msgid "Save this file as ``/usr/bin/calibre-develop``, then set its permissions so that it can be executed::"
msgstr ""

#: ../../develop.rst:208
# 93b027c5fe9643229120405068acf68d
msgid "Once you have done this, run::"
msgstr ""

#: ../../develop.rst:212
# c73a227d58124bd0b6b2d857fcc63c1f
msgid "You should see some diagnostic information in the Terminal window as calibre starts up, and you should see an asterisk after the version number in the GUI window, indicating that you are running from source."
msgstr ""

#: ../../develop.rst:217
# d2a6134fe6204ab28a1b90fafbe31975
msgid "Linux development environment"
msgstr ""

#: ../../develop.rst:221
# d91607e465424882b09b7ff0cdc2fdb4
msgid "|app| is primarily developed on Linux. You have two choices in setting up the development environment. You can install the |app| binary as normal and use that as a runtime environment to do your development. This approach is similar to that used in Windows and OS X. Alternatively, you can install |app| from source. Instructions for setting up a development environment from source are in the INSTALL file in the source tree. Here we will address using the binary at runtime, which is the recommended method."
msgstr ""

#: ../../develop.rst:227
# 0b1f25a11c1a403cb56a1bbbccb406c3
msgid "Install the |app| using the binary installer. Then open a terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:233
# 60ba24ac46ee418b8f0740ada0075385
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``/home/kovid/work/calibre/src``. How to set environment variables depends on your Linux distribution and what shell you are using."
msgstr ""

#: ../../develop.rst:237
# b235c6f05fa94c9383128219ac3cd50c
msgid "Once you have set the environment variable, open a new terminal and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:244
# ace9d429505042d79ba468f46f3699dc
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src/calibre/__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:252
# 9060cb5cf9a440f6b472f8714b5d5a21
msgid "Having separate \"normal\" and \"development\" |app| installs on the same computer"
msgstr ""

#: ../../develop.rst:254
# 5b14f4b92daf4853b15cfd5f8d49b9f3
msgid "The |app| source tree is very stable and rarely breaks, but if you feel the need to run from source on a separate test library and run the released |app| version with your everyday library, you can achieve this easily using .bat files or shell scripts to launch |app|. The example below shows how to do this on Windows using .bat files (the instructions for other platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../develop.rst:259
# 0fcaa0eef20d4bf095b5cd4f582fcc92
msgid "To launch the release version of |app| with your everyday library:"
msgstr ""

#: ../../develop.rst:261
# 0fba066a158149b58d6f4ce6d2b10132
msgid "calibre-normal.bat::"
msgstr ""

#: ../../develop.rst:265
# 11f570d8f8f54608aa852f1d983d7b7f
msgid "calibre-dev.bat::"
msgstr ""

#: ../../develop.rst:272
# a3ab0128e49547559347f07778a08453
msgid "Debugging tips"
msgstr ""

#: ../../develop.rst:274
# 89b2c84b001e494bb40df91278a8f4fe
msgid "Python is a dynamically typed language with excellent facilities for introspection. Kovid wrote the core |app| code without once using a debugger. There are many strategies to debug |app| code:"
msgstr ""

#: ../../develop.rst:279
# 7af92ab7c8a5451eb2b4eeed803ead8b
msgid "Using print statements"
msgstr ""

#: ../../develop.rst:281
# dc3af9d978a345348f7d529df541eb14
msgid "This is Kovid's favorite way to debug. Simply insert print statements at points of interest and run your program in the terminal. For example, you can start the GUI from the terminal as::"
msgstr ""

#: ../../develop.rst:286
# 01d6fe8e7e19404ea4692abee421c294
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

#: ../../develop.rst:290
# a3a72f220f3b46e0b1c33ea3b4513721
msgid "The ebook-editor can be started as::"
msgstr ""

#: ../../develop.rst:295
# 6fae83efca7d460dbb03862ba84d3159
msgid "Using an interactive python interpreter"
msgstr ""

#: ../../develop.rst:297
# e64dea7dc70a4a4b8c3d9e6d357360b4
msgid "You can insert the following two lines of code to start an interactive python session at that point::"
msgstr ""

#: ../../develop.rst:302
# 98cf7f6e336e4d648c9e580157e18411
msgid "When running from the command line, this will start an interactive Python interpreter with access to all locally defined variables (variables in the local scope). The interactive prompt even has TAB completion for object properties and you can use the various Python facilities for introspection, such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

#: ../../develop.rst:308
# a21c1fbc7c1a4e4a8bac6d2bfbba9237
msgid "Using the python debugger as a remote debugger"
msgstr ""

#: ../../develop.rst:310
# 998f34b516bd45cbb25eb34cc1bab361
msgid "You can use the builtin python debugger (pdb) as a remote debugger from the command line. First, start the remote debugger at the point in the calibre code you are interested in, like this::"
msgstr ""

#: ../../develop.rst:317
# c1277d123e4345fbacd5f168dc8caa93
msgid "Then run calibre, either as normal, or using one of the calibre-debug commands described in the previous section. Once the above point in the code is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

#: ../../develop.rst:321
# 2e82fd26b83640819e489783cd9d555a
msgid "Now open a terminal or command prompt and use the following command to start the debugging session::"
msgstr ""

#: ../../develop.rst:326
# b1c4fe7b4a524b0798f5ce3df5070c01
msgid "You can read about how to use the python debugger in the `python stdlib docs for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-commands>`_."
msgstr ""

#: ../../develop.rst:330
# 4715a972f6e04e28b4a082c408cd67de
msgid "By default, the remote debugger will try to connect on port 4444. You can change it, by passing the port parameter to both the set_trace() and the cli() functions above, like this: ``set_trace(port=1234)`` and ``cli(port=1234)``."
msgstr ""

#: ../../develop.rst:336
# c8e4c26c8af246108f30f9f524a67b5f
msgid "The python debugger cannot handle multiple threads, so you have to call set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../develop.rst:340
# 15a7f2f6acb04b6f9162733cd5b2d434
msgid "Using the debugger in your favorite python IDE"
msgstr ""

#: ../../develop.rst:342
# e6f99c9e0c7c485bb23150168ce925c5
msgid "It is possible to use the builtin debugger in your favorite python IDE, if it supports remote debugging. The first step is to add the |app| src checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the ``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../develop.rst:347
# 47c8079ac6ff4387a0bb95b552f7eda8
msgid "Then place the IDE's remote debugger module into the :file:`src` subdirectory of the |app| source code checkout. Add whatever code is needed to launch the remote debugger to |app| at the point of interest, for example in the main function. Then run |app| as normal. Your IDE should now be able to connect to the remote debugger running inside |app|."
msgstr ""

#: ../../develop.rst:354
# 93b41de9dcbc4077a8a000eed11e3dd1
msgid "Executing arbitrary scripts in the |app| python environment"
msgstr ""

#: ../../develop.rst:356
# 3776ffc9a5c845e982b5f848ad84298c
msgid "The :command:`calibre-debug` command provides a couple of handy switches to execute your own code, with access to the |app| modules::"
msgstr ""

#: ../../develop.rst:361
# 77221c4cad254c2a912f43796536b3de
msgid "is great for testing a little snippet of code on the command line. It works in the same way as the -c switch to the python interpreter::"
msgstr ""

#: ../../develop.rst:365
# 0bd1b2b295b84606be82fe92982e54c1
msgid "can be used to execute your own Python script. It works in the same way as passing the script to the Python interpreter, except that the calibre environment is fully initialized, so you can use all the calibre code in your script. To use command line arguments with your script, use the form::"
msgstr ""

#: ../../develop.rst:370
# f190b49eff524e19a6a0c26807efa4ca
msgid "The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

#: ../../develop.rst:374
# b6c0ea8f74a342a9acf55d2369b88522
msgid "Using |app| in your projects"
msgstr ""

#: ../../develop.rst:376
# b72e1571f7a3408c88be55102d9ffb22
msgid "It is possible to directly use |app| functions/code in your Python project. Two ways exist to do this:"
msgstr ""

#: ../../develop.rst:379
# f00ac66db8874442a672ef76f30c5342
msgid "Binary install of |app|"
msgstr ""

#: ../../develop.rst:381
# a46754a0dc624b298871da0d3fe3887b
msgid "If you have a binary install of |app|, you can use the Python interpreter bundled with |app|, like this::"
msgstr ""

#: ../../develop.rst:386
# 3dac05983cee4e5f909fc88079fdbee4
msgid "Source install on Linux"
msgstr ""

#: ../../develop.rst:388
# 3dac77c13cc74480991603003857c670
msgid "In addition to using the above technique, if you do a source install on Linux, you can also directly import |app|, as follows::"
msgstr ""

#: ../../develop.rst:396
# 07d43ddd088647f09351bcdeefb165fc
msgid "It is essential that you import the init_calibre module before any other |app| modules/packages as it sets up the interpreter to run |app| code."
msgstr ""

