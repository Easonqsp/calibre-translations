# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.40.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-17 18:11+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../develop.rst:6
# f92a898f3562477aa40f77f9765913a0
msgid "Setting up a |app| development environment"
msgstr ""

#: ../../develop.rst:8
# 6fbf825a970b4578be2f71bee526370b
msgid "|app| is completely open source, licensed under the `GNU GPL v3 <http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to download and modify the program to your heart's content. In this section, you will learn how to get a |app| development environment set up on the operating system of your choice. |app| is written primarily in `Python <http://www.python.org>`_ with some C/C++ code for speed and system interfacing. Note that |app| is not compatible with Python 3 and requires at least Python 2.7."
msgstr ""

#: ../../develop.rst:0
# c35e7b36018c4e0ebefe315b7a60ce1d
msgid "Contents"
msgstr ""

#: ../../develop.rst:19
# cad0f911a39d4fc68be9b44ba0ac811a
msgid "Design philosophy"
msgstr ""

#: ../../develop.rst:21
# 28bd66668d564342a22b75a99ba85ccf
msgid "|app| has its roots in the Unix world, which means that its design is highly modular. The modules interact with each other via well defined interfaces. This makes adding new features and fixing bugs in |app| very easy, resulting in a frenetic pace of development. Because of its roots, |app| has a comprehensive command line interface for all its functions, documented in :ref:`cli`."
msgstr ""

#: ../../develop.rst:26
# 4387695e5c1049b89c00bd6cafe67f1e
msgid "The modular design of |app| is expressed via ``Plugins``. There is a :ref:`tutorial <customize>` on writing |app| plugins. For example, adding support for a new device to |app| typically involves writing less than a 100 lines of code in the form of a device driver plugin. You can browse the `built-in drivers <http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_. Similarly, adding support for new conversion formats involves writing input/output format plugins. Another example of the modular design is the :ref:`recipe system <news>` for fetching news. For more examples of plugins designed to add features to |app|, see the `plugin index <http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

#: ../../develop.rst:36
# a355151869fc47e98500e325dbee4907
msgid "Code layout"
msgstr ""

#: ../../develop.rst:38
# 5400e92d27ca438185bfad8e3787a846
msgid "All the |app| python code is in the ``calibre`` package. This package contains the following main sub-packages"
msgstr ""

#: ../../develop.rst:40
# a693b1664f964fc9940448d6536c5f78
msgid "devices - All the device drivers. Just look through some of the built-in drivers to get an idea for how they work."
msgstr ""

#: ../../develop.rst:42
# 2e0484dd28bf44bd89e3d99d28f77fe9
msgid "For details, see: ``devices.interface`` which defines the interface supported by device drivers and ``devices.usbms`` which defines a generic driver that connects to a USBMS device. All USBMS based drivers in |app| inherit from it."
msgstr ""

#: ../../develop.rst:45
# 28e9efa7bbb441f6ba70f41b703e9978
msgid "ebooks  - All the ebook conversion/metadata code. A good starting point is ``calibre.ebooks.conversion.cli`` which is the module powering the :command:`ebook-convert` command. The conversion process is controlled via ``conversion.plumber``. The format independent code is all in ``ebooks.oeb`` and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../develop.rst:49
# cfb28fc728994eeb909dc79b1625e875
msgid "Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

#: ../../develop.rst:50
# 83b1411987294ecbbef8437523f7ceec
msgid "Conversion happens in a pipeline, for the structure of the pipeline, see :ref:`conversion-introduction`. The pipeline consists of an input plugin, various transforms and an output plugin. The code that constructs and drives the pipeline is in :file:`plumber.py`. The pipeline works on a representation of an ebook that is like an unzipped epub, with manifest, spine, toc, guide, html content, etc. The class that manages this representation is OEBBook in ``ebooks.oeb.base``. The various transformations that are applied to the book during conversions live in :file:`oeb/transforms/*.py`. And the input and output plugins live in :file:`conversion/plugins/*.py`."
msgstr ""

#: ../../develop.rst:60
# d967c4309a38482993400bc23f15120e
msgid "Ebook editing happens using a different container object. All the code for editing is in ``ebooks.oeb.polish`` in particular the container object is in ``ebooks.oeb.polish.container``."
msgstr ""

#: ../../develop.rst:64
# e639edee44254ae6a20837bdb979afa0
msgid "db - The database back-end. See ``db.cache`` for the interface to the |app| library. With a DB object you can access this API via ``db.new_api``. The db object itself exposes a legacy API that should not be used in new code. The legacy API is in ``library.database2``."
msgstr ""

#: ../../develop.rst:65
# aee9f25cc4374e31a665463f9517392f
msgid "content server: ``library.server`` is the |app| Content Server."
msgstr ""

#: ../../develop.rst:66
# 30da49222b5c40a3a255356689b86760
msgid "gui2 - The Graphical User Interface. GUI initialization happens in ``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The ebook editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../develop.rst:68
# cc01f6e0e97b4e1f961f7cdfc5be5a32
msgid "If you want to locate the entry points for all the various |app| executables, look at the ``entry_points`` structure in `linux.py <https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../develop.rst:72
# be508fbe121c4bcd975e17086ed8d7bf
msgid "If you need help understanding the code, post in the `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will most likely get help from one of |app|'s many developers."
msgstr ""

#: ../../develop.rst:76
# 5b87f57400784e3c99e0871c834f2fee
msgid "Getting the code"
msgstr ""

#: ../../develop.rst:78
# 44430367f2f2435b8d3c40484b7ad07e
msgid "You can get the |app| source code in two ways, using a version control system or directly downloading a `tarball <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:81
# 6435f633254b46e5b3fb681282441b92
msgid "|app| uses `Git <http://www.git-scm.com/>`_, a distributed version control system. Git is available on all the platforms |app| supports.  After installing Git, you can get the |app| source code with the command::"
msgstr ""

#: ../../develop.rst:87
# ebb344a895744a2d844d2c33abac92b7
msgid "On Windows you will need the complete path name, that will be something like :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

#: ../../develop.rst:89
# f4d263e0711b4b2ea158d2af472dbddd
msgid "|app| is a very large project with a very long source control history, so the above can take a while (10mins to an hour depending on your internet speed)."
msgstr ""

#: ../../develop.rst:92
# eac3dfe8996d489eb17f2b6168147c1c
msgid "If you want to get the code faster, the sourcecode for the latest release is always available as an `archive <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:95
# ee74d1f55c2747d8aa72bac2c0f78769
msgid "To update a branch to the latest code, use the command::"
msgstr ""

#: ../../develop.rst:100
# 7bce0487c84f416ba6f050ea5f4479f7
msgid "Submitting your changes to be included"
msgstr ""

#: ../../develop.rst:102
# 3e5032c887eb448d9cb6f2b2cbfd76ca
msgid "If you only plan to make a few small changes, you can make your changes and create a \"merge directive\" which you can then attach to a ticket in the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, make your changes, then run::"
msgstr ""

#: ../../develop.rst:110
# d0ba4e24a94c462bb1fddece94720bbf
msgid "This will create a :file:`my-changes` file in the current directory, simply attach that to a ticket on the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. Note that this will include *all* the commits you have made. If you only want to send some commits, you have to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../develop.rst:118
# c829a84daed444eda790639076e55dbe
msgid "To send the last *n* commits, replace *1* with *n*, for example, for the last 3 commits::"
msgstr ""

#: ../../develop.rst:123
# a4e908d266bc470981011dfa971e7592
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

#: ../../develop.rst:125
# 4803939d37224cae810e0c7876e9f238
msgid "If you plan to do a lot of development on |app|, then the best method is to create a `GitHub <http://github.com>`_ account. Below is a basic guide to setting up your own fork of calibre in a way that will allow you to submit pull requests for inclusion into the main |app| repository:"
msgstr ""

#: ../../develop.rst:130
# dbd21f86ea214be7a9c67eed49453462
msgid "Setup git on your machine as described in this article: `Setup Git <https://help.github.com/articles/set-up-git>`_"
msgstr ""

#: ../../develop.rst:131
# 7d58d153b4724989a0b44b6f3e32d862
msgid "Setup ssh keys for authentication to GitHub, as described here: `Generating SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

#: ../../develop.rst:132
# a3452804d9874f87af7742d8fb6a7ee2
msgid "Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` button."
msgstr ""

#: ../../develop.rst:133
# ff617aafc3764a73a71c703039152700
msgid "In a Terminal do::"
msgstr ""

#: ../../develop.rst:137
# f218f7d58bc44e9cae55378ed6141e33
msgid "Replace <username> above with your github username. That will get your fork checked out locally."
msgstr ""

#: ../../develop.rst:138
# 23c4e82e46c44181ae607766f3e3a981
msgid "You can make changes and commit them whenever you like. When you are ready to have your work merged, do a::"
msgstr ""

#: ../../develop.rst:142
# 3c4c8c9bcdf442e4b4318abf01041b8c
msgid "and go to ``https://github.com/<username>/calibre`` and click the :guilabel:`Pull Request` button to generate a pull request that can be merged."
msgstr ""

#: ../../develop.rst:143
# c7bdc7056cee4abca21d55008e0cc373
msgid "You can update your local copy with code from the main repo at any time by doing::"
msgstr ""

#: ../../develop.rst:148
# 4837c7e4e67a48888bee1e3fb1d94e48
msgid "You should also keep an eye on the |app| `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making major changes, you should discuss them in the forum or contact Kovid directly (his email address is all over the source code)."
msgstr ""

#: ../../develop.rst:154
# e67b477db1d8491c8b17f6bcb74bef21
msgid "Windows development environment"
msgstr ""

#: ../../develop.rst:156
#: ../../develop.rst:187
#: ../../develop.rst:219
# e37dafb0db564160b21e5d1fa11ab7fc
# f7e2814fa3254405b6088fa7248fb149
# 76fe03c99ef64d5ab6352cf7f4ad3b2c
msgid "You must also get the |app| source code separately as described above."
msgstr ""

#: ../../develop.rst:158
# ba8e5924142b4a4689a82c3fe12d36a8
msgid "Install |app| normally, using the Windows installer. Then open a Command Prompt and change to the previously checked out |app| code directory. For example::"
msgstr ""

#: ../../develop.rst:163
#: ../../develop.rst:231
# 27f0a6159cd84e39b086cc46ef391198
# b803a2579ace4f959f1b81c58f6c7481
msgid "calibre is the directory that contains the src and resources sub-directories."
msgstr ""

#: ../../develop.rst:165
# 2437d6a63edc42e6874696884424ceb2
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide <http://docs.python.org/using/windows.html#excursus-setting-environment-variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../develop.rst:170
# 782341717dc1477490eb6afac86a26c5
msgid "Once you have set the environment variable, open a new command prompt and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:175
#: ../../develop.rst:242
# af935e0c00544ffcb36881b747d778d2
# 354f9b71fab24c2b9702221d24c05dcc
msgid "Setting this environment variable means that |app| will now load all its Python code from the specified location."
msgstr ""

#: ../../develop.rst:177
# c58fd63d3b6345edb79427e992c76770
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src\\\\calibre\\\\__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:182
#: ../../develop.rst:249
# c761916b134641298caeb277e8112b66
# 38914b89aee6450c9c0f5480dc4c3e52
msgid "near the top of the file. Now run the command :command:`calibredb`. The very first line of output should be ``Hello, world!``."
msgstr ""

#: ../../develop.rst:185
# 2c1e2f23162046eb98b8302abfdb4f32
msgid "OS X development environment"
msgstr ""

#: ../../develop.rst:189
# 429615cf7eca43edb5b1cd6b01e12c57
msgid "Install |app| normally using the provided .dmg. Then open a Terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:194
# cd2a1da430414f0ab8237868a5a2521b
msgid "calibre is the directory that contains the src and resources sub-directories. Ensure you have installed the |app| commandline tools via :guilabel:`Preferences->Advanced->Miscellaneous` in the |app| GUI."
msgstr ""

#: ../../develop.rst:196
# eddc758a451a472badc3d53a09d2824d
msgid "The next step is to create a bash script that will set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory when running calibre in debug mode."
msgstr ""

#: ../../develop.rst:198
# a4154d03ee554dd78d647e3ea50d2d9c
msgid "Create a plain text file::"
msgstr ""

#: ../../develop.rst:204
# 6fc68747cd704f0d95996cec7cb15bd1
msgid "Save this file as ``/usr/bin/calibre-develop``, then set its permissions so that it can be executed::"
msgstr ""

#: ../../develop.rst:208
# 82457c3f05774e82a79537b24b37e757
msgid "Once you have done this, run::"
msgstr ""

#: ../../develop.rst:212
# 5d0165d746d44282a0f1ed1ca0fd6845
msgid "You should see some diagnostic information in the Terminal window as calibre starts up, and you should see an asterisk after the version number in the GUI window, indicating that you are running from source."
msgstr ""

#: ../../develop.rst:217
# b210511eb4ae4f8d9e0ebab14022937b
msgid "Linux development environment"
msgstr ""

#: ../../develop.rst:221
# 778854ef9a414e0f889802cec57cba4c
msgid "|app| is primarily developed on Linux. You have two choices in setting up the development environment. You can install the |app| binary as normal and use that as a runtime environment to do your development. This approach is similar to that used in Windows and OS X. Alternatively, you can install |app| from source. Instructions for setting up a development environment from source are in the INSTALL file in the source tree. Here we will address using the binary at runtime, which is the recommended method."
msgstr ""

#: ../../develop.rst:227
# b16e3ddb736c478bbe7ba5fc8b1d5d2b
msgid "Install the |app| using the binary installer. Then open a terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:233
# 118e5cc8476b47e9b0308bebb62fabad
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``/home/kovid/work/calibre/src``. How to set environment variables depends on your Linux distribution and what shell you are using."
msgstr ""

#: ../../develop.rst:237
# 0d3df45ff12e4ba6a7a8b7b8e116f50a
msgid "Once you have set the environment variable, open a new terminal and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:244
# c9ddb23703d9463d89a412b70261d6c8
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src/calibre/__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:252
# 7b1a3d68d50d44f78c3caaf05958df55
msgid "Having separate \"normal\" and \"development\" |app| installs on the same computer"
msgstr ""

#: ../../develop.rst:254
# de9b0a38ff59473a8a23cf550ce9dba2
msgid "The |app| source tree is very stable and rarely breaks, but if you feel the need to run from source on a separate test library and run the released |app| version with your everyday library, you can achieve this easily using .bat files or shell scripts to launch |app|. The example below shows how to do this on Windows using .bat files (the instructions for other platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../develop.rst:259
# d5944f912bd54177aeb2845500acfaa0
msgid "To launch the release version of |app| with your everyday library:"
msgstr ""

#: ../../develop.rst:261
# c856a6b03dca4d44ba12b47a426207d7
msgid "calibre-normal.bat::"
msgstr ""

#: ../../develop.rst:265
# 630387eb220345b5a10a8c671f361cd5
msgid "calibre-dev.bat::"
msgstr ""

#: ../../develop.rst:272
# 118bc8e27d434481926dcdcbb754dbef
msgid "Debugging tips"
msgstr ""

#: ../../develop.rst:274
# 2fa73161e6e94376965f1ec1976e7a72
msgid "Python is a dynamically typed language with excellent facilities for introspection. Kovid wrote the core |app| code without once using a debugger. There are many strategies to debug |app| code:"
msgstr ""

#: ../../develop.rst:279
# f9485869d61f4de6a0375bda1e0051d5
msgid "Using print statements"
msgstr ""

#: ../../develop.rst:281
# 114759fd355f4f7aadecdcf0e47c18f9
msgid "This is Kovid's favorite way to debug. Simply insert print statements at points of interest and run your program in the terminal. For example, you can start the GUI from the terminal as::"
msgstr ""

#: ../../develop.rst:286
# a29501226fe0462480941c9ef3c4d55a
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

#: ../../develop.rst:290
# a35138c62fe64dd6bbdba6d95aaad4e3
msgid "The ebook-editor can be started as::"
msgstr ""

#: ../../develop.rst:295
# d62939f9322747458c277014001f6757
msgid "Using an interactive python interpreter"
msgstr ""

#: ../../develop.rst:297
# 0cd46c30ccfa4b83b29e2cee2256a0ba
msgid "You can insert the following two lines of code to start an interactive python session at that point::"
msgstr ""

#: ../../develop.rst:302
# e9d0eb52e48841fb911b5c76535f2f26
msgid "When running from the command line, this will start an interactive Python interpreter with access to all locally defined variables (variables in the local scope). The interactive prompt even has TAB completion for object properties and you can use the various Python facilities for introspection, such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

#: ../../develop.rst:308
# 7ab4cf8f1def4f24a4a94d39e19b0a2c
msgid "Using the python debugger as a remote debugger"
msgstr ""

#: ../../develop.rst:310
# 56b5a3444fce4720b9213e6f26ae19c5
msgid "You can use the builtin python debugger (pdb) as a remote debugger from the command line. First, start the remote debugger at the point in the calibre code you are interested in, like this::"
msgstr ""

#: ../../develop.rst:317
# 61d5210d84e24127b98bc805d6c05e1f
msgid "Then run calibre, either as normal, or using one of the calibre-debug commands described in the previous section. Once the above point in the code is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

#: ../../develop.rst:321
# 56cff12e747141448fb57d6d1730a566
msgid "Now open a terminal or command prompt and use the following command to start the debugging session::"
msgstr ""

#: ../../develop.rst:326
# ed9ca8c99d0d47c3a5e1ceb1d62d36bc
msgid "You can read about how to use the python debugger in the `python stdlib docs for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-commands>`_."
msgstr ""

#: ../../develop.rst:330
# 5ed1061ade404ade9ae2424cfd83ec5d
msgid "By default, the remote debugger will try to connect on port 4444. You can change it, by passing the port parameter to both the set_trace() and the cli() functions above, like this: ``set_trace(port=1234)`` and ``cli(port=1234)``."
msgstr ""

#: ../../develop.rst:336
# eb0080c7ee5f41c1bf719b82e6d1105c
msgid "The python debugger cannot handle multiple threads, so you have to call set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../develop.rst:340
# 76f55be5c4e94aea9c3194b70b38db41
msgid "Using the debugger in your favorite python IDE"
msgstr ""

#: ../../develop.rst:342
# f8956a4a05764cb78dfe721443f188d4
msgid "It is possible to use the builtin debugger in your favorite python IDE, if it supports remote debugging. The first step is to add the |app| src checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the ``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../develop.rst:347
# 6aad1c06ecf44f0e81561cef93e744b8
msgid "Then place the IDE's remote debugger module into the :file:`src` subdirectory of the |app| source code checkout. Add whatever code is needed to launch the remote debugger to |app| at the point of interest, for example in the main function. Then run |app| as normal. Your IDE should now be able to connect to the remote debugger running inside |app|."
msgstr ""

#: ../../develop.rst:354
# 1bf53af9997d489dbb75860330ecf420
msgid "Executing arbitrary scripts in the |app| python environment"
msgstr ""

#: ../../develop.rst:356
# f61acf305e5b46479cc11dd7e1962dc5
msgid "The :command:`calibre-debug` command provides a couple of handy switches to execute your own code, with access to the |app| modules::"
msgstr ""

#: ../../develop.rst:361
# ceb2fb9e1ed6463f92dd128d28111b04
msgid "is great for testing a little snippet of code on the command line. It works in the same way as the -c switch to the python interpreter::"
msgstr ""

#: ../../develop.rst:365
# 0da3fee251564be5a8675426b0162874
msgid "can be used to execute your own Python script. It works in the same way as passing the script to the Python interpreter, except that the calibre environment is fully initialized, so you can use all the calibre code in your script. To use command line arguments with your script, use the form::"
msgstr ""

#: ../../develop.rst:370
# 5d1465c0b000430398f24fc87aebce95
msgid "The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

#: ../../develop.rst:374
# d649322f4f884bea81f386f941ae3eba
msgid "Using |app| in your projects"
msgstr ""

#: ../../develop.rst:376
# b3c64210b98c4e36b9fe3e9355d5d8e2
msgid "It is possible to directly use |app| functions/code in your Python project. Two ways exist to do this:"
msgstr ""

#: ../../develop.rst:379
# bc85cdf93653449da5e26940ed75a5f2
msgid "Binary install of |app|"
msgstr ""

#: ../../develop.rst:381
# c80c6105e44141e7811eac5f61305293
msgid "If you have a binary install of |app|, you can use the Python interpreter bundled with |app|, like this::"
msgstr ""

#: ../../develop.rst:386
# 5a85f1fe084f42e6b09ce8b26f7ddcfa
msgid "Source install on Linux"
msgstr ""

#: ../../develop.rst:388
# cd5bbccbf0004d32a2cc88800f3b3518
msgid "In addition to using the above technique, if you do a source install on Linux, you can also directly import |app|, as follows::"
msgstr ""

#: ../../develop.rst:396
# 3dda98bf3d0a4babbffb4e9b08accd7e
msgid "It is essential that you import the init_calibre module before any other |app| modules/packages as it sets up the interpreter to run |app| code."
msgstr ""

