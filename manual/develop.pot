# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-24 08:49+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/develop.rst:4
# 19672a986b044afd8fbe6356e22cea2c
msgid "Setting up a calibre development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:6
# 5f764eb906224be1a0e6163f32bd0f33
msgid "calibre is completely open source, licensed under the `GNU GPL v3 <http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to download and modify the program to your heart's content. In this section, you will learn how to get a calibre development environment set up on the operating system of your choice. calibre is written primarily in `Python <http://www.python.org>`_ with some C/C++ code for speed and system interfacing. Note that calibre is not compatible with Python 3 and requires at least Python 2.7."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:0
# 926cdf2c91c84bab9b8be7da736dd5f1
msgid "Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:17
# 1860965b4e9440cb9e1d189e410f84f2
msgid "Design philosophy"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:19
# b2a565c5a5594498aff7d792eeb838d8
msgid "calibre has its roots in the Unix world, which means that its design is highly modular. The modules interact with each other via well defined interfaces. This makes adding new features and fixing bugs in calibre very easy, resulting in a frenetic pace of development. Because of its roots, calibre has a comprehensive command line interface for all its functions, documented in :doc:`generated/en/cli-index`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:24
# 7308247a9110435f972d2f12fe3cb406
msgid "The modular design of calibre is expressed via ``Plugins``. There is a :ref:`tutorial <customize>` on writing calibre plugins. For example, adding support for a new device to calibre typically involves writing less than a 100 lines of code in the form of a device driver plugin. You can browse the `built-in drivers <http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_. Similarly, adding support for new conversion formats involves writing input/output format plugins. Another example of the modular design is the :ref:`recipe system <news>` for fetching news. For more examples of plugins designed to add features to calibre, see the `plugin index <http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:34
# ecb6b50eeaf94b77b54ec16e06e91169
msgid "Code layout"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:36
# 2caffa6ba10540ea8879d42b299343cd
msgid "All the calibre python code is in the ``calibre`` package. This package contains the following main sub-packages"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:38
# 5b849f32a82e423290ba6f73d645e4dc
msgid "devices - All the device drivers. Just look through some of the built-in drivers to get an idea for how they work."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:40
# 0e125f863d414d72afa73dce6973d385
msgid "For details, see: ``devices.interface`` which defines the interface supported by device drivers and ``devices.usbms`` which defines a generic driver that connects to a USBMS device. All USBMS based drivers in calibre inherit from it."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:43
# ad8672727a0f4e4eb228c754d630f9f2
msgid "ebooks  - All the ebook conversion/metadata code. A good starting point is ``calibre.ebooks.conversion.cli`` which is the module powering the :command:`ebook-convert` command. The conversion process is controlled via ``conversion.plumber``. The format independent code is all in ``ebooks.oeb`` and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:47
# 64f5e8635f5f471c9f1f6e31a6b0cf5a
msgid "Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:48
# 1e5e7fafba9141aebf2a4213372a8e55
msgid "Conversion happens in a pipeline, for the structure of the pipeline, see :ref:`conversion-introduction`. The pipeline consists of an input plugin, various transforms and an output plugin. The code that constructs and drives the pipeline is in :file:`plumber.py`. The pipeline works on a representation of an ebook that is like an unzipped epub, with manifest, spine, toc, guide, html content, etc. The class that manages this representation is OEBBook in ``ebooks.oeb.base``. The various transformations that are applied to the book during conversions live in :file:`oeb/transforms/*.py`. And the input and output plugins live in :file:`conversion/plugins/*.py`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:58
# 492b2c667c3441bba9238193d3cae44d
msgid "Ebook editing happens using a different container object. It is documented in :ref:`polish_api`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:61
# ebb302422f29452eb8022381aec2f9d2
msgid "db - The database back-end. See :ref:`db_api` for the interface to the calibre library."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:63
# 2c719fb022e94832a55439dfd17d1d91
msgid "content server: ``library.server`` is the calibre Content Server."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:65
# 9dff17d645d04efdabce894ac25c2ee4
msgid "gui2 - The Graphical User Interface. GUI initialization happens in ``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The ebook editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:67
# c3f9f2a4b0aa401aa79be578c2e855ef
msgid "If you want to locate the entry points for all the various calibre executables, look at the ``entry_points`` structure in `linux.py <https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:71
# 890a5936f11f4b20b0b9d6144f6e8be8
msgid "If you need help understanding the code, post in the `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will most likely get help from one of calibre's many developers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:75
# 6d5b020fe4d24aec898e8aebf0eed407
msgid "Getting the code"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:77
# 06465f30d0a54c378a079c5ccabf5cf7
msgid "You can get the calibre source code in two ways, using a version control system or directly downloading a `tarball <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:80
# 68bdee49812b49d4a1ce4c380a7ce86c
msgid "calibre uses `Git <http://www.git-scm.com/>`_, a distributed version control system. Git is available on all the platforms calibre supports.  After installing Git, you can get the calibre source code with the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:86
# 17816bb6688844b5aadd74f6073d1e29
msgid "On Windows you will need the complete path name, that will be something like :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:88
# a482c32cbe994a0da9bca432542e5fb7
msgid "calibre is a very large project with a very long source control history, so the above can take a while (10mins to an hour depending on your internet speed)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:91
# daac8fe11a64462f8ef2798c472a6481
msgid "If you want to get the code faster, the source code for the latest release is always available as an `archive <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:94
# 29e97a6e711f486c95988d639d15a3cc
msgid "To update a branch to the latest code, use the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:99
# 8fe5ddfe601041a6b80ae7196ee191f1
msgid "Submitting your changes to be included"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:101
# cc1d1651bf724187a86406a45a43bafd
msgid "If you only plan to make a few small changes, you can make your changes and create a \"merge directive\" which you can then attach to a ticket in the calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, make your changes, then run::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:109
# 5fc143cb17fe4e11a4c31640dd470809
msgid "This will create a :file:`my-changes` file in the current directory, simply attach that to a ticket on the calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. Note that this will include *all* the commits you have made. If you only want to send some commits, you have to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:117
# 508d04962c4943ee9ab5f5969ccafcb8
msgid "To send the last *n* commits, replace *1* with *n*, for example, for the last 3 commits::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:122
# d07a2f29f2944020a57c422476cc4e21
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:124
# 93e6491115a74483a8304f34bc32a0e3
msgid "If you plan to do a lot of development on calibre, then the best method is to create a `GitHub <http://github.com>`_ account. Below is a basic guide to setting up your own fork of calibre in a way that will allow you to submit pull requests for inclusion into the main calibre repository:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:129
# 25230fd78db94779affecb121faf347a
msgid "Setup git on your machine as described in this article: `Setup Git <https://help.github.com/articles/set-up-git>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:130
# e07c2f733cc547b7b11f6f5d0f1ee4a6
msgid "Setup ssh keys for authentication to GitHub, as described here: `Generating SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:131
# 5af0e9cbf6b548d4997d192dabd37272
msgid "Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` button."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:132
# 9ed436411403401a9c1ceabe474e3791
msgid "In a Terminal do::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:137
# 53d828bff3364c3fb6397e8662a2b134
msgid "Replace <username> above with your github username. That will get your fork checked out locally."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:138
# 53530e3e8d404ced96e64bd334409d7e
msgid "You can make changes and commit them whenever you like. When you are ready to have your work merged, do a::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:142
# 8912c4da4e154245984a739f97868379
msgid "and go to ``https://github.com/<username>/calibre`` and click the :guilabel:`Pull Request` button to generate a pull request that can be merged."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:143
# bb2598ac200e477a8a6c842fce076378
msgid "You can update your local copy with code from the main repo at any time by doing::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:148
# 37f1a2ce1b514d2fbc917413e6829b16
msgid "You should also keep an eye on the calibre `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making major changes, you should discuss them in the forum or contact Kovid directly (his email address is all over the source code)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:154
# a899583c4d8f40dc8416604cd85d49e3
msgid "Windows development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:156
#: ../../home/kovid/work/calibre/manual/develop.rst:187
#: ../../home/kovid/work/calibre/manual/develop.rst:219
# 24d19cb65237441ba7d4b43662bdc384
# bc5d441cefe340cc9b709ed03ea2a704
# 946bea75a4e94d1caf001a49a6a0cc59
msgid "You must also get the calibre source code separately as described above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:158
# e607c889275b4314a647481f4cad153b
msgid "Install calibre normally, using the Windows installer. Then open a Command Prompt and change to the previously checked out calibre code directory. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:163
#: ../../home/kovid/work/calibre/manual/develop.rst:231
# b33f1b70f1cc42588de0047b8f1cb83d
# e5430ab8b7ee4d3caeaef63943be2a31
msgid "calibre is the directory that contains the src and resources sub-directories."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:165
# b5c3bb48cd434326a336f967ce988f01
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide <http://docs.python.org/using/windows.html#excursus-setting-environment-variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:170
# 9971e006184e48079b44cdb8b91ee927
msgid "Once you have set the environment variable, open a new command prompt and check that it was correctly set by using the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:175
#: ../../home/kovid/work/calibre/manual/develop.rst:242
# 16a71c44853446a59e79dc7d6a2db790
# 8d73b7c0c66e4f71bb1fa94f4acabb5b
msgid "Setting this environment variable means that calibre will now load all its Python code from the specified location."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:177
# 96db0a6fca4e406eaa76c0ebade9e582
msgid "That's it! You are now ready to start hacking on the calibre code. For example, open the file :file:`src\\\\calibre\\\\__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:182
#: ../../home/kovid/work/calibre/manual/develop.rst:249
# f27f808c448f41c98be8d60b1e203b8e
# 2029b6f92be241f0b4a699ae2495dfbe
msgid "near the top of the file. Now run the command :command:`calibredb`. The very first line of output should be ``Hello, world!``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:185
# 8dd56bf8fd05459188c30a706ba03078
msgid "OS X development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:189
# 5bd26cbde4844c1da63bab026825846b
msgid "Install calibre normally using the provided .dmg. Then open a Terminal and change to the previously checked out calibre code directory, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:194
# e27d19623c1c4556bb0f108de6e6f2a9
msgid "calibre is the directory that contains the src and resources sub-directories. Ensure you have installed the calibre commandline tools via :guilabel:`Preferences->Advanced->Miscellaneous` in the calibre GUI."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:196
# 622003f402f04f71b4528928bfd59992
msgid "The next step is to create a bash script that will set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory when running calibre in debug mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:198
# 3fe44536b53e42419bc244192b9fc19d
msgid "Create a plain text file::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:204
# 1750c73ff6544e739d38e477aab3e0d4
msgid "Save this file as ``/usr/bin/calibre-develop``, then set its permissions so that it can be executed::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:208
# c4bf995ff8fa4efd90f00a04a2963a51
msgid "Once you have done this, run::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:212
# ec972da7f6af4df0ae5b1c2424b09e4d
msgid "You should see some diagnostic information in the Terminal window as calibre starts up, and you should see an asterisk after the version number in the GUI window, indicating that you are running from source."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:217
# fed00ffeaf4849c888892bd39fb7dfd7
msgid "Linux development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:221
# e62fa109a2f9470a86cf520456a45d42
msgid "calibre is primarily developed on Linux. You have two choices in setting up the development environment. You can install the calibre binary as normal and use that as a runtime environment to do your development. This approach is similar to that used in Windows and OS X. Alternatively, you can install calibre from source. Instructions for setting up a development environment from source are in the INSTALL file in the source tree. Here we will address using the binary at runtime, which is the recommended method."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:227
# f1a34508cb914a478597c48d89f1e6c9
msgid "Install calibre using the binary installer. Then open a terminal and change to the previously checked out calibre code directory, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:233
# d8c434cc2ef04caa8a3efb967de93759
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``/home/kovid/work/calibre/src``. How to set environment variables depends on your Linux distribution and what shell you are using."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:237
# e78ff8f93e444daba011dd0a609a254d
msgid "Once you have set the environment variable, open a new terminal and check that it was correctly set by using the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:244
# 033ca969ae744d3d9fa1ad1d103ec904
msgid "That's it! You are now ready to start hacking on the calibre code. For example, open the file :file:`src/calibre/__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:252
# e9d97f66c2e84c2ebe6ac4d7f6dd419a
msgid "Having separate \"normal\" and \"development\" calibre installs on the same computer"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:254
# 5f5a674943f64d639b4cd23a0f1f51af
msgid "The calibre source tree is very stable and rarely breaks, but if you feel the need to run from source on a separate test library and run the released calibre version with your everyday library, you can achieve this easily using .bat files or shell scripts to launch calibre. The example below shows how to do this on Windows using .bat files (the instructions for other platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:259
# 65af28df641d4beba93fa1f5c2799321
msgid "To launch the release version of calibre with your everyday library:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:261
# 84817d681ce949b3995c9bee79928672
msgid "calibre-normal.bat::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:265
# c4458d13f5704b368b669de2141b78e9
msgid "calibre-dev.bat::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:272
# ab91c3e58ba64a4089da2389ddb17a47
msgid "Debugging tips"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:274
# 6f3d835a8518468db4b8f80029520a94
msgid "Python is a dynamically typed language with excellent facilities for introspection. Kovid wrote the core calibre code without once using a debugger. There are many strategies to debug calibre code:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:279
# 81b699e337ab4817ae70cb5425c2569a
msgid "Using print statements"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:281
# 9c1a697067284e429fbaaeb592eb2ecf
msgid "This is Kovid's favorite way to debug. Simply insert print statements at points of interest and run your program in the terminal. For example, you can start the GUI from the terminal as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:286
# a3587d53d5aa4f9fb99bcbe5b1c45c53
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:290
# 2280cd5e81344edb96b154d9e3c009ab
msgid "The ebook-editor can be started as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:295
# b8f7e5aff1b84fe7aa01fb9c579c5060
msgid "Using an interactive python interpreter"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:297
# 0c85eaa17e82476d8e3b8ee30be44752
msgid "You can insert the following two lines of code to start an interactive python session at that point::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:302
# 3cd8e725f6c448a8bf719f614f5ed9a9
msgid "When running from the command line, this will start an interactive Python interpreter with access to all locally defined variables (variables in the local scope). The interactive prompt even has TAB completion for object properties and you can use the various Python facilities for introspection, such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:308
# 1e7f5c1990dc43e6a50932a0dc8befb8
msgid "Using the python debugger as a remote debugger"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:310
# e03e4dca6af6463c9931fd86ff3fa692
msgid "You can use the builtin python debugger (pdb) as a remote debugger from the command line. First, start the remote debugger at the point in the calibre code you are interested in, like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:317
# 7fa8c8bd143a485dbe639612cc7d4315
msgid "Then run calibre, either as normal, or using one of the calibre-debug commands described in the previous section. Once the above point in the code is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:321
# cf1b83c4331c48be9e834893163a8cba
msgid "Now open a terminal or command prompt and use the following command to start the debugging session::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:326
# ce91d260d65c4f77910c09f9a95dc067
msgid "You can read about how to use the python debugger in the `python stdlib docs for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-commands>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:330
# 34fc175066ce4cfca2bf800bfd27988a
msgid "By default, the remote debugger will try to connect on port 4444. You can change it, by passing the port parameter to both the set_trace() and the cli() functions above, like this: ``set_trace(port=1234)`` and ``cli(port=1234)``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:336
# 4cbfbb0f74da4e34bdafb679565202fc
msgid "The python debugger cannot handle multiple threads, so you have to call set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:340
# b46dc6e1d19a4f45be734308eae8c9ad
msgid "Using the debugger in your favorite python IDE"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:342
# ed62eafef4ed43fc96964ea6ab9f5e2d
msgid "It is possible to use the builtin debugger in your favorite python IDE, if it supports remote debugging. The first step is to add the calibre src checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the ``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:347
# 00fcf4c72ea245ad936a7e41e000100a
msgid "Then place the IDE's remote debugger module into the :file:`src` subdirectory of the calibre source code checkout. Add whatever code is needed to launch the remote debugger to calibre at the point of interest, for example in the main function. Then run calibre as normal. Your IDE should now be able to connect to the remote debugger running inside calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:354
# c3ccef3e55894200bef4feff36ddf6de
msgid "Executing arbitrary scripts in the calibre python environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:356
# 786c8f4ee2cd407cac997b0ac9051076
msgid "The :command:`calibre-debug` command provides a couple of handy switches to execute your own code, with access to the calibre modules::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:361
# b6c80ece6bf94149b3b906cea50574eb
msgid "is great for testing a little snippet of code on the command line. It works in the same way as the -c switch to the python interpreter::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:365
# 8a0a657a305b48ec9377069ed0c024d4
msgid "can be used to execute your own Python script. It works in the same way as passing the script to the Python interpreter, except that the calibre environment is fully initialized, so you can use all the calibre code in your script. To use command line arguments with your script, use the form::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:370
# 34b1890657074ee0b482146a4f734bf8
msgid "The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:374
# fed002d13c904d78b616ea7fe21941b1
msgid "Using calibre in your projects"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:376
# da60354290b24c31b6ab3c6900db20e6
msgid "It is possible to directly use calibre functions/code in your Python project. Two ways exist to do this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:379
# cd7ba10e0440469a8a19aa476ab8964b
msgid "Binary install of calibre"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:381
# 3e8c08f9f3ba4371b77cfb233d98ebad
msgid "If you have a binary install of calibre, you can use the Python interpreter bundled with calibre, like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:386
# 6b2564f3e1e14f8aac2859108b155ff1
msgid "Source install on Linux"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:388
# 76839e2617d54594aef81439e50dee27
msgid "In addition to using the above technique, if you do a source install on Linux, you can also directly import calibre, as follows::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:396
# b2e278bc7a5c426e85019195678a8537
msgid "It is essential that you import the init_calibre module before any other calibre modules/packages as it sets up the interpreter to run calibre code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:400
# d0047bb153e44f3991bdeefd9c8dff74
msgid "API documentation for various parts of calibre"
msgstr ""

