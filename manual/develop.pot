# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.12.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-28 09:14+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/develop.rst:4
# 1727b5d2b09f435799e8dd8a024c5842
msgid "Setting up a calibre development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:6
# 46e36a7818544a6f89f0fb86c78f09e2
msgid "calibre is completely open source, licensed under the `GNU GPL v3 <http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to download and modify the program to your heart's content. In this section, you will learn how to get a calibre development environment set up on the operating system of your choice. calibre is written primarily in `Python <https://www.python.org>`_ with some C/C++ code for speed and system interfacing. Note that calibre is not compatible with Python 3 and requires at least Python 2.7."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:0
# 5b00f35410b74951b29f77a0215dcdd8
msgid "Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:17
# a9ee729a4f8e4119b093381930ffed8b
msgid "Design philosophy"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:19
# 802404d69fc8445386e1fe98d8b19346
msgid "calibre has its roots in the Unix world, which means that its design is highly modular. The modules interact with each other via well defined interfaces. This makes adding new features and fixing bugs in calibre very easy, resulting in a frenetic pace of development. Because of its roots, calibre has a comprehensive command line interface for all its functions, documented in :doc:`generated/en/cli-index`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:24
# 91e724b066e040ecbac5108317cb9884
msgid "The modular design of calibre is expressed via ``Plugins``. There is a :ref:`tutorial <customize>` on writing calibre plugins. For example, adding support for a new device to calibre typically involves writing less than a 100 lines of code in the form of a device driver plugin. You can browse the `built-in drivers <https://github.com/kovidgoyal/calibre/tree/master/src/calibre/devices>`_. Similarly, adding support for new conversion formats involves writing input/output format plugins. Another example of the modular design is the :ref:`recipe system <news>` for fetching news. For more examples of plugins designed to add features to calibre, see the `plugin index <http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:34
# 2b4b0b3874fe43a5bed7e3a652134798
msgid "Code layout"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:36
# cb40558785f9431f9c6ba1b5c0d98a86
msgid "All the calibre python code is in the ``calibre`` package. This package contains the following main sub-packages"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:38
# 2af63bc3b0564979a95f8f7fc5c903c7
msgid "devices - All the device drivers. Just look through some of the built-in drivers to get an idea for how they work."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:40
# 9454282f673540ffb5dce87d3ef3a905
msgid "For details, see: ``devices.interface`` which defines the interface supported by device drivers and ``devices.usbms`` which defines a generic driver that connects to a USBMS device. All USBMS based drivers in calibre inherit from it."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:43
# d46c7ddc7a9f4ed6b3546e839839cda6
msgid "ebooks  - All the ebook conversion/metadata code. A good starting point is ``calibre.ebooks.conversion.cli`` which is the module powering the :command:`ebook-convert` command. The conversion process is controlled via ``conversion.plumber``. The format independent code is all in ``ebooks.oeb`` and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:47
# ef0516116f0d4e3bb85573ba69980205
msgid "Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:48
# 86185cdebd95431f9dc4cc36779a8e68
msgid "Conversion happens in a pipeline, for the structure of the pipeline, see :ref:`conversion-introduction`. The pipeline consists of an input plugin, various transforms and an output plugin. The code that constructs and drives the pipeline is in :file:`plumber.py`. The pipeline works on a representation of an ebook that is like an unzipped epub, with manifest, spine, toc, guide, html content, etc. The class that manages this representation is OEBBook in ``ebooks.oeb.base``. The various transformations that are applied to the book during conversions live in :file:`oeb/transforms/*.py`. And the input and output plugins live in :file:`conversion/plugins/*.py`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:58
# 49d409dd31fd498f9b6ae678ca22c49d
msgid "Ebook editing happens using a different container object. It is documented in :ref:`polish_api`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:61
# b7fd94f8df124fabb4674fbec9262901
msgid "db - The database back-end. See :ref:`db_api` for the interface to the calibre library."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:63
# edd2090d4e6346d287d35f2c8b0729b3
msgid "content server: ``library.server`` is the calibre Content Server."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:65
# 4d2c011acea54ab3a87057f6c2191625
msgid "gui2 - The Graphical User Interface. GUI initialization happens in ``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The ebook editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:67
# 665ccc82136647b5934440882316218b
msgid "If you want to locate the entry points for all the various calibre executables, look at the ``entry_points`` structure in `linux.py <https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:71
# 001e2d20124a42c5b917bdee9d591427
msgid "If you need help understanding the code, post in the `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will most likely get help from one of calibre's many developers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:75
# dbe3b050d6c248449fc858f06d7abc17
msgid "Getting the code"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:77
# 53c6086dc7354ae8b8ed3102d4c70b91
msgid "You can get the calibre source code in two ways, using a version control system or directly downloading a `tarball <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:80
# 8fc86ca8783741a486461e19dbf091e6
msgid "calibre uses `Git <http://www.git-scm.com/>`_, a distributed version control system. Git is available on all the platforms calibre supports.  After installing Git, you can get the calibre source code with the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:86
# 397ac36f98b944f38abafa3ec683360c
msgid "On Windows you will need the complete path name, that will be something like :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:88
# ac37db630c83471a83f27a70e3d93617
msgid "calibre is a very large project with a very long source control history, so the above can take a while (10 mins to an hour depending on your internet speed)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:91
# 8eab2f628c49477b929b521758304874
msgid "If you want to get the code faster, the source code for the latest release is always available as an `archive <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:94
# ae3ba010390d43e3acfbf00fa5dffd9e
msgid "To update a branch to the latest code, use the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:99
# 058d52c306c64a90bc23b5317dfa3adb
msgid "Submitting your changes to be included"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:101
# bc6cf6e6ae904ff7b94f15d30a0fb9e0
msgid "If you only plan to make a few small changes, you can make your changes and create a \"merge directive\" which you can then attach to a ticket in the calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, make your changes, then run::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:109
# efc20d8089c54a25a35af404e662c3c3
msgid "This will create a :file:`my-changes` file in the current directory, simply attach that to a ticket on the calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. Note that this will include *all* the commits you have made. If you only want to send some commits, you have to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:117
# 0537739927384541974d74a359b6e651
msgid "To send the last *n* commits, replace *1* with *n*, for example, for the last 3 commits::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:122
# 00c9a79033eb43b39340e3fde470227f
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:124
# 6b7240ce4d3a4ec999bfd3c0dc04cf77
msgid "If you plan to do a lot of development on calibre, then the best method is to create a `GitHub <https://github.com>`_ account. Below is a basic guide to setting up your own fork of calibre in a way that will allow you to submit pull requests for inclusion into the main calibre repository:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:129
# 224ddb59220b4aa8b24b2d85bcbb204d
msgid "Setup git on your machine as described in this article: `Setup Git <https://help.github.com/articles/set-up-git>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:130
# 72c622c514b5436e858d38208ab40e90
msgid "Setup ssh keys for authentication to GitHub, as described here: `Generating SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:131
# 015f3fecabea469e8055360cc4e77fd8
msgid "Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` button."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:132
# 1ff0d7a662dc4dbfb40f36065bf531a5
msgid "In a Terminal do::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:137
# 93ef5539874f45b294b9df8510c41395
msgid "Replace <username> above with your github username. That will get your fork checked out locally."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:138
# e7b8e99cb12646e4b43bcff43b854269
msgid "You can make changes and commit them whenever you like. When you are ready to have your work merged, do a::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:142
# d2759f4b759a4c3389f445863b239483
msgid "and go to ``https://github.com/<username>/calibre`` and click the :guilabel:`Pull Request` button to generate a pull request that can be merged."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:143
# 812cb0f75b9043b2939e023e63d6d438
msgid "You can update your local copy with code from the main repo at any time by doing::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:148
# a169f2b85b2c47db9ac1d91f1e415f0c
msgid "You should also keep an eye on the calibre `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making major changes, you should discuss them in the forum or contact Kovid directly (his email address is all over the source code)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:154
# 97e633c190384b07a7b2af7ea29d5a0a
msgid "Windows development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:156
#: ../../home/kovid/work/calibre/manual/develop.rst:190
#: ../../home/kovid/work/calibre/manual/develop.rst:222
# 2ef754c70b9d4fe6a70b299656abb3f1
# cae2617a947949d98cba93f3aa701225
# 633a7f9d3c864e9b86f7c94b30e5aad1
msgid "You must also get the calibre source code separately as described above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:158
# 8a51b9d7aeb6433eacdcf2ad4548afc5
msgid "Install calibre normally, using the Windows installer. Then open a Command Prompt and change to the previously checked out calibre code directory. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:163
#: ../../home/kovid/work/calibre/manual/develop.rst:234
# 55768974f792454186115c226f8863b8
# 09c96d893e0a479688d953c360813b7e
msgid "calibre is the directory that contains the src and resources sub-directories."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:165
# 24f3ab51c85343b9b7ea04fee4b01eb7
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide <https://docs.python.org/2/using/windows.html#excursus-setting-environment-variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:170
# 2760db5281ac465dad99a8e3c78686a0
msgid "Once you have set the environment variable, open a new command prompt and check that it was correctly set by using the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:175
#: ../../home/kovid/work/calibre/manual/develop.rst:245
# 9fe658b661a74581bc2e444f1b60a3c1
# ee2f2f6bab9948d184a5690917e58672
msgid "Setting this environment variable means that calibre will now load all its Python code from the specified location."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:177
# dac70dd8ed324b83b161d055788c0231
msgid "That's it! You are now ready to start hacking on the calibre code. For example, open the file :file:`src\\\\calibre\\\\__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:182
#: ../../home/kovid/work/calibre/manual/develop.rst:252
# 2b65cb6f4fc042c88c54d5177c726624
# f7c2b753212348bbac964b0638a5bcdd
msgid "near the top of the file. Now run the command :command:`calibredb`. The very first line of output should be ``Hello, world!``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:184
# 46fd6f73b37c4693b1f4610dcd30a078
msgid "You can also setup a calibre development environment inside the free Microsoft Visual Studio, if you like, following the instructions `here <http://www.mobileread.com/forums/showthread.php?t=251201>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:188
# 3d06554ad18d4686bd802ea704a06372
msgid "OS X development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:192
# 63154d51e6914a1a962362bcefff6216
msgid "Install calibre normally using the provided .dmg. Then open a Terminal and change to the previously checked out calibre code directory, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:197
# d48f671aa5294f17a1cdb2416865da8c
msgid "calibre is the directory that contains the src and resources sub-directories. Ensure you have installed the calibre commandline tools via :guilabel:`Preferences->Advanced->Miscellaneous` in the calibre GUI."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:199
# 95967af39ec846f1878579f74bf6a552
msgid "The next step is to create a bash script that will set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory when running calibre in debug mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:201
# 0f5e35fb1db144d792d7970ede317b06
msgid "Create a plain text file::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:207
# 3683c0bf139b49fdb068e8ae7fc0ef0d
msgid "Save this file as ``/usr/bin/calibre-develop``, then set its permissions so that it can be executed::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:211
# e369f22f420c450e9c7c4c00198df91c
msgid "Once you have done this, run::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:215
# 89746f0153fa45ee8ed8f3687d4bc138
msgid "You should see some diagnostic information in the Terminal window as calibre starts up, and you should see an asterisk after the version number in the GUI window, indicating that you are running from source."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:220
# c724adb250904969a30b17d29801541b
msgid "Linux development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:224
# dce700471eca45eda7cefe5eec5b0256
msgid "calibre is primarily developed on Linux. You have two choices in setting up the development environment. You can install the calibre binary as normal and use that as a runtime environment to do your development. This approach is similar to that used in Windows and OS X. Alternatively, you can install calibre from source. Instructions for setting up a development environment from source are in the INSTALL file in the source tree. Here we will address using the binary at runtime, which is the recommended method."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:230
# 20b3acc49cc647e5a0ad651789d8ae32
msgid "Install calibre using the binary installer. Then open a terminal and change to the previously checked out calibre code directory, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:236
# 0197af8137da4713aff6191769cbba5a
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``/home/kovid/work/calibre/src``. How to set environment variables depends on your Linux distribution and what shell you are using."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:240
# e7650c76ce7a4ccc9d1370f2cbf35a4d
msgid "Once you have set the environment variable, open a new terminal and check that it was correctly set by using the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:247
# 3eeab89dd04a463cbe9e50df237465a6
msgid "That's it! You are now ready to start hacking on the calibre code. For example, open the file :file:`src/calibre/__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:255
# aaa109eb7f274c7c83ffba8c0195766e
msgid "Having separate \"normal\" and \"development\" calibre installs on the same computer"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:257
# 0832d75b1b8140d98d837bbb2187aacf
msgid "The calibre source tree is very stable and rarely breaks, but if you feel the need to run from source on a separate test library and run the released calibre version with your everyday library, you can achieve this easily using .bat files or shell scripts to launch calibre. The example below shows how to do this on Windows using .bat files (the instructions for other platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:262
# c7842518a9d74bd5975883738a5b9136
msgid "To launch the release version of calibre with your everyday library:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:264
# e93625ca352b45d2a3ba78e37e455d76
msgid "calibre-normal.bat::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:268
# 95bea80734b4428ebc177563e8ce1565
msgid "calibre-dev.bat::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:275
# a14968ef5a5d40b2a9d487cd3ce73108
msgid "Debugging tips"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:277
# eda2a5eb8e4c438eba18324ce90f5414
msgid "Python is a dynamically typed language with excellent facilities for introspection. Kovid wrote the core calibre code without once using a debugger. There are many strategies to debug calibre code:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:282
# 58dcc78a6c844ded92c7d09f56f9bbb8
msgid "Using print statements"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:284
# 5791aebef6204933b842ecc94d90fa16
msgid "This is Kovid's favorite way to debug. Simply insert print statements at points of interest and run your program in the terminal. For example, you can start the GUI from the terminal as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:289
# caa86e6a389d44b89240340f4b9a43b6
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:293
# 93f583f14dfa4b798aee6efdc8cffce7
msgid "The ebook-editor can be started as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:298
# 4212561d120a45e0a8b3e09547e5e71e
msgid "Using an interactive python interpreter"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:300
# 7a2eb55963904d5a9ce762810664436c
msgid "You can insert the following two lines of code to start an interactive python session at that point::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:305
# dfac04a7f8444637a0f34667fd5e5328
msgid "When running from the command line, this will start an interactive Python interpreter with access to all locally defined variables (variables in the local scope). The interactive prompt even has TAB completion for object properties and you can use the various Python facilities for introspection, such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:311
# e66366c49b8340c2af8f8b018f816106
msgid "Using the python debugger as a remote debugger"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:313
# 54b0b3693a8b4236a24a0a7e0984ee85
msgid "You can use the builtin python debugger (pdb) as a remote debugger from the command line. First, start the remote debugger at the point in the calibre code you are interested in, like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:320
# ff01c993618c4537b8660c032edaa9d7
msgid "Then run calibre, either as normal, or using one of the calibre-debug commands described in the previous section. Once the above point in the code is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:324
# 063a258f99ff4fbba05be290a043092b
msgid "Now open a terminal or command prompt and use the following command to start the debugging session::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:329
# 93e8aa2503154ed79bbb5a810980fba1
msgid "You can read about how to use the python debugger in the `python stdlib docs for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-commands>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:333
# 975aa6d478a940c9855edc48db103463
msgid "By default, the remote debugger will try to connect on port 4444. You can change it, by passing the port parameter to both the set_trace() and the cli() functions above, like this: ``set_trace(port=1234)`` and ``cli(port=1234)``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:339
# 8834994769064b09acc5c84b784cd26d
msgid "The python debugger cannot handle multiple threads, so you have to call set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:343
# 87fd249945494cc5b48ca57db8f075a3
msgid "Using the debugger in your favorite python IDE"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:345
# d61c216a627147e3b116c1baa72e9c56
msgid "It is possible to use the builtin debugger in your favorite python IDE, if it supports remote debugging. The first step is to add the calibre src checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the ``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:350
# f16ddf3a604546afaf32e8a3cb4939d4
msgid "Then place the IDE's remote debugger module into the :file:`src` subdirectory of the calibre source code checkout. Add whatever code is needed to launch the remote debugger to calibre at the point of interest, for example in the main function. Then run calibre as normal. Your IDE should now be able to connect to the remote debugger running inside calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:357
# ac4609ce6ab040f4b1ffd6125e8768df
msgid "Executing arbitrary scripts in the calibre python environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:359
# d60569a18ea543038de36aeac30bcb2a
msgid "The :command:`calibre-debug` command provides a couple of handy switches to execute your own code, with access to the calibre modules::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:364
# 29ece42a45a2410e925cd2877e786194
msgid "is great for testing a little snippet of code on the command line. It works in the same way as the -c switch to the python interpreter::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:368
# db4d6986d44c4d4bb3b8fec57cbecd6a
msgid "can be used to execute your own Python script. It works in the same way as passing the script to the Python interpreter, except that the calibre environment is fully initialized, so you can use all the calibre code in your script. To use command line arguments with your script, use the form::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:373
# 28f24e6cba4a4660ae627a62d940abc2
msgid "The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:377
# 7e9b532f94c84e6c86bc714e7621263a
msgid "Using calibre in your projects"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:379
# faad6c321b794a3798d19aad22df0ae5
msgid "It is possible to directly use calibre functions/code in your Python project. Two ways exist to do this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:382
# 57b1d4afdcd740e2957932f98bab05d9
msgid "Binary install of calibre"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:384
# b2dec5a7705f4bf4bbcbc5d18687ffd3
msgid "If you have a binary install of calibre, you can use the Python interpreter bundled with calibre, like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:389
# fe69441ee7f447a89219c36623e7d43d
msgid "Source install on Linux"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:391
# 210bded4ac0c481681189b508cd8a6b0
msgid "In addition to using the above technique, if you do a source install on Linux, you can also directly import calibre, as follows::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:399
# 486416252c7a43eaac65435abed928e2
msgid "It is essential that you import the init_calibre module before any other calibre modules/packages as it sets up the interpreter to run calibre code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:403
# 9def9438e0294c5da2ffbf6c5a961f29
msgid "API documentation for various parts of calibre"
msgstr ""

