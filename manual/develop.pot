# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.45.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-18 08:08+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../develop.rst:6
# 4f9fc63f1e71492d90db974a11ba7680
msgid "Setting up a |app| development environment"
msgstr ""

#: ../../develop.rst:8
# 5d58c1f498184f5f9a86d85f40b1e847
msgid "|app| is completely open source, licensed under the `GNU GPL v3 <http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to download and modify the program to your heart's content. In this section, you will learn how to get a |app| development environment set up on the operating system of your choice. |app| is written primarily in `Python <http://www.python.org>`_ with some C/C++ code for speed and system interfacing. Note that |app| is not compatible with Python 3 and requires at least Python 2.7."
msgstr ""

#: ../../develop.rst:0
# f55db1ae8b0d4f1780466751b1261633
msgid "Contents"
msgstr ""

#: ../../develop.rst:19
# 0215d8ce50634801a054cc166066fa43
msgid "Design philosophy"
msgstr ""

#: ../../develop.rst:21
# 1b900579f9ba48b4b5f6ed5366aa59e1
msgid "|app| has its roots in the Unix world, which means that its design is highly modular. The modules interact with each other via well defined interfaces. This makes adding new features and fixing bugs in |app| very easy, resulting in a frenetic pace of development. Because of its roots, |app| has a comprehensive command line interface for all its functions, documented in :ref:`cli`."
msgstr ""

#: ../../develop.rst:26
# 5be75f13a7614e258b9f2226fbd53cca
msgid "The modular design of |app| is expressed via ``Plugins``. There is a :ref:`tutorial <customize>` on writing |app| plugins. For example, adding support for a new device to |app| typically involves writing less than a 100 lines of code in the form of a device driver plugin. You can browse the `built-in drivers <http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_. Similarly, adding support for new conversion formats involves writing input/output format plugins. Another example of the modular design is the :ref:`recipe system <news>` for fetching news. For more examples of plugins designed to add features to |app|, see the `plugin index <http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

#: ../../develop.rst:36
# 71aff4a7393249d6b9a2b3fbbd8f6ef1
msgid "Code layout"
msgstr ""

#: ../../develop.rst:38
# 5ee7f5ce27c04673aed6c06ca9111550
msgid "All the |app| python code is in the ``calibre`` package. This package contains the following main sub-packages"
msgstr ""

#: ../../develop.rst:40
# f191fc7d88204d68b0078f6f7128520b
msgid "devices - All the device drivers. Just look through some of the built-in drivers to get an idea for how they work."
msgstr ""

#: ../../develop.rst:42
# bc97b1648e8a4c10bd2b5a065f1581fd
msgid "For details, see: ``devices.interface`` which defines the interface supported by device drivers and ``devices.usbms`` which defines a generic driver that connects to a USBMS device. All USBMS based drivers in |app| inherit from it."
msgstr ""

#: ../../develop.rst:45
# f78b9d70648e49baa57597d4dd0149cd
msgid "ebooks  - All the ebook conversion/metadata code. A good starting point is ``calibre.ebooks.conversion.cli`` which is the module powering the :command:`ebook-convert` command. The conversion process is controlled via ``conversion.plumber``. The format independent code is all in ``ebooks.oeb`` and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../develop.rst:49
# 1a283b384d834c228c12f9809281810a
msgid "Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

#: ../../develop.rst:50
# 120aa7f6cf6d484d8ac663acccb7c170
msgid "Conversion happens in a pipeline, for the structure of the pipeline, see :ref:`conversion-introduction`. The pipeline consists of an input plugin, various transforms and an output plugin. The code that constructs and drives the pipeline is in :file:`plumber.py`. The pipeline works on a representation of an ebook that is like an unzipped epub, with manifest, spine, toc, guide, html content, etc. The class that manages this representation is OEBBook in ``ebooks.oeb.base``. The various transformations that are applied to the book during conversions live in :file:`oeb/transforms/*.py`. And the input and output plugins live in :file:`conversion/plugins/*.py`."
msgstr ""

#: ../../develop.rst:60
# 05e9a5061f1b4cd0b05ec2ecbb65642f
msgid "Ebook editing happens using a different container object. It is documented in :ref:`polish_api`."
msgstr ""

#: ../../develop.rst:63
# 28d72793431b469094aa401bff1e26e4
msgid "db - The database back-end. See :ref:`db_api` for the interface to the |app| library."
msgstr ""

#: ../../develop.rst:65
# 6c2025743c18431d8f8db44a37c024cf
msgid "content server: ``library.server`` is the |app| Content Server."
msgstr ""

#: ../../develop.rst:67
# 51fc5939609243eda16be405fb78f674
msgid "gui2 - The Graphical User Interface. GUI initialization happens in ``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The ebook editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../develop.rst:69
# 39eddd004d4a4bb4ab04e946070f997a
msgid "If you want to locate the entry points for all the various |app| executables, look at the ``entry_points`` structure in `linux.py <https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../develop.rst:73
# e3c16f3c37004854885e856453097781
msgid "If you need help understanding the code, post in the `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will most likely get help from one of |app|'s many developers."
msgstr ""

#: ../../develop.rst:77
# 38af04b47cf2414b892712fb106ee234
msgid "Getting the code"
msgstr ""

#: ../../develop.rst:79
# a5d438b787964081abb1b0c8ab485ee1
msgid "You can get the |app| source code in two ways, using a version control system or directly downloading a `tarball <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:82
# f63f5e6c17794d96bd124e60e06f07ba
msgid "|app| uses `Git <http://www.git-scm.com/>`_, a distributed version control system. Git is available on all the platforms |app| supports.  After installing Git, you can get the |app| source code with the command::"
msgstr ""

#: ../../develop.rst:88
# ebaffa06281a4d208c086f0aaf137763
msgid "On Windows you will need the complete path name, that will be something like :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

#: ../../develop.rst:90
# 26c1c0832b0a4184ba25497fb0e2a8e6
msgid "|app| is a very large project with a very long source control history, so the above can take a while (10mins to an hour depending on your internet speed)."
msgstr ""

#: ../../develop.rst:93
# de17f191435d4cb7b1d2f93892b8dc00
msgid "If you want to get the code faster, the sourcecode for the latest release is always available as an `archive <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:96
# 81a7059492ae4cc4afa3076109c8304b
msgid "To update a branch to the latest code, use the command::"
msgstr ""

#: ../../develop.rst:101
# 8eb2bc579ce0468b9bd4443ba24e57d9
msgid "Submitting your changes to be included"
msgstr ""

#: ../../develop.rst:103
# a6968f66a861419d86311c7f3b4e4648
msgid "If you only plan to make a few small changes, you can make your changes and create a \"merge directive\" which you can then attach to a ticket in the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, make your changes, then run::"
msgstr ""

#: ../../develop.rst:111
# a20faa8ea6874aafaa63c95f0d6cbe95
msgid "This will create a :file:`my-changes` file in the current directory, simply attach that to a ticket on the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. Note that this will include *all* the commits you have made. If you only want to send some commits, you have to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../develop.rst:119
# 23e8942deddd491ab7de307bc76bc285
msgid "To send the last *n* commits, replace *1* with *n*, for example, for the last 3 commits::"
msgstr ""

#: ../../develop.rst:124
# 37aafcdd170c43cdbbadfd331a9e5a59
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

#: ../../develop.rst:126
# 94674ff621df4a399ecf32a7bd18d06a
msgid "If you plan to do a lot of development on |app|, then the best method is to create a `GitHub <http://github.com>`_ account. Below is a basic guide to setting up your own fork of calibre in a way that will allow you to submit pull requests for inclusion into the main |app| repository:"
msgstr ""

#: ../../develop.rst:131
# 12f14b4fab7f4fe6b24c972f6f726071
msgid "Setup git on your machine as described in this article: `Setup Git <https://help.github.com/articles/set-up-git>`_"
msgstr ""

#: ../../develop.rst:132
# 98f42e99f3d04a0b870c7b965a3b7158
msgid "Setup ssh keys for authentication to GitHub, as described here: `Generating SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

#: ../../develop.rst:133
# c0e70574e46f47d2b29ebf74b12c9ea8
msgid "Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` button."
msgstr ""

#: ../../develop.rst:134
# 583b83a9a8e9485a9782f7576af171f0
msgid "In a Terminal do::"
msgstr ""

#: ../../develop.rst:138
# 9b5703cb67d644fca79fb039ecada8c9
msgid "Replace <username> above with your github username. That will get your fork checked out locally."
msgstr ""

#: ../../develop.rst:139
# 09a7febd64d1432aa9b5d7f31610ea77
msgid "You can make changes and commit them whenever you like. When you are ready to have your work merged, do a::"
msgstr ""

#: ../../develop.rst:143
# 49aa5fe4a06a4289914a69b24d8051ad
msgid "and go to ``https://github.com/<username>/calibre`` and click the :guilabel:`Pull Request` button to generate a pull request that can be merged."
msgstr ""

#: ../../develop.rst:144
# 0b2a86fd7aa34f5f926182d2bfca0e27
msgid "You can update your local copy with code from the main repo at any time by doing::"
msgstr ""

#: ../../develop.rst:149
# 79dae7be298543dcb0dfec7c3b8471cd
msgid "You should also keep an eye on the |app| `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making major changes, you should discuss them in the forum or contact Kovid directly (his email address is all over the source code)."
msgstr ""

#: ../../develop.rst:155
# 8a7ce8476d684b44aa6fa0f474cc9e96
msgid "Windows development environment"
msgstr ""

#: ../../develop.rst:157
#: ../../develop.rst:188
#: ../../develop.rst:220
# c66b818edb6348cc93340e44429042f8
# ecb33b3468394cf4bb19f405c7f9672c
# 66277701406d40c5b389e0be8cdce216
msgid "You must also get the |app| source code separately as described above."
msgstr ""

#: ../../develop.rst:159
# eea99581a66c4f8db5f535ed6b660dcb
msgid "Install |app| normally, using the Windows installer. Then open a Command Prompt and change to the previously checked out |app| code directory. For example::"
msgstr ""

#: ../../develop.rst:164
#: ../../develop.rst:232
# f16207a8346c46e4b58cc0b4fef89e19
# f86dc34c9f8c4ba38bd90b6b14886e69
msgid "calibre is the directory that contains the src and resources sub-directories."
msgstr ""

#: ../../develop.rst:166
# b5c32fd03e5d4eae97e2a976fdab2cc2
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide <http://docs.python.org/using/windows.html#excursus-setting-environment-variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../develop.rst:171
# 80078f07f6c246e48d981c33bee3a894
msgid "Once you have set the environment variable, open a new command prompt and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:176
#: ../../develop.rst:243
# e412c24555f34e85956dd9944bdd52c9
# 7358c42aa883457d8cc0cb1b45df26ea
msgid "Setting this environment variable means that |app| will now load all its Python code from the specified location."
msgstr ""

#: ../../develop.rst:178
# 1b1406eb8740477fb03717b51e90c776
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src\\\\calibre\\\\__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:183
#: ../../develop.rst:250
# 0e272e28a97f44698f7a671a4692e9d3
# 77ef42462bba4216b7d04fcbea75f598
msgid "near the top of the file. Now run the command :command:`calibredb`. The very first line of output should be ``Hello, world!``."
msgstr ""

#: ../../develop.rst:186
# 8ead43c49a4d4c159df95239011c4823
msgid "OS X development environment"
msgstr ""

#: ../../develop.rst:190
# 06efd9bf4ada48fe930f04c5d4391257
msgid "Install |app| normally using the provided .dmg. Then open a Terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:195
# 28c94eb53c8b41229e26c790f01d346d
msgid "calibre is the directory that contains the src and resources sub-directories. Ensure you have installed the |app| commandline tools via :guilabel:`Preferences->Advanced->Miscellaneous` in the |app| GUI."
msgstr ""

#: ../../develop.rst:197
# b5ab495f55d94dbd912539c24c195809
msgid "The next step is to create a bash script that will set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory when running calibre in debug mode."
msgstr ""

#: ../../develop.rst:199
# 23a40897b1444d04a32fcb358f8875cf
msgid "Create a plain text file::"
msgstr ""

#: ../../develop.rst:205
# 1c0317c9c98d473fbdea86b5ff675a88
msgid "Save this file as ``/usr/bin/calibre-develop``, then set its permissions so that it can be executed::"
msgstr ""

#: ../../develop.rst:209
# d8e73546b7654b60a7872ea837fd235d
msgid "Once you have done this, run::"
msgstr ""

#: ../../develop.rst:213
# ff419afb8b754a45b51439fdd0f08142
msgid "You should see some diagnostic information in the Terminal window as calibre starts up, and you should see an asterisk after the version number in the GUI window, indicating that you are running from source."
msgstr ""

#: ../../develop.rst:218
# 51c4e584bf164b788133f5de7b99b499
msgid "Linux development environment"
msgstr ""

#: ../../develop.rst:222
# 0a4634b9ae8740c4b40e74500c7dc548
msgid "|app| is primarily developed on Linux. You have two choices in setting up the development environment. You can install the |app| binary as normal and use that as a runtime environment to do your development. This approach is similar to that used in Windows and OS X. Alternatively, you can install |app| from source. Instructions for setting up a development environment from source are in the INSTALL file in the source tree. Here we will address using the binary at runtime, which is the recommended method."
msgstr ""

#: ../../develop.rst:228
# b045767869174c4298e39e9fe25d95bc
msgid "Install |app| using the binary installer. Then open a terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:234
# 953a06ce71bb421298cd1ec7662ae796
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``/home/kovid/work/calibre/src``. How to set environment variables depends on your Linux distribution and what shell you are using."
msgstr ""

#: ../../develop.rst:238
# 2f9c84d0580247c8bc556f14b7dcbd26
msgid "Once you have set the environment variable, open a new terminal and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:245
# a2a21d5e518f4ebbb42e03020e58f0fa
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src/calibre/__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:253
# bd7059d38b054b779f8e6e144eabec8e
msgid "Having separate \"normal\" and \"development\" |app| installs on the same computer"
msgstr ""

#: ../../develop.rst:255
# 7b9e340c6f424499a5ae9123ba071fb9
msgid "The |app| source tree is very stable and rarely breaks, but if you feel the need to run from source on a separate test library and run the released |app| version with your everyday library, you can achieve this easily using .bat files or shell scripts to launch |app|. The example below shows how to do this on Windows using .bat files (the instructions for other platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../develop.rst:260
# 4da6fe4e6c744a8dbe77c005b0ebcaa7
msgid "To launch the release version of |app| with your everyday library:"
msgstr ""

#: ../../develop.rst:262
# 39d438799bf4498aa2836f79a9c3c2da
msgid "calibre-normal.bat::"
msgstr ""

#: ../../develop.rst:266
# 9237a3bea2b6441a97444d6ea2f12a31
msgid "calibre-dev.bat::"
msgstr ""

#: ../../develop.rst:273
# c492824e3d744397b6c4a188eb5e955c
msgid "Debugging tips"
msgstr ""

#: ../../develop.rst:275
# f5c603b56b414a1db8eb7bcabd8f3027
msgid "Python is a dynamically typed language with excellent facilities for introspection. Kovid wrote the core |app| code without once using a debugger. There are many strategies to debug |app| code:"
msgstr ""

#: ../../develop.rst:280
# 5cbadb9a793b4df29a26b4fc89dd45f4
msgid "Using print statements"
msgstr ""

#: ../../develop.rst:282
# 97c123678d9c457eba1e2d6f20445afd
msgid "This is Kovid's favorite way to debug. Simply insert print statements at points of interest and run your program in the terminal. For example, you can start the GUI from the terminal as::"
msgstr ""

#: ../../develop.rst:287
# 141db2cd56dc4b4aa510b4b5fe7caddc
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

#: ../../develop.rst:291
# a2af408a9b38452589778a8d4b0be0a9
msgid "The ebook-editor can be started as::"
msgstr ""

#: ../../develop.rst:296
# d917066c0a72445fb33fd26aef30872f
msgid "Using an interactive python interpreter"
msgstr ""

#: ../../develop.rst:298
# 3f9ed579192c44c1b5331b07cd52da9c
msgid "You can insert the following two lines of code to start an interactive python session at that point::"
msgstr ""

#: ../../develop.rst:303
# 73357411e5484d98824a0f048422c150
msgid "When running from the command line, this will start an interactive Python interpreter with access to all locally defined variables (variables in the local scope). The interactive prompt even has TAB completion for object properties and you can use the various Python facilities for introspection, such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

#: ../../develop.rst:309
# aa65d6b11a2c4b1a8718970d8004322e
msgid "Using the python debugger as a remote debugger"
msgstr ""

#: ../../develop.rst:311
# 82940eee8db244799d8246df1bfae123
msgid "You can use the builtin python debugger (pdb) as a remote debugger from the command line. First, start the remote debugger at the point in the calibre code you are interested in, like this::"
msgstr ""

#: ../../develop.rst:318
# 8e56c6ed3e7f4764ac642293a71725d4
msgid "Then run calibre, either as normal, or using one of the calibre-debug commands described in the previous section. Once the above point in the code is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

#: ../../develop.rst:322
# 75ad7e019df64219899d0843953144df
msgid "Now open a terminal or command prompt and use the following command to start the debugging session::"
msgstr ""

#: ../../develop.rst:327
# 789710898c944a949829a07459d1498f
msgid "You can read about how to use the python debugger in the `python stdlib docs for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-commands>`_."
msgstr ""

#: ../../develop.rst:331
# 21568959394c4b7687630dbfc815e272
msgid "By default, the remote debugger will try to connect on port 4444. You can change it, by passing the port parameter to both the set_trace() and the cli() functions above, like this: ``set_trace(port=1234)`` and ``cli(port=1234)``."
msgstr ""

#: ../../develop.rst:337
# 2f659c13a1564289a8f2a71dc093c65f
msgid "The python debugger cannot handle multiple threads, so you have to call set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../develop.rst:341
# 321df69b54af4686b08da48e249a544c
msgid "Using the debugger in your favorite python IDE"
msgstr ""

#: ../../develop.rst:343
# fe0bce30416a43fdbf029902b81899be
msgid "It is possible to use the builtin debugger in your favorite python IDE, if it supports remote debugging. The first step is to add the |app| src checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the ``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../develop.rst:348
# e2c3c69cdfde462897899dd0dfb9c2d7
msgid "Then place the IDE's remote debugger module into the :file:`src` subdirectory of the |app| source code checkout. Add whatever code is needed to launch the remote debugger to |app| at the point of interest, for example in the main function. Then run |app| as normal. Your IDE should now be able to connect to the remote debugger running inside |app|."
msgstr ""

#: ../../develop.rst:355
# cd6abec08f934a39a2fc5dfb829ac0f4
msgid "Executing arbitrary scripts in the |app| python environment"
msgstr ""

#: ../../develop.rst:357
# e29d5b9ff1c345168febdb6b5bda84e0
msgid "The :command:`calibre-debug` command provides a couple of handy switches to execute your own code, with access to the |app| modules::"
msgstr ""

#: ../../develop.rst:362
# 529480e91bad4effa2e5f544f8bbdd66
msgid "is great for testing a little snippet of code on the command line. It works in the same way as the -c switch to the python interpreter::"
msgstr ""

#: ../../develop.rst:366
# 55d73db083234372b6b732dc082c77dd
msgid "can be used to execute your own Python script. It works in the same way as passing the script to the Python interpreter, except that the calibre environment is fully initialized, so you can use all the calibre code in your script. To use command line arguments with your script, use the form::"
msgstr ""

#: ../../develop.rst:371
# 0724807eeaf6498c84351aae8d4f0f8b
msgid "The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

#: ../../develop.rst:375
# 6ac4f09defad448aa94dd3a584ffd11b
msgid "Using |app| in your projects"
msgstr ""

#: ../../develop.rst:377
# a621534258e74c2383e3663139902e6b
msgid "It is possible to directly use |app| functions/code in your Python project. Two ways exist to do this:"
msgstr ""

#: ../../develop.rst:380
# 18688a0c670c43839a343b3e2a5a18ef
msgid "Binary install of |app|"
msgstr ""

#: ../../develop.rst:382
# 57f55867f2574db1904b62e086ac8c95
msgid "If you have a binary install of |app|, you can use the Python interpreter bundled with |app|, like this::"
msgstr ""

#: ../../develop.rst:387
# 44804c8f4058405081849c179f1306cc
msgid "Source install on Linux"
msgstr ""

#: ../../develop.rst:389
# 704f7fb00c4c4734a8277e00fd059361
msgid "In addition to using the above technique, if you do a source install on Linux, you can also directly import |app|, as follows::"
msgstr ""

#: ../../develop.rst:397
# ac6d0456dfd7499d833de632b1235c45
msgid "It is essential that you import the init_calibre module before any other |app| modules/packages as it sets up the interpreter to run |app| code."
msgstr ""

#: ../../develop.rst:401
# 802a3ea19b1b480f992d7cc4c8fade59
msgid "API documentation for various parts of |app|"
msgstr ""

