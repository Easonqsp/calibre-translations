# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.43.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-05 22:19+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../develop.rst:6
# df9dc4ddf7444251b41e0222ecf39e6d
msgid "Setting up a |app| development environment"
msgstr ""

#: ../../develop.rst:8
# 1a600016bdde41a7a259a5c18a6f73f7
msgid "|app| is completely open source, licensed under the `GNU GPL v3 <http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to download and modify the program to your heart's content. In this section, you will learn how to get a |app| development environment set up on the operating system of your choice. |app| is written primarily in `Python <http://www.python.org>`_ with some C/C++ code for speed and system interfacing. Note that |app| is not compatible with Python 3 and requires at least Python 2.7."
msgstr ""

#: ../../develop.rst:0
# 54a48993579b471e833d8c1e924757ce
msgid "Contents"
msgstr ""

#: ../../develop.rst:19
# 8ab7b2f840a642ecb3abc18fccc98568
msgid "Design philosophy"
msgstr ""

#: ../../develop.rst:21
# 682e2bdab5274781a5d228bda4999338
msgid "|app| has its roots in the Unix world, which means that its design is highly modular. The modules interact with each other via well defined interfaces. This makes adding new features and fixing bugs in |app| very easy, resulting in a frenetic pace of development. Because of its roots, |app| has a comprehensive command line interface for all its functions, documented in :ref:`cli`."
msgstr ""

#: ../../develop.rst:26
# 7de889bcdd3747aa8e1064bb70862c6b
msgid "The modular design of |app| is expressed via ``Plugins``. There is a :ref:`tutorial <customize>` on writing |app| plugins. For example, adding support for a new device to |app| typically involves writing less than a 100 lines of code in the form of a device driver plugin. You can browse the `built-in drivers <http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_. Similarly, adding support for new conversion formats involves writing input/output format plugins. Another example of the modular design is the :ref:`recipe system <news>` for fetching news. For more examples of plugins designed to add features to |app|, see the `plugin index <http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

#: ../../develop.rst:36
# db610375fbbe4bc1a9414039ea6849df
msgid "Code layout"
msgstr ""

#: ../../develop.rst:38
# 4239339f5fdb471e8285692fc0754d43
msgid "All the |app| python code is in the ``calibre`` package. This package contains the following main sub-packages"
msgstr ""

#: ../../develop.rst:40
# 784a9d548d164861b5058c2a196fa84b
msgid "devices - All the device drivers. Just look through some of the built-in drivers to get an idea for how they work."
msgstr ""

#: ../../develop.rst:42
# ec2f7eed7c3a41c28e4e9293098503bd
msgid "For details, see: ``devices.interface`` which defines the interface supported by device drivers and ``devices.usbms`` which defines a generic driver that connects to a USBMS device. All USBMS based drivers in |app| inherit from it."
msgstr ""

#: ../../develop.rst:45
# 5f95610b70344a1086166c137cc5791f
msgid "ebooks  - All the ebook conversion/metadata code. A good starting point is ``calibre.ebooks.conversion.cli`` which is the module powering the :command:`ebook-convert` command. The conversion process is controlled via ``conversion.plumber``. The format independent code is all in ``ebooks.oeb`` and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../develop.rst:49
# 4c9e2aa13abf4bc08aa59ef94de07ae9
msgid "Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

#: ../../develop.rst:50
# b4841ed9350347dfb111db06c22ea442
msgid "Conversion happens in a pipeline, for the structure of the pipeline, see :ref:`conversion-introduction`. The pipeline consists of an input plugin, various transforms and an output plugin. The code that constructs and drives the pipeline is in :file:`plumber.py`. The pipeline works on a representation of an ebook that is like an unzipped epub, with manifest, spine, toc, guide, html content, etc. The class that manages this representation is OEBBook in ``ebooks.oeb.base``. The various transformations that are applied to the book during conversions live in :file:`oeb/transforms/*.py`. And the input and output plugins live in :file:`conversion/plugins/*.py`."
msgstr ""

#: ../../develop.rst:60
# 166d7d3d356c45e8ac1cc3d7cd2ee05e
msgid "Ebook editing happens using a different container object. It is documented in :ref:`polish_api`."
msgstr ""

#: ../../develop.rst:63
# db2d8bd0880a463784793be123850b89
msgid "db - The database back-end. See :ref:`db_api` for the interface to the |app| library."
msgstr ""

#: ../../develop.rst:65
# 81b2e3fa88ae4f5bb5cebbe65e3ffa2c
msgid "content server: ``library.server`` is the |app| Content Server."
msgstr ""

#: ../../develop.rst:67
# 1811b72b2a334eb3b9d4fdf17b10a5d5
msgid "gui2 - The Graphical User Interface. GUI initialization happens in ``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The ebook editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../develop.rst:69
# a535811b31564660ac4ae708a06c96d1
msgid "If you want to locate the entry points for all the various |app| executables, look at the ``entry_points`` structure in `linux.py <https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../develop.rst:73
# ef4a2260308540fe967b01b72da083df
msgid "If you need help understanding the code, post in the `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will most likely get help from one of |app|'s many developers."
msgstr ""

#: ../../develop.rst:77
# d7f5087bf8394a47bbba8368b4da748b
msgid "Getting the code"
msgstr ""

#: ../../develop.rst:79
# 4778dfd58ceb4eff88bc4d63bd9377fe
msgid "You can get the |app| source code in two ways, using a version control system or directly downloading a `tarball <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:82
# 00ae54cf5f3849a08e029adad21eabea
msgid "|app| uses `Git <http://www.git-scm.com/>`_, a distributed version control system. Git is available on all the platforms |app| supports.  After installing Git, you can get the |app| source code with the command::"
msgstr ""

#: ../../develop.rst:88
# 9bcac6464be0423ea079f8cf5cc6f0b5
msgid "On Windows you will need the complete path name, that will be something like :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

#: ../../develop.rst:90
# 47d8b6d3afd54ae58699b21fa9b45af5
msgid "|app| is a very large project with a very long source control history, so the above can take a while (10mins to an hour depending on your internet speed)."
msgstr ""

#: ../../develop.rst:93
# cd30dbf30e3d42b296c09bbc9d48cd23
msgid "If you want to get the code faster, the sourcecode for the latest release is always available as an `archive <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:96
# c325a8adbd344f9d87c93e29e69e0a84
msgid "To update a branch to the latest code, use the command::"
msgstr ""

#: ../../develop.rst:101
# 3ef28b706ee24adf802f416c7ca61a85
msgid "Submitting your changes to be included"
msgstr ""

#: ../../develop.rst:103
# 0d321f46322f443db490acf028376f68
msgid "If you only plan to make a few small changes, you can make your changes and create a \"merge directive\" which you can then attach to a ticket in the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, make your changes, then run::"
msgstr ""

#: ../../develop.rst:111
# ca938e2c96194f108818817dc38e4756
msgid "This will create a :file:`my-changes` file in the current directory, simply attach that to a ticket on the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. Note that this will include *all* the commits you have made. If you only want to send some commits, you have to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../develop.rst:119
# 64cacc3eebca4504b268607efa2a4926
msgid "To send the last *n* commits, replace *1* with *n*, for example, for the last 3 commits::"
msgstr ""

#: ../../develop.rst:124
# e7a8f97a65084291b17654ab6a7746ed
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

#: ../../develop.rst:126
# 2ca05f9e9c204873b64326224e8ee63c
msgid "If you plan to do a lot of development on |app|, then the best method is to create a `GitHub <http://github.com>`_ account. Below is a basic guide to setting up your own fork of calibre in a way that will allow you to submit pull requests for inclusion into the main |app| repository:"
msgstr ""

#: ../../develop.rst:131
# 4e02e62d789443c7acad0f2ecdc29ad8
msgid "Setup git on your machine as described in this article: `Setup Git <https://help.github.com/articles/set-up-git>`_"
msgstr ""

#: ../../develop.rst:132
# aa7ac2c3b14f4cb7bdb15a051fbe0d63
msgid "Setup ssh keys for authentication to GitHub, as described here: `Generating SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

#: ../../develop.rst:133
# 4116772c4cbf421fb53a2a4d4a3fdc91
msgid "Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` button."
msgstr ""

#: ../../develop.rst:134
# a533506e490a491f8089c05021d562d2
msgid "In a Terminal do::"
msgstr ""

#: ../../develop.rst:138
# 5d4da21344ea409698cca9153ff51161
msgid "Replace <username> above with your github username. That will get your fork checked out locally."
msgstr ""

#: ../../develop.rst:139
# 3da4505812ea435b8c75d4d5f37e9be4
msgid "You can make changes and commit them whenever you like. When you are ready to have your work merged, do a::"
msgstr ""

#: ../../develop.rst:143
# ed1d270349894ee5917b973e59bd854e
msgid "and go to ``https://github.com/<username>/calibre`` and click the :guilabel:`Pull Request` button to generate a pull request that can be merged."
msgstr ""

#: ../../develop.rst:144
# f5f8527d6c0f4793b60dc2d2c20f7e36
msgid "You can update your local copy with code from the main repo at any time by doing::"
msgstr ""

#: ../../develop.rst:149
# 9a257868cdd6458fb3a9453e562b2d1d
msgid "You should also keep an eye on the |app| `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making major changes, you should discuss them in the forum or contact Kovid directly (his email address is all over the source code)."
msgstr ""

#: ../../develop.rst:155
# 00aa4bceb8fb4cbc8dc232484c483547
msgid "Windows development environment"
msgstr ""

#: ../../develop.rst:157
#: ../../develop.rst:188
#: ../../develop.rst:220
# 6c5af76045d3491198f18de4f4f2de1a
# 97b4af06c19a440ab0f9427d77b3defa
# 785dbdc9f0814f0d9df74fe3e20b71e9
msgid "You must also get the |app| source code separately as described above."
msgstr ""

#: ../../develop.rst:159
# b2eb7e0e3f0341029c99abc31764d088
msgid "Install |app| normally, using the Windows installer. Then open a Command Prompt and change to the previously checked out |app| code directory. For example::"
msgstr ""

#: ../../develop.rst:164
#: ../../develop.rst:232
# e1f2d9ee0a014a758997a9ad912b2d6a
# 6aa0ee936f9d4c5da99e2cb686e54b28
msgid "calibre is the directory that contains the src and resources sub-directories."
msgstr ""

#: ../../develop.rst:166
# 8a1e55ea45a543f2b4dd8bd341e10863
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide <http://docs.python.org/using/windows.html#excursus-setting-environment-variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../develop.rst:171
# 5ea60413a08a414e8cd3a4ed9b930b42
msgid "Once you have set the environment variable, open a new command prompt and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:176
#: ../../develop.rst:243
# 37c182a5b58849fb8ea7bec11b2f1705
# 9b0c76db20614b3085690ccd67a75245
msgid "Setting this environment variable means that |app| will now load all its Python code from the specified location."
msgstr ""

#: ../../develop.rst:178
# e599e025139a4c48964ce4110aea5592
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src\\\\calibre\\\\__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:183
#: ../../develop.rst:250
# 1d0c2936e50c4fa5bf210162839f8d7a
# 6231765485694e85a89a8c06653b14e7
msgid "near the top of the file. Now run the command :command:`calibredb`. The very first line of output should be ``Hello, world!``."
msgstr ""

#: ../../develop.rst:186
# ce489b9f48f7423b83be71879955a7e9
msgid "OS X development environment"
msgstr ""

#: ../../develop.rst:190
# 312142208a7748518ac20343fd358053
msgid "Install |app| normally using the provided .dmg. Then open a Terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:195
# 741a2febe6c94c228f2a68c7e1dac44d
msgid "calibre is the directory that contains the src and resources sub-directories. Ensure you have installed the |app| commandline tools via :guilabel:`Preferences->Advanced->Miscellaneous` in the |app| GUI."
msgstr ""

#: ../../develop.rst:197
# 3104ebfd665d4290813531959ee4de56
msgid "The next step is to create a bash script that will set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory when running calibre in debug mode."
msgstr ""

#: ../../develop.rst:199
# 8d5594359a9b4e3e99383299ad50f897
msgid "Create a plain text file::"
msgstr ""

#: ../../develop.rst:205
# 78da4a57e1814c6ab79bc627cc361419
msgid "Save this file as ``/usr/bin/calibre-develop``, then set its permissions so that it can be executed::"
msgstr ""

#: ../../develop.rst:209
# a4a0eb55b44146ed9c38f8199732e5bc
msgid "Once you have done this, run::"
msgstr ""

#: ../../develop.rst:213
# 770391167f65405a9a92017bcfcf34cc
msgid "You should see some diagnostic information in the Terminal window as calibre starts up, and you should see an asterisk after the version number in the GUI window, indicating that you are running from source."
msgstr ""

#: ../../develop.rst:218
# bdbd27c883a648e9b1bc233fc7ed446a
msgid "Linux development environment"
msgstr ""

#: ../../develop.rst:222
# b941d4e2014c426e8740ae53f49989c5
msgid "|app| is primarily developed on Linux. You have two choices in setting up the development environment. You can install the |app| binary as normal and use that as a runtime environment to do your development. This approach is similar to that used in Windows and OS X. Alternatively, you can install |app| from source. Instructions for setting up a development environment from source are in the INSTALL file in the source tree. Here we will address using the binary at runtime, which is the recommended method."
msgstr ""

#: ../../develop.rst:228
# 20d78ffbd6a74e498cd14479fb695efe
msgid "Install the |app| using the binary installer. Then open a terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:234
# bec83142255b4e4f8f414509ffb78c51
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``/home/kovid/work/calibre/src``. How to set environment variables depends on your Linux distribution and what shell you are using."
msgstr ""

#: ../../develop.rst:238
# 2d419d926bde442888905674d1af048e
msgid "Once you have set the environment variable, open a new terminal and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:245
# 92e434b82ad247969a26924d36f209f9
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src/calibre/__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:253
# d68ac8a3b5eb48b5bff36db08b69e27a
msgid "Having separate \"normal\" and \"development\" |app| installs on the same computer"
msgstr ""

#: ../../develop.rst:255
# 6ed215ab3ad14dda9251111c6df339ef
msgid "The |app| source tree is very stable and rarely breaks, but if you feel the need to run from source on a separate test library and run the released |app| version with your everyday library, you can achieve this easily using .bat files or shell scripts to launch |app|. The example below shows how to do this on Windows using .bat files (the instructions for other platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../develop.rst:260
# 6754ba36c511455295a6cba0ae1dc9e6
msgid "To launch the release version of |app| with your everyday library:"
msgstr ""

#: ../../develop.rst:262
# cdd5f956a96a40de87aff1b7cbb086e1
msgid "calibre-normal.bat::"
msgstr ""

#: ../../develop.rst:266
# f422649cc4604d2a8155a6a6eb24243b
msgid "calibre-dev.bat::"
msgstr ""

#: ../../develop.rst:273
# 2015355e66ef40c7a1b34e6c0cb5a1db
msgid "Debugging tips"
msgstr ""

#: ../../develop.rst:275
# 2f54eb38d83a45399045797793718a79
msgid "Python is a dynamically typed language with excellent facilities for introspection. Kovid wrote the core |app| code without once using a debugger. There are many strategies to debug |app| code:"
msgstr ""

#: ../../develop.rst:280
# 3cb8437d25df45099cdb4dea322463b2
msgid "Using print statements"
msgstr ""

#: ../../develop.rst:282
# fc629ee740624b4d983b6678af36550b
msgid "This is Kovid's favorite way to debug. Simply insert print statements at points of interest and run your program in the terminal. For example, you can start the GUI from the terminal as::"
msgstr ""

#: ../../develop.rst:287
# 3acca68b4d3e40b79743052175652cdb
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

#: ../../develop.rst:291
# f50025c46965412f86b5327a1d1fbcb9
msgid "The ebook-editor can be started as::"
msgstr ""

#: ../../develop.rst:296
# 2a6826285aca462d91d8fb7563e529a1
msgid "Using an interactive python interpreter"
msgstr ""

#: ../../develop.rst:298
# 99637dbd4df54142bd7e2364900545d0
msgid "You can insert the following two lines of code to start an interactive python session at that point::"
msgstr ""

#: ../../develop.rst:303
# 371194316bb245bf9d501ffb29896b85
msgid "When running from the command line, this will start an interactive Python interpreter with access to all locally defined variables (variables in the local scope). The interactive prompt even has TAB completion for object properties and you can use the various Python facilities for introspection, such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

#: ../../develop.rst:309
# 26c51df3366f4f898f0a1b22ce97677a
msgid "Using the python debugger as a remote debugger"
msgstr ""

#: ../../develop.rst:311
# e7af0b7b84ae48b2addab9d1e3400c0a
msgid "You can use the builtin python debugger (pdb) as a remote debugger from the command line. First, start the remote debugger at the point in the calibre code you are interested in, like this::"
msgstr ""

#: ../../develop.rst:318
# 5d6d75b196584a50af60181f8bb22992
msgid "Then run calibre, either as normal, or using one of the calibre-debug commands described in the previous section. Once the above point in the code is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

#: ../../develop.rst:322
# df1468bd1e7e420a9bf0d61d7710b7a8
msgid "Now open a terminal or command prompt and use the following command to start the debugging session::"
msgstr ""

#: ../../develop.rst:327
# d36ef87810514c4387f12b947dd037a7
msgid "You can read about how to use the python debugger in the `python stdlib docs for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-commands>`_."
msgstr ""

#: ../../develop.rst:331
# 9188c00a0bc64539b081051c71ab7628
msgid "By default, the remote debugger will try to connect on port 4444. You can change it, by passing the port parameter to both the set_trace() and the cli() functions above, like this: ``set_trace(port=1234)`` and ``cli(port=1234)``."
msgstr ""

#: ../../develop.rst:337
# 0814c5033a184bd992bf74e2fa2e5aaf
msgid "The python debugger cannot handle multiple threads, so you have to call set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../develop.rst:341
# 0c81bcd24e3a4263bb6c4cdea7af9822
msgid "Using the debugger in your favorite python IDE"
msgstr ""

#: ../../develop.rst:343
# 53e635851f984294824dfe4f558fc3a0
msgid "It is possible to use the builtin debugger in your favorite python IDE, if it supports remote debugging. The first step is to add the |app| src checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the ``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../develop.rst:348
# 909c160c2bf24678abc763c9b0c2b852
msgid "Then place the IDE's remote debugger module into the :file:`src` subdirectory of the |app| source code checkout. Add whatever code is needed to launch the remote debugger to |app| at the point of interest, for example in the main function. Then run |app| as normal. Your IDE should now be able to connect to the remote debugger running inside |app|."
msgstr ""

#: ../../develop.rst:355
# 5a1ce99f14d54237b513851a23bd00f2
msgid "Executing arbitrary scripts in the |app| python environment"
msgstr ""

#: ../../develop.rst:357
# 56819064e10a41f59faca58e3d219249
msgid "The :command:`calibre-debug` command provides a couple of handy switches to execute your own code, with access to the |app| modules::"
msgstr ""

#: ../../develop.rst:362
# 03cb3fdedd82458a9897a8a8f89d7432
msgid "is great for testing a little snippet of code on the command line. It works in the same way as the -c switch to the python interpreter::"
msgstr ""

#: ../../develop.rst:366
# cc7ea0d96021473ca5df8f153112c36d
msgid "can be used to execute your own Python script. It works in the same way as passing the script to the Python interpreter, except that the calibre environment is fully initialized, so you can use all the calibre code in your script. To use command line arguments with your script, use the form::"
msgstr ""

#: ../../develop.rst:371
# 6b8f9b87843d4850ac0a155b202294dd
msgid "The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

#: ../../develop.rst:375
# ddd6c55d6df34d4a87e8f4db3de2a266
msgid "Using |app| in your projects"
msgstr ""

#: ../../develop.rst:377
# c647bd37002a4b96a8544641f28c2557
msgid "It is possible to directly use |app| functions/code in your Python project. Two ways exist to do this:"
msgstr ""

#: ../../develop.rst:380
# 752fe6bfa8364312b7bc4ea544683e80
msgid "Binary install of |app|"
msgstr ""

#: ../../develop.rst:382
# 84c807c0a65c46f78693915860516957
msgid "If you have a binary install of |app|, you can use the Python interpreter bundled with |app|, like this::"
msgstr ""

#: ../../develop.rst:387
# ec209b7f80254531aeb67aedefbd52c8
msgid "Source install on Linux"
msgstr ""

#: ../../develop.rst:389
# 82a67782d4b944e4825ab1ff90dbf622
msgid "In addition to using the above technique, if you do a source install on Linux, you can also directly import |app|, as follows::"
msgstr ""

#: ../../develop.rst:397
# f9a769a5c1ec471d8276ee975092fac7
msgid "It is essential that you import the init_calibre module before any other |app| modules/packages as it sets up the interpreter to run |app| code."
msgstr ""

#: ../../develop.rst:401
# d80af8851f0645f6b133bac30feca294
msgid "API documentation for various parts of |app|"
msgstr ""

