# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.44.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-11 07:55+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../develop.rst:6
# e1e501384393473ea2b64562ad7e76ef
msgid "Setting up a |app| development environment"
msgstr ""

#: ../../develop.rst:8
# b35d7df17a7c43c68723a3d5b135429a
msgid "|app| is completely open source, licensed under the `GNU GPL v3 <http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to download and modify the program to your heart's content. In this section, you will learn how to get a |app| development environment set up on the operating system of your choice. |app| is written primarily in `Python <http://www.python.org>`_ with some C/C++ code for speed and system interfacing. Note that |app| is not compatible with Python 3 and requires at least Python 2.7."
msgstr ""

#: ../../develop.rst:0
# 31e18f5f76d84fdb829cfdea1e22ac45
msgid "Contents"
msgstr ""

#: ../../develop.rst:19
# edaf98e99f1c4febbab6c7078e19959d
msgid "Design philosophy"
msgstr ""

#: ../../develop.rst:21
# 571d1ce31c5c41dea1c0f393de58d951
msgid "|app| has its roots in the Unix world, which means that its design is highly modular. The modules interact with each other via well defined interfaces. This makes adding new features and fixing bugs in |app| very easy, resulting in a frenetic pace of development. Because of its roots, |app| has a comprehensive command line interface for all its functions, documented in :ref:`cli`."
msgstr ""

#: ../../develop.rst:26
# 8f8560d9518c4becb8c3a8ccdb049c64
msgid "The modular design of |app| is expressed via ``Plugins``. There is a :ref:`tutorial <customize>` on writing |app| plugins. For example, adding support for a new device to |app| typically involves writing less than a 100 lines of code in the form of a device driver plugin. You can browse the `built-in drivers <http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_. Similarly, adding support for new conversion formats involves writing input/output format plugins. Another example of the modular design is the :ref:`recipe system <news>` for fetching news. For more examples of plugins designed to add features to |app|, see the `plugin index <http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

#: ../../develop.rst:36
# 3ba64c9a843b46f48fe5485f1801decc
msgid "Code layout"
msgstr ""

#: ../../develop.rst:38
# 834391ae90cb409e9bdc1177916ca58d
msgid "All the |app| python code is in the ``calibre`` package. This package contains the following main sub-packages"
msgstr ""

#: ../../develop.rst:40
# 642f244479ed4cf4932488c2a581d29d
msgid "devices - All the device drivers. Just look through some of the built-in drivers to get an idea for how they work."
msgstr ""

#: ../../develop.rst:42
# aa72901c19d4454b9208512a019d41eb
msgid "For details, see: ``devices.interface`` which defines the interface supported by device drivers and ``devices.usbms`` which defines a generic driver that connects to a USBMS device. All USBMS based drivers in |app| inherit from it."
msgstr ""

#: ../../develop.rst:45
# edc1fcfd77e14e8893a4e6dde486f637
msgid "ebooks  - All the ebook conversion/metadata code. A good starting point is ``calibre.ebooks.conversion.cli`` which is the module powering the :command:`ebook-convert` command. The conversion process is controlled via ``conversion.plumber``. The format independent code is all in ``ebooks.oeb`` and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../develop.rst:49
# 91aedd214a354c1c9572b09e55c90831
msgid "Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

#: ../../develop.rst:50
# 527dc9f759ac44f384ec8b16217ccd91
msgid "Conversion happens in a pipeline, for the structure of the pipeline, see :ref:`conversion-introduction`. The pipeline consists of an input plugin, various transforms and an output plugin. The code that constructs and drives the pipeline is in :file:`plumber.py`. The pipeline works on a representation of an ebook that is like an unzipped epub, with manifest, spine, toc, guide, html content, etc. The class that manages this representation is OEBBook in ``ebooks.oeb.base``. The various transformations that are applied to the book during conversions live in :file:`oeb/transforms/*.py`. And the input and output plugins live in :file:`conversion/plugins/*.py`."
msgstr ""

#: ../../develop.rst:60
# b169ff9a2c5640c3b3b92268ddec988b
msgid "Ebook editing happens using a different container object. It is documented in :ref:`polish_api`."
msgstr ""

#: ../../develop.rst:63
# 267f5b54ea3145a2a37e9ba30a9991d7
msgid "db - The database back-end. See :ref:`db_api` for the interface to the |app| library."
msgstr ""

#: ../../develop.rst:65
# d6f21405f63a4318836c36b91d04304b
msgid "content server: ``library.server`` is the |app| Content Server."
msgstr ""

#: ../../develop.rst:67
# 5ed4c32a452e4abc8585019043fd34bb
msgid "gui2 - The Graphical User Interface. GUI initialization happens in ``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The ebook editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../develop.rst:69
# 7f9543456e5942a3a92ab69f65e845ea
msgid "If you want to locate the entry points for all the various |app| executables, look at the ``entry_points`` structure in `linux.py <https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../develop.rst:73
# 2766e55575f2477b8db7ed3b2377be3d
msgid "If you need help understanding the code, post in the `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will most likely get help from one of |app|'s many developers."
msgstr ""

#: ../../develop.rst:77
# 0c25257a93aa499bb0a9db5c04e2313a
msgid "Getting the code"
msgstr ""

#: ../../develop.rst:79
# 1b1d71aaa24e42fb8ed934d8436f448f
msgid "You can get the |app| source code in two ways, using a version control system or directly downloading a `tarball <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:82
# 4476ec0827a347ae8ab92a39468569a6
msgid "|app| uses `Git <http://www.git-scm.com/>`_, a distributed version control system. Git is available on all the platforms |app| supports.  After installing Git, you can get the |app| source code with the command::"
msgstr ""

#: ../../develop.rst:88
# b55c053387674d6fad867029a4a8d05a
msgid "On Windows you will need the complete path name, that will be something like :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

#: ../../develop.rst:90
# 7e3b7c2ba74f465da99cc095961b49c8
msgid "|app| is a very large project with a very long source control history, so the above can take a while (10mins to an hour depending on your internet speed)."
msgstr ""

#: ../../develop.rst:93
# 39e250f706e44145b44c9b5e2ab2a165
msgid "If you want to get the code faster, the sourcecode for the latest release is always available as an `archive <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:96
# 3c036ff11cc748979ec7fda6808d433e
msgid "To update a branch to the latest code, use the command::"
msgstr ""

#: ../../develop.rst:101
# b4c20888ca554497a1c1abfddc9e54a2
msgid "Submitting your changes to be included"
msgstr ""

#: ../../develop.rst:103
# e80bbdfe5f9c446b90d9aefccf08151d
msgid "If you only plan to make a few small changes, you can make your changes and create a \"merge directive\" which you can then attach to a ticket in the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, make your changes, then run::"
msgstr ""

#: ../../develop.rst:111
# 39d052ee5ba94d40873e820218a2c369
msgid "This will create a :file:`my-changes` file in the current directory, simply attach that to a ticket on the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. Note that this will include *all* the commits you have made. If you only want to send some commits, you have to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../develop.rst:119
# 392f821ae12642a1a8b8f1e1d3154130
msgid "To send the last *n* commits, replace *1* with *n*, for example, for the last 3 commits::"
msgstr ""

#: ../../develop.rst:124
# a9ad1ad9b5b04330b216b131ac424c01
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

#: ../../develop.rst:126
# 2f6cfb4affe64bcc889f321947d6eab8
msgid "If you plan to do a lot of development on |app|, then the best method is to create a `GitHub <http://github.com>`_ account. Below is a basic guide to setting up your own fork of calibre in a way that will allow you to submit pull requests for inclusion into the main |app| repository:"
msgstr ""

#: ../../develop.rst:131
# 23d41a1a711a4ec397ebf232ea34f4bd
msgid "Setup git on your machine as described in this article: `Setup Git <https://help.github.com/articles/set-up-git>`_"
msgstr ""

#: ../../develop.rst:132
# 8de9ce9c2f994577a7bc10171a10d331
msgid "Setup ssh keys for authentication to GitHub, as described here: `Generating SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

#: ../../develop.rst:133
# 215e8a54b9534cfb939fd82a8f191fd8
msgid "Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` button."
msgstr ""

#: ../../develop.rst:134
# 55d7ffa259ec4359a0e2c323ba7435b2
msgid "In a Terminal do::"
msgstr ""

#: ../../develop.rst:138
# 61793da247384a97a392f6187ce47cb5
msgid "Replace <username> above with your github username. That will get your fork checked out locally."
msgstr ""

#: ../../develop.rst:139
# bb9b35c602884a2884ad52838ed9ce8d
msgid "You can make changes and commit them whenever you like. When you are ready to have your work merged, do a::"
msgstr ""

#: ../../develop.rst:143
# 14688221a1954079a7b856c626511318
msgid "and go to ``https://github.com/<username>/calibre`` and click the :guilabel:`Pull Request` button to generate a pull request that can be merged."
msgstr ""

#: ../../develop.rst:144
# b0158a3fe6f74fd2811bdc8e0927246a
msgid "You can update your local copy with code from the main repo at any time by doing::"
msgstr ""

#: ../../develop.rst:149
# 3f3bd5951bf74562a78c7a9e0cfa9c88
msgid "You should also keep an eye on the |app| `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making major changes, you should discuss them in the forum or contact Kovid directly (his email address is all over the source code)."
msgstr ""

#: ../../develop.rst:155
# 8f69ed39fcc143ad804117d8dc1062f0
msgid "Windows development environment"
msgstr ""

#: ../../develop.rst:157
#: ../../develop.rst:188
#: ../../develop.rst:220
# 91a1dd3d62674e74b8015d465d6979de
# 57d1d7b7c80b464b875b1c52cf3d1fc8
# 5a6d48c5c0ec4002a9c4f1cd10b30345
msgid "You must also get the |app| source code separately as described above."
msgstr ""

#: ../../develop.rst:159
# a7acfcc58eb74388916e9595d886cb1d
msgid "Install |app| normally, using the Windows installer. Then open a Command Prompt and change to the previously checked out |app| code directory. For example::"
msgstr ""

#: ../../develop.rst:164
#: ../../develop.rst:232
# 340d9a5e047041b383fceb7674d5606e
# 463df54776cd46c9939f885779dd9903
msgid "calibre is the directory that contains the src and resources sub-directories."
msgstr ""

#: ../../develop.rst:166
# 7ca867eb951f4b7f9547ccb6763cb98e
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide <http://docs.python.org/using/windows.html#excursus-setting-environment-variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../develop.rst:171
# e6e429fc489947518210e8ca2564e267
msgid "Once you have set the environment variable, open a new command prompt and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:176
#: ../../develop.rst:243
# 01da451310e248acbc03054e042edfd9
# d7d9071b731b4462bb03514548cd3fa3
msgid "Setting this environment variable means that |app| will now load all its Python code from the specified location."
msgstr ""

#: ../../develop.rst:178
# 2a7fcae5812f497193a1344ec675323e
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src\\\\calibre\\\\__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:183
#: ../../develop.rst:250
# 2023430bce024b9f90436b72f1c7ebb2
# 3545752e06464702b0a920eeaa635873
msgid "near the top of the file. Now run the command :command:`calibredb`. The very first line of output should be ``Hello, world!``."
msgstr ""

#: ../../develop.rst:186
# 67a4d7234c944fe7a1fbd428f2f1016f
msgid "OS X development environment"
msgstr ""

#: ../../develop.rst:190
# bd6c639b06d24067996f69c3ec507f57
msgid "Install |app| normally using the provided .dmg. Then open a Terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:195
# cdb0f0d49c924854a600c448878841ba
msgid "calibre is the directory that contains the src and resources sub-directories. Ensure you have installed the |app| commandline tools via :guilabel:`Preferences->Advanced->Miscellaneous` in the |app| GUI."
msgstr ""

#: ../../develop.rst:197
# 3d09c8d161d74cdb9c7f079bec516c5f
msgid "The next step is to create a bash script that will set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory when running calibre in debug mode."
msgstr ""

#: ../../develop.rst:199
# 38db633db5c54663ba14f2f9f1a1cdbe
msgid "Create a plain text file::"
msgstr ""

#: ../../develop.rst:205
# 284a5eb560794730892bf784351a0351
msgid "Save this file as ``/usr/bin/calibre-develop``, then set its permissions so that it can be executed::"
msgstr ""

#: ../../develop.rst:209
# e1ab5d6da5a0490a9e2d4b690da0cb3c
msgid "Once you have done this, run::"
msgstr ""

#: ../../develop.rst:213
# 4d60f967ed92442b866448f297a8c728
msgid "You should see some diagnostic information in the Terminal window as calibre starts up, and you should see an asterisk after the version number in the GUI window, indicating that you are running from source."
msgstr ""

#: ../../develop.rst:218
# bce2a16d27b14511ad06b9f030b8e05c
msgid "Linux development environment"
msgstr ""

#: ../../develop.rst:222
# 98e88a95b4c940cdba2a0e9420204979
msgid "|app| is primarily developed on Linux. You have two choices in setting up the development environment. You can install the |app| binary as normal and use that as a runtime environment to do your development. This approach is similar to that used in Windows and OS X. Alternatively, you can install |app| from source. Instructions for setting up a development environment from source are in the INSTALL file in the source tree. Here we will address using the binary at runtime, which is the recommended method."
msgstr ""

#: ../../develop.rst:228
# bb1765460fd64ae99068f6357bd5cfbb
msgid "Install |app| using the binary installer. Then open a terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:234
# a7a5da2eddc748a686866d055f7ed725
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``/home/kovid/work/calibre/src``. How to set environment variables depends on your Linux distribution and what shell you are using."
msgstr ""

#: ../../develop.rst:238
# 7af4f99c129b41208abc0012c530550e
msgid "Once you have set the environment variable, open a new terminal and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:245
# 2efea36baea34bb2814e13aa69deb393
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src/calibre/__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:253
# 86e115f4aa494c68a133dd3540fe9d1e
msgid "Having separate \"normal\" and \"development\" |app| installs on the same computer"
msgstr ""

#: ../../develop.rst:255
# 9bbb0c55151e4cc284d86877b5e93d48
msgid "The |app| source tree is very stable and rarely breaks, but if you feel the need to run from source on a separate test library and run the released |app| version with your everyday library, you can achieve this easily using .bat files or shell scripts to launch |app|. The example below shows how to do this on Windows using .bat files (the instructions for other platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../develop.rst:260
# 035d14ab78c349f7bca45d504e6618b2
msgid "To launch the release version of |app| with your everyday library:"
msgstr ""

#: ../../develop.rst:262
# 0c6ed108be9e4bb7aa4905d209c88329
msgid "calibre-normal.bat::"
msgstr ""

#: ../../develop.rst:266
# 5bb78ba82ea440ec9baee9c7c10fcdd3
msgid "calibre-dev.bat::"
msgstr ""

#: ../../develop.rst:273
# 293e0fecd56146b7821d0e69f779c6d7
msgid "Debugging tips"
msgstr ""

#: ../../develop.rst:275
# 04cb49b583dc47419ab93066b6c08320
msgid "Python is a dynamically typed language with excellent facilities for introspection. Kovid wrote the core |app| code without once using a debugger. There are many strategies to debug |app| code:"
msgstr ""

#: ../../develop.rst:280
# 38a284ded3e14b5eb33721050da7e8f4
msgid "Using print statements"
msgstr ""

#: ../../develop.rst:282
# 0ca1d02702a1441b9ff164f14351a5ef
msgid "This is Kovid's favorite way to debug. Simply insert print statements at points of interest and run your program in the terminal. For example, you can start the GUI from the terminal as::"
msgstr ""

#: ../../develop.rst:287
# 9926446f865d468baee02ce16bbe788c
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

#: ../../develop.rst:291
# 8b7b2c4d73934c66968fe92d9b5d743b
msgid "The ebook-editor can be started as::"
msgstr ""

#: ../../develop.rst:296
# ba4fe0ac18fe47018c5138774d7df3ab
msgid "Using an interactive python interpreter"
msgstr ""

#: ../../develop.rst:298
# 0281a428f1034286b0fb4a0bb357b43f
msgid "You can insert the following two lines of code to start an interactive python session at that point::"
msgstr ""

#: ../../develop.rst:303
# d12d279c4bff482f804ab8f096585d9f
msgid "When running from the command line, this will start an interactive Python interpreter with access to all locally defined variables (variables in the local scope). The interactive prompt even has TAB completion for object properties and you can use the various Python facilities for introspection, such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

#: ../../develop.rst:309
# defc3f83327a4be1ac47fc3e148b8fd8
msgid "Using the python debugger as a remote debugger"
msgstr ""

#: ../../develop.rst:311
# 1c88c6fd3a7748548663403bae1cb94d
msgid "You can use the builtin python debugger (pdb) as a remote debugger from the command line. First, start the remote debugger at the point in the calibre code you are interested in, like this::"
msgstr ""

#: ../../develop.rst:318
# bb68cc07b0444bdea27fa52ef0461c2c
msgid "Then run calibre, either as normal, or using one of the calibre-debug commands described in the previous section. Once the above point in the code is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

#: ../../develop.rst:322
# f84294798b0d49de9f6a2481820dc887
msgid "Now open a terminal or command prompt and use the following command to start the debugging session::"
msgstr ""

#: ../../develop.rst:327
# 03bfa8a2810140dcb0afd42ebc10fd01
msgid "You can read about how to use the python debugger in the `python stdlib docs for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-commands>`_."
msgstr ""

#: ../../develop.rst:331
# 981e12755d204f4ebff5d6cf6e1fca08
msgid "By default, the remote debugger will try to connect on port 4444. You can change it, by passing the port parameter to both the set_trace() and the cli() functions above, like this: ``set_trace(port=1234)`` and ``cli(port=1234)``."
msgstr ""

#: ../../develop.rst:337
# 6a8f9fab54b84755a7685f8155f3ac15
msgid "The python debugger cannot handle multiple threads, so you have to call set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../develop.rst:341
# d07af6fcbcec412489ae78d8efe27c12
msgid "Using the debugger in your favorite python IDE"
msgstr ""

#: ../../develop.rst:343
# eae5d2427fab4e8a95caf3e765afe8bf
msgid "It is possible to use the builtin debugger in your favorite python IDE, if it supports remote debugging. The first step is to add the |app| src checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the ``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../develop.rst:348
# 08738543a00549aab454c057a7d46c9c
msgid "Then place the IDE's remote debugger module into the :file:`src` subdirectory of the |app| source code checkout. Add whatever code is needed to launch the remote debugger to |app| at the point of interest, for example in the main function. Then run |app| as normal. Your IDE should now be able to connect to the remote debugger running inside |app|."
msgstr ""

#: ../../develop.rst:355
# 496e1357b95048d4bae1c560530f63e4
msgid "Executing arbitrary scripts in the |app| python environment"
msgstr ""

#: ../../develop.rst:357
# 7da56b6feb7249638d22959937a78922
msgid "The :command:`calibre-debug` command provides a couple of handy switches to execute your own code, with access to the |app| modules::"
msgstr ""

#: ../../develop.rst:362
# e3a7ad9111ba4ff8b530528c06d2ca3e
msgid "is great for testing a little snippet of code on the command line. It works in the same way as the -c switch to the python interpreter::"
msgstr ""

#: ../../develop.rst:366
# c31cc2f0db0042e994bf9df6e2758bb3
msgid "can be used to execute your own Python script. It works in the same way as passing the script to the Python interpreter, except that the calibre environment is fully initialized, so you can use all the calibre code in your script. To use command line arguments with your script, use the form::"
msgstr ""

#: ../../develop.rst:371
# a6cf1fe760eb4e0a95d37372befbeed1
msgid "The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

#: ../../develop.rst:375
# 026062ba820742ac9733fb9b2cdeefb6
msgid "Using |app| in your projects"
msgstr ""

#: ../../develop.rst:377
# d00399b86e244ee4b08cc52535e0b059
msgid "It is possible to directly use |app| functions/code in your Python project. Two ways exist to do this:"
msgstr ""

#: ../../develop.rst:380
# 606598d107644f0fa545e8f17b973589
msgid "Binary install of |app|"
msgstr ""

#: ../../develop.rst:382
# 5e455abd7521452b874c7a27a4eb44ea
msgid "If you have a binary install of |app|, you can use the Python interpreter bundled with |app|, like this::"
msgstr ""

#: ../../develop.rst:387
# c7d51dad99754603a0cdea630b80e84a
msgid "Source install on Linux"
msgstr ""

#: ../../develop.rst:389
# d11bbb9486c74a4ab464ad2983ae1529
msgid "In addition to using the above technique, if you do a source install on Linux, you can also directly import |app|, as follows::"
msgstr ""

#: ../../develop.rst:397
# 5877488f94044fb593b62fa00aebd3f3
msgid "It is essential that you import the init_calibre module before any other |app| modules/packages as it sets up the interpreter to run |app| code."
msgstr ""

#: ../../develop.rst:401
# 11f313dc459d479db6d621482a1c176c
msgid "API documentation for various parts of |app|"
msgstr ""

