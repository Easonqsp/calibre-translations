# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.48.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-08 08:53+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../develop.rst:6
# 01f63ab28b9d45419559456135e1ad38
msgid "Setting up a |app| development environment"
msgstr ""

#: ../../develop.rst:8
# e68d748d14654d868c36b422c767edb7
msgid "|app| is completely open source, licensed under the `GNU GPL v3 <http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to download and modify the program to your heart's content. In this section, you will learn how to get a |app| development environment set up on the operating system of your choice. |app| is written primarily in `Python <http://www.python.org>`_ with some C/C++ code for speed and system interfacing. Note that |app| is not compatible with Python 3 and requires at least Python 2.7."
msgstr ""

#: ../../develop.rst:0
# 5853f5fd3eb440b884bb01c124cf2748
msgid "Contents"
msgstr ""

#: ../../develop.rst:19
# 29bd08f60f90418da36752c6724e960b
msgid "Design philosophy"
msgstr ""

#: ../../develop.rst:21
# 7cf063e5124d431193aa18c8d68c98da
msgid "|app| has its roots in the Unix world, which means that its design is highly modular. The modules interact with each other via well defined interfaces. This makes adding new features and fixing bugs in |app| very easy, resulting in a frenetic pace of development. Because of its roots, |app| has a comprehensive command line interface for all its functions, documented in :ref:`cli`."
msgstr ""

#: ../../develop.rst:26
# e0ee603db3124a97900a0395192cb892
msgid "The modular design of |app| is expressed via ``Plugins``. There is a :ref:`tutorial <customize>` on writing |app| plugins. For example, adding support for a new device to |app| typically involves writing less than a 100 lines of code in the form of a device driver plugin. You can browse the `built-in drivers <http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_. Similarly, adding support for new conversion formats involves writing input/output format plugins. Another example of the modular design is the :ref:`recipe system <news>` for fetching news. For more examples of plugins designed to add features to |app|, see the `plugin index <http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

#: ../../develop.rst:36
# 6139c91fa5d04013a05167959262564e
msgid "Code layout"
msgstr ""

#: ../../develop.rst:38
# 2e60416b794a4c02be99c0ddbcc6249d
msgid "All the |app| python code is in the ``calibre`` package. This package contains the following main sub-packages"
msgstr ""

#: ../../develop.rst:40
# 3f175eb10b844a8f8175768bf2389c46
msgid "devices - All the device drivers. Just look through some of the built-in drivers to get an idea for how they work."
msgstr ""

#: ../../develop.rst:42
# f7239c6fc8db4df9bc9b715fead94408
msgid "For details, see: ``devices.interface`` which defines the interface supported by device drivers and ``devices.usbms`` which defines a generic driver that connects to a USBMS device. All USBMS based drivers in |app| inherit from it."
msgstr ""

#: ../../develop.rst:45
# 6202fa51170349c3a1a0f3c203772299
msgid "ebooks  - All the ebook conversion/metadata code. A good starting point is ``calibre.ebooks.conversion.cli`` which is the module powering the :command:`ebook-convert` command. The conversion process is controlled via ``conversion.plumber``. The format independent code is all in ``ebooks.oeb`` and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../develop.rst:49
# 5a87f382b64c4022b313ee8c304932ec
msgid "Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

#: ../../develop.rst:50
# 7fad1e2a5e344fcf975301dbb44fa06f
msgid "Conversion happens in a pipeline, for the structure of the pipeline, see :ref:`conversion-introduction`. The pipeline consists of an input plugin, various transforms and an output plugin. The code that constructs and drives the pipeline is in :file:`plumber.py`. The pipeline works on a representation of an ebook that is like an unzipped epub, with manifest, spine, toc, guide, html content, etc. The class that manages this representation is OEBBook in ``ebooks.oeb.base``. The various transformations that are applied to the book during conversions live in :file:`oeb/transforms/*.py`. And the input and output plugins live in :file:`conversion/plugins/*.py`."
msgstr ""

#: ../../develop.rst:60
# 02751f2e1c0343a8ba6f2442092f6a31
msgid "Ebook editing happens using a different container object. It is documented in :ref:`polish_api`."
msgstr ""

#: ../../develop.rst:63
# f4889547fba24b33b161f005563ee06f
msgid "db - The database back-end. See :ref:`db_api` for the interface to the |app| library."
msgstr ""

#: ../../develop.rst:65
# 91251043fc904c68ba08cec58eeb25bf
msgid "content server: ``library.server`` is the |app| Content Server."
msgstr ""

#: ../../develop.rst:67
# cb05644d151f46e28569f23c39c2f88e
msgid "gui2 - The Graphical User Interface. GUI initialization happens in ``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The ebook editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../develop.rst:69
# 269651a5d0cb45348b953d2bacbbf609
msgid "If you want to locate the entry points for all the various |app| executables, look at the ``entry_points`` structure in `linux.py <https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../develop.rst:73
# ea30dcfd6be8429dae80dbf9de690f84
msgid "If you need help understanding the code, post in the `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will most likely get help from one of |app|'s many developers."
msgstr ""

#: ../../develop.rst:77
# a3bde753ffd2434b964627fddd93b992
msgid "Getting the code"
msgstr ""

#: ../../develop.rst:79
# b1e9a97429b243aa958ea6616eafa4e2
msgid "You can get the |app| source code in two ways, using a version control system or directly downloading a `tarball <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:82
# 8089c9320e7c498ba49049d035454395
msgid "|app| uses `Git <http://www.git-scm.com/>`_, a distributed version control system. Git is available on all the platforms |app| supports.  After installing Git, you can get the |app| source code with the command::"
msgstr ""

#: ../../develop.rst:88
# 8750629143c14bd291308584aa53a3fb
msgid "On Windows you will need the complete path name, that will be something like :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

#: ../../develop.rst:90
# 5804aee2bf8c4d539d05f70e8c3eac2e
msgid "|app| is a very large project with a very long source control history, so the above can take a while (10mins to an hour depending on your internet speed)."
msgstr ""

#: ../../develop.rst:93
# 8f9584d5147743d68949f6be555d32b0
msgid "If you want to get the code faster, the sourcecode for the latest release is always available as an `archive <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../develop.rst:96
# 79db2cd4b08945e381030610740cb60b
msgid "To update a branch to the latest code, use the command::"
msgstr ""

#: ../../develop.rst:101
# 12394569a1834c0586a4a240b17a129d
msgid "Submitting your changes to be included"
msgstr ""

#: ../../develop.rst:103
# 7a11e4b9dee14af88c6caf6533f8a941
msgid "If you only plan to make a few small changes, you can make your changes and create a \"merge directive\" which you can then attach to a ticket in the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, make your changes, then run::"
msgstr ""

#: ../../develop.rst:111
# 98e027adab6443b28902d77f9ef916f8
msgid "This will create a :file:`my-changes` file in the current directory, simply attach that to a ticket on the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. Note that this will include *all* the commits you have made. If you only want to send some commits, you have to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../develop.rst:119
# 16ea9aa1398c49cea1accfc0f5db74e6
msgid "To send the last *n* commits, replace *1* with *n*, for example, for the last 3 commits::"
msgstr ""

#: ../../develop.rst:124
# ba3b4bcb5fb842e582274e5150ecbbf3
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

#: ../../develop.rst:126
# e2eb92a0d730438a909ac0aae4f47fb3
msgid "If you plan to do a lot of development on |app|, then the best method is to create a `GitHub <http://github.com>`_ account. Below is a basic guide to setting up your own fork of calibre in a way that will allow you to submit pull requests for inclusion into the main |app| repository:"
msgstr ""

#: ../../develop.rst:131
# 13f3aa71e9f1493f9473ada84bd7c42c
msgid "Setup git on your machine as described in this article: `Setup Git <https://help.github.com/articles/set-up-git>`_"
msgstr ""

#: ../../develop.rst:132
# 8fc2a7008eb843a798b1af8c9dd86e24
msgid "Setup ssh keys for authentication to GitHub, as described here: `Generating SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

#: ../../develop.rst:133
# 716506c43c2b4cf880fecb09e60b660b
msgid "Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` button."
msgstr ""

#: ../../develop.rst:134
# 31c7a31cfb8247ed9a52667ef72c8f21
msgid "In a Terminal do::"
msgstr ""

#: ../../develop.rst:138
# 4cef5c8653634658b6863e2b34696d3a
msgid "Replace <username> above with your github username. That will get your fork checked out locally."
msgstr ""

#: ../../develop.rst:139
# fa66469a40dc4076807560c8d2074c68
msgid "You can make changes and commit them whenever you like. When you are ready to have your work merged, do a::"
msgstr ""

#: ../../develop.rst:143
# ef7c3d9f045c441abe593797fb99204e
msgid "and go to ``https://github.com/<username>/calibre`` and click the :guilabel:`Pull Request` button to generate a pull request that can be merged."
msgstr ""

#: ../../develop.rst:144
# b8639b1537f14ba893b75c14187e50e8
msgid "You can update your local copy with code from the main repo at any time by doing::"
msgstr ""

#: ../../develop.rst:149
# fa05902483c144b8ae1fb57847e3788f
msgid "You should also keep an eye on the |app| `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making major changes, you should discuss them in the forum or contact Kovid directly (his email address is all over the source code)."
msgstr ""

#: ../../develop.rst:155
# 0705391f082f4d648f58c10f7927b071
msgid "Windows development environment"
msgstr ""

#: ../../develop.rst:157
#: ../../develop.rst:188
#: ../../develop.rst:220
# 8f3b37e4a607489f9d59a50a0a160441
# 4e8a0f4fd8584fbb8bbd274d82b4f2ee
# 2c71d37aeb7c43b3919e073b0ade67cc
msgid "You must also get the |app| source code separately as described above."
msgstr ""

#: ../../develop.rst:159
# 49e7b3a50481460e8dd723c3c07a7a65
msgid "Install |app| normally, using the Windows installer. Then open a Command Prompt and change to the previously checked out |app| code directory. For example::"
msgstr ""

#: ../../develop.rst:164
#: ../../develop.rst:232
# 69fcdc1d3411479a8cd8711773da89ca
# 5845b149a5eb465995c299857c9d3abf
msgid "calibre is the directory that contains the src and resources sub-directories."
msgstr ""

#: ../../develop.rst:166
# 3e9cd238b9d54fcdb1c32a9e3bbdbf68
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide <http://docs.python.org/using/windows.html#excursus-setting-environment-variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../develop.rst:171
# 07acca973d244a2aac8c0b3ce41a6a30
msgid "Once you have set the environment variable, open a new command prompt and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:176
#: ../../develop.rst:243
# 472ff526aff34b719a3e93fdd7104804
# 82ae32deb98c4c06a1256ebc15bbb82f
msgid "Setting this environment variable means that |app| will now load all its Python code from the specified location."
msgstr ""

#: ../../develop.rst:178
# 2478bf55910f41f28bf7ece6c2112c60
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src\\\\calibre\\\\__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:183
#: ../../develop.rst:250
# 84e632075703465b9c3615f71080e314
# 15aae3cc5ea54e52a9b2525d5c98299a
msgid "near the top of the file. Now run the command :command:`calibredb`. The very first line of output should be ``Hello, world!``."
msgstr ""

#: ../../develop.rst:186
# 21c188dc283a4a5c8a3eb40ab1db0d00
msgid "OS X development environment"
msgstr ""

#: ../../develop.rst:190
# 2b4a01d6c7cb40519f7fc8fa6950e26d
msgid "Install |app| normally using the provided .dmg. Then open a Terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:195
# 0c2a275b8df1468ebb3afec5893b088a
msgid "calibre is the directory that contains the src and resources sub-directories. Ensure you have installed the |app| commandline tools via :guilabel:`Preferences->Advanced->Miscellaneous` in the |app| GUI."
msgstr ""

#: ../../develop.rst:197
# 3524802c18264c19b3983d72983d2d84
msgid "The next step is to create a bash script that will set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory when running calibre in debug mode."
msgstr ""

#: ../../develop.rst:199
# f1b971a0bfce4f7db022bc1c5da43390
msgid "Create a plain text file::"
msgstr ""

#: ../../develop.rst:205
# e71a6f4a06714173b8a5be33dc5e64a9
msgid "Save this file as ``/usr/bin/calibre-develop``, then set its permissions so that it can be executed::"
msgstr ""

#: ../../develop.rst:209
# badf8562b2174b51af5c0fa89a79c68c
msgid "Once you have done this, run::"
msgstr ""

#: ../../develop.rst:213
# 2ce34bf43f914db2a57177a1c638dd84
msgid "You should see some diagnostic information in the Terminal window as calibre starts up, and you should see an asterisk after the version number in the GUI window, indicating that you are running from source."
msgstr ""

#: ../../develop.rst:218
# 4d2fcad16173422894eacf8b5e545ae2
msgid "Linux development environment"
msgstr ""

#: ../../develop.rst:222
# a881009c0d1242059edcf1b16cf96424
msgid "|app| is primarily developed on Linux. You have two choices in setting up the development environment. You can install the |app| binary as normal and use that as a runtime environment to do your development. This approach is similar to that used in Windows and OS X. Alternatively, you can install |app| from source. Instructions for setting up a development environment from source are in the INSTALL file in the source tree. Here we will address using the binary at runtime, which is the recommended method."
msgstr ""

#: ../../develop.rst:228
# 92c0bc9e95514c0b8dc6d6a5fc318f7e
msgid "Install |app| using the binary installer. Then open a terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../develop.rst:234
# 87ecbb219c20496685a5f35236d436d7
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``/home/kovid/work/calibre/src``. How to set environment variables depends on your Linux distribution and what shell you are using."
msgstr ""

#: ../../develop.rst:238
# bc70d72fa1154443a8fbccafde74cb9d
msgid "Once you have set the environment variable, open a new terminal and check that it was correctly set by using the command::"
msgstr ""

#: ../../develop.rst:245
# 72e3cd15022c486a8ab6cced00da1c1d
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src/calibre/__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../develop.rst:253
# 0d4608afc91b49fabb944b77a36ae0d6
msgid "Having separate \"normal\" and \"development\" |app| installs on the same computer"
msgstr ""

#: ../../develop.rst:255
# 044d0a22dbf2484c8c2383198bbcba00
msgid "The |app| source tree is very stable and rarely breaks, but if you feel the need to run from source on a separate test library and run the released |app| version with your everyday library, you can achieve this easily using .bat files or shell scripts to launch |app|. The example below shows how to do this on Windows using .bat files (the instructions for other platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../develop.rst:260
# 42792c6da19a44359286c5f646ea9e9d
msgid "To launch the release version of |app| with your everyday library:"
msgstr ""

#: ../../develop.rst:262
# 34d5e594d24a4f33a6fbba69076bc00c
msgid "calibre-normal.bat::"
msgstr ""

#: ../../develop.rst:266
# 2efb9c5e086d4f08a352c5699e9dca85
msgid "calibre-dev.bat::"
msgstr ""

#: ../../develop.rst:273
# 88d4365f3cf14b4b9748677164a874f1
msgid "Debugging tips"
msgstr ""

#: ../../develop.rst:275
# b34ebc81a8a74b1e9e1cf4ae52f88b05
msgid "Python is a dynamically typed language with excellent facilities for introspection. Kovid wrote the core |app| code without once using a debugger. There are many strategies to debug |app| code:"
msgstr ""

#: ../../develop.rst:280
# e3c87d0d4a054797bf00452432412ef1
msgid "Using print statements"
msgstr ""

#: ../../develop.rst:282
# 1ab4242f1b3041c18fb45f30220e5fa4
msgid "This is Kovid's favorite way to debug. Simply insert print statements at points of interest and run your program in the terminal. For example, you can start the GUI from the terminal as::"
msgstr ""

#: ../../develop.rst:287
# 2efd160add5f49fe8fafed2290dbaed3
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

#: ../../develop.rst:291
# acc8876561d045ec83192542078cf2fc
msgid "The ebook-editor can be started as::"
msgstr ""

#: ../../develop.rst:296
# 6c293896f9da4a7ea98b95009d6d749d
msgid "Using an interactive python interpreter"
msgstr ""

#: ../../develop.rst:298
# de9b4f2402544e548b34ec6d0eceefbe
msgid "You can insert the following two lines of code to start an interactive python session at that point::"
msgstr ""

#: ../../develop.rst:303
# 3a8e0c58027e489b9299954e35ae5139
msgid "When running from the command line, this will start an interactive Python interpreter with access to all locally defined variables (variables in the local scope). The interactive prompt even has TAB completion for object properties and you can use the various Python facilities for introspection, such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

#: ../../develop.rst:309
# 5acbf2f7b6184b0388cbf3357ba704b4
msgid "Using the python debugger as a remote debugger"
msgstr ""

#: ../../develop.rst:311
# 1331513fad1445b388db089fff48ff72
msgid "You can use the builtin python debugger (pdb) as a remote debugger from the command line. First, start the remote debugger at the point in the calibre code you are interested in, like this::"
msgstr ""

#: ../../develop.rst:318
# 0706e45b39344e288ceaf34d70a6f920
msgid "Then run calibre, either as normal, or using one of the calibre-debug commands described in the previous section. Once the above point in the code is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

#: ../../develop.rst:322
# 627149ac7acd4305961b39ae523d8c73
msgid "Now open a terminal or command prompt and use the following command to start the debugging session::"
msgstr ""

#: ../../develop.rst:327
# f1865c01011b4d11b440d5035e55a4e3
msgid "You can read about how to use the python debugger in the `python stdlib docs for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-commands>`_."
msgstr ""

#: ../../develop.rst:331
# e86569a7a97d4fbb82ee535fef6f0a1a
msgid "By default, the remote debugger will try to connect on port 4444. You can change it, by passing the port parameter to both the set_trace() and the cli() functions above, like this: ``set_trace(port=1234)`` and ``cli(port=1234)``."
msgstr ""

#: ../../develop.rst:337
# d6d186c8d14845e68bb06160a8330127
msgid "The python debugger cannot handle multiple threads, so you have to call set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../develop.rst:341
# e7437e916aa34d3aa1f3166d88737c41
msgid "Using the debugger in your favorite python IDE"
msgstr ""

#: ../../develop.rst:343
# 66b66ad4fdd8478dbbaf266c099ebf99
msgid "It is possible to use the builtin debugger in your favorite python IDE, if it supports remote debugging. The first step is to add the |app| src checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the ``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../develop.rst:348
# b491681c2b8e423faebbcc7a7c866d63
msgid "Then place the IDE's remote debugger module into the :file:`src` subdirectory of the |app| source code checkout. Add whatever code is needed to launch the remote debugger to |app| at the point of interest, for example in the main function. Then run |app| as normal. Your IDE should now be able to connect to the remote debugger running inside |app|."
msgstr ""

#: ../../develop.rst:355
# b524fcb5c51b411ca3206aac22105e7f
msgid "Executing arbitrary scripts in the |app| python environment"
msgstr ""

#: ../../develop.rst:357
# 921b181062214a2c9a55c3e398975062
msgid "The :command:`calibre-debug` command provides a couple of handy switches to execute your own code, with access to the |app| modules::"
msgstr ""

#: ../../develop.rst:362
# 4fd042817f4f4eb88cbc7d798f833f78
msgid "is great for testing a little snippet of code on the command line. It works in the same way as the -c switch to the python interpreter::"
msgstr ""

#: ../../develop.rst:366
# 723b3c17850b4c659f3d86c7a550c31f
msgid "can be used to execute your own Python script. It works in the same way as passing the script to the Python interpreter, except that the calibre environment is fully initialized, so you can use all the calibre code in your script. To use command line arguments with your script, use the form::"
msgstr ""

#: ../../develop.rst:371
# ff85b4acaf5f4191aedcc6bd7c55c2f5
msgid "The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

#: ../../develop.rst:375
# 68e2c01e0938403f8f5c99c5e31c44f7
msgid "Using |app| in your projects"
msgstr ""

#: ../../develop.rst:377
# 72abda6a8ac14c0796fb8dc276b18fb3
msgid "It is possible to directly use |app| functions/code in your Python project. Two ways exist to do this:"
msgstr ""

#: ../../develop.rst:380
# 78456ea880db42799c7129622af36375
msgid "Binary install of |app|"
msgstr ""

#: ../../develop.rst:382
# 4ee15e3190d44f04b444b7860e84dd43
msgid "If you have a binary install of |app|, you can use the Python interpreter bundled with |app|, like this::"
msgstr ""

#: ../../develop.rst:387
# 8fd3b54c83104fb8ad5e79435324875a
msgid "Source install on Linux"
msgstr ""

#: ../../develop.rst:389
# 2344598b2e1b4e719763e764e5141985
msgid "In addition to using the above technique, if you do a source install on Linux, you can also directly import |app|, as follows::"
msgstr ""

#: ../../develop.rst:397
# dee69828810f4d96bcffd7665c7881d6
msgid "It is essential that you import the init_calibre module before any other |app| modules/packages as it sets up the interpreter to run |app| code."
msgstr ""

#: ../../develop.rst:401
# 08b86492aabf4435bbfd838435a01c5e
msgid "API documentation for various parts of |app|"
msgstr ""

