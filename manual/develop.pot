# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.6.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-17 06:52+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/develop.rst:4
# c2e1e6db94ab47f08f3209a46ee4bc29
msgid "Setting up a calibre development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:6
# f2994d843cdb4c4f93a857a0c7005e27
msgid "calibre is completely open source, licensed under the `GNU GPL v3 <http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to download and modify the program to your heart's content. In this section, you will learn how to get a calibre development environment set up on the operating system of your choice. calibre is written primarily in `Python <http://www.python.org>`_ with some C/C++ code for speed and system interfacing. Note that calibre is not compatible with Python 3 and requires at least Python 2.7."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:0
# 5095e8d739e2435dae518492d158606a
msgid "Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:17
# 8e24e956afd8445f8cd812d555d331b6
msgid "Design philosophy"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:19
# 9cf2513af58f4785aca6cb47314d5658
msgid "calibre has its roots in the Unix world, which means that its design is highly modular. The modules interact with each other via well defined interfaces. This makes adding new features and fixing bugs in calibre very easy, resulting in a frenetic pace of development. Because of its roots, calibre has a comprehensive command line interface for all its functions, documented in :doc:`generated/en/cli-index`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:24
# d768225d55974fc3a20b3e402cd96393
msgid "The modular design of calibre is expressed via ``Plugins``. There is a :ref:`tutorial <customize>` on writing calibre plugins. For example, adding support for a new device to calibre typically involves writing less than a 100 lines of code in the form of a device driver plugin. You can browse the `built-in drivers <http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_. Similarly, adding support for new conversion formats involves writing input/output format plugins. Another example of the modular design is the :ref:`recipe system <news>` for fetching news. For more examples of plugins designed to add features to calibre, see the `plugin index <http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:34
# 393390f900284258820d34d9a46aebf6
msgid "Code layout"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:36
# 8f2838c0303d4056a9ae48f5a2789f97
msgid "All the calibre python code is in the ``calibre`` package. This package contains the following main sub-packages"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:38
# e58820b08ba24b78a8d4a4247a172002
msgid "devices - All the device drivers. Just look through some of the built-in drivers to get an idea for how they work."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:40
# 326b1a0a115943bbb2ef67b21579037c
msgid "For details, see: ``devices.interface`` which defines the interface supported by device drivers and ``devices.usbms`` which defines a generic driver that connects to a USBMS device. All USBMS based drivers in calibre inherit from it."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:43
# 782eaeb792b14d03bfcaecaa04d1e3da
msgid "ebooks  - All the ebook conversion/metadata code. A good starting point is ``calibre.ebooks.conversion.cli`` which is the module powering the :command:`ebook-convert` command. The conversion process is controlled via ``conversion.plumber``. The format independent code is all in ``ebooks.oeb`` and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:47
# 16dd21c264404a08a08ba09ed7c0a5fe
msgid "Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:48
# 8d11e1993155438c808b263c4a9292a2
msgid "Conversion happens in a pipeline, for the structure of the pipeline, see :ref:`conversion-introduction`. The pipeline consists of an input plugin, various transforms and an output plugin. The code that constructs and drives the pipeline is in :file:`plumber.py`. The pipeline works on a representation of an ebook that is like an unzipped epub, with manifest, spine, toc, guide, html content, etc. The class that manages this representation is OEBBook in ``ebooks.oeb.base``. The various transformations that are applied to the book during conversions live in :file:`oeb/transforms/*.py`. And the input and output plugins live in :file:`conversion/plugins/*.py`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:58
# 961a2e3656b8441d94d9b05cae9992a9
msgid "Ebook editing happens using a different container object. It is documented in :ref:`polish_api`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:61
# ad9ab513a3974e6ea773bc4553074071
msgid "db - The database back-end. See :ref:`db_api` for the interface to the calibre library."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:63
# 5404886c12e7402e829c0c1a4c3c4193
msgid "content server: ``library.server`` is the calibre Content Server."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:65
# 4e2ff14b05744185aba7ad8aabdd0979
msgid "gui2 - The Graphical User Interface. GUI initialization happens in ``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The ebook editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:67
# 534f481dda7a44cda91f75e3ea7c0441
msgid "If you want to locate the entry points for all the various calibre executables, look at the ``entry_points`` structure in `linux.py <https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:71
# 1f042d9f54f64a7fa77e18132162fd3e
msgid "If you need help understanding the code, post in the `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will most likely get help from one of calibre's many developers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:75
# 17afe583442648d7aee68eebb4289d60
msgid "Getting the code"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:77
# df07dc8c53334427b4fdb130eeb5dc6f
msgid "You can get the calibre source code in two ways, using a version control system or directly downloading a `tarball <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:80
# 718f797c40eb41d488b0b1b8fab2b9df
msgid "calibre uses `Git <http://www.git-scm.com/>`_, a distributed version control system. Git is available on all the platforms calibre supports.  After installing Git, you can get the calibre source code with the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:86
# 8a9cc4bcf5384981b166574908bb01a4
msgid "On Windows you will need the complete path name, that will be something like :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:88
# 0a224146763c4048802947f3c6d320a4
msgid "calibre is a very large project with a very long source control history, so the above can take a while (10mins to an hour depending on your internet speed)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:91
# e9931040f6644c389231b6c857a12ed4
msgid "If you want to get the code faster, the sourcecode for the latest release is always available as an `archive <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:94
# 15c3b6e82db44cbf9fd911a8aa6680ab
msgid "To update a branch to the latest code, use the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:99
# 162835a99e4e4992bdb8c005c059fcba
msgid "Submitting your changes to be included"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:101
# 956e39800c5e4f72a9aa406d9e6d7d06
msgid "If you only plan to make a few small changes, you can make your changes and create a \"merge directive\" which you can then attach to a ticket in the calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, make your changes, then run::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:109
# 21799d33eb29494d8484fd14a39a0527
msgid "This will create a :file:`my-changes` file in the current directory, simply attach that to a ticket on the calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. Note that this will include *all* the commits you have made. If you only want to send some commits, you have to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:117
# cec815fc86f04c18b52b788f9dfccb3e
msgid "To send the last *n* commits, replace *1* with *n*, for example, for the last 3 commits::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:122
# ddf64605945b44fc953586cadea66e86
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:124
# 4bc0a3f145ba4eb2997f6dbdc74b7581
msgid "If you plan to do a lot of development on calibre, then the best method is to create a `GitHub <http://github.com>`_ account. Below is a basic guide to setting up your own fork of calibre in a way that will allow you to submit pull requests for inclusion into the main calibre repository:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:129
# 5b79085ead3b44aaa466a2faaf78b5ad
msgid "Setup git on your machine as described in this article: `Setup Git <https://help.github.com/articles/set-up-git>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:130
# 98bd9e530b6a4178bf04c808ff1606b8
msgid "Setup ssh keys for authentication to GitHub, as described here: `Generating SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:131
# 73adf56b7371442c9446b6888e4119c2
msgid "Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` button."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:132
# c49b801944af4e7186dfdb096a95bb4e
msgid "In a Terminal do::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:137
# 11c6be5a5bfc4e5794d603ecd69a517d
msgid "Replace <username> above with your github username. That will get your fork checked out locally."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:138
# 870dfd97f03f46998244fcca3ef6e8f8
msgid "You can make changes and commit them whenever you like. When you are ready to have your work merged, do a::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:142
# a458428a8ebb4c8a8fb67267f09e9edf
msgid "and go to ``https://github.com/<username>/calibre`` and click the :guilabel:`Pull Request` button to generate a pull request that can be merged."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:143
# 386d73963127451fab7914b76cb03a0b
msgid "You can update your local copy with code from the main repo at any time by doing::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:148
# decc64986bda4d6483f6e1962d2918fb
msgid "You should also keep an eye on the calibre `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making major changes, you should discuss them in the forum or contact Kovid directly (his email address is all over the source code)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:154
# cc59498340cd405a80cd4b15ce926f64
msgid "Windows development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:156
#: ../../home/kovid/work/calibre/manual/develop.rst:187
#: ../../home/kovid/work/calibre/manual/develop.rst:219
# 8f53815b93ae4077b20b0c6185ab0539
# 2f511bc886f241d986c51a12843c5a5a
# 16ff68c1755740a4a1004efa9f60c525
msgid "You must also get the calibre source code separately as described above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:158
# 4e4b944bde1d4382be5c7c23fcd7ae1e
msgid "Install calibre normally, using the Windows installer. Then open a Command Prompt and change to the previously checked out calibre code directory. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:163
#: ../../home/kovid/work/calibre/manual/develop.rst:231
# e11f36d8cad543f396d9b94d0797fd8d
# d8fc06a4b272438e9dd1e9c1b2ed6973
msgid "calibre is the directory that contains the src and resources sub-directories."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:165
# c02a0a122195453c82c2d395e77419ed
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide <http://docs.python.org/using/windows.html#excursus-setting-environment-variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:170
# bee92d1698954944b706dc98f255c74e
msgid "Once you have set the environment variable, open a new command prompt and check that it was correctly set by using the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:175
#: ../../home/kovid/work/calibre/manual/develop.rst:242
# 8e69efe9e94d437fba6392fe288de12a
# 1f61a71a787c47be9a2e7456e8fb7143
msgid "Setting this environment variable means that calibre will now load all its Python code from the specified location."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:177
# 205e25dbeb1f41a3a93cd95c1e849c6e
msgid "That's it! You are now ready to start hacking on the calibre code. For example, open the file :file:`src\\\\calibre\\\\__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:182
#: ../../home/kovid/work/calibre/manual/develop.rst:249
# 719d406e13664153a53547c42fe2a211
# 7f87c339db2c457eae97aae68bed490f
msgid "near the top of the file. Now run the command :command:`calibredb`. The very first line of output should be ``Hello, world!``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:185
# 4a287f93b5864d07b90ec2de29e12bbe
msgid "OS X development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:189
# 00674b3732fa4b85b8e34b900928e1e1
msgid "Install calibre normally using the provided .dmg. Then open a Terminal and change to the previously checked out calibre code directory, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:194
# 8b411529888640488b789d4a3a858acd
msgid "calibre is the directory that contains the src and resources sub-directories. Ensure you have installed the calibre commandline tools via :guilabel:`Preferences->Advanced->Miscellaneous` in the calibre GUI."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:196
# 08f11949287f456181d746207f338e81
msgid "The next step is to create a bash script that will set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory when running calibre in debug mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:198
# fa156c3b17414efeb0b85199f7336696
msgid "Create a plain text file::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:204
# 3e2f95add68a4d61a51634a4db15b5bb
msgid "Save this file as ``/usr/bin/calibre-develop``, then set its permissions so that it can be executed::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:208
# 2335fa8e5bbc4a03983641edf9a8724e
msgid "Once you have done this, run::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:212
# a18960c8cab248d69f8604dc7f4bd66d
msgid "You should see some diagnostic information in the Terminal window as calibre starts up, and you should see an asterisk after the version number in the GUI window, indicating that you are running from source."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:217
# 6363166b483247e8ba08a9750733cbc9
msgid "Linux development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:221
# 49a2b20ddcc44bc0852f8eb9e7355f8c
msgid "calibre is primarily developed on Linux. You have two choices in setting up the development environment. You can install the calibre binary as normal and use that as a runtime environment to do your development. This approach is similar to that used in Windows and OS X. Alternatively, you can install calibre from source. Instructions for setting up a development environment from source are in the INSTALL file in the source tree. Here we will address using the binary at runtime, which is the recommended method."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:227
# abeac442f1774ff8bce1ff6ec96fb6d9
msgid "Install calibre using the binary installer. Then open a terminal and change to the previously checked out calibre code directory, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:233
# 2d6f6f70123d4692b636e2e1647d29b0
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``/home/kovid/work/calibre/src``. How to set environment variables depends on your Linux distribution and what shell you are using."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:237
# 556a4b8233204da8a798a94987da1c27
msgid "Once you have set the environment variable, open a new terminal and check that it was correctly set by using the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:244
# 693388fecc094516b90d02ebe8747f86
msgid "That's it! You are now ready to start hacking on the calibre code. For example, open the file :file:`src/calibre/__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:252
# fffdff5328cd4ec3923ae36f74f50f7a
msgid "Having separate \"normal\" and \"development\" calibre installs on the same computer"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:254
# a972ad86ced242daa7c44f8353afb3ac
msgid "The calibre source tree is very stable and rarely breaks, but if you feel the need to run from source on a separate test library and run the released calibre version with your everyday library, you can achieve this easily using .bat files or shell scripts to launch calibre. The example below shows how to do this on Windows using .bat files (the instructions for other platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:259
# 11ba08fa35fb4d3498de5b9ad1327a7f
msgid "To launch the release version of calibre with your everyday library:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:261
# b4e05c477bfa458eb1a47e5360d85439
msgid "calibre-normal.bat::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:265
# aeb5b26d5abd4e00b33b7cab0d8c71b5
msgid "calibre-dev.bat::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:272
# e454ca70370b4a168e730f98c3b18c22
msgid "Debugging tips"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:274
# 9e384bbd3ef9436da6700ee667f902f7
msgid "Python is a dynamically typed language with excellent facilities for introspection. Kovid wrote the core calibre code without once using a debugger. There are many strategies to debug calibre code:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:279
# 6efdc1ce97fd4c4fa521e96949694f15
msgid "Using print statements"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:281
# 2a27f00fb6b94593ab60a2adaa46214c
msgid "This is Kovid's favorite way to debug. Simply insert print statements at points of interest and run your program in the terminal. For example, you can start the GUI from the terminal as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:286
# ef7345829e71496db1c868a575da6704
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:290
# 361c0cada802495c8230923b79639b81
msgid "The ebook-editor can be started as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:295
# 6e6df1d6bc6b46ed903354e8e4e03b5c
msgid "Using an interactive python interpreter"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:297
# 07548c78801a4f8eac4ada5a4e00eed1
msgid "You can insert the following two lines of code to start an interactive python session at that point::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:302
# 0db6abf4f54c4b2695758c5578ee8691
msgid "When running from the command line, this will start an interactive Python interpreter with access to all locally defined variables (variables in the local scope). The interactive prompt even has TAB completion for object properties and you can use the various Python facilities for introspection, such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:308
# 3458702216334357b6ae58f93d2af5dd
msgid "Using the python debugger as a remote debugger"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:310
# 3622fe3d4abe4427b5efec118a3ff9dc
msgid "You can use the builtin python debugger (pdb) as a remote debugger from the command line. First, start the remote debugger at the point in the calibre code you are interested in, like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:317
# 60efce4157b247238914d081c578af0e
msgid "Then run calibre, either as normal, or using one of the calibre-debug commands described in the previous section. Once the above point in the code is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:321
# 2c92187e1bae45b7bae876c8ecd5fb32
msgid "Now open a terminal or command prompt and use the following command to start the debugging session::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:326
# 343e1bb9df844c818d28820ed5efe556
msgid "You can read about how to use the python debugger in the `python stdlib docs for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-commands>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:330
# 6edcba653d7d4421ad4a83ac1233e5fa
msgid "By default, the remote debugger will try to connect on port 4444. You can change it, by passing the port parameter to both the set_trace() and the cli() functions above, like this: ``set_trace(port=1234)`` and ``cli(port=1234)``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:336
# ab08db9ea8a14c2e859e9979392b4fd3
msgid "The python debugger cannot handle multiple threads, so you have to call set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:340
# a3b60c0101884562b2042584372b9361
msgid "Using the debugger in your favorite python IDE"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:342
# 2c492a457ce642669f03b9f5f7edec3c
msgid "It is possible to use the builtin debugger in your favorite python IDE, if it supports remote debugging. The first step is to add the calibre src checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the ``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:347
# 3bda76b7c17c45b59b5303db1d678580
msgid "Then place the IDE's remote debugger module into the :file:`src` subdirectory of the calibre source code checkout. Add whatever code is needed to launch the remote debugger to calibre at the point of interest, for example in the main function. Then run calibre as normal. Your IDE should now be able to connect to the remote debugger running inside calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:354
# 916bb8f65b61487385d9659439417039
msgid "Executing arbitrary scripts in the calibre python environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:356
# 9fc5e0d13da24ed7999c587a31e9df4c
msgid "The :command:`calibre-debug` command provides a couple of handy switches to execute your own code, with access to the calibre modules::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:361
# 20f002712d744a95a2e0db31c6c03aa2
msgid "is great for testing a little snippet of code on the command line. It works in the same way as the -c switch to the python interpreter::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:365
# b7b385427cb9455fa048dec3f7bd74a1
msgid "can be used to execute your own Python script. It works in the same way as passing the script to the Python interpreter, except that the calibre environment is fully initialized, so you can use all the calibre code in your script. To use command line arguments with your script, use the form::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:370
# 9796945d7c5c42159760666ea8038b0c
msgid "The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:374
# a867e96dfb904b0ebe1970125a8580d2
msgid "Using calibre in your projects"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:376
# f83aabf1fdaa4717a96b22f11a344ce9
msgid "It is possible to directly use calibre functions/code in your Python project. Two ways exist to do this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:379
# 1a5e9461fb8c46469fffef364ef731a0
msgid "Binary install of calibre"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:381
# b458edd56870477f9fc4e81d1f1f04d9
msgid "If you have a binary install of calibre, you can use the Python interpreter bundled with calibre, like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:386
# 24be0466e22440a18dd12b97a48cead2
msgid "Source install on Linux"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:388
# bb1b6bcdb9894231881cfde08f88cf00
msgid "In addition to using the above technique, if you do a source install on Linux, you can also directly import calibre, as follows::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:396
# f9ad90f09d554116bb28747b497a5166
msgid "It is essential that you import the init_calibre module before any other calibre modules/packages as it sets up the interpreter to run calibre code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:400
# 79b7311cd11f4d02bebf5c72af2a24f6
msgid "API documentation for various parts of calibre"
msgstr ""

