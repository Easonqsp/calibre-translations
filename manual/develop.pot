# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.5.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-03 09:06+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/develop.rst:5
# a83de82a6db743e8a5902e7ac15e6b32
msgid "Setting up a |app| development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:7
# 597f3bc24e934d72b6472df133f01a9b
msgid "|app| is completely open source, licensed under the `GNU GPL v3 <http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to download and modify the program to your heart's content. In this section, you will learn how to get a |app| development environment set up on the operating system of your choice. |app| is written primarily in `Python <http://www.python.org>`_ with some C/C++ code for speed and system interfacing. Note that |app| is not compatible with Python 3 and requires at least Python 2.7."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:0
# 0e517f4bbc5e48d5a6046029fb165894
msgid "Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:18
# 99e47ef6aaa24680b396f8e74acc67b8
msgid "Design philosophy"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:20
# 3f0934e253fc4687a53ecd7f37607516
msgid "|app| has its roots in the Unix world, which means that its design is highly modular. The modules interact with each other via well defined interfaces. This makes adding new features and fixing bugs in |app| very easy, resulting in a frenetic pace of development. Because of its roots, |app| has a comprehensive command line interface for all its functions, documented in :doc:`generated/en/cli-index`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:25
# 2b636b8e70e34fe3aee2649c5a5b7958
msgid "The modular design of |app| is expressed via ``Plugins``. There is a :ref:`tutorial <customize>` on writing |app| plugins. For example, adding support for a new device to |app| typically involves writing less than a 100 lines of code in the form of a device driver plugin. You can browse the `built-in drivers <http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_. Similarly, adding support for new conversion formats involves writing input/output format plugins. Another example of the modular design is the :ref:`recipe system <news>` for fetching news. For more examples of plugins designed to add features to |app|, see the `plugin index <http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:35
# cbf4fc27cbcf426eb15f13e4955b1fbc
msgid "Code layout"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:37
# 1fa795cbc90a4b06870b8c965c5801a9
msgid "All the |app| python code is in the ``calibre`` package. This package contains the following main sub-packages"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:39
# 45a9e96e96e244608c06516bfde560df
msgid "devices - All the device drivers. Just look through some of the built-in drivers to get an idea for how they work."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:41
# 81f0335a5bb34ec18cd52e175f65f4d3
msgid "For details, see: ``devices.interface`` which defines the interface supported by device drivers and ``devices.usbms`` which defines a generic driver that connects to a USBMS device. All USBMS based drivers in |app| inherit from it."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:44
# 992331f6bb71465292738bc26824fd6d
msgid "ebooks  - All the ebook conversion/metadata code. A good starting point is ``calibre.ebooks.conversion.cli`` which is the module powering the :command:`ebook-convert` command. The conversion process is controlled via ``conversion.plumber``. The format independent code is all in ``ebooks.oeb`` and the format dependent code is in ``ebooks.format_name``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:48
# 4f2fb8223420499bb5f476e5b9191053
msgid "Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:49
# 327916783897484ea7547d1b7f2fa2d9
msgid "Conversion happens in a pipeline, for the structure of the pipeline, see :ref:`conversion-introduction`. The pipeline consists of an input plugin, various transforms and an output plugin. The code that constructs and drives the pipeline is in :file:`plumber.py`. The pipeline works on a representation of an ebook that is like an unzipped epub, with manifest, spine, toc, guide, html content, etc. The class that manages this representation is OEBBook in ``ebooks.oeb.base``. The various transformations that are applied to the book during conversions live in :file:`oeb/transforms/*.py`. And the input and output plugins live in :file:`conversion/plugins/*.py`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:59
# f00955d1de3341f88bcf2c505d50e02a
msgid "Ebook editing happens using a different container object. It is documented in :ref:`polish_api`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:62
# cc5f633fe864446dbf7c0f26c382c8e9
msgid "db - The database back-end. See :ref:`db_api` for the interface to the |app| library."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:64
# 38c9658b1a4948dfa3c492ab10950f31
msgid "content server: ``library.server`` is the |app| Content Server."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:66
# 348d5466f0b34adbaaad2a79d7313eb0
msgid "gui2 - The Graphical User Interface. GUI initialization happens in ``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The ebook editor is in ``gui2.tweak_book``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:68
# 4d96879c25054490a8499b927043b312
msgid "If you want to locate the entry points for all the various |app| executables, look at the ``entry_points`` structure in `linux.py <https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:72
# fff59bc26e0941719aa03e537b69f75a
msgid "If you need help understanding the code, post in the `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will most likely get help from one of |app|'s many developers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:76
# b1bd2a46051d48aabd19a9d43d600dea
msgid "Getting the code"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:78
# 5828649c3c204ef09a56b8db0b307c35
msgid "You can get the |app| source code in two ways, using a version control system or directly downloading a `tarball <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:81
# 4dbf6fcebdce4a7db72322a49aec0f80
msgid "|app| uses `Git <http://www.git-scm.com/>`_, a distributed version control system. Git is available on all the platforms |app| supports.  After installing Git, you can get the |app| source code with the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:87
# 28eb14b409c940aea652a381bba099e2
msgid "On Windows you will need the complete path name, that will be something like :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:89
# 57b0b0501cff45898d0134b1d0a9cae8
msgid "|app| is a very large project with a very long source control history, so the above can take a while (10mins to an hour depending on your internet speed)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:92
# a126567c2dab4f298b3ccb9cf5808d89
msgid "If you want to get the code faster, the sourcecode for the latest release is always available as an `archive <http://status.calibre-ebook.com/dist/src>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:95
# 9cd0415c3a254e64a914c5fbcaf7f825
msgid "To update a branch to the latest code, use the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:100
# 4d85cb79defa4834aad2a69d1c6f2f37
msgid "Submitting your changes to be included"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:102
# fe0583a42e6a4bc68401c66559285e83
msgid "If you only plan to make a few small changes, you can make your changes and create a \"merge directive\" which you can then attach to a ticket in the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, make your changes, then run::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:110
# 1e960a810cda474cafdb5d9c3cbde188
msgid "This will create a :file:`my-changes` file in the current directory, simply attach that to a ticket on the |app| `bug tracker <https://bugs.launchpad.net/calibre>`_. Note that this will include *all* the commits you have made. If you only want to send some commits, you have to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:118
# ff7b78da05b24d908b760f908eeb66b2
msgid "To send the last *n* commits, replace *1* with *n*, for example, for the last 3 commits::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:123
# ab3ce7900a274d5da10b0ea17ea16784
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:125
# af5728f485c94501a6d3e5586f60c9ee
msgid "If you plan to do a lot of development on |app|, then the best method is to create a `GitHub <http://github.com>`_ account. Below is a basic guide to setting up your own fork of calibre in a way that will allow you to submit pull requests for inclusion into the main |app| repository:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:130
# 0ba0935726ca4442a63621fe59224b06
msgid "Setup git on your machine as described in this article: `Setup Git <https://help.github.com/articles/set-up-git>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:131
# 4cff2501fb7147939df9f7bf01a108c9
msgid "Setup ssh keys for authentication to GitHub, as described here: `Generating SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:132
# 7ebbdf43bb3c4e9e810311d3e923a10e
msgid "Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` button."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:133
# 36ee949c6add474684bcba5402aa80a7
msgid "In a Terminal do::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:138
# 798ca45d2dee4ba1a834c864490e6eaa
msgid "Replace <username> above with your github username. That will get your fork checked out locally."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:139
# 516525060fce42a9b1b2aa2929e49f2b
msgid "You can make changes and commit them whenever you like. When you are ready to have your work merged, do a::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:143
# d9038443442045818e9bf267fbb639ee
msgid "and go to ``https://github.com/<username>/calibre`` and click the :guilabel:`Pull Request` button to generate a pull request that can be merged."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:144
# 3972e487648a498888669e2adc0e249a
msgid "You can update your local copy with code from the main repo at any time by doing::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:149
# 12e07cb59c574f1a9080890522eac54e
msgid "You should also keep an eye on the |app| `development forum <http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making major changes, you should discuss them in the forum or contact Kovid directly (his email address is all over the source code)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:155
# c4267f7ce73a46639973fab65e0dda84
msgid "Windows development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:157
#: ../../home/kovid/work/calibre/manual/develop.rst:188
#: ../../home/kovid/work/calibre/manual/develop.rst:220
# 75e41c5a4de14b4ba8eb21f1436f8e6f
# 8171cd3ccc454ebba3ef6b6085d77cfb
# f9193554e7de46babcfeed727c38e592
msgid "You must also get the |app| source code separately as described above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:159
# 896c18fdb80b488ea81447f043883e45
msgid "Install |app| normally, using the Windows installer. Then open a Command Prompt and change to the previously checked out |app| code directory. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:164
#: ../../home/kovid/work/calibre/manual/develop.rst:232
# 157bad8e1a75456f934f1e14ccac69e0
# 449f5d8909fe47a68fb585c5644cff5b
msgid "calibre is the directory that contains the src and resources sub-directories."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:166
# 168d00c8671847c0bd87a3e1fc8a7b34
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide <http://docs.python.org/using/windows.html#excursus-setting-environment-variables>`_ to setting environment variables on Windows."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:171
# 675dc28d062f4ea8bea75da27b5c64a8
msgid "Once you have set the environment variable, open a new command prompt and check that it was correctly set by using the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:176
#: ../../home/kovid/work/calibre/manual/develop.rst:243
# 41a7be3b054a46ec865749ea8b8c0735
# d46a78be7a5b40cf8d60d1408d8814b8
msgid "Setting this environment variable means that |app| will now load all its Python code from the specified location."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:178
# cd58595846c143d3bd5647cbffb5e566
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src\\\\calibre\\\\__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:183
#: ../../home/kovid/work/calibre/manual/develop.rst:250
# 24223fc0d4bb44eebad93f27e5c80762
# 1a49e7537b714db99c8c329d52856f9d
msgid "near the top of the file. Now run the command :command:`calibredb`. The very first line of output should be ``Hello, world!``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:186
# 6c563e5d7b7f43838b4e4463a49f4d60
msgid "OS X development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:190
# 0eca3ce69442461cb3245b26878bd35f
msgid "Install |app| normally using the provided .dmg. Then open a Terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:195
# 50611bae2c2546bd89b1ea4ee307b0b4
msgid "calibre is the directory that contains the src and resources sub-directories. Ensure you have installed the |app| commandline tools via :guilabel:`Preferences->Advanced->Miscellaneous` in the |app| GUI."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:197
# 06102e15258a453380a4c9c95941f55e
msgid "The next step is to create a bash script that will set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory when running calibre in debug mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:199
# e67abdb2e7854005924f6c97aed7a707
msgid "Create a plain text file::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:205
# aa185ab0d1a44d739430d28de631c37b
msgid "Save this file as ``/usr/bin/calibre-develop``, then set its permissions so that it can be executed::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:209
# bcb82dae87a545d6aa7eb13aae2d5bf7
msgid "Once you have done this, run::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:213
# bc6280accaa64beeb29c6451fe35703a
msgid "You should see some diagnostic information in the Terminal window as calibre starts up, and you should see an asterisk after the version number in the GUI window, indicating that you are running from source."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:218
# f6d76a54678947f2be04851b420b1ae0
msgid "Linux development environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:222
# 8e6be4f9b63f418185f8baad8b66557c
msgid "|app| is primarily developed on Linux. You have two choices in setting up the development environment. You can install the |app| binary as normal and use that as a runtime environment to do your development. This approach is similar to that used in Windows and OS X. Alternatively, you can install |app| from source. Instructions for setting up a development environment from source are in the INSTALL file in the source tree. Here we will address using the binary at runtime, which is the recommended method."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:228
# 19bf24a7f1dc48d186f1c2ac4540c595
msgid "Install |app| using the binary installer. Then open a terminal and change to the previously checked out |app| code directory, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:234
# cb0112b7f8d343f78b7235f48d8dcd4e
msgid "The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory. So, following the example above, it would be ``/home/kovid/work/calibre/src``. How to set environment variables depends on your Linux distribution and what shell you are using."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:238
# 9aa65f28e9c14091a236435e6849a5ad
msgid "Once you have set the environment variable, open a new terminal and check that it was correctly set by using the command::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:245
# 929ee7ab5eb34b23a3c4bb1c880e3168
msgid "That's it! You are now ready to start hacking on the |app| code. For example, open the file :file:`src/calibre/__init__.py` in your favorite editor and add the line::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:253
# a1fb09f516114b4198a5b9d6ba48ae2e
msgid "Having separate \"normal\" and \"development\" |app| installs on the same computer"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:255
# 8bea2cc53866471fa8da343a9de3cbb0
msgid "The |app| source tree is very stable and rarely breaks, but if you feel the need to run from source on a separate test library and run the released |app| version with your everyday library, you can achieve this easily using .bat files or shell scripts to launch |app|. The example below shows how to do this on Windows using .bat files (the instructions for other platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:260
# 0e4ebc44d50b409b9e3ac2f7a028fa2c
msgid "To launch the release version of |app| with your everyday library:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:262
# 22052891683747399384ac12bebb5b7a
msgid "calibre-normal.bat::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:266
# 03a3f8d61b1349b089d5a3d8cfd0fd46
msgid "calibre-dev.bat::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:273
# b322ba3ece744733a6128fa9ae29d7e8
msgid "Debugging tips"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:275
# ef8325a2f9af47aea4a6d748d26c1484
msgid "Python is a dynamically typed language with excellent facilities for introspection. Kovid wrote the core |app| code without once using a debugger. There are many strategies to debug |app| code:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:280
# 419a56762ab141728163f29cca442d82
msgid "Using print statements"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:282
# 9df8db34d5374be3b7af050e8368f100
msgid "This is Kovid's favorite way to debug. Simply insert print statements at points of interest and run your program in the terminal. For example, you can start the GUI from the terminal as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:287
# 7c401e8d92ca4d48a1360fb8fcc1a3c3
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:291
# 64166d8058794955b452f912c2e0b6a4
msgid "The ebook-editor can be started as::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:296
# 56c3985875dd45b08fde402f20c40515
msgid "Using an interactive python interpreter"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:298
# e9ae075706294a57b3beb273e227ed0f
msgid "You can insert the following two lines of code to start an interactive python session at that point::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:303
# 6bb34cca651d46d9b0ea3e820e8beaa6
msgid "When running from the command line, this will start an interactive Python interpreter with access to all locally defined variables (variables in the local scope). The interactive prompt even has TAB completion for object properties and you can use the various Python facilities for introspection, such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:309
# 2b35f58b82b9482e9902225dd3abeedd
msgid "Using the python debugger as a remote debugger"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:311
# a6249e6645614e9ea1dbf3c17633810f
msgid "You can use the builtin python debugger (pdb) as a remote debugger from the command line. First, start the remote debugger at the point in the calibre code you are interested in, like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:318
# 5546439ca1fd468ea4cd4452fddc3b07
msgid "Then run calibre, either as normal, or using one of the calibre-debug commands described in the previous section. Once the above point in the code is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:322
# d44238426abd47eda7691ea3b4ccc862
msgid "Now open a terminal or command prompt and use the following command to start the debugging session::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:327
# 0ed9d4f255774f0ba24e1aae1c6fc3b4
msgid "You can read about how to use the python debugger in the `python stdlib docs for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-commands>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:331
# be6740c1b8604fabaa39b5f353456c51
msgid "By default, the remote debugger will try to connect on port 4444. You can change it, by passing the port parameter to both the set_trace() and the cli() functions above, like this: ``set_trace(port=1234)`` and ``cli(port=1234)``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:337
# a84436055cc149b5a1a326e17f41fb1f
msgid "The python debugger cannot handle multiple threads, so you have to call set_trace once per thread, each time with a different port number."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:341
# da27d42b22704f2cb1dee774f562bdad
msgid "Using the debugger in your favorite python IDE"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:343
# 8e3a6d7bf1f147349621447dbe836ad5
msgid "It is possible to use the builtin debugger in your favorite python IDE, if it supports remote debugging. The first step is to add the |app| src checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the ``PYTHONPATH`` of your IDE."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:348
# 9c9733ede41a4931ab75640e717a5036
msgid "Then place the IDE's remote debugger module into the :file:`src` subdirectory of the |app| source code checkout. Add whatever code is needed to launch the remote debugger to |app| at the point of interest, for example in the main function. Then run |app| as normal. Your IDE should now be able to connect to the remote debugger running inside |app|."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:355
# 9251c633372f4298a36b8b898427c610
msgid "Executing arbitrary scripts in the |app| python environment"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:357
# fc67dbd5bd994f708eb0028018e73033
msgid "The :command:`calibre-debug` command provides a couple of handy switches to execute your own code, with access to the |app| modules::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:362
# 57995d8abc9747eeae5914999f3fb0e2
msgid "is great for testing a little snippet of code on the command line. It works in the same way as the -c switch to the python interpreter::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:366
# ce4446554d304e2291adc22e57e9d799
msgid "can be used to execute your own Python script. It works in the same way as passing the script to the Python interpreter, except that the calibre environment is fully initialized, so you can use all the calibre code in your script. To use command line arguments with your script, use the form::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:371
# a103b18bb9194e33a0cd12e2b15de8b0
msgid "The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:375
# d365cd059dd646869f60fa2af3314fab
msgid "Using |app| in your projects"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:377
# 11d5507f926b45c8953f1c1ee771a14d
msgid "It is possible to directly use |app| functions/code in your Python project. Two ways exist to do this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:380
# e5e1080bf7f3488fb0b85d14dce955d4
msgid "Binary install of |app|"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:382
# 833057ba3e6443e8a9ece7d00276bcd1
msgid "If you have a binary install of |app|, you can use the Python interpreter bundled with |app|, like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:387
# 7c59230c59fe4329b565f17b442dabda
msgid "Source install on Linux"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:389
# 6eb4b94aaf154da6926b3516e93c6757
msgid "In addition to using the above technique, if you do a source install on Linux, you can also directly import |app|, as follows::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:397
# da6e1daff3744341a3f0b45659c28bc0
msgid "It is essential that you import the init_calibre module before any other |app| modules/packages as it sets up the interpreter to run |app| code."
msgstr ""

#: ../../home/kovid/work/calibre/manual/develop.rst:401
# f339aa6c379e44dda79a3cdd6c16960e
msgid "API documentation for various parts of |app|"
msgstr ""

