# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-18 08:08+0530\n"
"PO-Revision-Date: 2014-07-18 20:20+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Bosnian (http://www.transifex.com/projects/p/calibre/language/bs/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: bs\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# fc90364cf6dd4296bcf8dfb5f3b62a2a
#: ../../plugins.rst:6
msgid "API Documentation for plugins"
msgstr ""

# f7bff45eb82e469c9994f94a109d5b69
#: ../../plugins.rst:11
msgid ""
"Defines various abstract base classes that can be subclassed to create "
"powerful plugins. The useful classes are:"
msgstr ""

# 8f7dffaacac44cb4830e4c5d3c4f9137
#: ../../plugins.rst:21
msgid "Plugin"
msgstr ""

# 3c7ee2e6d9d640e6b937a244e50db7f5
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:1
msgid "A calibre plugin. Useful members include:"
msgstr ""

# 9c95d921e62243a98553cfc46e97a4e9
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:4
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

# 14a9230823db492e8bfd128760207e42
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:4
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

# bf878c75beab46a18b904295fb4bc588
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:7
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

# 511d807f76ae4ebbb698afce97821088
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:7
msgid "by the user."
msgstr ""

# 5ce3ff3f111d4de196d08b239a84c9be
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:9
msgid "Methods that should be overridden in sub classes:"
msgstr ""

# 53685b6818ab47c588a2cd28e4140d2f
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:11
msgid ":meth:`initialize`"
msgstr ""

# e7b73054a08c44bab7894dc03242d17c
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:12
msgid ":meth:`customization_help`"
msgstr ""

# ab067e2ad0c24910b9ab23edd6aec183
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:14
msgid "Useful methods:"
msgstr ""

# 1152dbaadf9446e6a761587aafa5e809
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:16
msgid ":meth:`temporary_file`"
msgstr ""

# ffab3942d1624ccba44fb38744f9a011
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.supported_platforms:1
msgid ""
"List of platforms this plugin works on For example: ``['windows', 'osx', "
"'linux']``"
msgstr ""

# 2dc560f2a4724d6ca0261ccf4708746a
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.name:1
msgid ""
"The name of this plugin. You must set it something other than Trivial Plugin"
" for it to work."
msgstr ""

# e15ae9c4a4d943fe9557db43d4472b61
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.version:1
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

# be67277eb36f47228613751cdff74a8b
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.description:1
msgid "A short string describing what this plugin does"
msgstr ""

# c6196e22c96b4dbd95126711a6f8bb05
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.author:1
msgid "The author of this plugin"
msgstr ""

# 7d1c2c4791aa4cbfa5a96efff27c98e2
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.priority:1
msgid ""
"When more than one plugin exists for a filetype, the plugins are run in "
"order of decreasing priority i.e. plugins with higher priority will be run "
"first. The highest possible priority is ``sys.maxint``. Default priority is "
"1."
msgstr ""

# 22d6bfe40e2a4ab2b16caadfefa7953e
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.minimum_calibre_version:1
msgid "The earliest version of calibre this plugin requires"
msgstr ""

# 80440d0233054b2a8159e4ec866b4131
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.can_be_disabled:1
msgid ""
"If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

# 2d6cfd69f42b42c091ab157c1b2e8a48
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.type:1
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

# 9e5fc3d414a248adbb380cf652d19411
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:1
msgid ""
"Called once when calibre plugins are initialized. Plugins are re-initialized"
" every time a new plugin is added."
msgstr ""

# 80c04ec8339144e38ec1a71cc95a7fbc
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:4
msgid ""
"Perform any plugin specific initialization here, such as extracting "
"resources from the plugin zip file. The path to the zip file is available as"
" ``self.plugin_path``."
msgstr ""

# 0a9d2740519348f2aeb9839e16d6cafe
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:8
msgid ""
"Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

# 956a8a65059d47dc8ff2e8abbc01545e
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:1
msgid ""
"Implement this method and :meth:`save_settings` in your plugin to use a "
"custom configuration dialog, rather then relying on the simple string based "
"default customization."
msgstr ""

# 596cd5ef9c464686a1e658afb6080e74
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:5
msgid ""
"This method, if implemented, must return a QWidget. The widget can have an "
"optional method validate() that takes no arguments and is called immediately"
" after the user clicks OK. Changes are applied if and only if the method "
"returns True."
msgstr ""

# c1b50cd9acd14b1db7e1ecbc6105f40d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:10
msgid ""
"If for some reason you cannot perform the configuration at this time, return"
" a tuple of two strings (message, details), these will be displayed as a "
"warning dialog to the user and the process will be aborted."
msgstr ""

# e8a1d87ea84248f5aad0f00dbe89db71
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:1
msgid "Save the settings specified by the user with config_widget."
msgstr ""

# 382bbae5c29c475cab465225fea92c9a
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:3
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

# 72ba867f15334c608541a90ca38e8e92
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.do_user_config:1
msgid ""
"This method shows a configuration dialog for this plugin. It returns True if"
" the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

# b6d75f90618e4b46b7236c49c136f97b
# d40b7cc1248f42f1ab03304d65248ecc
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:1
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:1
msgid ""
"If this plugin comes in a ZIP file (user added plugin), this method will "
"allow you to load resources from the ZIP file."
msgstr ""

# 4409cb2a302743b1a55b444c1d6d6f02
# b58f5ca120ec48e8bb2a4e3a076797ba
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:4
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:4
msgid "For example to load an image::"
msgstr ""

# cf267702593b4fd094d30cc1c1645d92
# 2a0399f7dbe64359bc5c0ece0bb74510
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:10
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:10
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

# 7d82b289ef2649428003c4506aa95806
# 814e76a0ed2346c69f6b3aaea86afa2b
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:12
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:12
msgid ""
"A dictionary of the form ``{name : file_contents}``. Any names that were not"
" found in the zip file will not be present in the dictionary."
msgstr ""

# f8915535cc904661bab8013f30c10b9c
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:1
msgid ""
"Return a string giving help on how to customize this plugin. By default "
"raise a :class:`NotImplementedError`, which indicates that the plugin does "
"not require customization."
msgstr ""

# 3355e0e76ae844e7be191047470a9e77
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:5
msgid ""
"If you re-implement this method in your subclass, the user will be asked to "
"enter a string as customization for this plugin. The customization string "
"will be available as ``self.site_customization``."
msgstr ""

# 5fe1b5811dad421ca0d018e770774277
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:10
msgid ""
"Site customization could be anything, for example, the path to a needed "
"binary on the user's computer."
msgstr ""

# 7ee7bb2a988c49929725e66c5ea09d6d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:13
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

# 1dda7bef164c48bca18a2abdf19b007a
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:1
msgid ""
"Return a file-like object that is a temporary file on the file system. This "
"file will remain available even after being closed and will only be removed "
"on interpreter shutdown. Use the ``name`` member of the returned object to "
"access the full path to the created temporary file."
msgstr ""

# b068b717c9f3446982da6a0c5dd8a699
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:6
msgid "The suffix that the temporary file will have."
msgstr ""

# 57a422811491412085fbcc03c73cc666
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.cli_main:1
msgid ""
"This method is the main entry point for your plugins command line interface."
" It is called when the user does: calibre-debug -r \"Plugin Name\". Any "
"arguments passed are present in the args variable."
msgstr ""

# d7b4034403dd431484c75ab032505cad
#: ../../plugins.rst:30
msgid "FileTypePlugin"
msgstr ""

# 1135da6eee2f4685bd5dc51f6a9a2f8e
# f5e4155a747d49b0a6081824c0732520
# 10e1cb3aa78d4e0887ec439cf101f8df
# 1cc8517247a5471e9254e8b7665612b7
# 241f93781e654881bc93613ad77ef731
# ab67a0f486704201b9822ef05caa5d26
# 0fddad4cc506462c97bad6b5ca350c65
# b9d5390aabf447cf84b55979610b5c60
# ec13e96e7c44458caf3faac2b8e53067
# 90268591bc2e464c9f7eca4f8e03c43d
# fc3e0e92e9904adb87fafb5c9b298a1d
#: ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1
#: ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1
#: ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

# 0e3d8e0395ac4bfbafe64d716d92d3db
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin:1
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

# 4bf4a95bfd3e4d928a4186c62ee169ab
# 5d44e7dffabd42499271900da439629b
# 6ef08c32222d451a89fbdcb59ed7be3a
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.file_types:1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run For example: "
"``set(['lit', 'mobi', 'prc'])``"
msgstr ""

# f67aead3f1334dd5a48ba7bdb530fc60
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_import:1
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

# 75021b37371c4a9e94a6f32b69eb9443
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_postimport:1
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

# e08d65987283433ab3687fc9c67b9b9e
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_preprocess:1
msgid "If True, this plugin is run just before a conversion"
msgstr ""

# f6ab26e36f474ad89190b3ba0e7fff1b
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_postprocess:1
msgid ""
"If True, this plugin is run after conversion on the final file produced by "
"the conversion output plugin."
msgstr ""

# 90f508a089ef4f79970cb317775ed7a0
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should perform "
"whatever modifications are required on the ebook and return the absolute "
"path to the modified ebook. If no modifications are needed, it should return"
" the path to the original ebook. If an error is encountered it should raise "
"an Exception. The default implementation simply return the path to the "
"original ebook."
msgstr ""

# 7684bb2362094d738180d327cfc43e2d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:9
msgid ""
"The modified ebook file should be created with the :meth:`temporary_file` "
"method."
msgstr ""

# 5b95c13a4062490e8a934744056c0142
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:12
msgid "Absolute path to the ebook."
msgstr ""

# 7dc3f8235aff4f19928388a52c53634c
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:14
msgid "Absolute path to the modified ebook."
msgstr ""

# 1d76156c9de94473ac79b2ccaba8c7c5
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:1
msgid ""
"Called post import, i.e., after the book file has been added to the "
"database."
msgstr ""

# 53c63a5cb1b542febc6f32a064c0fa39
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:3
msgid "Database id of the added book."
msgstr ""

# cc724b81527f452bb7c2da5cf714f03a
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:4
msgid "The file type of the book that was added. :param db: Library database."
msgstr ""

# c99ad3dc238d47d78e09ae663515c0b7
#: ../../plugins.rst:41
msgid "Metadata plugins"
msgstr ""

# b64cf385922a437fb024a6f217eb48e2
# 8b0bd645fc6a4709b89683e7cd7a2fc2
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin:1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin:1
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

# 79ff59365ca847b9b134215f53eae28c
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:1
msgid ""
"Return metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data. :param type: The type of file. Guaranteed to be one of the entries in "
":attr:`file_types`. :return: A "
":class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

# 0fc1f9a3460b417da7532e5f852c2dac
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:1
msgid ""
"Set metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data. :param type: The type of file. Guaranteed to be one of the entries in "
":attr:`file_types`. :param mi: A "
":class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

# b8c9e19d114d418fa731a24d4b335ec5
#: ../../plugins.rst:56
msgid "Catalog plugins"
msgstr ""

# 676227ca55234fe3ac4ee23456e7694b
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin:1
msgid "A plugin that implements a catalog generator."
msgstr ""

# 0d8c12a3c3f54bb793a69fc5feb95620
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.file_types:1
msgid ""
"Output file type for which this plugin should be run For example: 'epub' or "
"'xml'"
msgstr ""

# f76345367e984feda334e684591cedc5
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.cli_options:1
msgid ""
"CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

# 4308e11dae864763a05a8e76d823be17
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.initialize:1
msgid ""
"If plugin is not a built-in, copy the plugin's .ui and .py files from the "
"zip file to $TMPDIR. Tab will be dynamically generated and added to the "
"Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

# f0a70bd77645486997996b800ff95f1b
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should generate the "
"catalog in the format specified in file_types, returning the absolute path "
"to the generated catalog file. If an error is encountered it should raise an"
" Exception."
msgstr ""

# c1b14107201e4c5ebb218f5dbe38e3a1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:7
msgid ""
"The generated catalog file should be created with the :meth:`temporary_file`"
" method."
msgstr ""

# 468e3e41df964ec78c84d665b921adca
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:10
msgid "Absolute path to the generated catalog file."
msgstr ""

# a18b9f0f4ed44f8bb87f894c3c6ea42d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:11
msgid "A dictionary of keyword arguments"
msgstr ""

# b21b6c941f504f1d901160efb86a58ae
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:12
msgid "A LibraryDatabase2 object"
msgstr ""

# 2b2d52350587474390e67c2e4a44052b
#: ../../plugins.rst:66
msgid "Metadata download plugins"
msgstr ""

# 2135fccc241f4071a0c74ea991bf5d88
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.capabilities:1
msgid ""
"Set of capabilities supported by this plugin. Useful capabilities are: "
"'identify', 'cover'"
msgstr ""

# 16638f47a55847c9ad2ddaf9530f0fec
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.touched_fields:1
msgid ""
"List of metadata fields that can potentially be download by this plugin "
"during the identify phase"
msgstr ""

# 1147446141fa4aee96ecc8a6a8b8ca63
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

# d2c7c90ea3f84c3482b9bd8b3ec5992e
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
msgid ""
"Setting this to True means that the browser object will add Accept-Encoding:"
" gzip to all requests. This can speedup downloads but make sure that the "
"source actually supports gzip transfer encoding correctly first"
msgstr ""

# aaa60f571ba14b22bb937ada95296220
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
msgid ""
"Cached cover URLs can sometimes be unreliable (i.e. the download could fail "
"or the returned image could be bogus. If that is often the case with this "
"source set to False"
msgstr ""

# 309d4118223b4332bf4c6c004545f59a
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.options:1
msgid ""
"A list of :class:`Option` objects. They will be used to automatically "
"construct the configuration widget for this plugin"
msgstr ""

# 637be63f48bc409ab324cd668bb17326
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.config_help_message:1
msgid ""
"A string that is displayed at the top of the config widget for this plugin"
msgstr ""

# 6947591169034dbaaaf1ea775a133bed
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
msgid "If True this source can return multiple covers for a given query"
msgstr ""

# ea2b3395277c40d2aa6c7cd65235d60e
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
msgid ""
"If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

# bf715d0be5f54e3b9721801c2397e783
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.is_configured:1
msgid ""
"Return False if your plugin needs to be configured before it can be used. "
"For example, it might need a username/password/API key."
msgstr ""

# 84c6ef995b6244a3b5e1f9ed965675e9
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
msgid ""
"Take a list of authors and return a list of tokens useful for an AND search "
"query. This function tries to return tokens in first name middle names last "
"name order, by assuming that if a comma is in the author name, the name is "
"in lastname, other names form."
msgstr ""

# c538abfaaf9946738ef9150d344d1694
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
msgid ""
"Take a title and return a list of tokens useful for an AND search query. "
"Excludes connectives(optionally) and punctuation."
msgstr ""

# 45758470ba8f4562b291f6d1b8394adc
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.split_jobs:1
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

# 18a6056b43b248f3ae116ec773c1f525
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.test_fields:1
msgid ""
"Return the first field from self.touched_fields that is null on the mi "
"object"
msgstr ""

# 26a97e42b39f42dd93f63186a1823703
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
msgid ""
"Call this method in your plugin's identify method to normalize metadata "
"before putting the Metadata object into result_queue. You can of course, use"
" a custom algorithm suited to your metadata source."
msgstr ""

# 59a5ac74e902426fa18f9706058d20ea
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_book_url:1
msgid ""
"Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, "
"identifier_value, URL). The URL is the URL for the book identified by "
"identifiers at this source. identifier_type, identifier_value specify the "
"identifier corresponding to the URL. This URL must be browseable to by a "
"human using a browser. It is meant to provide a clickable link for the user "
"to easily visit the books page at this source. If no URL is found, return "
"None. This method must be quick, and consistent, so only implement it if it "
"is possible to construct the URL from a known scheme given identifiers."
msgstr ""

# 70a16d73e25d4a82b2627940b943ef28
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

# 287ca534964f43709e6624de161bcf57
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
msgid ""
"Return cached cover URL for the book identified by the identifiers dict or "
"None if no such URL exists."
msgstr ""

# 633c0253f465412d98a7a7ef1e2da056
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
msgid ""
"Note that this method must only return validated URLs, i.e. not URLS that "
"could result in a generic cover image or a not found error."
msgstr ""

# 2217c37b96304973b64a33ca35a213ca
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
msgid ""
"Return a function that is used to generate a key that can sort Metadata "
"objects by their relevance given a search query (title, authors, "
"identifiers)."
msgstr ""

# 0648643af48549f09604a9fb2e0fbf22
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

# bc20371873014b8d918f89b79b437873
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
msgid ""
"For details on the default algorithm see "
":class:`InternalMetadataCompareKeyGen`. Re-implement this function in your "
"plugin if the default algorithm is not suitable."
msgstr ""

# a600c77c4dd244bc8e814883cb9b1bce
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:1
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

# 90ba4981105c474389cf1e3d5af76a25
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:3
msgid ""
"If identifiers(s) are specified and no match is found and this metadata "
"source does not store all related identifiers (for example, all ISBNs of a "
"book), this method should retry with just the title and author (assuming "
"they were specified)."
msgstr ""

# 11d8cccfb7b146bb8c82abeff0ee6b48
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:8
msgid ""
"If this metadata source also provides covers, the URL to the cover should be"
" cached so that a subsequent call to the get covers API with the same "
"ISBN/special identifier does not need to get the cover URL again. Use the "
"caching API for this."
msgstr ""

# 445a53b974414d9fb7073ba9cfe87962
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:13
msgid ""
"Every Metadata object put into result_queue by this method must have a "
"`source_relevance` attribute that is an integer indicating the order in "
"which the results were returned by the metadata source for this query. This "
"integer will be used by :meth:`compare_identify_results`. If the order is "
"unimportant, set it to zero for every result."
msgstr ""

# c7742dd99bd541318f05791d3539fd8b
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:19
msgid ""
"Make sure that any cover/isbn mapping information is cached before the "
"Metadata object is put into result_queue."
msgstr ""

# 1236dfc85ad64af5b9cc9b16c09f26d3
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:22
msgid "A log object, use it to output debugging information/errors"
msgstr ""

# 440c5df0354c4a488945a19c4dd495cd
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:23
msgid ""
"A result Queue, results should be put into it. Each result is a Metadata "
"object"
msgstr ""

# 682187f3f28e4a7fa226b9da15e110b4
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:25
msgid ""
"If abort.is_set() returns True, abort further processing and return as soon "
"as possible"
msgstr ""

# d669ded80e434ea3985ddb1890d56448
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:27
msgid "The title of the book, can be None"
msgstr ""

# 4b44957e728946bfabf48bba6904baa5
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:28
msgid "A list of authors of the book, can be None"
msgstr ""

# c2831d18b7d14393a66792da184d0bb2
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:29
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

# 419d7bf93b2c489889779f47ca18402b
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:31
msgid ""
"Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

# 7cefbc6f4a784d9e86a68339ccf1231a
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:33
msgid ""
"None if no errors occurred, otherwise a unicode representation of the error "
"suitable for showing to the user"
msgstr ""

# 8c9c006e6f1346019416eb54bb9df9ec
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.download_cover:1
msgid ""
"Download a cover and put it into result_queue. The parameters all have the "
"same meaning as for :meth:`identify`. Put (self, cover_data) into "
"result_queue."
msgstr ""

# 71da87e229d84e5085bf38d0f789140a
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.download_cover:5
msgid ""
"This method should use cached cover URLs for efficiency whenever possible. "
"When cached data is not present, most plugins simply call identify and use "
"its results."
msgstr ""

# a2916a99a2884c14a3eee5e02cbf3828
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.download_cover:9
msgid ""
"If the parameter get_best_cover is True and this plugin can get multiple "
"covers, it should only get the \"best\" one."
msgstr ""

# 9b579999930c454d85e086766ae85862
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
msgid ""
"Generate a sort key for comparison of the relevance of Metadata objects, "
"given a search query. This is used only to compare results from the same "
"metadata source, not across different sources."
msgstr ""

# dc765c1b47db4ecb8cca9d9901b06712
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
msgid ""
"The sort key ensures that an ascending order sort is a sort by order of "
"decreasing relevance."
msgstr ""

# 86dbc66a98a545f3b48d701eb66e21c5
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
msgid "The algorithm is:"
msgstr ""

# 7c2c46ca81f5421285116fd4bb2f87fb
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
msgid "Prefer results that have the same ISBN as specified in the query"
msgstr ""

# 9b7122566dfc4dc382de6319afb5216e
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
msgid "Prefer results with a cached cover URL"
msgstr ""

# 2fa6c0cfd4ff49c69869cd1669a77c58
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
msgid "Prefer results with all available fields filled in"
msgstr ""

# 0847010634cb4596a392a56ff4b6ac49
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
msgid "Prefer results that are an exact title match to the query"
msgstr ""

# 987c7dd6cf1a4ba48e66392937b8a317
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

# e789c6e6683e406b8e7a92f89bc84e0e
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
msgid ""
"Use the relevance of the result as reported by the metadata source's search"
msgstr ""

# 157b19c33abb4147a6bed181ecbb7a96
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
msgid "engine"
msgstr ""

# 3b3f048ece044dd0b9c254f0e9196992
#: ../../plugins.rst:78
msgid "Conversion plugins"
msgstr ""

# 75a80a3ff85b409d9408e245740895b0
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin:1
msgid ""
"InputFormatPlugins are responsible for converting a document into "
"HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. "
"The main action happens in :meth:`convert`."
msgstr ""

# 710667fe36144e7b928ff9b4955a6362
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run For example: "
"``set(['azw', 'mobi', 'prc'])``"
msgstr ""

# 9beddf61634248bf88504456c0a22530
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
msgid ""
"If True, this input plugin generates a collection of images, one per HTML "
"file. This can be set dynamically, in the convert method if the input files "
"can be both image collections and non-image collections. If you set this to "
"True, you must implement the get_images() method that returns a list of "
"images."
msgstr ""

# f7a3c4560fd9414fb251f5bf2a509590
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.core_usage:1
msgid ""
"Number of CPU cores used by this plugin A value of -1 means that it uses all"
" available cores"
msgstr ""

# 9a184d2cb19043c9b52afe4620224d0d
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.for_viewer:1
msgid ""
"If set to True, the input plugin will perform special processing to make its"
" output suitable for viewing"
msgstr ""

# 7014e032526747beb08edf33272a1b3a
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.output_encoding:1
msgid ""
"The encoding that this input plugin creates files in. A value of None means "
"that the encoding is undefined and must be detected individually"
msgstr ""

# 679aaac030624642816df7df8a4cc3c8
# b68fdfd4f7b74397b2108cd920588ac5
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.common_options:1
msgid ""
"Options shared by all Input format plugins. Do not override in sub-classes. "
"Use :attr:`options` instead. Every option must be an instance of "
":class:`OptionRecommendation`."
msgstr ""

# d5c2edc353c044ba8aa7eae6e47b51da
# 655ce0116b9f4a9388479a99a9a06dc8
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.options:1
msgid ""
"Options to customize the behavior of this plugin. Every option must be an "
"instance of :class:`OptionRecommendation`."
msgstr ""

# 0722086af34c467eb346057fb46d58cb
# 697bfb1ec9f847b29ccb5fb5fafdae89
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.recommendations:1
msgid ""
"A set of 3-tuples of the form (option_name, recommended_value, "
"recommendation_level)"
msgstr ""

# b2cdfc9425334d57aa151d33f62b208c
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.get_images:1
msgid ""
"Return a list of absolute paths to the images, if this input plugin "
"represents an image collection. The list of images is in the same order as "
"the spine and the TOC."
msgstr ""

# de997f0068fd4707be76525e09fc4b76
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:1
msgid ""
"This method must be implemented in sub-classes. It must return the path to "
"the created OPF file or an :class:`OEBBook` instance. All output should be "
"contained in the current directory. If this plugin creates files outside the"
" current directory they must be deleted/marked for deletion before this "
"method returns."
msgstr ""

# 04056117116d40cdb552544fa3f09dd2
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:8
msgid "A file like object that contains the input file."
msgstr ""

# 959c9341b4384430927c4cbc2cd9d0d3
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:9
msgid ""
"Options to customize the conversion process. Guaranteed to have attributes "
"corresponding to all the options declared by this plugin. In addition, it "
"will have a verbose attribute that takes integral values from zero upwards. "
"Higher numbers mean be more verbose. Another useful attribute is "
"``input_profile`` that is an instance of "
":class:`calibre.customize.profiles.InputProfile`."
msgstr ""

# 586166d0aaa14a96998a9b7138d90207
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:17
msgid ""
"The extension (without the .) of the input file. It is guaranteed to be one "
"of the `file_types` supported by this plugin."
msgstr ""

# 9d006c7805f147729355def17a15b2aa
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:20
msgid ""
"A :class:`calibre.utils.logging.Log` object. All output should use this "
"object."
msgstr ""

# bcdefa54de4d4c438722ba1220268615
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:22
msgid ""
"A dictionary of various information that the input plugin can get easily "
"that would speed up the subsequent stages of the conversion."
msgstr ""

# 15d998c647b24faa99de05d21e889010
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
msgid ""
"Called to allow the input plugin to perform postprocessing after the book "
"has been parsed."
msgstr ""

# 7f6213213d634b9e9a826f65718d43b0
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.specialize:1
msgid ""
"Called to allow the input plugin to specialize the parsed book for a "
"particular output format. Called after postprocess_book and before any "
"transforms are performed on the parsed book."
msgstr ""

# af947a34b2c646f88ea2f4b5fdd81de5
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builting input plugins for examples."
msgstr ""

# 927f4e5b0cf044df86a05a9ccbe45486
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:1
msgid ""
"OutputFormatPlugins are responsible for converting an OEB document "
"(OPF+HTML) into an output ebook."
msgstr ""

# 469f5a19345a48c3a9d55f371085cdd6
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:4
msgid ""
"The OEB document can be assumed to be encoded in UTF-8. The main action "
"happens in :meth:`convert`."
msgstr ""

# 00a5442ed57d47718812e5254de6ca7c
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.file_type:1
msgid ""
"The file type (extension without leading period) that this plugin outputs"
msgstr ""

# 03ae83be683647e4920d64a0cd7ca495
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:1
msgid ""
"Render the contents of `oeb_book` (which is an instance of "
":class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

# 594ef3a0c8b74fd49f8d265a012a1987
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:4
msgid ""
"Either a file like object or a string. If it is a string it is the path to a"
" directory that may or may not exist. The output plugin should write its "
"output into that directory. If it is a file like object, the output plugin "
"should write its output into the file."
msgstr ""

# 77ae2ca7cfa54357996151299fd09b47
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:8
msgid ""
"The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

# c59c8c69ead24236ad76039360fe22f6
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:10
msgid ""
"Conversion options. Guaranteed to have attributes corresponding to the "
"OptionRecommendations of this plugin."
msgstr ""

# 68ba99f439fa4fbd9894adabe8daf9f7
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:12
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

# 40bcac24e283493c80f0f9374d6a556b
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
msgid ""
"Can be used to make changes to the css during the CSS flattening process."
msgstr ""

# e2fc2ae625ac410aadaabe68fdddb7ae
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
msgid "The item (HTML file) being processed"
msgstr ""

# 9bb490b2a6e742c5a715aa717ff75f0a
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
msgid ""
"A Stylizer object containing the flattened styles for item. You can get the "
"style for any element by stylizer.style(element)."
msgstr ""

# 7cd56f8682ac4fa2823c067b115dfcbb
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builtin output plugins for examples."
msgstr ""

# 09581b88c3304a3383a0828483272519
#: ../../plugins.rst:93
msgid "Device Drivers"
msgstr ""

# eebbf2d833d149bb884f6ee7244736a2
#: ../../plugins.rst:97
msgid ""
"The base class for all device drivers is :class:`DevicePlugin`. However, if "
"your device exposes itself as a USBMS drive to the operating system, you "
"should use the USBMS class instead as it implements all the logic needed to "
"support these kinds of devices."
msgstr ""

# 601aae5868a54b7eac03c5f929355d80
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin:1
msgid ""
"Defines the interface that should be implemented by backends that "
"communicate with an ebook reader."
msgstr ""

# f193f379dca24e8792ccb2ff18e22e65
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.FORMATS:1
msgid "Ordered list of supported formats"
msgstr ""

# 21e0cc6d91b345c2aff179db5d32533b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.VENDOR_ID:1
msgid ""
"VENDOR_ID can be either an integer, a list of integers or a dictionary If it"
" is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

# 9a155144c8df4c2b826888496948798d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
msgid "An integer or a list of integers"
msgstr ""

# 297501aaf6fd403b9c6aa51880eee8bf
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.BCD:1
msgid ""
"BCD can be either None to not distinguish between devices based on BCD, or "
"it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

# b770740f254046689a79e38689b6e6e8
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
msgid "Height for thumbnails on the device"
msgstr ""

# 99f48cb35627439895ad0d8ca1e13097
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
msgid ""
"Width for thumbnails on the device. Setting this will force thumbnails to "
"this size, not preserving aspect ratio. If it is not set, then the aspect "
"ratio will be preserved and the thumbnail will be no higher than "
"THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 "
"to have better quality thumbnails with fewer compression artifacts. Of "
"course, the thumbnails get larger as well."
msgstr ""

# 6a2a4b9548ed4bcbae37cd3b01816c0e
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
msgid ""
"Set this to True if the device supports updating cover thumbnails during "
"sync_booklists. Setting it to true will ask device.py to refresh the cover "
"thumbnails during book matching"
msgstr ""

# b4d318d2f86b4600b1b2848aeb814a79
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

# 3fd7d9ad03b242f88bfe40b0e3b641af
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

# 4279b845b04e4c339e1772fb161a204b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.path_sep:1
msgid "Path separator for paths to books on device"
msgstr ""

# 4101bb21128e41208bc97c1f520526ca
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.icon:1
msgid "Icon for this device"
msgstr ""

# 6fb562da3ae64896a3206d1ed8111089
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
msgid ""
"GUI displays this as a message if not None. Useful if opening can take a "
"long time"
msgstr ""

# 333cba1b03934eab92a6ff3079025733
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
msgid ""
"Set of extensions that are \"virtual books\" on the device and therefore "
"cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

# 237e99bea3354ff08983b7f5506866fd
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
msgid ""
"Whether to nuke comments in the copy of the book sent to the device. If not "
"None this should be short string that the comments will be replaced by."
msgstr ""

# 6051c70badab41f183cb5f6ee31fa104
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
msgid ""
"If True indicates that  this driver completely manages device detection, "
"ejecting and so forth. If you set this to True, you *must* implement the "
"detect_managed_devices and debug_managed_device_detection methods. A driver "
"with this set to true is responsible for detection of devices, managing a "
"blacklist of devices, a list of ejected devices and so forth. calibre will "
"periodically call the detect_managed_devices() method and is it returns a "
"detected device, calibre will call open(). open() will be called every time "
"a device is returned even is previous calls to open() failed, therefore the "
"driver must maintain its own blacklist of failed devices. Similarly, when "
"ejecting, calibre will call eject() and then assuming the next call to "
"detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

# d2f30abf6c58430f991ef761645af578
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
msgid ""
"If set the True, calibre will call the :meth:`get_driveinfo()` method after "
"the books lists have been loaded to get the driveinfo."
msgstr ""

# 495be23477e7434797981f049f5e1e0e
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
msgid ""
"If set to True, calibre will ask the user if they want to manage the device "
"with calibre, the first time it is detected. If you set this to True you "
"must implement :meth:`get_device_uid()` and "
":meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` "
"and :meth:`set_user_blacklisted_devices`"
msgstr ""

# 6e3e550299e34ab48ec9406c61cebed7
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
msgid ""
"Set this to a dictionary of the form {'title':title, 'msg':msg, "
"'det_msg':detailed_msg} to have calibre popup a message to the user after "
"some callbacks are run (currently only upload_books). Be careful to not spam"
" the user with too many messages. This variable is checked after *every* "
"callback, so only set it when you really need to."
msgstr ""

# ea288069e985471797ed2948c2cf0fe1
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:1
msgid ""
"Return True, device_info if a device handled by this plugin is currently "
"connected."
msgstr ""

# 12180a555a0b4e7eaaa9ce6e473237e8
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:3
msgid "List of devices currently connected"
msgstr ""

# ea162b7646324b1d82edafe5c3590964
# b271e782a4524ead8637372fe2542971
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

# 7ed41e6a0bf3484ea3f13bfc18582928
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:3
msgid ""
"Scan for devices that this driver can handle. Should return a device object "
"if a device is found. This object will be passed to the open() method as the"
" connected_device. If no device is found, return None. The returned object "
"can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

# 7a4ef78912b342339e69aa0a1611bb24
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:9
msgid ""
"This method is called periodically by the GUI, so make sure it is not too "
"resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

# eeea0ad621ea4398924e27fc1dcaab24
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:13
msgid "Set of USB devices found on the system."
msgstr ""

# 86fa40bbb2f346b08ecac0ed460dc34f
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:15
msgid ""
"If True and the driver uses a cache to prevent repeated scanning, the cache "
"must be flushed."
msgstr ""

# 048d42f04ef64f5f93e9be0f6f4b4095
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
msgid ""
"Should write information about the devices detected on the system to output,"
" which is a file like object."
msgstr ""

# a79479ecf3814b9eac1f3a86f863795a
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
msgid ""
"Should return True if a device was detected and successfully opened, "
"otherwise False."
msgstr ""

# c4c22b200d4a46759b26f9a110ea3f97
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:1
msgid "The key to unlock the device"
msgstr ""

# 0f701bcc4c2348619bef85849154aca0
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:2
msgid "If true the packet stream to/from the device is logged"
msgstr ""

# 147cc94e53fd40bd80c1fa9c132f2e45
# 7589da6a6f2a4425acbe953d2c7d5380
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:3
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:3
msgid ""
"Function that is called with a % progress (number between 0 and 100) for "
"various tasks If it is called with -1 that means that the task does not have"
" any progress information"
msgstr ""

# 1434acbc9f864c10a6a33876d9c34792
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:7
msgid "Device information from the device scanner"
msgstr ""

# 0404a4f78a684cea85d3dbe023e5286f
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:1
msgid ""
"Optional method to perform further checks on a device to see if this driver "
"is capable of handling it. If it is not it should return False. This method "
"is only called after the vendor, product ids and the bcd have matched, so it"
" can do some relatively time intensive checks. The default implementation "
"returns True. This method is called only on windows. See also "
":meth:`can_handle`."
msgstr ""

# 918e3e7f44994631a35eb6f985fe25ec
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:8
msgid ""
"On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, "
"bcd)``."
msgstr ""

# 7083e6d68b3a4551946374c1d2f52424
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:1
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

# db3c27404b764e0e9b2346be4b02f454
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:3
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

# 4d792866c8364e30847db71f30cf04e3
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:1
msgid ""
"Perform any device specific initialization. Called after the device is "
"detected but before any other functions that communicate with the device. "
"For example: For devices that present themselves as USB Mass storage "
"devices, this method would be responsible for mounting the device or if the "
"device has been automounted, for finding out where it has been mounted. The "
"method :meth:`calibre.devices.usbms.device.Device.open` has an "
"implementation of this function that should serve as a good example for USB "
"Mass storage devices."
msgstr ""

# 78f32e1906fd48d8a7b0c56889bf4127
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:11
msgid ""
"This method can raise an OpenFeedback exception to display a message to the "
"user."
msgstr ""

# a3ab205abeab41e6ace9a9452a19a3a7
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:14
msgid ""
"The device that we are trying to open. It is a tuple of (vendor id, product "
"id, bcd, manufacturer name, product name, device serial number). However, "
"some devices have no serial number and on windows only the first three "
"fields are present, the rest are None."
msgstr ""

# 174d288914084184889d8a572adf0b80
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:20
msgid ""
"The UUID of the current calibre library. Can be None if there is no library "
"(for example when used from the command line)."
msgstr ""

# 516986907f934346b0e7e00267bd1eee
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:1
msgid ""
"Un-mount / eject the device from the OS. This does not check if there are "
"pending GUI jobs that need to communicate with the device."
msgstr ""

# ee538c91ea544b98b08d9b1f0665432c
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:4
msgid ""
"NOTE: That this method may not be called on the same thread as the rest of "
"the device methods."
msgstr ""

# 2d0a0d3d25f543cd9cf19b732389a531
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

# 4b1be72d0cf042f18be42dd1ad487b9a
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:1
msgid "Set a function to report progress information."
msgstr ""

# d6bfe863b87f4c7bbb398809a4f1529a
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:1
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

# e1d9dd427de5475aa77cd768fab8815f
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:3
msgid ""
"(device name, device version, software version on device, mime type) The "
"tuple can optionally have a fifth element, which is a drive information "
"dictionary. See usbms.driver for an example."
msgstr ""

# b1d12c9cb331417abe714df5f2595814
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_driveinfo:1
msgid ""
"Return the driveinfo dictionary. Usually called from "
"get_device_information(), but if loading the driveinfo is slow for this "
"driver, then it should set SLOW_DRIVEINFO. In this case, this method will be"
" called by calibre after the book lists have been loaded. Note that it is "
"not called on the device thread, so the driver should cache the drive info "
"in the books() method and this function should return the cached data."
msgstr ""

# 46f4f67975b0402ba5182acfacc03cc7
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.card_prefix:1
msgid ""
"Return a 2 element list of the prefix to paths on the cards. If no card is "
"present None is set for the card's prefix. E.G. ('/place', '/place2') (None,"
" 'place2') ('place', None) (None, None)"
msgstr ""

# 87ced0215c804bc3980d4cf9554d9abe
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
msgid "Get total space available on the mountpoints:"
msgstr ""

# df25f6f4305c41808a0a1753af074240
# 1b694b6b44634be2a7763ae51e7b9acd
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:2
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:2
msgid "Main memory"
msgstr ""

# 24dc6cb0cfac4694b6be6f4a1593a8a5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:3
msgid "Memory Card A"
msgstr ""

# 4235a6054f794b1d86f3e36cc9a89055
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
msgid "Memory Card B"
msgstr ""

# c6b2baab7327498ab5e8aa95c6a2157e
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:6
msgid ""
"A 3 element list with total space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return 0."
msgstr ""

# dba1a455500c43de81c7091e13e3a43b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
msgid "Get free space available on the mountpoints:"
msgstr ""

# d2dc811df3ac4ea5869c82bde055d300
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:3
msgid "Card A"
msgstr "Kartica A"

# 68333b2c07f848388923b9c2f54eb9a4
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
msgid "Card B"
msgstr "Kartica B"

# 199cedfd289d424290286e51f5aa5d7a
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:6
msgid ""
"A 3 element list with free space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return -1."
msgstr ""

# 14ccbdd8742c475ca0dcbcc924bc0a41
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:1
msgid "Return a list of ebooks on the device."
msgstr ""

# 3fac472bb6b34fec8096b5bb9a5cdf6b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:3
msgid ""
"If 'carda' or 'cardb' return a list of ebooks on the specific storage card, "
"otherwise return list of ebooks in main memory of device. If a card is "
"specified and no books are on the card return empty list."
msgstr ""

# 2c27339538dd493f82598412624e7dd5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:8
msgid "A BookList."
msgstr ""

# b0fac39b25194a82a0b7e73f6a0f3341
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:1
msgid ""
"Upload a list of books to the device. If a file already exists on the "
"device, it should be replaced. This method should raise a "
":class:`FreeSpaceError` if there is not enough free space on the device. The"
" text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is"
" not None otherwise it must contain the word \"memory\"."
msgstr ""

# 572c808ee64345aba31152f31a63aa86
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:7
msgid "A list of paths"
msgstr ""

# 4ba761a31e134b219a8bfd40d188ff4e
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:8
msgid ""
"A list of file names that the books should have once uploaded to the device."
" len(names) == len(files)"
msgstr ""

# 4c3de9f942874dae9b67b09434286959
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:10
msgid ""
"If not None, it is a list of :class:`Metadata` objects. The idea is to use "
"the metadata to determine where on the device to put the book. len(metadata)"
" == len(files). Apart from the regular cover (path to cover), there may also"
" be a thumbnail attribute, which should be used in preference. The thumbnail"
" attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

# 5474f94fe729485c9825b660af550eef
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:17
msgid ""
"A list of 3-element tuples. The list is meant to be passed to "
":meth:`add_books_to_metadata`."
msgstr ""

# 8344d65a6e5a457ab3e1750e581be791
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
msgid ""
"Add locations to the booklists. This function must not communicate with the "
"device."
msgstr ""

# bc5953b9753e41bdb4ffcc0896556c77
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
msgid "Result of a call to L{upload_books}"
msgstr ""

# 07639cd9a2f845f7b6cc807858c2d78f
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

# 593eac8965ed40179bd93e6a0e912e3f
# ec260584e1ce409c966ee30cad9c6bc2
# c07620330dac43219b8c1277ef72bf16
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:3
msgid ""
"A tuple containing the result of calls to (:meth:`books(oncard=None)`, "
":meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

# 2e4a1fc44a6245f4838a983e2b68e5ae
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.delete_books:1
msgid "Delete books at paths on device."
msgstr ""

# b868467e2fc14f0289e1b03c12e1010d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
msgid ""
"Remove books from the metadata list. This function must not communicate with"
" the device."
msgstr ""

# 8771c91418074b4288b23df9802121b9
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
msgid "paths to books on the device."
msgstr ""

# a9954b86b9064c5a9a9715a686d002ea
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:1
msgid "Update metadata on device."
msgstr ""

# 6e6de0d9ab574c97a4d28e68ddf01ec9
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:1
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

# b3ba1ea8f9d24f8eb359c6768371733d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:3
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

# feb156b3083f498babfaeaeafa4d2465
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.config_widget:1
msgid ""
"Should return a QWidget. The QWidget contains the settings for the device "
"interface"
msgstr ""

# d076c100ee964f87b47a051c7bb9c0dd
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.save_settings:1
msgid ""
"Should save settings to disk. Takes the widget created in "
":meth:`config_widget` and saves all settings to disk."
msgstr ""

# c5509ea404874180a72bd9a2edc66984
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.settings:1
msgid ""
"Should return an opts object. The opts object should have at least one "
"attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

# 5427bbec76574281b71273d277dd76e6
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:1
msgid ""
"provide the driver the current set of plugboards and a function to select a "
"specific plugboard. This method is called immediately before add_books and "
"sync_booklists."
msgstr ""

# 845ec31dc7c84dde89a5b381a6eb3af6
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "pb_func is a callable with the following signature::"
msgstr ""

# 71f5be7e194f463d89e899e608970961
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

# 17b19120dad74614a344686d9749835e
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:8
msgid ""
"You give it the current device name (either the class name or "
"DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or"
" 'device_db'), and the plugboards (you were given those by set_plugboards, "
"the same place you got this method)."
msgstr ""

# a4be9271bc5c4eca85b5b9948d2159ac
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:13
msgid "None or a single plugboard instance."
msgstr ""

# b056acb34ce14c62955535fd111ed963
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
msgid ""
"Set the device name in the driveinfo file to 'name'. This setting will "
"persist until the file is re-created or the name is changed again."
msgstr ""

# 885483ffe5e748168b30a5de8ed38112
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
msgid ""
"Non-disk devices should implement this method based on the location codes "
"returned by the get_device_information() method."
msgstr ""

# fdcf2b7d5187438a94ca066c49a33ec4
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:1
msgid ""
"Given a list of paths, returns another list of paths. These paths point to "
"addable versions of the books."
msgstr ""

# 4425b873890e4be792809a3ccb4d52ca
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:4
msgid ""
"If there is an error preparing a book, then instead of a path, the position "
"in the returned list for that book should be a three tuple: (original_path, "
"the exception instance, traceback)"
msgstr ""

# 708ddece15ad4b4ca09d9c33915d00a4
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.startup:1
msgid ""
"Called when calibre is is starting the device. Do any initialization "
"required. Note that multiple instances of the class can be instantiated, and"
" thus __init__ can be called multiple times, but only one instance will have"
" this method called. This method is called on the device thread, not the GUI"
" thread."
msgstr ""

# 52d002a18e6c47afa1efaf30288bef99
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.shutdown:1
msgid ""
"Called when calibre is shutting down, either for good or in preparation to "
"restart. Do any cleanup required. This method is called on the device "
"thread, not the GUI thread."
msgstr ""

# 9acf6770318944e592ee421be5a93177
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_uid:1
msgid ""
"Must return a unique id for the currently connected device (this is called "
"immediately after a successful call to open()). You must implement this "
"method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

# 088b1856d4b14073bc9f6f2c84842b06
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.ignore_connected_device:1
msgid ""
"Should ignore the device identified by uid (the result of a call to "
"get_device_uid()) in the future. You must implement this method if you set "
"ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately "
"after open(), so if open() caches some state, the driver should reset that "
"state."
msgstr ""

# 31a6defc5a0149deb316b4a70b2b1fe1
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
msgid ""
"Return map of device uid to friendly name for all devices that the user has "
"asked to be ignored."
msgstr ""

# b7ea60e4d4944820989de047ab504126
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

# c73d12aa66df46c6861ad79a9ab10b1e
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
msgid ""
"Implement this method if your device wants to override a particular "
"preference. You must ensure that all call sites that want a preference that "
"can be overridden use device_prefs['something'] instead of "
"prefs['something']. Your method should call "
"device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: "
"metadata management (prefs['manage_device_metadata'])"
msgstr ""

# 1747ca1999a143b4b98de6fc766e0170
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
msgid ""
"Called by the device manager when starting plugins. If this method returns a"
" string, then a) it supports the device manager's dynamic control interface,"
" and b) that name is to be used when talking to the plugin."
msgstr ""

# b4eb963729b144b8a0740b33d12dfb96
# d4d7af7643e949e891d7c1cc6083e68e
# 74417af375184cb694c8b711909d924a
# dfe68351772c4c56b55482e56e311611
# c061525877a4405093f8299c666d8e2c
# 9f662f91c49f415fbebd710635d3797b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:4
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:3
msgid ""
"This method can be called on the GUI thread. A driver that implements this "
"method must be thread safe."
msgstr ""

# 9edc48298602447fbe2b28b7d403b227
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:1
msgid ""
"This method is called to start the plugin. The plugin should begin to accept"
" device connections however it does that. If the plugin is already accepting"
" connections, then do nothing."
msgstr ""

# a69dfab3f4dd4db79d4a4e84081ae658
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:1
msgid ""
"This method is called to stop the plugin. The plugin should no longer accept"
" connections, and should cleanup behind itself. It is likely that this "
"method should call shutdown. If the plugin is already not accepting "
"connections, then do nothing."
msgstr ""

# 9aaf49e41c03440d8364a5eeb1288074
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:1
msgid ""
"Return the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started. Return None if the option does not "
"exist."
msgstr ""

# 4c74087a92724f01b740d31d016116c0
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:1
msgid ""
"Set the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started."
msgstr ""

# f30c949da2b94fc4bd639124de4abf39
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:1
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

# 4048003028834502b23704c890f5624e
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:1
msgid ""
"Called during book matching when a book on the device is matched with a book"
" in calibre's db. The method is responsible for syncronizing data from the "
"device to calibre's db (if needed)."
msgstr ""

# 1cd12d3f50fb42b685273f2d682d0369
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:5
msgid ""
"The method must return a set of calibre book ids changed if calibre's "
"database was changed, None if the database was not changed. If the method "
"returns an empty set then the metadata for the book on the device is updated"
" with calibre's metadata and given back to the device, but no GUI refresh of"
" that book is done. This is useful when the calire data is correct but must "
"be sent to the device."
msgstr ""

# 1b9d05a1794b4eaf8f8fdf43446797a9
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:12
msgid ""
"Extremely important: this method is called on the GUI thread. It must be "
"threadsafe with respect to the device manager's thread."
msgstr ""

# 700fbc6137204e97bad7f078931a722d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:15
msgid ""
"book_id: the calibre id for the book in the database. book_metadata: the "
"Metadata object for the book coming from the device."
msgstr ""

# a9d0da0c94d94c12b8b5684596cb0d51
#: ../../<autodoc>:1
msgid "Bases: :class:`list`"
msgstr ""

# 2cef736ff0e14923b220337fa1a868a9
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:1
msgid "A list of books. Each Book object must have the fields"
msgstr ""

# 8f8cc64925b64335b843b5c0b484303c
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:3
msgid "title"
msgstr ""

# 5cd840a60b5e46c3803d970afc310d33
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:4
msgid "authors"
msgstr ""

# 16892e2c4dcb4998b9c5741d9b4c498c
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:5
msgid "size (file size of the book)"
msgstr ""

# b223e3b8bd39472db4a9608837fadb12
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:6
msgid "datetime (a UTC time tuple)"
msgstr ""

# f7b3e6b948694cbf8e72cb49aaba7151
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:7
msgid "path (path on the device to the book)"
msgstr ""

# fbbabae472ea41c4bb4b8bfda36844a3
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:8
msgid ""
"thumbnail (can be None) thumbnail is either a str/bytes object with the "
"image data or it should have an attribute image_path that stores an absolute"
" (platform native) path to the image"
msgstr ""

# 79731796af8d4fb9b63ff4ac432661ab
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:11
msgid "tags (a list of strings, can be empty)."
msgstr ""

# 750f3538f3b842fa96ff748f87c5e1d5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.supports_collections:1
msgid "Return True if the device supports collections for this book list."
msgstr ""

# 20927ff91cbf437e9a9cb74df3feb11d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.add_book:1
msgid ""
"Add the book to the booklist. Intent is to maintain any device-internal "
"metadata. Return True if booklists must be sync'ed"
msgstr ""

# 1823bb24d987417790200fcd50b00cbd
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.remove_book:1
msgid ""
"Remove a book from the booklist. Correct any device metadata at the same "
"time"
msgstr ""

# 9a8f0c52d59b426e8235036ecea04387
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:1
msgid ""
"Return a dictionary of collections created from collection_attributes. Each "
"entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

# 010854e3c0ad4d258c94f5adf3719f29
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:5
msgid ""
"The list of books is sorted by book title, except for collections created "
"from series, in which case series_index is used."
msgstr ""

# 126674818fb447589c96da7f9f5ed443
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:8
msgid "A list of attributes of the Book object"
msgstr ""

# b7ce1d51ec834336b68c9b162071bea0
#: ../../plugins.rst:111
msgid "USB Mass Storage based devices"
msgstr ""

# 1c99336eea424686b79a3ec3ebc10fd5
#: ../../plugins.rst:113
msgid ""
"The base class for such devices is "
":class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits "
"some of its functionality from its bases, documented below. A typical basic "
"USBMS based driver looks like this:"
msgstr ""

# 77dd5d7b67db40b8bdb7b0213ef9904a
#: ../../<autodoc>:1
msgid ""
"Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, "
":class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

# 3da8d6a2fdae4fcc8705308d21f8138a
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device:1
msgid ""
"This class provides logic common to all drivers for devices that export "
"themselves as USB Mass Storage devices. Provides implementations for "
"mounting/ejecting of USBMS devices on all platforms."
msgstr ""

# 55b239148efb47a89133446b96e2f9e4
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
msgid ""
"String identifying the main memory of the device in the windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr ""

# 04689154fe7745a7aa718610429b6ec7
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
msgid ""
"String identifying the first card of the device in the windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr ""

# 8397ca9d09d94f28bfa2062cfa702c3a
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
msgid ""
"String identifying the second card of the device in the windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr ""

# 8cb7d83ea626462087a999d9516a54ef
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
msgid ""
"Used by the new driver detection to disambiguate main memory from storage "
"cards. Should be a regular expression that matches the main memory mount "
"point assigned by OS X"
msgstr ""

# 5eedbe99f7df40dd9aa26aeb84d41c80
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
msgid "The maximum length of paths created on the device"
msgstr ""

# 4d98fb9d951b4db48aa24312970a2d3b
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
msgid "Put news in its own folder"
msgstr ""

# 0a0854ab39de4cfbb4de64dc66221e3b
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.windows_sort_drives:1
msgid ""
"Called to disambiguate main memory and storage card for devices that do not "
"distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The "
"EB600"
msgstr ""

# 55b75311e05b43be9dfb67b86652cc4d
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.sanitize_callback:1
msgid ""
"Callback to allow individual device drivers to override the path "
"sanitization used by :meth:`create_upload_path`."
msgstr ""

# 081327ec29fb45e8bfeb1fe6af04c2f2
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.filename_callback:1
msgid ""
"Callback to allow drivers to change the default file name set by "
":meth:`create_upload_path`."
msgstr ""

# ce90b4acfb484eae98693ee2d3b47db3
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.sanitize_path_components:1
msgid ""
"Perform any device specific sanitization on the path components for files to"
" be uploaded to the device"
msgstr ""

# 5765ea42319f4440bd7089566df6fa3d
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.get_annotations:1
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

# f6b42ef4d949471b99936ffffa0174a9
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.add_annotation_to_library:1
msgid "Add an annotation to the calibre library"
msgstr ""

# 889cb09692774d6eb05bac0db012c0b5
#: ../../<autodoc>:1
msgid ""
"Bases: :class:`calibre.devices.usbms.cli.CLI`, "
":class:`calibre.devices.usbms.device.Device`"
msgstr ""

# 97a779115e7144e4a070182d7e0ed463
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS:1
msgid ""
"The base class for all USBMS devices. Implements the logic for "
"sending/getting/updating metadata/caching metadata/etc."
msgstr ""

# 076deced24834d6da29a01cff145e71a
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:1
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

# 15a55985913a4ad4bcd944e3cd75ea90
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:3
msgid "The full path to the directory where the associated book is located."
msgstr ""

# e1e7b09062d24ef6b1539419f5cf7e5a
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:4
msgid "The name of the book file without the extension."
msgstr ""

# c8081786e2f04cd89f21d0007634e33d
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:5
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

# b28e56ee9f244d64a04abe93c1759c35
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:7
msgid "The full path to the ebook file"
msgstr ""

# 04aedd37e7b846a590d44fd5d55e1024
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.normalize_path:1
msgid "Return path with platform native path separators"
msgstr ""

# 1cf8d636e68d405da4e8d39887ac576f
#: ../../plugins.rst:159
msgid "User Interface Actions"
msgstr ""

# a112fb06e6214efaa9ead75cda1b0ace
#: ../../plugins.rst:161
msgid ""
"If you are adding your own plugin in a zip file, you should subclass both "
"InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` "
"method of you InterfaceActionBase subclass must return an instantiated "
"object of your InterfaceBase subclass."
msgstr ""

# 77568f0da2b745d99565d8c9c9e540f3
#: ../../<autodoc>:1
msgid "Bases: :class:`PyQt4.QtCore.QObject`"
msgstr ""

# f160383ea85c404f82ffd25a7c8bb49f
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:1
msgid ""
"A plugin representing an \"action\" that can be taken in the graphical user "
"interface. All the items in the toolbar and context menus are implemented by"
" these plugins."
msgstr ""

# 95fdfc049fdc4ca1b0ea1ee38c5fde91
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:5
msgid ""
"Note that this class is the base class for these plugins, however, to "
"integrate the plugin with calibre's plugin system, you have to make a "
"wrapper class that references the actual plugin. See the "
":mod:`calibre.customize.builtins` module for examples."
msgstr ""

# 4f70b4fe67494a8790c133b316ce3d6d
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:10
msgid ""
"If two :class:`InterfaceAction` objects have the same name, the one with "
"higher priority takes precedence."
msgstr ""

# dd52c3e1cc0f47639b10cf9e9f2c426f
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:13
msgid ""
"Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, "
":meth:`location_selected` :meth:`shutting_down` and "
":meth:`initialization_complete` methods."
msgstr ""

# 63acfd245b1046fa9f6dc8aecd546c15
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:17
msgid ""
"Once initialized, this plugin has access to the main calibre GUI via the "
":attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

# 98eb43ac3e3d4622985731e80f3127b0
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:22
msgid ""
"To access the actual plugin, use the :attr:`interface_action_base_plugin` "
"attribute, this attribute only becomes available after the plugin has been "
"initialized. Useful if you want to use methods from the plugin class like "
"do_user_config()."
msgstr ""

# e6cc2de873b5462d820aa4d83bc3d8b5
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:27
msgid ""
"The QAction specified by :attr:`action_spec` is automatically create and "
"made available as ``self.qaction``."
msgstr ""

# 734e332f6fdd4ef4b904d18b3fa31d8e
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.name:1
msgid ""
"The plugin name. If two plugins with the same name are present, the one with"
" higher priority takes precedence."
msgstr ""

# c342b11276514f2bb457e070b613cde7
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.priority:1
msgid ""
"The plugin priority. If two plugins with the same name are present, the one "
"with higher priority takes precedence."
msgstr ""

# 5317fb36785f4d53837a6528255191a7
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.popup_type:1
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

# 1dd3cb9b901f45db8d21b7e0abf06359
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.auto_repeat:1
msgid ""
"Whether this action should be auto repeated when its shortcut key is held "
"down."
msgstr ""

# f172c8ff45d7472ab22e44ef44ef1aa0
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.action_spec:1
msgid ""
"Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and"
" keyboard shortcut can be None shortcut must be a string, None or tuple of "
"shortcuts. If None, a keyboard shortcut corresponding to the action is not "
"registered. If you pass an empty tuple, then the shortcut is registered with"
" no default key binding."
msgstr ""

# bb99d185c656427b97316764ec55d115
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.action_add_menu:1
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

# c3a324bac1a74842bb2391c73b200887
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
msgid ""
"If True, a clone of self.qaction is added to the menu of self.qaction If you"
" want the text of this action to be different from that of self.qaction, set"
" this variable to the new text"
msgstr ""

# 3c6a8b167ff64d88b80ecc59c6fff503
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.dont_add_to:1
msgid ""
"Set of locations to which this action must not be added. See "
":attr:`all_locations` for a list of possible locations"
msgstr ""

# 4f7b091ee4a0403c82c103650856c7a8
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.dont_remove_from:1
msgid ""
"Set of locations from which this action must not be removed. See "
":attr:`all_locations` for a list of possible locations"
msgstr ""

# 0bc6f8c05a2142bab3460e9f351a007c
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.action_type:1
msgid ""
"Type of action 'current' means acts on the current view 'global' means an "
"action that does not act on the current view, but rather on calibre as a "
"whole"
msgstr ""

# b8e316a5257b411fa1d92967c09927a2
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accepts_drops:1
msgid ""
"If True, then this InterfaceAction will have the opportunity to interact "
"with drag and drop events. See the methods, :meth:`accept_enter_event`, "
":meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

# aedf04bcf17d46f19efe9cab9c1501ec
# c235ae16542b4594a79cd146925d9b4f
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
msgid ""
"This method should return True iff this interface action is capable of "
"handling the drag event. Do not call accept/ignore on the event, that will "
"be taken care of by the calibre UI."
msgstr ""

# e4681b002bfa4fe4a69ec9706c66f628
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.drop_event:1
msgid ""
"This method should perform some useful action and return True iff this "
"interface action is capable of handling the drop event. Do not call "
"accept/ignore on the event, that will be taken care of by the calibre UI. "
"You should not perform blocking/long operations in this function. Instead "
"emit a signal or use QTimer.singleShot and return quickly. See the builtin "
"actions for examples."
msgstr ""

# 78fc4ed78da246e78d4b49ac4a5947ad
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:1
msgid ""
"Convenience method to easily add actions to a QMenu. Returns the created "
"QAction, This action has one extra attribute calibre_shortcut_unique_name "
"which if not None refers to the unique name under which this action is "
"registered with the keyboard manager."
msgstr ""

# 226b2c33702b419e89c94585123d3879
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:6
msgid "The QMenu the newly created action will be added to"
msgstr ""

# 9dfb2c3a7bdd40588464380ea1da0a0c
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:7
msgid ""
"A unique name for this action, this must be globally unique, so make it as "
"descriptive as possible. If in doubt add a uuid to it."
msgstr ""

# f9213296c1a94e218e3f6056f2fe27af
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:10
msgid "The text of the action."
msgstr ""

# 78e9e87ebae242849258ce1a5df8a344
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:11
msgid ""
"Either a QIcon or a file name. The file name is passed to the I() builtin, "
"so you do not need to pass the full path to the images directory."
msgstr ""

# 226ba235846a418e8010b7e7ac76f762
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:14
msgid ""
"A string, a list of strings, None or False. If False, no keyboard shortcut "
"is registered for this action. If None, a keyboard shortcut with no default "
"keybinding is registered. String and list of strings register a shortcut "
"with default keybinding as specified."
msgstr ""

# ba92d951dc554b2fb23c889a0ea95d60
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:18
msgid "A description for this action. Used to set tooltips."
msgstr ""

# 23900b17d0994f94b202202a49d42385
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:20
msgid ""
"A callable which is connected to the triggered signal of the created action."
msgstr ""

# c46a2249f93c4d2e8a4eb84affe63421
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:22
msgid ""
"The test displayed to the user when customizing the keyboard shortcuts for "
"this action. By default it is set to the value of ``text``."
msgstr ""

# 2a69141f49234890a5a9e02ff8372963
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.genesis:1
msgid ""
"Setup this plugin. Only called once during initialization. self.gui is "
"available. The action specified by :attr:`action_spec` is available as "
"``self.qaction``."
msgstr ""

# f1011666fc47499c893b953f44d358fe
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.location_selected:1
msgid ""
"Called whenever the book list being displayed in calibre changes. Currently "
"values for loc are: ``library, main, card and cardb``."
msgstr ""

# 164974be755a4ad68e879adc02ed0935
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.location_selected:4
msgid ""
"This method should enable/disable this action and its sub actions as "
"appropriate for the location."
msgstr ""

# 27bec061c0ab4265a030f05232e352d5
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:1
msgid "Called whenever the current library is changed."
msgstr ""

# 7703cf95b0d941509d24eb117fbe0f8a
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:3
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

# baafbca6ba774ec692276686ff2f4f1f
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
msgid ""
"Called once per action when the layout of the main GUI is completed. If your"
" action needs to make changes to the layout, they should be done here, "
"rather than in :meth:`initialization_complete`."
msgstr ""

# 9d5a315f147346cab999167249381e5a
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.initialization_complete:1
msgid ""
"Called once per action when the initialization of the main GUI is completed."
msgstr ""

# ff056f39702046dd87605b0cd9cf1585
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.shutting_down:1
msgid ""
"Called once per plugin when the main GUI is in the process of shutting down."
" Release any used resources, but try not to block the shutdown for long "
"periods of time."
msgstr ""

# 3656155909c149bc919096751c84c681
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.shutting_down:5
msgid ""
"False to halt the shutdown. You are responsible for telling the user why the"
" shutdown was halted."
msgstr ""

# a2888592fcf94cf6a63da0f4acc7d377
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.InterfaceActionBase.load_actual_plugin:1
msgid "This method must return the actual interface action plugin object."
msgstr ""

# 68ce890f22ea4c41bb4c128e99ab040d
#: ../../plugins.rst:176
msgid "Preferences Plugins"
msgstr ""

# 38dcad8fda9047f6b289aed9b0f81c72
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:1
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

# c8c2392ea09649b98397e45781725e51
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:3
msgid ""
"This plugin has only one important method :meth:`create_widget`. The various"
" fields of the plugin control how it is categorized in the UI."
msgstr ""

# 061240e5222f429fa8365fab7638bbc5
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.config_widget:1
msgid ""
"Import path to module that contains a class named ConfigWidget which "
"implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

# 6c69b98d44724f9380476319a41a36e2
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.category_order:1
msgid ""
"Where in the list of categories the :attr:`category` of this plugin should "
"be."
msgstr ""

# 3ffc477c8df24f02800341991db65987
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.name_order:1
msgid ""
"Where in the list of names in a category, the :attr:`gui_name` of this "
"plugin should be"
msgstr ""

# eaf652e338d04c74ae0d6f78ee487f42
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.category:1
msgid "The category this plugin should be in"
msgstr ""

# dbc2fe685f68470cb832c8ee9cffc1b2
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.gui_category:1
msgid "The category name displayed to the user for this plugin"
msgstr ""

# 3d3a6530e09e4503a2d93c80f6548074
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.gui_name:1
msgid "The name displayed to the user for this plugin"
msgstr ""

# 4d0612d968df43d7b5e6e19fb3d1795d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.icon:1
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

# b6da5711b84d4084bc49b6b7406973f1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.description:1
msgid "The description used for tooltips and the like"
msgstr ""

# 836d22eaf8b54d6db9a3854943081054
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:1
msgid ""
"Create and return the actual Qt widget used for setting this group of "
"preferences. The widget must implement the "
":class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

# 42d3f56e713c4e80afa571997bc067e6
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:5
msgid ""
"The default implementation uses :attr:`config_widget` to instantiate the "
"widget."
msgstr ""

# 3673b6865b9745e594783450a15df73e
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface:1
msgid ""
"This class defines the interface that all widgets displayed in the "
"Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base "
"class that implements this interface and defines various convenience methods"
" as well."
msgstr ""

# 73df617234de4e6085b30c7b65098c04
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
msgid ""
"This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

# 89c370bbeea84ce39010c5ffdc3ebd1d
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

# 637b28e3315843ef84d0f806c9cfc1f4
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
msgid "The tooltip for the Restore to defaults button"
msgstr ""

# 7b22227f2aaf4d9e9b9086e6678f1f2e
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
msgid ""
"If True the Preferences dialog will not allow the user to set any more "
"preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

# 72f0a77bedf34daa98b1d3b50839350a
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
msgid ""
"Called once before the widget is displayed, should perform any necessary "
"setup."
msgstr ""

# 40b8f17e5c6a4231b2ad93e2fddcde4f
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
msgid "The main calibre graphical user interface"
msgstr ""

# 01664cca7e3848a686e55aa9ec97902d
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
msgid ""
"Should set all config values to their initial values (the values stored in "
"the config files)."
msgstr ""

# b08715d683834f33a748a17f236f0d7e
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
msgid "Should set all config values to their defaults."
msgstr ""

# 88e52c8c580d46f9b603ea63c492f4b4
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.commit:1
msgid ""
"Save any changed settings. Return True if the changes require a restart, "
"False otherwise. Raise an :class:`AbortCommit` exception to indicate that an"
" error occurred. You are responsible for giving the user feedback about what"
" the error is and how to correct it."
msgstr ""

# 955283ee94fb4e8eac2a7409d0af3564
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
msgid ""
"Called once after this widget is committed. Responsible for causing the gui "
"to reread any changed settings. Note that by default the GUI re-initializes "
"various elements anyway, so most widgets won't need to use this method."
msgstr ""

# 0adfbce6771b4088a93f7c39e65fda0c
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase:1
msgid ""
"Base class that contains code to easily add standard config widgets like "
"checkboxes, combo boxes, text fields and so on. See the :meth:`register` "
"method."
msgstr ""

# 62a86070a939432ab14ff4fc820e3d43
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase:5
msgid ""
"This class automatically handles change notification, resetting to default, "
"translation between gui objects and config objects, etc. for registered "
"settings."
msgstr ""

# 379c5bc86b2d47728729a8cbcc249f9b
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase:9
msgid ""
"If your config widget inherits from this class but includes setting that are"
" not registered, you should override the :class:`ConfigWidgetInterface` "
"methods and call the base class methods inside the overrides."
msgstr ""

# e1675de5b597428692198b48d3d9850c
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:1
msgid "Register a setting."
msgstr ""

# c2d2886adbdd4848b3421ceeea4b2873
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:3
msgid "The setting name"
msgstr ""

# 1b96f0b8c3864fad948ac38b5c670dc0
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:4
msgid "The config object that reads/writes the setting"
msgstr ""

# bb64ec7e26204855834e965e78a53961
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:5
msgid ""
"The name of the GUI object that presents an interface to change the setting."
" By default it is assumed to be ``'opt_' + name``."
msgstr ""

# 302e55e5d8f24107ae03738617bcf278
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:8
msgid ""
"If this setting is a multiple choice (combobox) based setting, the list of "
"choices. The list is a list of two element tuples of the form: ``[(gui name,"
" value), ...]``"
msgstr ""

# 93e5f4f7d6484bdf92c857a7b6d50919
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:11
msgid ""
"The class responsible for managing this setting. The default class handles "
"almost all cases, so this param is rarely used."
msgstr ""

# c6f1745c67eb47e6bccf83aa71168539
#: ../../plugins.rst:192
msgid "Viewer plugins"
msgstr ""

# 3c06b522a22447f6bc8e3c7bbfd4e389
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.type:1
msgid "These plugins are used to add functionality to the calibre viewer."
msgstr ""

# 1b37131eb9fe4912904c86c6ae6d7a64
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.load_fonts:1
msgid ""
"This method is called once at viewer startup. It should load any fonts it "
"wants to make available. For example::"
msgstr ""

# 800393ec5143498ebaba06d988155a5d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.load_javascript:1
msgid ""
"This method is called every time a new HTML document is loaded in the "
"viewer. Use it to load javascript libraries into the viewer. For example::"
msgstr ""

# c1b4fa0d1e68427a825b418284c8bc3b
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.run_javascript:1
msgid ""
"This method is called every time a document has finished loading. Use it in "
"the same way as load_javascript()."
msgstr ""

# e456e25999964d498b9ea7ca828ab74e
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.customize_ui:1
msgid ""
"This method is called once when the viewer is created. Use it to make any "
"customizations you want to the viewer's user interface. For example, you can"
" modify the toolbars via ui.tool_bar and ui.tool_bar2."
msgstr ""

# 6b88fd2ae1334920b2fa1d7bb6bc803c
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.customize_context_menu:1
msgid ""
"This method is called every time the context (right-click) menu is shown. "
"You can use it to customize the context menu. ``event`` is the context menu "
"event and hit_test_result is the QWebHitTestResult for this event in the "
"currently loaded document."
msgstr ""
