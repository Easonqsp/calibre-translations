# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-06 10:00+0530\n"
"PO-Revision-Date: 2015-02-12 07:33+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Chinese (China) (http://www.transifex.com/projects/p/calibre/language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# f7942f2f69d040759d0cc8bc8798d10e
#: ../../home/kovid/work/calibre/manual/xpath.rst:4
msgid "XPath Tutorial"
msgstr ""

# 7df1588f6a7b412196f77a9e3bc15bbc
#: ../../home/kovid/work/calibre/manual/xpath.rst:6
msgid ""
"In this tutorial, you will be given a gentle introduction to `XPath "
"<http://en.wikipedia.org/wiki/XPath>`_, a query language that can be used to"
" select arbitrary parts of `HTML <http://en.wikipedia.org/wiki/HTML>`_ "
"documents in calibre. XPath is a widely used standard, and googling it will "
"yield a ton of information. This tutorial, however, focuses on using XPath "
"for ebook related tasks like finding chapter headings in an unstructured "
"HTML document."
msgstr ""

# db81b806c4844b0dba4012e251b8107b
#: ../../home/kovid/work/calibre/manual/xpath.rst:0
msgid "Contents"
msgstr "内容"

# 1e0d391172434a13b2bde11e799f2524
#: ../../home/kovid/work/calibre/manual/xpath.rst:19
msgid "Selecting by tagname"
msgstr ""

# ece112fd4cab4476ac1939a97c1f6afe
#: ../../home/kovid/work/calibre/manual/xpath.rst:21
msgid ""
"The simplest form of selection is to select tags by name. For example, "
"suppose you want to select all the ``<h2>`` tags in a document. The XPath "
"query for this is simply::"
msgstr ""

# cb40fc0c67984f19893407ad697be884
#: ../../home/kovid/work/calibre/manual/xpath.rst:27
msgid ""
"The prefix `//` means *search at any level of the document*. Now suppose you"
" want to search for ``<span>`` tags that are inside ``<a>`` tags. That can "
"be achieved with::"
msgstr ""

# c245058168b840b8bf203f195211f53f
#: ../../home/kovid/work/calibre/manual/xpath.rst:33
msgid ""
"If you want to search for tags at a particular level in the document, change"
" the prefix::"
msgstr ""

# 8ba885fbcebd4efb964f2b8b91a21dcc
#: ../../home/kovid/work/calibre/manual/xpath.rst:39
msgid ""
"This will match only ``<p>A very short ebook to demonstrate the use of "
"XPath.</p>`` in the :ref:`sample_ebook` but not any of the other ``<p>`` "
"tags. The ``h:`` prefix in the above examples is needed to match XHTML tags."
" This is because internally, calibre represents all content as XHTML. In "
"XHTML tags have a *namespace*, and ``h:`` is the namespace prefix for HTML "
"tags."
msgstr ""

# d1513ccc297b403f958c34b1499271f4
#: ../../home/kovid/work/calibre/manual/xpath.rst:45
msgid ""
"Now suppose you want to select both ``<h1>`` and ``<h2>`` tags. To do that, "
"we need a XPath construct called *predicate*. A :dfn:`predicate` is simply a"
" test that is used to select tags. Tests can be arbitrarily powerful and as "
"this tutorial progresses, you will see more powerful examples. A predicate "
"is created by enclosing the test expression in square brackets::"
msgstr ""

# 8215c1732b4741bdac4a39878c0bec1b
#: ../../home/kovid/work/calibre/manual/xpath.rst:53
msgid ""
"There are several new features in this XPath expression. The first is the "
"use of the wildcard ``*``. It means *match any tag*. Now look at the test "
"expression ``name()='h1' or name()='h2'``. :term:`name()` is an example of a"
" *built-in function*. It simply evaluates to the name of the tag. So by "
"using it, we can select tags whose names are either `h1` or `h2`. Note that "
"the :term:`name()` function ignores namespaces so that there is no need for "
"the ``h:`` prefix. XPath has several useful built-in functions. A few more "
"will be introduced in this tutorial."
msgstr ""

# d42a5ebbd1ef4e108c5e75c463c2fea5
#: ../../home/kovid/work/calibre/manual/xpath.rst:62
msgid "Selecting by attributes"
msgstr ""

# b99f4c35aa4e4965a4ea17a8fbfe23c7
#: ../../home/kovid/work/calibre/manual/xpath.rst:64
msgid ""
"To select tags based on their attributes, the use of predicates is "
"required::"
msgstr ""

# 9158eeac3fcb4dfe9caa9b2eb7270d8e
#: ../../home/kovid/work/calibre/manual/xpath.rst:70
msgid ""
"Here, the ``@`` operator refers to the attributes of the tag. You can use "
"some of the `XPath built-in functions`_ to perform more sophisticated "
"matching on attribute values."
msgstr ""

# 41ae0e6842d842a68688936b83da3cdb
#: ../../home/kovid/work/calibre/manual/xpath.rst:76
msgid "Selecting by tag content"
msgstr ""

# 866cd4d1ca1f400492902ab031c2ec0b
#: ../../home/kovid/work/calibre/manual/xpath.rst:78
msgid ""
"Using XPath, you can even select tags based on the text they contain. The "
"best way to do this is to use the power of *regular expressions* via the "
"built-in function :term:`re:test()`::"
msgstr ""

# 7732d0b8cfc744dd95a8a4fe5977aa78
#: ../../home/kovid/work/calibre/manual/xpath.rst:84
msgid ""
"Here the ``.`` operator refers to the contents of the tag, just as the ``@``"
" operator referred to its attributes."
msgstr ""

# f03afa10320e44018f17cf6aeb956654
#: ../../home/kovid/work/calibre/manual/xpath.rst:90
msgid "Sample ebook"
msgstr ""

# c71c9d03330548f8bcbee6d6788cedda
#: ../../home/kovid/work/calibre/manual/xpath.rst:96
msgid "XPath built-in functions"
msgstr ""

# da00ed3f97c84451871f2ff81f1b8e2d
#: ../../home/kovid/work/calibre/manual/xpath.rst:99
msgid "name()"
msgstr ""

# 7d110e3f9a2f43079f1598b7571a9752
#: ../../home/kovid/work/calibre/manual/xpath.rst:101
msgid "The name of the current tag."
msgstr ""

# 511915699295472da728f3e6b1f14163
#: ../../home/kovid/work/calibre/manual/xpath.rst:102
msgid "contains()"
msgstr ""

# 351f6f56b88d448d92b68c9061cf8f52
#: ../../home/kovid/work/calibre/manual/xpath.rst:104
msgid "``contains(s1, s2)`` returns `true` if s1 contains s2."
msgstr ""

# 9d375a345ace4426a4ac82e2f036f266
#: ../../home/kovid/work/calibre/manual/xpath.rst:105
msgid "re:test()"
msgstr ""

# b0291dbc01554844ae4dec00562be3d6
#: ../../home/kovid/work/calibre/manual/xpath.rst:107
msgid ""
"``re:test(src, pattern, flags)`` returns `true` if the string `src` matches "
"the regular expression `pattern`. A particularly useful flag is ``i``, it "
"makes matching case insensitive. A good primer on the syntax for regular "
"expressions can be found at `regexp syntax "
"<https://docs.python.org/2.7/library/re.html>`_"
msgstr ""
