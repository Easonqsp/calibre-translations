# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.24.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-13 14:37+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/db_api.rst:4
# c68f1ee7d82a4ea7a13bd7f6579d3ced
msgid "API Documentation for the database interface"
msgstr ""

#: ../../home/kovid/work/calibre/manual/db_api.rst:9
# 1c5ecdd02363407ab4fa86dc3669cb03
msgid "This API is thread safe (it uses a multiple reader, single writer locking scheme).  You can access this API like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/db_api.rst:14
# 3dbf2913ca304c5e99e5896247dd05d7
msgid "If you are in a calibre plugin that is part of the main calibre GUI, you get access to it like this instead::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:1
# 8467e4d74e864f05aed4e2030411c230
msgid "An in-memory cache of the metadata.db file from a calibre library. This class also serves as a threadsafe API for accessing the database. The in-memory cache is maintained in normal form for maximum performance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:5
# cb06aa99e206497083122a8356689880
msgid "SQLITE is simply used as a way to read and write from metadata.db robustly. All table reading/sorting/searching/caching logic is re-implemented. This was necessary for maximum performance and flexibility."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:1
# 84dc5b4b44714a75a0e3427f3da3e467
msgid "Add the specified books to the library. Books should be an iterable of 2-tuples, each 2-tuple of the form :code:`(mi, format_map)` where mi is a Metadata object and format_map is a dictionary of the form :code:`{fmt: path_or_stream}`, for example: :code:`{'EPUB': '/path/to/file.epub'}`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:6
# 832298d7344a4d7baebc6cd85c07718e
msgid "Returns a pair of lists: :code:`ids, duplicates`. ``ids`` contains the book ids for all newly created books in the database. ``duplicates`` contains the :code:`(mi, format_map)` for all books that already exist in the database as per the simple duplicate detection heuristic used by :meth:`has_book`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_custom_book_data:1
# eeee7ceea33742b6b862873408c9b3f0
msgid "Add data for name where val_map is a map of book_ids to values. If delete_first is True, all previously stored data for name will be removed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:1
# 5556f8816e3049e893ae87b20146bdc1
msgid "Add a format to the specified book. Return True of the format was added successfully."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:3
# fddae6dfd29c44dab0cb070bb80c104b
msgid "If True replace existing format, otherwise if the format already exists, return False."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:4
# 682fee20fd0249d38f475dcbb249bf9d
msgid "If True, file type plugins are run on the format before and after being added."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:5
# 035faea01410462ea574c6daff356ce5
msgid "Internal use only."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_book_ids:1
# 1398ab627a7c40ec9096c635698575d7
msgid "Frozen set of all known book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_for:1
# fe8d023e28964de9ac6b148300e73d68
msgid "Same as field_for, except that it operates on multiple books at once"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_ids:1
# a04bc1754ed54ad283398d520419b27e
msgid "Frozen set of ids for all values in the field ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_names:1
# 0356c3801990455a93c48e6fd5a3a4da
msgid "Frozen set of all fields names (should only be used for many-one and many-many fields)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:1
# 56b758c6085140f59342a58934ca9a66
msgid "Return author data as a dictionary with keys: name, sort, link"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:3
# b52e5e58ad544efcb8e3c3c289c3dcc6
msgid "If no authors with the specified ids are found an empty dictionary is returned. If author_ids is None, data for all authors is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_sort_from_authors:1
# e5bb7917fbf245deb33c16533b531693
msgid "Given a list of authors, return the author_sort string for the authors, preferring the author sort associated with the author over the computed string."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:1
# dcfc9345daea47fa86e695a53ff8c2df
msgid "Return all the books associated with the item identified by ``item_id``, where the item belongs to the field ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:4
# d681c163a07f4a11ac3cd842aa04accf
msgid "Returned value is a set of book ids, or the empty set if the item or the field does not exist."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_cover_to:1
# 8207c77c5ba649578ce47789fb3b7c6f
msgid "Copy the cover to the file like object ``dest``. Returns False if no cover exists or dest is the same file as the current cover. dest can also be a path in which case the cover is copied to it if and only if the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_format_to:1
# 8938aad83e78428f811eb1b682c0fb99
msgid "Copy the format ``fmt`` to the file like object ``dest``. If the specified format does not exist, raises :class:`NoSuchFormat` error. dest can also be a path, in which case the format is copied to it, iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:1
# db0e284965224777b081ca8c93bff4a7
msgid "Return the cover image or None. By default, returns the cover as a bytestring."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:4
# 2ea29a8112184a658e87752f4d53707a
msgid "WARNING: Using as_path will copy the cover to a temp file and return the path to the temp file. You should delete the temp file when you are done with it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:8
# 714ca57df45845278fceb25a7855fbdc
msgid "If True return the image as an open file object (a SpooledTemporaryFile)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:9
# cf2460bee1b64831bda1180e6b3723dc
msgid "If True return the image as a QImage object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:10
# 9442e9c38fc941a5ac5d06c026469b56
msgid "If True return the image as a path pointing to a temporary file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.data_for_find_identical_books:1
# 6d144a9e7fa24217aa454f2d0dfc3ab6
msgid "Return data that can be used to implement :meth:`find_identical_books` in a worker process without access to the db. See db.utils for an implementation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.data_for_has_book:1
# 2046bda705bb4041b2864a84a933e47c
msgid "Return data suitable for use in :meth:`has_book`. This can be used for an implementation of :meth:`has_book` in a worker process without access to the db."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.delete_custom_book_data:1
# b299ff6c9834481b8eb36d793d6f8922
msgid "Delete data for name. By default deletes all data, if you only want to delete data for some book ids, pass in a list of book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.embed_metadata:1
# 1e13dc7e4fc74f08820057e34ff64dec
msgid "Update metadata in all formats of the specified book_ids to current metadata in the database."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.fast_field_for:1
# 1c4a5f9fafb344cca2f2c70f54a2d08b
msgid "Same as field_for, except that it avoids the extra lookup to get the field object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:1
# d6c7cc7fd46449cab10d4df0fcf61fb9
msgid "Return the value of the field ``name`` for the book identified by ``book_id``. If no such book exists or it has no defined value for the field ``name`` or no such field exists, then ``default_value`` is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:6
# 7e075cf644024b168f9c9f4191f5e814
msgid "``default_value`` is not used for title, title_sort, authors, author_sort and series_index. This is because these always have values in the db. ``default_value`` is used for all custom columns."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:10
# a446890764aa4fcf922c76d8813f7367
msgid "The returned value for is_multiple fields are always tuples, even when no values are found (in other words, default_value is ignored). The exception is identifiers for which the returned value is always a dict. The returned tuples are always in link order, that is, the order in which they were created."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_ids_for:1
# e2ea94fa57984ee6ad0a7e0e80b93dd0
msgid "Return the ids (as a tuple) for the values that the field ``name`` has on the book identified by ``book_id``. If there are no values, or no such book, or no such field, an empty tuple is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.find_identical_books:1
# 044ee85851b6436f865d966300c9d507
msgid "Finds books that have a superset of the authors in mi and the same title (title is fuzzy matched). See also :meth:`data_for_find_identical_books`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:1
# 3a0eee7e9f914c989aeec500d9362ab8
msgid "Return the ebook format as a bytestring or `None` if the format doesn't exist, or we don't have permission to write to the ebook file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:4
# befbaddc7af74db0bd5692197227b759
msgid "If True the ebook format is returned as a file object. Note that the file object is a SpooledTemporaryFile, so if what you want to do is copy the format to another file, use :meth:`copy_format_to` instead for performance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:8
# 9fdf01b6f50b4d3480ff6848e7d6bb89
msgid "Copies the format file to a temp file and returns the path to the temp file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:10
# ee3d821c1416496d9f29aa063e3fd679
msgid "If True and returning a path the filename is the same as that used in the library. Note that using this means that repeated calls yield the same temp file (which is re-created each time)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:1
# ee06f38a71994a1093e9428a21339e08
msgid "Return absolute path to the ebook file of format `format`. You should almost never use this, as it breaks the threadsafe promise of this API. Instead use, :meth:`copy_format_to`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:5
# a5d1a45da8ab49958a1b38a36119450f
msgid "Currently used only in calibredb list, the viewer, edit book, compare_format to original format, open with and the catalogs (via get_data_as_dict())."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:9
# 9f91205485db42b8a5710a73c96a4303
msgid "Apart from the viewer, open with and edit book, I don't believe any of the others do any file write I/O with the results of this call."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_hash:1
# 3180fc52e79540998f5921bdd8111972
msgid "Return the hash of the specified format for the specified book. The kind of hash is backend dependent, but is usually SHA-256."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:1
# a87f3f343eb641a183f07f5945f382fd
msgid "Return the path, size and mtime for the specified format for the specified book. You should not use path unless you absolutely have to, since accessing it directly breaks the threadsafe guarantees of this API. Instead use the :meth:`copy_format_to` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:6
# 8f29c75252e444eb9374ee58b1977536
msgid "If ``True`` cached values are used, otherwise a slow filesystem access is done. The cache values could be out of date if access was performed to the filesystem outside of this API."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:10
# f24f8de5719249ca98cfc0694c4e64d4
msgid "If ``True`` The max_size field of the database is updates for this book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.formats:1
# bc12e78486bd4979bc562ed9a3e880e9
msgid "Return tuple of all formats for the specified book. If verify_formats is True, verifies that the files exist on disk."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_categories:1
# 3852d353a79c4fbe8577b07a3a3d343a
msgid "Used internally to implement the Tag Browser"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_custom_book_data:1
# 8a87973eafc5450cafa18c317da3bc42
msgid "Get data for name. By default returns data for all book_ids, pass in a list of book ids if you only want some data. Returns a map of book_id to values. If a particular value could not be decoded, uses default for it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_id_map:1
# eacec721b17d4b04a76a9c4d00beb4f7
msgid "Return a mapping of id numbers to values for the specified field. The field must be a many-one or many-many field, otherwise a ValueError is raised."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_ids_for_custom_book_data:1
# 149ab77e4bae47cd983b89683d418a66
msgid "Return the set of book ids for which name has data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_id:1
#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_ids:1
# 50a756279ebe4d19b90c59098c1af991
# da5a542ba8df45b08eef4d79952e345e
msgid "Return the item id for item_name (case-insensitive)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_name:1
# 080e4da51ff943308660d752e0ce79e9
msgid "Return the item name for the item specified by item_id in the specified field. See also :meth:`get_id_map`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_metadata:1
# 78760258af8f4ff79163582911225aa4
msgid "Return metadata for the book identified by book_id as a :class:`Metadata` object. Note that the list of formats is not verified. If get_cover is True, the cover is returned, either a path to temp file as mi.cover or if cover_as_data is True then as mi.cover_data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:1
# 0ab85af7dd0541e0814b01ec59038ffc
msgid "Return the next series index for the specified series, taking into account the various preferences that control next series number generation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:4
# 860a4eee26a4441fb6853338f8b1eb8d
msgid "The series-like field (defaults to the builtin series column)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:5
# fab3293deef84501a09fdbd92e0a78ea
msgid "If True, returns a mapping of book_id to current series_index value instead."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_proxy_metadata:1
# 80668881633f431aaccc51acaa83dec2
msgid "Like :meth:`get_metadata` except that it returns a ProxyMetadata object that only reads values from the database on demand. This is much faster than get_metadata when only a small number of fields need to be accessed from the returned metadata object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_usage_count_by_id:1
# 793741d503c5419c85edb8f839899661
msgid "Return a mapping of id to usage count for all values of the specified field, which must be a many-one or many-many field."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_book:1
# 730ec6ad41e146a58b39ccc5826cd73f
msgid "Return True iff the database contains an entry with the same title as the passed in Metadata object. The comparison is case-insensitive. See also :meth:`data_for_has_book`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_format:1
# a3dcb815a6544d7eb3c6d7ebe5c032e7
msgid "Return True iff the format exists on disk"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_id:1
# 37d6d19d5ae04cc384c138073cb0aca2
msgid "Return True iff the specified book_id exists in the db"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.init:1
# b69ccc6012a94fffbbeef858b3dde7aa
msgid "Initialize this cache with data from the backend."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:1
# 6fa51101bb014814bf26bbcbbc688772
msgid "Return a list of sorted book ids. If ids_to_sort is None, all book ids are returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:4
# c8ffb337ce724892802d30b74d65c025
msgid "fields must be a list of 2-tuples of the form (field_name, ascending=True or False). The most significant field is the first 2-tuple."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.pref:1
# f9e1b1ec1f604c8ba1dadbfbe27531fb
msgid "Return the value for the specified preference or the value specified as ``default`` if the preference is not set."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.read_backup:1
# 26dd03170b024aac98a8300dbd7bae3a
msgid "Return the OPF metadata backup for the book as a bytestring or None if no such backup exists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_books:1
# 0d5fefdab41c42198b2b30436459bb18
msgid "Remove the books specified by the book_ids from the database and delete their format files. If ``permanent`` is False, then the format files are not deleted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:1
# a5b14c8f76ea489eba711f740ed0ee55
msgid "Remove the specified formats from the specified books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:3
# 2bd1fe08122a4ac2ab14e7ac4b4c9b1b
msgid "A mapping of book_id to a list of formats to be removed from the book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:4
# d1ab127d0d4e4cc3b83ed45035afb89c
msgid "If True, only remove the record for the format from the db, do not delete the actual format file from the filesystem."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_items:1
# 22888c594e054454a693985df02c27d0
msgid "Delete all items in the specified field with the specified ids. Returns the set of affected book ids. ``restrict_to_book_ids`` is an optional set of books ids. If specified the items will only be removed from those books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:1
# 15c4395f48dd4364a36f60650c4a6e8a
msgid "Rename items from a many-one or many-many field such as tags or series."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:3
# 9c7f652e2d964b1d88832640dd138ec4
msgid "When renaming in a series-like field also change the series_index values."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:4
# 2d3453f54d0d44939311f89fefada620
msgid "An optional set of book ids for which the rename is to be performed, defaults to all books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_book:1
# ce28346794364109a5d4544fc4faf8bb
msgid "Restore the book entry in the database for a book that already exists on the filesystem"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_original_format:1
# c11ad9df25324dd08166f7746a9b7cc6
msgid "Restore the specified format from the previously saved ORIGINAL_FORMAT, if any. Return True on success. The ORIGINAL_FORMAT is deleted after a successful restore."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:1
# e779e95e7cfa4b3daf35704ebd316ffe
msgid "A safe read lock is a lock that does nothing if the thread already has a write lock, otherwise it acquires a read lock. This is necessary to prevent DowngradeLockErrors, which can happen when updating the search cache in the presence of composite columns. Updating the search cache holds an exclusive lock, but searching a composite column involves reading field values via ProxyMetadata which tries to get a shared lock. There may be other scenarios that trigger this as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:9
# 493bdba3ee8d422dbb8c8953f91068f6
msgid "This property returns a new lock object on every access. This lock object is not recursive (for performance) and must only be used in a with statement as ``with cache.safe_read_lock:`` otherwise bad things will happen."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.save_original_format:1
# 1f5b97d586e44be8bf49a802bd490d66
msgid "Save a copy of the specified format as ORIGINAL_FORMAT, overwriting any existing ORIGINAL_FORMAT."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:1
# 3249366ddf5145b68b16bc06c3218ea8
msgid "Search the database for the specified query, returning a set of matched book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:3
# e3328262e297490d8ac53b00a771dd41
msgid "A restriction that is ANDed to the specified query. Note that restrictions are cached, therefore the search for a AND b will be slower than a with restriction b."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:6
# 2e4c354c348747b8884547a6509678e2
msgid "Used internally (virtual fields such as on_device to search over)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:8
# e73e16d453b34d10a96e09a206a2eabb
msgid "If not None, a set of book ids for which books will be searched instead of searching all books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_conversion_options:1
# 21fcd054b86544f48f25fb576361f478
msgid "options must be a map of the form {book_id:conversion_options}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_cover:1
# 35b619ccf8464220b2c6c1e5d3ccc0ea
msgid "Set the cover for this book.  data can be either a QImage, QPixmap, file object or bytestring. It can also be None, in which case any existing cover is removed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:1
# f06688daa5d94a68baba52f392d877ec
msgid "Set the values of the field specified by ``name``. Returns the set of all book ids that were affected by the change."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:3
# 69364d44178d4238ae8c6ba7e748ec6e
msgid "Mapping of book_ids to values that should be applied."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:4
# 456d72f15f4341c397a730a26916a771
msgid "If True, the case of many-one or many-many fields will be changed. For example, if a  book has the tag ``tag1`` and you set the tag for another book to ``Tag1`` then the both books will have the tag ``Tag1`` if allow_case_change is True, otherwise they will both have the tag ``tag1``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:8
# 4655e5edad224aff994f8695ba4dd336
msgid "Used internally, you should never change it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:1
# f49d9964296546baa1b41c77432668d7
msgid "Set metadata for the book `id` from the `Metadata` object `mi`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:3
# 51caf0cc356a42d09d308da1bd6d8118
msgid "Setting force_changes=True will force set_metadata to update fields even if mi contains empty values. In this case, 'None' is distinguished from 'empty'. If mi.XXX is None, the XXX is not replaced, otherwise it is. The tags, identifiers, and cover attributes are special cases. Tags and identifiers cannot be set to None so then will always be replaced if force_changes is true. You must ensure that mi contains the values you want the book to have. Covers are always changed if a new cover is provided, but are never deleted. Also note that force_changes has no effect on setting title or authors."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_pref:1
# 876885cdd44c4c9a808dab436e0224c2
msgid "Set the specified preference to the specified value. See also :meth:`pref`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:1
# a7319e0463da46ae89b01342d2123127
msgid "Return the ids of all books having the tag ``tag`` that are older than the specified time. tag comparison is case insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:4
# 1c12d005999b4fcb890263ed7922f219
msgid "A timedelta object or None. If None, then all ids with the tag are returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:7
# 7b2638f2fdbd4a40ad431cacf75c787f
msgid "If not None the list of matches will be restricted to books that have this tag"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:10
# e9b8155b580c4bdba57ca7868b7747de
msgid "A list of authors. If not None the list of matches will be restricted to books that have these authors (case insensitive)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.user_categories_for_books:1
# b733d47e686743369daa44e87876416f
msgid "Return the user categories for the specified books. proxy_metadata_map is optional and is useful for a performance boost, in contexts where a ProxyMetadata object for the books already exists. It should be a mapping of book_ids to their corresponding ProxyMetadata objects."
msgstr ""

