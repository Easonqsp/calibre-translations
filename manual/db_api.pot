# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.43.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-06 17:44+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../db_api.rst:6
# 2cfa5096a19d4d35a6267e16c34c2843
msgid "API Documentation for the database interface"
msgstr ""

#: ../../db_api.rst:11
# 7e7b6c75c4304a80b14c7219a95fb78b
msgid "This API is thread safe (it uses a multiple reader, single writer locking scheme).  You can access this API like this::"
msgstr ""

#: ../../db_api.rst:16
# 5ae5360e7a70429caaee226564aa5847
msgid "If you are in a calibre plugin that is part of the main calibre GUI, you get access to it like this instead::"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:1
# 3be14627d91641eda37d07c610178410
msgid "An in-memory cache of the metadata.db file from a calibre library. This class also serves as a threadsafe API for accessing the database. The in-memory cache is maintained in normal form for maximum performance."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:5
# 379774e052e245ca88ec68124dc30baf
msgid "SQLITE is simply used as a way to read and write from metadata.db robustly. All table reading/sorting/searching/caching logic is re-implemented. This was necessary for maximum performance and flexibility."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:1
# 260acb4bc8ba449e830bb91e005583dc
msgid "Add the specified books to the library. Books should be an iterable of 2-tuples, each 2-tuple of the form :code:`(mi, format_map)` where mi is a Metadata object and format_map is a dictionary of the form :code:`{fmt: path_or_stream}`, for example: :code:`{'EPUB': '/path/to/file.epub'}`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:6
# 85cd16a6c2aa478da32511807bc97956
msgid "Returns a pair of lists: :code:`ids, duplicates`. ``ids`` contains the book ids for all newly created books in the database. ``duplicates`` contains the :code:`(mi, format_map)` for all books that already exist in the database as per the simple duplicate detection heuristic used by :meth:`has_book`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_custom_book_data:1
# 7c3c0d974f364f058df112650adf903d
msgid "Add data for name where val_map is a map of book_ids to values. If delete_first is True, all previously stored data for name will be removed."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:1
# 36be2f5fc6644264895761281723cb6b
msgid "Add a format to the specified book. Return True of the format was added successfully."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:3
# c58ff08e550a427382b7b7fe568f8adb
msgid "If True replace existing format, otherwise if the format already exists, return False."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:4
# 51f958c696c948ae9e51e79bb5fa57dc
msgid "If True, file type plugins are run on the format before and after being added."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:5
# 6bfcf56e358e4237a4be8132d1da368c
msgid "Internal use only."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_book_ids:1
# a3f77e72f62544379e1ef81df19ff668
msgid "Frozen set of all known book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_for:1
# 3d1c6aabd868489b8a89d176b1e4685d
msgid "Same as field_for, except that it operates on multiple books at once"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_ids:1
# 961665dffbac45b49fd0feb43a7bec56
msgid "Frozen set of ids for all values in the field ``name``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_names:1
# 437e62875fb842f7aecf72fdf8def159
msgid "Frozen set of all fields names (should only be used for many-one and many-many fields)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:1
# 53f832a60e8747f0a33cb1b15e54739c
msgid "Return author data as a dictionary with keys: name, sort, link"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:3
# 9e357692a4f04071b366405097a92332
msgid "If no authors with the specified ids are found an empty dictionary is returned. If author_ids is None, data for all authors is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_sort_from_authors:1
# 3e511ace120a41d292213aebda45118a
msgid "Given a list of authors, return the author_sort string for the authors, preferring the author sort associated with the author over the computed string."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:1
# 01ffb749e82647d592b0952d11738e49
msgid "Return all the books associated with the item identified by ``item_id``, where the item belongs to the field ``name``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:4
# 00f34e3939b24471a93e00c7f74d3b87
msgid "Returned value is a set of book ids, or the empty set if the item or the field does not exist."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_cover_to:1
# bbcacf12114649bcbf27444061f01e6e
msgid "Copy the cover to the file like object ``dest``. Returns False if no cover exists or dest is the same file as the current cover. dest can also be a path in which case the cover is copied to it iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_format_to:1
# 351379ed95424f538ce2a666e75f41fc
msgid "Copy the format ``fmt`` to the file like object ``dest``. If the specified format does not exist, raises :class:`NoSuchFormat` error. dest can also be a path, in which case the format is copied to it, iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:1
# 39adc046f9724b96b7802b2b99bb376d
msgid "Return the cover image or None. By default, returns the cover as a bytestring."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:4
# 5081345b184a41088172554608f40eb4
msgid "WARNING: Using as_path will copy the cover to a temp file and return the path to the temp file. You should delete the temp file when you are done with it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:8
# 3f3ea3cf8557450f979e82f5242f3cdf
msgid "If True return the image as an open file object (a SpooledTemporaryFile)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:9
# cf3075186d924065adcf3b8906eb937f
msgid "If True return the image as a QImage object"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:10
# aea77def48624950a9858260247274bf
msgid "If True return the image as a path pointing to a temporary file"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.delete_custom_book_data:1
# c5149fae50cb4d31a7c1548149cffdee
msgid "Delete data for name. By default deletes all data, if you only want to delete data for some book ids, pass in a list of book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.embed_metadata:1
# 3f45b608dbdb45ebaa808db4f587ac20
msgid "Update metadata in all formats of the specified book_ids to current metadata in the database."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.fast_field_for:1
# 51b6ebc76cbc40ddbed064753bd0d307
msgid "Same as field_for, except that it avoids the extra lookup to get the field object"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:1
# e367a3aba2a24d17a1ca94986de538a7
msgid "Return the value of the field ``name`` for the book identified by ``book_id``. If no such book exists or it has no defined value for the field ``name` or no such field exists, then ``default_value`` is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:6
# c660cfd2126548c98fb8c6d4d95ab485
msgid "``default_value`` is not used for title, title_sort, authors, author_sort and series_index. This is because these always have values in the db. ``default_value`` is used for all custom columns."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:10
# 21fa110a31714268b83c022807376c6a
msgid "The returned value for is_multiple fields are always tuples, even when no values are found (in other words, default_value is ignored). The exception is identifiers for which the returned value is always a dict. The returned tuples are always in link order, that is, the order in which they were created."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_ids_for:1
# 6d2cd56a699f464ea0e18145731e9c89
msgid "Return the ids (as a tuple) for the values that the field ``name`` has on the book identified by ``book_id``. If there are no values, or no such book, or no such field, an empty tuple is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.find_identical_books:1
# 8b3ce9e8408746739d3ac723ba4778ed
msgid "Finds books that have a superset of the authors in mi and the same title (title is fuzzy matched)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:1
# b99db45202be40e2ba40ba668a6ceb75
msgid "Return the ebook format as a bytestring or `None` if the format doesn't exist, or we don't have permission to write to the ebook file."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:4
# 40e6a3891d944b2bb1b5317bee96ff42
msgid "If True the ebook format is returned as a file object. Note that the file object is a SpooledTemporaryFile, so if what you want to do is copy the format to another file, use :meth:`copy_format_to` instead for performance."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:8
# 583ee08fbe904316a0008a326856bd4d
msgid "Copies the format file to a temp file and returns the path to the temp file"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:10
# c82496ab320b4712ab488bd419ed8f45
msgid "If True and returning a path the filename is the same as that used in the library. Note that using this means that repeated calls yield the same temp file (which is re-created each time)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:1
# 041ea3bb6846416694021b6b1616ea46
msgid "Return absolute path to the ebook file of format `format`. You should almost never use this, as it breaks the threadsafe promise of this API. Instead use, :meth:`copy_format_to`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:5
# f5a1681f7395485695534434ac95c7f4
msgid "Currently used only in calibredb list, the viewer, edit book, compare_format to original format and the catalogs (via get_data_as_dict())."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:9
# 2f7cff9a51d64695817d9876ce14f420
msgid "Apart from the viewer and edit book, I don't believe any of the others do any file write I/O with the results of this call."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_hash:1
# 74192b2844344dbfb7e6a840efbbc48a
msgid "Return the hash of the specified format for the specified book. The kind of hash is backend dependent, but is usually SHA-256."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:1
# e7ad846961ee4bb5ae520daf93d34272
msgid "Return the path, size and mtime for the specified format for the specified book. You should not use path unless you absolutely have to, since accessing it directly breaks the threadsafe guarantees of this API. Instead use the :meth:`copy_format_to` method."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:6
# f48b98738cfd4b7cbff6d974797e9879
msgid "If ``True`` cached values are used, otherwise a slow filesystem access is done. The cache values could be out of date if access was performed to the filesystem outside of this API."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:10
# 5bff3775bb45496ab6602bad2174dd02
msgid "If ``True`` The max_size field of the database is updates for this book."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.formats:1
# c221040f463b4381b633c28dffb94a2b
msgid "Return tuple of all formats for the specified book. If verify_formats is True, verifies that the files exist on disk."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_categories:1
# 2664f7158c314d728f2f8fccfbe84dda
msgid "Used internally to implement the Tag Browser"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_custom_book_data:1
# 8651486cc8e34b578f156857d027df45
msgid "Get data for name. By default returns data for all book_ids, pass in a list of book ids if you only want some data. Returns a map of book_id to values. If a particular value could not be decoded, uses default for it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_id_map:1
# d9c76278c2bc4b239f93fe4b3f58d0cf
msgid "Return a mapping of id numbers to values for the specified field. The field must be a many-one or many-many field, otherwise a ValueError is raised."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_ids_for_custom_book_data:1
# b88934008e2846f08d6f17fa8972723e
msgid "Return the set of book ids for which name has data."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_id:1
#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_ids:1
# 6a015632c4864a5dad5821bff55df775
# 7e5df9dc9a834b4ba59e51d8f94564d9
msgid "Return the item id for item_name (case-insensitive)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_name:1
# ac387b5bcba0482fa8acfe0c546acaad
msgid "Return the item name for the item specified by item_id in the specified field. See also :meth:`get_id_map`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_metadata:1
# c540ba4fe479411d9b0336314705eac6
msgid "Return metadata for the book identified by book_id as a :class:`Metadata` object. Note that the list of formats is not verified. If get_cover is True, the cover is returned, either a path to temp file as mi.cover or if cover_as_data is True then as mi.cover_data."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:1
# c84612b8f97748a1be8c7281b7f1bede
msgid "Return the next series index for the specified series, taking into account the various preferences that control next series number generation."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:4
# f7f7f40f4f164688be5dd3ab053d0550
msgid "The series-like field (defaults to the builtin series column)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:5
# d031aa5305674a5082940f6ce3e00a82
msgid "If True, returns a mapping of book_id to current series_index value instead."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_proxy_metadata:1
# b40b8cbdb15e43a19a7aaf8f47d474cf
msgid "Like :meth:`get_metadata` except that it returns a ProxyMetadata object that only reads values from the database on demand. This is much faster than get_metadata when only a small number of fields need to be accessed from the reutrned metadata object."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_usage_count_by_id:1
# fbf5a716eed94cceb2831a41057ca24a
msgid "Return a mapping of id to usage count for all values of the specified field, which must be a many-one or many-many field."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_book:1
# e4d4f895beec488598a03ef5612a3ef2
msgid "Return True iff the database contains an entry with the same title as the passed in Metadata object. The comparison is case-insensitive."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_format:1
# 54e135f129104ea8a53d3ddd5a3d3b9e
msgid "Return True iff the format exists on disk"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_id:1
# ead5d0ece35f4d8c8493d284d7f9f8e7
msgid "Return True iff the specified book_id exists in the db"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.init:1
# 010b111cfb02465d950a76f4d1316ecf
msgid "Initialize this cache with data from the backend."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:1
# a49e5acc8ba1411bb2aac0da352b5956
msgid "Return a list of sorted book ids. If ids_to_sort is None, all book ids are returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:4
# 2de1de8aca2b481785eabd6ac6db51b7
msgid "fields must be a list of 2-tuples of the form (field_name, ascending=True or False). The most significant field is the first 2-tuple."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.pref:1
# 61d6269d78924034a4dd297e6cd9fdb0
msgid "Return the value for the specified preference or the value specified as ``default`` if the preference is not set."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.read_backup:1
# bce9a5fe1ff94b35bb5b06089d8e71c0
msgid "Return the OPF metadata backup for the book as a bytestring or None if no such backup exists."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_books:1
# 738d34206d024f348ff13272b91008dc
msgid "Remove the books specified by the book_ids from the database and delete their format files. If ``permanent`` is False, then the format files are not deleted."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:1
# 622f1aa8fd8e4d05b817f59ff568270f
msgid "Remove the specified formats from the specified books."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:3
# fb5b9d0a209e4629ac76cf04cd68524c
msgid "A mapping of book_id to a list of formats to be removed from the book."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:4
# 4b0e4f1e464f4c529fc132b4cb67188e
msgid "If True, only remove the record for the format from the db, do not delete the actual format file from the filesystem."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_items:1
# 57c23cbb81da418e9f98dc9355b23fb6
msgid "Delete all items in the specified field with the specified ids. Returns the set of affected book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:1
# 076d63b128d443ebb356722de67b77be
msgid "Rename items from a many-one or many-many field such as tags or series."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:3
# 7751890db9b148e6a9c51e95fb7c5064
msgid "When renaming in a series-like field also change the series_index values."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_book:1
# 3f247be947c345d38cbea1e88259ce5f
msgid "Restore the book entry in the database for a book that already exists on the filesystem"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_original_format:1
# 76f68f8f75ab401a98169dc0de092750
msgid "Restore the specified format from the previously saved ORIGINAL_FORMAT, if any. Return True on success. The ORIGINAL_FORMAT is deleted after a successful restore."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:1
# 0aad1608271f4b03adf5ea5e3730908a
msgid "A safe read lock is a lock that does nothing if the thread already has a write lock, otherwise it acquires a read lock. This is necessary to prevent DowngradeLockErrors, which can happen when updating the search cache in the presence of composite columns. Updating the search cache holds an exclusive lock, but searching a composite column involves reading field values via ProxyMetadata which tries to get a shared lock. There may be other scenarios that trigger this as well."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:9
# c58b6e48378c4931881126c151ce7b9b
msgid "This property returns a new lock object on every access. This lock object is not recursive (for performance) and must only be used in a with statement as ``with cache.safe_read_lock:`` otherwise bad things will happen."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.save_original_format:1
# ed3c4299eb1b417bb460d564e206447e
msgid "Save a copy of the specified format as ORIGINAL_FORMAT, overwriting any existing ORIGINAL_FORMAT."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:1
# cca97d82a9604f82abbdd9b0be1d1524
msgid "Search the database for the specified query, returning a set of matched book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:3
# 3a4198d59f0b4deaa59aa4749539e6f5
msgid "A restriction that is ANDed to the specified query. Note that restrictions are cached, therefore the search for a AND b will be slower than a with restriction b."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:6
# 9a5362f8378246e0830d151e3468212b
msgid "Used internally (virtual fields such as on_device to search over)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:8
# 0164061ae80f48c7a6985ffadc5b4c3b
msgid "If not None, a set of book ids for which books will be searched instead of searching all books."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_conversion_options:1
# f069b285a4d748c68b6a5f79cf98b47e
msgid "options must be a map of the form {book_id:conversion_options}"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_cover:1
# 46d54d51fd8f4d4dbf7b7caa177289e8
msgid "Set the cover for this book.  data can be either a QImage, QPixmap, file object or bytestring. It can also be None, in which case any existing cover is removed."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:1
# 964e81f1c4d44bcba75c5597e0e100b5
msgid "Set the values of the field specified by ``name``. Returns the set of all book ids that were affected by the change."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:3
# a2e8e1cee56f4a59b5249102f6e0c618
msgid "Mapping of book_ids to values that should be applied."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:4
# 25300f0f6e72493ea38f5015e6ad31ec
msgid "If True, the case of many-one or many-many fields will be changed. For example, if a  book has the tag ``tag1`` and you set the tag for another book to ``Tag1`` then the both books will have the tag ``Tag1`` if allow_case_change is True, otherwise they will both have the tag ``tag1``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:8
# 2e39ef36ea0f45e1aba395c2b94d361a
msgid "Used internally, you should never change it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:1
# 6b164332e4304a0894057e67cade272c
msgid "Set metadata for the book `id` from the `Metadata` object `mi`"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:3
# c33f9c4e3e4a4feb8e6e246e2e780c7d
msgid "Setting force_changes=True will force set_metadata to update fields even if mi contains empty values. In this case, 'None' is distinguished from 'empty'. If mi.XXX is None, the XXX is not replaced, otherwise it is. The tags, identifiers, and cover attributes are special cases. Tags and identifiers cannot be set to None so then will always be replaced if force_changes is true. You must ensure that mi contains the values you want the book to have. Covers are always changed if a new cover is provided, but are never deleted. Also note that force_changes has no effect on setting title or authors."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_pref:1
# b195cc312eb74d6ebb45c4d341699c6a
msgid "Set the specified preference to the specified value. See also :meth:`pref`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:1
# e51a3d144d084030ad753531d4b30713
msgid "Return the ids of all books having the tag ``tag`` that are older than than the specified time. tag comparison is case insensitive."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:4
# 44e7ef7ec4e443c8920b5dcd5cd60f73
msgid "A timedelta object or None. If None, then all ids with the tag are returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:7
# 32dbe7e71ff6403a8c90acfe466f2e44
msgid "If not None the list of matches will be restricted to books that have this tag"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:10
# 8e1b8af822884398b8239be639b1e0e2
msgid "A list of authors. If not None the list of matches will be restricted to books that have these authors (case insensitive)."
msgstr ""

