# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.48.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-08 08:53+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../db_api.rst:6
# 9a99ef52d2d94313add28ecc95c31e64
msgid "API Documentation for the database interface"
msgstr ""

#: ../../db_api.rst:11
# 9e0725712f8a49608de1bf96e504076f
msgid "This API is thread safe (it uses a multiple reader, single writer locking scheme).  You can access this API like this::"
msgstr ""

#: ../../db_api.rst:16
# 7f7413ea7ad34320a2c3568ea0aa7400
msgid "If you are in a calibre plugin that is part of the main calibre GUI, you get access to it like this instead::"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:1
# c0265a6370874af8b8cd0c7010eaa141
msgid "An in-memory cache of the metadata.db file from a calibre library. This class also serves as a threadsafe API for accessing the database. The in-memory cache is maintained in normal form for maximum performance."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:5
# cb4e83d86c774cde8de71f5119234357
msgid "SQLITE is simply used as a way to read and write from metadata.db robustly. All table reading/sorting/searching/caching logic is re-implemented. This was necessary for maximum performance and flexibility."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:1
# a7097143308f4ec8b9978ebe8ef53fca
msgid "Add the specified books to the library. Books should be an iterable of 2-tuples, each 2-tuple of the form :code:`(mi, format_map)` where mi is a Metadata object and format_map is a dictionary of the form :code:`{fmt: path_or_stream}`, for example: :code:`{'EPUB': '/path/to/file.epub'}`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:6
# 9146dfc039984740a0ec141fbacb5d44
msgid "Returns a pair of lists: :code:`ids, duplicates`. ``ids`` contains the book ids for all newly created books in the database. ``duplicates`` contains the :code:`(mi, format_map)` for all books that already exist in the database as per the simple duplicate detection heuristic used by :meth:`has_book`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_custom_book_data:1
# 98262b879b8b448ebd44befc26c9dcda
msgid "Add data for name where val_map is a map of book_ids to values. If delete_first is True, all previously stored data for name will be removed."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:1
# e65df2080e4a487fa6ef35221c7350d4
msgid "Add a format to the specified book. Return True of the format was added successfully."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:3
# 5d3f2ac74f3249dc83cf37377d444fbe
msgid "If True replace existing format, otherwise if the format already exists, return False."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:4
# c73ce2e15af444668d417aa6b205a10d
msgid "If True, file type plugins are run on the format before and after being added."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:5
# 3117fbf8143f49c9863064c821284d9d
msgid "Internal use only."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_book_ids:1
# 235ed39c31b54906bc220faf75a9f1cf
msgid "Frozen set of all known book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_for:1
# fed51f999f7b447d914261ded6d81e9a
msgid "Same as field_for, except that it operates on multiple books at once"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_ids:1
# b75a3510dee74f6d8e61597512391b5c
msgid "Frozen set of ids for all values in the field ``name``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_names:1
# 81818e10e8dd40299665a2ec737a8e78
msgid "Frozen set of all fields names (should only be used for many-one and many-many fields)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:1
# aa2faf3c22bf4fc795991e90d29c51b6
msgid "Return author data as a dictionary with keys: name, sort, link"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:3
# 1416d4d3ec5946f5ad0992903947cd08
msgid "If no authors with the specified ids are found an empty dictionary is returned. If author_ids is None, data for all authors is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_sort_from_authors:1
# 8166cbc68081493a8e04788af8b55baa
msgid "Given a list of authors, return the author_sort string for the authors, preferring the author sort associated with the author over the computed string."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:1
# b41e58feb8974cf0870479182e3de0fc
msgid "Return all the books associated with the item identified by ``item_id``, where the item belongs to the field ``name``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:4
# 04710027fd614738bd97207a4490a4e5
msgid "Returned value is a set of book ids, or the empty set if the item or the field does not exist."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_cover_to:1
# 9df09dd020da4d22a8b554c2bc818bb7
msgid "Copy the cover to the file like object ``dest``. Returns False if no cover exists or dest is the same file as the current cover. dest can also be a path in which case the cover is copied to it iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_format_to:1
# 3a3c436647bd49178718f4c9f8c212ae
msgid "Copy the format ``fmt`` to the file like object ``dest``. If the specified format does not exist, raises :class:`NoSuchFormat` error. dest can also be a path, in which case the format is copied to it, iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:1
# f69240804bec46b9abea53186864eb59
msgid "Return the cover image or None. By default, returns the cover as a bytestring."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:4
# 650f5988a14a41d1adc1601fdd07aedd
msgid "WARNING: Using as_path will copy the cover to a temp file and return the path to the temp file. You should delete the temp file when you are done with it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:8
# 5e55bac31d88458893aeeef518397111
msgid "If True return the image as an open file object (a SpooledTemporaryFile)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:9
# f4420f620e664428a98086b81a9a472a
msgid "If True return the image as a QImage object"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:10
# 03766cd4e1a2443eb8a9871acea3c292
msgid "If True return the image as a path pointing to a temporary file"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.delete_custom_book_data:1
# e7988eb0982b4ce7a69f5ab1f14da768
msgid "Delete data for name. By default deletes all data, if you only want to delete data for some book ids, pass in a list of book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.embed_metadata:1
# 3e603eee71d54b6d934ec650e2f18e6e
msgid "Update metadata in all formats of the specified book_ids to current metadata in the database."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.fast_field_for:1
# d195716e3e034bc0b79ebf54e9cb2a0e
msgid "Same as field_for, except that it avoids the extra lookup to get the field object"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:1
# 0fbc4f34bf664f8f93efe6da574d4275
msgid "Return the value of the field ``name`` for the book identified by ``book_id``. If no such book exists or it has no defined value for the field ``name` or no such field exists, then ``default_value`` is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:6
# 066fbec5702849528083833f60e884db
msgid "``default_value`` is not used for title, title_sort, authors, author_sort and series_index. This is because these always have values in the db. ``default_value`` is used for all custom columns."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:10
# 2aa3b1271edb44c39b319c3124683864
msgid "The returned value for is_multiple fields are always tuples, even when no values are found (in other words, default_value is ignored). The exception is identifiers for which the returned value is always a dict. The returned tuples are always in link order, that is, the order in which they were created."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_ids_for:1
# 309f8fad7088425986d7741285d3285f
msgid "Return the ids (as a tuple) for the values that the field ``name`` has on the book identified by ``book_id``. If there are no values, or no such book, or no such field, an empty tuple is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.find_identical_books:1
# 8cd7fa81a86d41128cf88e748b70d459
msgid "Finds books that have a superset of the authors in mi and the same title (title is fuzzy matched)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:1
# 6c32967f9c464058a9c8d1bae8ee6605
msgid "Return the ebook format as a bytestring or `None` if the format doesn't exist, or we don't have permission to write to the ebook file."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:4
# 9a31bc0f378f4a6da92ea2e3e36262e5
msgid "If True the ebook format is returned as a file object. Note that the file object is a SpooledTemporaryFile, so if what you want to do is copy the format to another file, use :meth:`copy_format_to` instead for performance."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:8
# 513562f305d04122badc8e55845b044e
msgid "Copies the format file to a temp file and returns the path to the temp file"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:10
# bde7ace777464656b82349801af68363
msgid "If True and returning a path the filename is the same as that used in the library. Note that using this means that repeated calls yield the same temp file (which is re-created each time)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:1
# e4f94a97d5f645e8ad6b6e979f0cfe76
msgid "Return absolute path to the ebook file of format `format`. You should almost never use this, as it breaks the threadsafe promise of this API. Instead use, :meth:`copy_format_to`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:5
# 85d6b02c181945bea3917197ed52ffb4
msgid "Currently used only in calibredb list, the viewer, edit book, compare_format to original format and the catalogs (via get_data_as_dict())."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:9
# 399fb7e722914f4b95dce2070647d295
msgid "Apart from the viewer and edit book, I don't believe any of the others do any file write I/O with the results of this call."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_hash:1
# 64d5f65b9688412ba6fd3bd75ce34c2e
msgid "Return the hash of the specified format for the specified book. The kind of hash is backend dependent, but is usually SHA-256."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:1
# 3ab4b3ebbd2d44629d342a9501350671
msgid "Return the path, size and mtime for the specified format for the specified book. You should not use path unless you absolutely have to, since accessing it directly breaks the threadsafe guarantees of this API. Instead use the :meth:`copy_format_to` method."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:6
# aaa43ca8d8a34de0b6a06ef31fa4e2b8
msgid "If ``True`` cached values are used, otherwise a slow filesystem access is done. The cache values could be out of date if access was performed to the filesystem outside of this API."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:10
# 44389107a7784fcc8ca10fde18cc7999
msgid "If ``True`` The max_size field of the database is updates for this book."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.formats:1
# 3a91e5ec2c0c49ac924dbdc6ad91ae96
msgid "Return tuple of all formats for the specified book. If verify_formats is True, verifies that the files exist on disk."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_categories:1
# b2be82a255574852bec35253d37faa67
msgid "Used internally to implement the Tag Browser"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_custom_book_data:1
# d2dbf525952343a6bc12542996120999
msgid "Get data for name. By default returns data for all book_ids, pass in a list of book ids if you only want some data. Returns a map of book_id to values. If a particular value could not be decoded, uses default for it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_id_map:1
# d7a96b1fc6614486908bee56f5e536a3
msgid "Return a mapping of id numbers to values for the specified field. The field must be a many-one or many-many field, otherwise a ValueError is raised."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_ids_for_custom_book_data:1
# 0fbc32a62a5d4ed3bf81dc0be00d4adf
msgid "Return the set of book ids for which name has data."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_id:1
#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_ids:1
# cc1b8cbf917f4e70899b799f83753123
# 98765a78720b43479af115dc08de0cfb
msgid "Return the item id for item_name (case-insensitive)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_name:1
# f932364501be45d08d5346777bc82a6d
msgid "Return the item name for the item specified by item_id in the specified field. See also :meth:`get_id_map`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_metadata:1
# 809038dd1c6d4d6a80c0802f7b118350
msgid "Return metadata for the book identified by book_id as a :class:`Metadata` object. Note that the list of formats is not verified. If get_cover is True, the cover is returned, either a path to temp file as mi.cover or if cover_as_data is True then as mi.cover_data."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:1
# 0e97e52735f04b17b430c69c12f10395
msgid "Return the next series index for the specified series, taking into account the various preferences that control next series number generation."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:4
# 6ad0740f45af48d5aca2ebbb650240aa
msgid "The series-like field (defaults to the builtin series column)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:5
# 674119a4f3824c808599ef5d8573856d
msgid "If True, returns a mapping of book_id to current series_index value instead."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_proxy_metadata:1
# 6c4e5584fd304cff856ed3bd72e9ad40
msgid "Like :meth:`get_metadata` except that it returns a ProxyMetadata object that only reads values from the database on demand. This is much faster than get_metadata when only a small number of fields need to be accessed from the reutrned metadata object."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_usage_count_by_id:1
# 590054e9009049299bba7d507fb05105
msgid "Return a mapping of id to usage count for all values of the specified field, which must be a many-one or many-many field."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_book:1
# eb36070d59794946997ed3a5dc5ff829
msgid "Return True iff the database contains an entry with the same title as the passed in Metadata object. The comparison is case-insensitive."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_format:1
# c10fd33a3d4f4b67867d3498f6d1b25c
msgid "Return True iff the format exists on disk"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_id:1
# 9571147d2152402ea3ec56ae6229a5c6
msgid "Return True iff the specified book_id exists in the db"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.init:1
# 330f9f723a1c418c868bb90f96437812
msgid "Initialize this cache with data from the backend."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:1
# b0bbd4de1d0b45e2872ee47e9b314005
msgid "Return a list of sorted book ids. If ids_to_sort is None, all book ids are returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:4
# 980254c2ddb44315b7f2458f79edd330
msgid "fields must be a list of 2-tuples of the form (field_name, ascending=True or False). The most significant field is the first 2-tuple."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.pref:1
# 346bc0580cb340f28312cf827d9ed037
msgid "Return the value for the specified preference or the value specified as ``default`` if the preference is not set."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.read_backup:1
# a9c0dac43ff843e0b34c4ae8ea4cd711
msgid "Return the OPF metadata backup for the book as a bytestring or None if no such backup exists."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_books:1
# 3de72b9f8c0c442fabebe3aceba5aed4
msgid "Remove the books specified by the book_ids from the database and delete their format files. If ``permanent`` is False, then the format files are not deleted."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:1
# 426b9ae04b5c413fb5928afbdda41453
msgid "Remove the specified formats from the specified books."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:3
# c615655b796147d38d1a78e6bb55a169
msgid "A mapping of book_id to a list of formats to be removed from the book."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:4
# a3b99fff2947482f9906fa44918a1635
msgid "If True, only remove the record for the format from the db, do not delete the actual format file from the filesystem."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_items:1
# 2254730a26bf43abb504c7ce77da38bf
msgid "Delete all items in the specified field with the specified ids. Returns the set of affected book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:1
# 654effddbf404a7f8fb549eb3773da0b
msgid "Rename items from a many-one or many-many field such as tags or series."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:3
# 9dc358ed46694c96b3939cd82989d172
msgid "When renaming in a series-like field also change the series_index values."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_book:1
# e4077e92bd58464b85e423fb0653e9dc
msgid "Restore the book entry in the database for a book that already exists on the filesystem"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_original_format:1
# 653b7ace4fbe4912b5a7874e074baefa
msgid "Restore the specified format from the previously saved ORIGINAL_FORMAT, if any. Return True on success. The ORIGINAL_FORMAT is deleted after a successful restore."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:1
# 5e20edb495b0466191dd42b6cc53d828
msgid "A safe read lock is a lock that does nothing if the thread already has a write lock, otherwise it acquires a read lock. This is necessary to prevent DowngradeLockErrors, which can happen when updating the search cache in the presence of composite columns. Updating the search cache holds an exclusive lock, but searching a composite column involves reading field values via ProxyMetadata which tries to get a shared lock. There may be other scenarios that trigger this as well."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:9
# f6b6667122244442be66031c8c2e5277
msgid "This property returns a new lock object on every access. This lock object is not recursive (for performance) and must only be used in a with statement as ``with cache.safe_read_lock:`` otherwise bad things will happen."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.save_original_format:1
# 953835fd96ed49bab7b555a0605c1aa3
msgid "Save a copy of the specified format as ORIGINAL_FORMAT, overwriting any existing ORIGINAL_FORMAT."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:1
# b79d222c315e452680190da21819f567
msgid "Search the database for the specified query, returning a set of matched book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:3
# c4cea0e9919646598e38b71a35b2128a
msgid "A restriction that is ANDed to the specified query. Note that restrictions are cached, therefore the search for a AND b will be slower than a with restriction b."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:6
# 5da77a6c443a4147b7e07b0dadcb1d07
msgid "Used internally (virtual fields such as on_device to search over)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:8
# 9a1b1a22e970441790662ff4ea77cce6
msgid "If not None, a set of book ids for which books will be searched instead of searching all books."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_conversion_options:1
# 8c29618cc3274b7d98f4d983cda1584d
msgid "options must be a map of the form {book_id:conversion_options}"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_cover:1
# ff0d522a84bd48b0bda2b1c1c98e936f
msgid "Set the cover for this book.  data can be either a QImage, QPixmap, file object or bytestring. It can also be None, in which case any existing cover is removed."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:1
# 69b99971492e4d91b9b1652d18f9c040
msgid "Set the values of the field specified by ``name``. Returns the set of all book ids that were affected by the change."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:3
# 8fe297be581040d49fa45130a7612fce
msgid "Mapping of book_ids to values that should be applied."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:4
# d6889e792ddb43938662769e36fc5453
msgid "If True, the case of many-one or many-many fields will be changed. For example, if a  book has the tag ``tag1`` and you set the tag for another book to ``Tag1`` then the both books will have the tag ``Tag1`` if allow_case_change is True, otherwise they will both have the tag ``tag1``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:8
# 540543caa7b84710acf02d4e7fcaffda
msgid "Used internally, you should never change it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:1
# 4880aee1cbef49b6afe93cbdf48bdf8f
msgid "Set metadata for the book `id` from the `Metadata` object `mi`"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:3
# 967074184b044d2ab06aab81d34df81f
msgid "Setting force_changes=True will force set_metadata to update fields even if mi contains empty values. In this case, 'None' is distinguished from 'empty'. If mi.XXX is None, the XXX is not replaced, otherwise it is. The tags, identifiers, and cover attributes are special cases. Tags and identifiers cannot be set to None so then will always be replaced if force_changes is true. You must ensure that mi contains the values you want the book to have. Covers are always changed if a new cover is provided, but are never deleted. Also note that force_changes has no effect on setting title or authors."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_pref:1
# dd8c3b69b03d472484664e3420bfa272
msgid "Set the specified preference to the specified value. See also :meth:`pref`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:1
# a966642436c046f4ac6f05dd454ebabb
msgid "Return the ids of all books having the tag ``tag`` that are older than than the specified time. tag comparison is case insensitive."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:4
# e09e4dc2577d4903b3cacc633e942a68
msgid "A timedelta object or None. If None, then all ids with the tag are returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:7
# e289be5374c7468f8ad4bd6102c5cbf0
msgid "If not None the list of matches will be restricted to books that have this tag"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:10
# 83c696d4cd4740bca6b5db936e506fbb
msgid "A list of authors. If not None the list of matches will be restricted to books that have these authors (case insensitive)."
msgstr ""

