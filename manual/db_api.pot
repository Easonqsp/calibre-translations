# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.43.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-05 22:19+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../db_api.rst:6
# d0c76c02e6d64c19ba85e15aad48d52d
msgid "API Documentation for the database interface"
msgstr ""

#: ../../db_api.rst:11
# f89f28c6d9cb434d8fddfe9c3dd2aa20
msgid "This API is thread safe (it uses a multiple reader, single writer locking scheme).  You can access this API like this::"
msgstr ""

#: ../../db_api.rst:16
# 8c91d8a5e9924e508668f05ac22c9c95
msgid "If you are in a calibre plugin that is part of the main calibre GUI, you get access to it like this instead::"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:1
# 9fb5fb5d78ee4acebba2156d1e18e693
msgid "An in-memory cache of the metadata.db file from a calibre library. This class also serves as a threadsafe API for accessing the database. The in-memory cache is maintained in normal form for maximum performance."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:5
# 7503709240a9437f9226ba94e0a6ff4c
msgid "SQLITE is simply used as a way to read and write from metadata.db robustly. All table reading/sorting/searching/caching logic is re-implemented. This was necessary for maximum performance and flexibility."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:1
# 7ddf3200a8444056a6233e05de44f37a
msgid "Add the specified books to the library. Books should be an iterable of 2-tuples, each 2-tuple of the form :code:`(mi, format_map)` where mi is a Metadata object and format_map is a dictionary of the form :code:`{fmt: path_or_stream}`, for example: :code:`{'EPUB': '/path/to/file.epub'}`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:6
# 355ca4cb6b75498fbf3bea53eb3db7bf
msgid "Returns a pair of lists: :code:`ids, duplicates`. ``ids`` contains the book ids for all newly created books in the database. ``duplicates`` contains the :code:`(mi, format_map)` for all books that already exist in the database as per the simple duplicate detection heuristic used by :meth:`has_book`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_custom_book_data:1
# dbe66f8586f1467da31ed3d35e358122
msgid "Add data for name where val_map is a map of book_ids to values. If delete_first is True, all previously stored data for name will be removed."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:1
# 3afb872bc06f4727a027cfa7ff3e5cac
msgid "Add a format to the specified book. Return True of the format was added successfully."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:3
# 7987b68d1494425eac0bd6742aff269a
msgid "If True replace existing format, otherwise if the format already exists, return False."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:4
# 5fe280d1a20a41c88f41220e9e56c988
msgid "If True, file type plugins are run on the format before and after being added."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:5
# 0ae31cd992e14db8b1a9f08998eaff47
msgid "Internal use only."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_book_ids:1
# 1202f1780a0440fdb4808f5a0629955d
msgid "Frozen set of all known book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_for:1
# d4cff120f19d4983a52f0a54d4b2dadc
msgid "Same as field_for, except that it operates on multiple books at once"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_ids:1
# c25a52d61c3246179780599e8dfe382e
msgid "Frozen set of ids for all values in the field ``name``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_names:1
# d99a08dae1d2431bafb79d8d96f86b88
msgid "Frozen set of all fields names (should only be used for many-one and many-many fields)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:1
# c017d0a58a314b91bb5757858fedd45d
msgid "Return author data as a dictionary with keys: name, sort, link"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:3
# b222d4157f724049a0dab0a8cd28d4a5
msgid "If no authors with the specified ids are found an empty dictionary is returned. If author_ids is None, data for all authors is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_sort_from_authors:1
# 455b78458df244bd97d8689a8f6786e7
msgid "Given a list of authors, return the author_sort string for the authors, preferring the author sort associated with the author over the computed string."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:1
# ca0cfe82626142c4aca4d29fd3f86bab
msgid "Return all the books associated with the item identified by ``item_id``, where the item belongs to the field ``name``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:4
# c966cc66aa864b7783aa89fb38b8a94f
msgid "Returned value is a set of book ids, or the empty set if the item or the field does not exist."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_cover_to:1
# 301ef02c2874456e9763bee772802b91
msgid "Copy the cover to the file like object ``dest``. Returns False if no cover exists or dest is the same file as the current cover. dest can also be a path in which case the cover is copied to it iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_format_to:1
# c1f64d6a3837436780d9ae2aed0eece5
msgid "Copy the format ``fmt`` to the file like object ``dest``. If the specified format does not exist, raises :class:`NoSuchFormat` error. dest can also be a path, in which case the format is copied to it, iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:1
# f2193a9ae06445efb7db8f110a9813ba
msgid "Return the cover image or None. By default, returns the cover as a bytestring."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:4
# 485c6530e1bf417a8983b9cd0f0c63e9
msgid "WARNING: Using as_path will copy the cover to a temp file and return the path to the temp file. You should delete the temp file when you are done with it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:8
# 805eb29d6c6448ff950b28e27726aded
msgid "If True return the image as an open file object (a SpooledTemporaryFile)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:9
# 92fd6bf0d37346a8a55cfe31e5c90508
msgid "If True return the image as a QImage object"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:10
# 4ed1154b400d4cb390dd0826fce5205b
msgid "If True return the image as a path pointing to a temporary file"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.delete_custom_book_data:1
# cec6de112c834aa28ec068ec17475373
msgid "Delete data for name. By default deletes all data, if you only want to delete data for some book ids, pass in a list of book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.embed_metadata:1
# f2a25006d6184b789aff110da5ae60c6
msgid "Update metadata in all formats of the specified book_ids to current metadata in the database."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.fast_field_for:1
# 4db66b70876b455eb7e05ec11a9a72c3
msgid "Same as field_for, except that it avoids the extra lookup to get the field object"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:1
# 43bd5ae9549a40ac981708b4bbc029f5
msgid "Return the value of the field ``name`` for the book identified by ``book_id``. If no such book exists or it has no defined value for the field ``name` or no such field exists, then ``default_value`` is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:6
# b8c998333a7041038e32541b53af27f9
msgid "``default_value`` is not used for title, title_sort, authors, author_sort and series_index. This is because these always have values in the db. ``default_value`` is used for all custom columns."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:10
# 1ef9098095544d01a0ef1609330f6383
msgid "The returned value for is_multiple fields are always tuples, even when no values are found (in other words, default_value is ignored). The exception is identifiers for which the returned value is always a dict. The returned tuples are always in link order, that is, the order in which they were created."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_ids_for:1
# d483c5f076e6485fac4beb8b24ac874e
msgid "Return the ids (as a tuple) for the values that the field ``name`` has on the book identified by ``book_id``. If there are no values, or no such book, or no such field, an empty tuple is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.find_identical_books:1
# b63400b12999465295244eeb771fbef9
msgid "Finds books that have a superset of the authors in mi and the same title (title is fuzzy matched)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:1
# 02743b88122345599c89f23372c09ffc
msgid "Return the ebook format as a bytestring or `None` if the format doesn't exist, or we don't have permission to write to the ebook file."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:4
# 0381a54e48ee450aa7600f2d7ed6817c
msgid "If True the ebook format is returned as a file object. Note that the file object is a SpooledTemporaryFile, so if what you want to do is copy the format to another file, use :meth:`copy_format_to` instead for performance."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:8
# b9d661929e924d359ebabd31e7f21419
msgid "Copies the format file to a temp file and returns the path to the temp file"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:10
# fc4d69c9be90412797c73b22a3af7e4d
msgid "If True and returning a path the filename is the same as that used in the library. Note that using this means that repeated calls yield the same temp file (which is re-created each time)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:1
# cf124efad3e04c1a9b55b6f230f22b43
msgid "Return absolute path to the ebook file of format `format`. You should almost never use this, as it breaks the threadsafe promise of this API. Instead use, :meth:`copy_format_to`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:5
# 250e4ae33e7742f4924bb5aac68fcfd3
msgid "Currently used only in calibredb list, the viewer, edit book, compare_format to original format and the catalogs (via get_data_as_dict())."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:9
# aba73e9e3ff8463cbd73b5f39f350272
msgid "Apart from the viewer and edit book, I don't believe any of the others do any file write I/O with the results of this call."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_hash:1
# 6dec4975013f4dc895b3a9b901b2781d
msgid "Return the hash of the specified format for the specified book. The kind of hash is backend dependent, but is usually SHA-256."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:1
# 74ac52e746fb4d42ab51514a909716a6
msgid "Return the path, size and mtime for the specified format for the specified book. You should not use path unless you absolutely have to, since accessing it directly breaks the threadsafe guarantees of this API. Instead use the :meth:`copy_format_to` method."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:6
# 2679bde0c3f547ec85fcc96fe170132e
msgid "If ``True`` cached values are used, otherwise a slow filesystem access is done. The cache values could be out of date if access was performed to the filesystem outside of this API."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:10
# f07d537cc1294fc694d26e600dde4957
msgid "If ``True`` The max_size field of the database is updates for this book."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.formats:1
# afba509da4844d20b0c24800040563a1
msgid "Return tuple of all formats for the specified book. If verify_formats is True, verifies that the files exist on disk."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_categories:1
# 3518a63a607844179643d41a496ff03f
msgid "Used internally to implement the Tag Browser"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_custom_book_data:1
# f031e5c0810940a884f54fd15ef5ca4a
msgid "Get data for name. By default returns data for all book_ids, pass in a list of book ids if you only want some data. Returns a map of book_id to values. If a particular value could not be decoded, uses default for it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_id_map:1
# fbef32115f9d47d498f981a3d794f6e4
msgid "Return a mapping of id numbers to values for the specified field. The field must be a many-one or many-many field, otherwise a ValueError is raised."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_ids_for_custom_book_data:1
# b98af4072f6c40c8b6977bd64b72c9b7
msgid "Return the set of book ids for which name has data."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_id:1
#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_ids:1
# 12b5e7ab50ba42148bfa7c9120e75964
# f6c2aca81ba848108029690f1859847b
msgid "Return the item id for item_name (case-insensitive)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_name:1
# aba4869d918b451faf8173e57e969dde
msgid "Return the item name for the item specified by item_id in the specified field. See also :meth:`get_id_map`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_metadata:1
# faca1ab2dd1d4d1aad6c66ba1740e062
msgid "Return metadata for the book identified by book_id as a :class:`Metadata` object. Note that the list of formats is not verified. If get_cover is True, the cover is returned, either a path to temp file as mi.cover or if cover_as_data is True then as mi.cover_data."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:1
# 5043b3e606844233acc1528c655068d9
msgid "Return the next series index for the specified series, taking into account the various preferences that control next series number generation."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:4
# 5889874d69f441e1a2658fa8787532f7
msgid "The series-like field (defaults to the builtin series column)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:5
# 19d6f81854774bd5957d226684a64598
msgid "If True, returns a mapping of book_id to current series_index value instead."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_proxy_metadata:1
# 3f6cf7a0d91e4da3a06f40878869b2bb
msgid "Like :meth:`get_metadata` except that it returns a ProxyMetadata object that only reads values from the database on demand. This is much faster than get_metadata when only a small number of fields need to be accessed from the reutrned metadata object."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_usage_count_by_id:1
# f407a5c3565d473188a6f7a609becff6
msgid "Return a mapping of id to usage count for all values of the specified field, which must be a many-one or many-many field."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_book:1
# 076c81ffb4764762a0c320bcdcf055e7
msgid "Return True iff the database contains an entry with the same title as the passed in Metadata object. The comparison is case-insensitive."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_format:1
# 95bcd81a2baa4f3cbf1982b76202952f
msgid "Return True iff the format exists on disk"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_id:1
# c9b720e7be0f4bdca0b53757d540e1f1
msgid "Return True iff the specified book_id exists in the db"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.init:1
# b340168bfd5c4a1c9550d4ac3db14536
msgid "Initialize this cache with data from the backend."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:1
# 62a3ea5d15304a72a553775e1556ad70
msgid "Return a list of sorted book ids. If ids_to_sort is None, all book ids are returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:4
# aa5cd836c40e44b7b25de857c9a996e6
msgid "fields must be a list of 2-tuples of the form (field_name, ascending=True or False). The most significant field is the first 2-tuple."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.pref:1
# 99ead2592a8f4921be6283c295897702
msgid "Return the value for the specified preference or the value specified as ``default`` if the preference is not set."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.read_backup:1
# 73bb67aedae2473897c926f5593a349b
msgid "Return the OPF metadata backup for the book as a bytestring or None if no such backup exists."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_books:1
# 4048f3959be34ff1b4e1da8ec9fa6bc3
msgid "Remove the books specified by the book_ids from the database and delete their format files. If ``permanent`` is False, then the format files are not deleted."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:1
# cfbfd7ca57974c44ba193007c275ffe5
msgid "Remove the specified formats from the specified books."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:3
# 0dcfa9b05d4946b1abd7bd4c8da8000e
msgid "A mapping of book_id to a list of formats to be removed from the book."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:4
# f589da84037b4699a511feca512db6be
msgid "If True, only remove the record fo the format from the db, dont delete the actual format file from the filesystem."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_items:1
# 392fafa3cf6d4acea7dd5159adbbf52b
msgid "Delete all items in the specified field with the specified ids. Returns the set of affected book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:1
# d8700c9e4e5f439aad9d121e494b73a7
msgid "Rename items from a many-one or many-many field such as tags or series."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:3
# e61d0d625a184a50a16c1e55279c6866
msgid "When renaming in a series-like field also change the series_index values."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_book:1
# 84609ee87fc1403ea2a7afde52f03707
msgid "Restore the book entry in the database for a book that already exists on the filesystem"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_original_format:1
# 5793e540696441bd90da08fd5a939e55
msgid "Restore the specified format from the previously saved ORIGINAL_FORMAT, if any. Return True on success. The ORIGINAL_FORMAT is deleted after a successful restore."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:1
# 4d445d98f02849209b776cac3d48e5b6
msgid "A safe read lock is a lock that does nothing if the thread already has a write lock, otherwise it acquires a read lock. This is necessary to prevent DowngradeLockErrors, which can happen when updating the search cache in the presence of composite columns. Updating the search cache holds an exclusive lock, but searching a composite column involves reading field values via ProxyMetadata which tries to get a shared lock. There may be other scenarios that trigger this as well."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:9
# e7f227010056438bbb85db51f774140c
msgid "This property returns a new lock object on every access. This lock object is not recursive (for performance) and must only be used in a with statement as ``with cache.safe_read_lock:`` otherwise bad things will happen."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.save_original_format:1
# 1ea2bcd835c04edda9a755321f70d6de
msgid "Save a copy of the specified format as ORIGINAL_FORMAT, overwriting any existing ORIGINAL_FORMAT."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:1
# f02574898f5e4a918c67a035d5dce40c
msgid "Search the database for the specified query, returning a set of matched book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:3
# 4e9b05969514484195313831410345c8
msgid "A restriction that is ANDed to the specified query. Note that restrictions are cached, therefore the search for a AND b will be slower than a with restriction b."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:6
# 082dfb12d516422784c8e5578f8300c1
msgid "Used internally (virtual fields such as on_device to search over)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:8
# a112892b31e84e368eca55717f9b5db8
msgid "If not None, a set of book ids for which books will be searched instead of searching all books."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_conversion_options:1
# 615e44d966f74fe1ad9fe067ad1766f7
msgid "options must be a map of the form {book_id:conversion_options}"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_cover:1
# f0718915287847e6a252014ee6fcbd92
msgid "Set the cover for this book.  data can be either a QImage, QPixmap, file object or bytestring. It can also be None, in which case any existing cover is removed."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:1
# daa1731be1ff4766aeb333d79acdf372
msgid "Set the values of the field specified by ``name``. Returns the set of all book ids that were affected by the change."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:3
# 7b15030907674df5bccf23400d8ca4ef
msgid "Mapping of book_ids to values that should be applied."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:4
# 9bc4be8c88fc4f43b0db9330ad82a8b8
msgid "If True, the case of many-one or many-many fields will be changed. For example, if a  book has the tag ``tag1`` and you set the tag for another book to ``Tag1`` then the both books will have the tag ``Tag1`` if allow_case_change is True, otherwise they will both have the tag ``tag1``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:8
# f71afe42e64c4dfc8482cad69775bb26
msgid "Used internally, you should never change it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:1
# 505d947bb2b84eafabea9e5b07b95f76
msgid "Set metadata for the book `id` from the `Metadata` object `mi`"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:3
# 8a6a10a107e84c68baa20dc3a7f55bee
msgid "Setting force_changes=True will force set_metadata to update fields even if mi contains empty values. In this case, 'None' is distinguished from 'empty'. If mi.XXX is None, the XXX is not replaced, otherwise it is. The tags, identifiers, and cover attributes are special cases. Tags and identifiers cannot be set to None so then will always be replaced if force_changes is true. You must ensure that mi contains the values you want the book to have. Covers are always changed if a new cover is provided, but are never deleted. Also note that force_changes has no effect on setting title or authors."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_pref:1
# 6ff7b8b6d415476da692bceccdf3508f
msgid "Set the specified preference to the specified value. See also :meth:`pref`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:1
# 209bfbce489947ed9ce9ef7e267b3188
msgid "Return the ids of all books having the tag ``tag`` that are older than than the specified time. tag comparison is case insensitive."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:4
# 5542a027759c4b0196f92141bc838193
msgid "A timedelta object or None. If None, then all ids with the tag are returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:7
# 1cc5e04ec67543e587b35ca271e8d78a
msgid "If not None the list of matches will be restricted to books that have this tag"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:10
# 3ce88b7e3c7d4fd4b5992015d5ad4860
msgid "A list of authors. If not None the list of matches will be restricted to books that have these authors (case insensitive)."
msgstr ""

