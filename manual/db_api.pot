# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.46.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-25 09:34+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../db_api.rst:6
# 17cd6d5fd22946008fb80004384b4aaa
msgid "API Documentation for the database interface"
msgstr ""

#: ../../db_api.rst:11
# cb6f0298ef71441395a98907dc54f73a
msgid "This API is thread safe (it uses a multiple reader, single writer locking scheme).  You can access this API like this::"
msgstr ""

#: ../../db_api.rst:16
# c8b7ba929589416dbad4906e37958f70
msgid "If you are in a calibre plugin that is part of the main calibre GUI, you get access to it like this instead::"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:1
# c6c178b3c5344c688209a8048eb5355d
msgid "An in-memory cache of the metadata.db file from a calibre library. This class also serves as a threadsafe API for accessing the database. The in-memory cache is maintained in normal form for maximum performance."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:5
# 840724bee2e44204966c79108e84cb5a
msgid "SQLITE is simply used as a way to read and write from metadata.db robustly. All table reading/sorting/searching/caching logic is re-implemented. This was necessary for maximum performance and flexibility."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:1
# bda6fdce7086421ea9dff25867e3ccc1
msgid "Add the specified books to the library. Books should be an iterable of 2-tuples, each 2-tuple of the form :code:`(mi, format_map)` where mi is a Metadata object and format_map is a dictionary of the form :code:`{fmt: path_or_stream}`, for example: :code:`{'EPUB': '/path/to/file.epub'}`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:6
# 74bf7331c17f4f3daee7bef7c49ce23a
msgid "Returns a pair of lists: :code:`ids, duplicates`. ``ids`` contains the book ids for all newly created books in the database. ``duplicates`` contains the :code:`(mi, format_map)` for all books that already exist in the database as per the simple duplicate detection heuristic used by :meth:`has_book`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_custom_book_data:1
# ce0c7d3101eb4b01acbd699c4ad6f6de
msgid "Add data for name where val_map is a map of book_ids to values. If delete_first is True, all previously stored data for name will be removed."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:1
# 2b6a76a638694a35924eaeafe8fe0b2b
msgid "Add a format to the specified book. Return True of the format was added successfully."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:3
# c989e4631b7c4acfbc52c625cd3ecbee
msgid "If True replace existing format, otherwise if the format already exists, return False."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:4
# 38cffebc61db4549b7c5dfe174bd07b3
msgid "If True, file type plugins are run on the format before and after being added."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:5
# fa2fced50be94abc9e5170c075486b88
msgid "Internal use only."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_book_ids:1
# f078617b093745b0b10f6a7a530c6806
msgid "Frozen set of all known book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_for:1
# 6e7ca1478a534ad3a1c563304806bd39
msgid "Same as field_for, except that it operates on multiple books at once"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_ids:1
# b11fd8bd67094add840f4ee15babc822
msgid "Frozen set of ids for all values in the field ``name``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_names:1
# c82f35939e7f483b89648338a99592d6
msgid "Frozen set of all fields names (should only be used for many-one and many-many fields)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:1
# 807b2537577347b6ac043ddfddb644ab
msgid "Return author data as a dictionary with keys: name, sort, link"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:3
# 303004054dda41a0b1ac6ee95659bb8b
msgid "If no authors with the specified ids are found an empty dictionary is returned. If author_ids is None, data for all authors is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_sort_from_authors:1
# e7bd1200d10c4a249104a166a6afd3ba
msgid "Given a list of authors, return the author_sort string for the authors, preferring the author sort associated with the author over the computed string."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:1
# 2a72741da7014180ae318931ee8f9027
msgid "Return all the books associated with the item identified by ``item_id``, where the item belongs to the field ``name``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:4
# 770b145bf69b469583c01f7239142971
msgid "Returned value is a set of book ids, or the empty set if the item or the field does not exist."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_cover_to:1
# 5966a2ad572f498c8626ebed7627a818
msgid "Copy the cover to the file like object ``dest``. Returns False if no cover exists or dest is the same file as the current cover. dest can also be a path in which case the cover is copied to it iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_format_to:1
# eb9636633b0249f19de5fbd0b64610c3
msgid "Copy the format ``fmt`` to the file like object ``dest``. If the specified format does not exist, raises :class:`NoSuchFormat` error. dest can also be a path, in which case the format is copied to it, iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:1
# 9b9fba2e5d43465d92595f16d0f65262
msgid "Return the cover image or None. By default, returns the cover as a bytestring."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:4
# 6d7cfaa840e74af597930dd0475f6f40
msgid "WARNING: Using as_path will copy the cover to a temp file and return the path to the temp file. You should delete the temp file when you are done with it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:8
# 08be92b0ee964bd6b645b73b83d4c754
msgid "If True return the image as an open file object (a SpooledTemporaryFile)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:9
# 1848445fe6a546928ca7d02df3e8a40d
msgid "If True return the image as a QImage object"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:10
# 8fd82deb4e05464594923e7cf9d13044
msgid "If True return the image as a path pointing to a temporary file"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.delete_custom_book_data:1
# 852790335cea40a6a94df880d7aaeccc
msgid "Delete data for name. By default deletes all data, if you only want to delete data for some book ids, pass in a list of book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.embed_metadata:1
# 779281b700314d938237ad9f4afef705
msgid "Update metadata in all formats of the specified book_ids to current metadata in the database."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.fast_field_for:1
# 60041879b73742028a7f432ecde7339c
msgid "Same as field_for, except that it avoids the extra lookup to get the field object"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:1
# b2262137a47740729922431d1752c41c
msgid "Return the value of the field ``name`` for the book identified by ``book_id``. If no such book exists or it has no defined value for the field ``name` or no such field exists, then ``default_value`` is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:6
# 0ce84d3015784de5a01e4a6f0d67265d
msgid "``default_value`` is not used for title, title_sort, authors, author_sort and series_index. This is because these always have values in the db. ``default_value`` is used for all custom columns."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:10
# 2b8077a6808a443380a2315859633f33
msgid "The returned value for is_multiple fields are always tuples, even when no values are found (in other words, default_value is ignored). The exception is identifiers for which the returned value is always a dict. The returned tuples are always in link order, that is, the order in which they were created."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_ids_for:1
# cd19691befd74ffdb6c12a1370b97fdc
msgid "Return the ids (as a tuple) for the values that the field ``name`` has on the book identified by ``book_id``. If there are no values, or no such book, or no such field, an empty tuple is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.find_identical_books:1
# 533786bf4c044bd28bbddf84a74995b8
msgid "Finds books that have a superset of the authors in mi and the same title (title is fuzzy matched)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:1
# cdbded27415d4c31a3725966bf7e11b0
msgid "Return the ebook format as a bytestring or `None` if the format doesn't exist, or we don't have permission to write to the ebook file."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:4
# 73367c2847b4462eba9ccdbe98958cfa
msgid "If True the ebook format is returned as a file object. Note that the file object is a SpooledTemporaryFile, so if what you want to do is copy the format to another file, use :meth:`copy_format_to` instead for performance."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:8
# 99b2b53f0cd54f89949a7178e3345d8c
msgid "Copies the format file to a temp file and returns the path to the temp file"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:10
# 4d8ebb44898e4d8da29febdca56cce5f
msgid "If True and returning a path the filename is the same as that used in the library. Note that using this means that repeated calls yield the same temp file (which is re-created each time)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:1
# f6c97fabed1b4e4683eae25c0cce4e57
msgid "Return absolute path to the ebook file of format `format`. You should almost never use this, as it breaks the threadsafe promise of this API. Instead use, :meth:`copy_format_to`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:5
# db710c57740d4f3f889d7cc2ba790557
msgid "Currently used only in calibredb list, the viewer, edit book, compare_format to original format and the catalogs (via get_data_as_dict())."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:9
# d42709ddfd7a432582311672aa51a8ee
msgid "Apart from the viewer and edit book, I don't believe any of the others do any file write I/O with the results of this call."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_hash:1
# 376f0e41bca24c1e8dc2545ab80df7d9
msgid "Return the hash of the specified format for the specified book. The kind of hash is backend dependent, but is usually SHA-256."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:1
# 036ee58bbda04a95b308b46d0c6b4043
msgid "Return the path, size and mtime for the specified format for the specified book. You should not use path unless you absolutely have to, since accessing it directly breaks the threadsafe guarantees of this API. Instead use the :meth:`copy_format_to` method."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:6
# 150f10a9aefc4bd2b317d91b1ce3ad7b
msgid "If ``True`` cached values are used, otherwise a slow filesystem access is done. The cache values could be out of date if access was performed to the filesystem outside of this API."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:10
# 429d19b44f6d4713b3767674b8f46c65
msgid "If ``True`` The max_size field of the database is updates for this book."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.formats:1
# 5983d40be7cf43ebaa18a49de405fca3
msgid "Return tuple of all formats for the specified book. If verify_formats is True, verifies that the files exist on disk."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_categories:1
# 673a56cf19d645ebb2a0aafcdfdd71a9
msgid "Used internally to implement the Tag Browser"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_custom_book_data:1
# 060b32ef08574e09a25b47fd55ed1e31
msgid "Get data for name. By default returns data for all book_ids, pass in a list of book ids if you only want some data. Returns a map of book_id to values. If a particular value could not be decoded, uses default for it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_id_map:1
# 94996c85a6624a77b1ce9e4676d7c8cc
msgid "Return a mapping of id numbers to values for the specified field. The field must be a many-one or many-many field, otherwise a ValueError is raised."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_ids_for_custom_book_data:1
# 1d2f8962838b451eb12beae434b51c7a
msgid "Return the set of book ids for which name has data."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_id:1
#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_ids:1
# a6116b5931ae44aca22bbb1051d61eab
# dd62e68162df4d5c925381d0f2196a22
msgid "Return the item id for item_name (case-insensitive)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_name:1
# 5efd46c85d834edeb62fbecd699c6224
msgid "Return the item name for the item specified by item_id in the specified field. See also :meth:`get_id_map`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_metadata:1
# 882c828466ba465dbca8d6f65d498cd8
msgid "Return metadata for the book identified by book_id as a :class:`Metadata` object. Note that the list of formats is not verified. If get_cover is True, the cover is returned, either a path to temp file as mi.cover or if cover_as_data is True then as mi.cover_data."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:1
# d4b65fba4385477b8bce360691a8527f
msgid "Return the next series index for the specified series, taking into account the various preferences that control next series number generation."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:4
# ba056ab2b86a495198a49e650871600f
msgid "The series-like field (defaults to the builtin series column)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:5
# 92511bf79bfe4656a234747180d7782f
msgid "If True, returns a mapping of book_id to current series_index value instead."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_proxy_metadata:1
# e0adb0846adf4c1095526f9c8163cc16
msgid "Like :meth:`get_metadata` except that it returns a ProxyMetadata object that only reads values from the database on demand. This is much faster than get_metadata when only a small number of fields need to be accessed from the reutrned metadata object."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_usage_count_by_id:1
# c1829cc5f1a24f108b6758b999115654
msgid "Return a mapping of id to usage count for all values of the specified field, which must be a many-one or many-many field."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_book:1
# 47de079cf60441cebc4c69f60703874f
msgid "Return True iff the database contains an entry with the same title as the passed in Metadata object. The comparison is case-insensitive."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_format:1
# 98fef5c1bea24219881b6466dce6e7b9
msgid "Return True iff the format exists on disk"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_id:1
# cf27106a98094e768c3c0d4132bc6121
msgid "Return True iff the specified book_id exists in the db"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.init:1
# 6fdaf0a38db0434e870d19edd42b5df4
msgid "Initialize this cache with data from the backend."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:1
# 45ee4784868041f29f9455f960094f1e
msgid "Return a list of sorted book ids. If ids_to_sort is None, all book ids are returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:4
# c1dffe4911e141298f140826347decef
msgid "fields must be a list of 2-tuples of the form (field_name, ascending=True or False). The most significant field is the first 2-tuple."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.pref:1
# 71eb5637598f4c76af0e33d5856f12b1
msgid "Return the value for the specified preference or the value specified as ``default`` if the preference is not set."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.read_backup:1
# 4243144751f945c1b37d1eb73e375ece
msgid "Return the OPF metadata backup for the book as a bytestring or None if no such backup exists."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_books:1
# 8550ab68f0434719a7606be87f51b1d0
msgid "Remove the books specified by the book_ids from the database and delete their format files. If ``permanent`` is False, then the format files are not deleted."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:1
# 5161594b765d460aae30e2399e630220
msgid "Remove the specified formats from the specified books."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:3
# fe6ef88820484306a91800efd2ccef33
msgid "A mapping of book_id to a list of formats to be removed from the book."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:4
# b8c8301af3e74a3cb80550e2948ec514
msgid "If True, only remove the record for the format from the db, do not delete the actual format file from the filesystem."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_items:1
# 9722057b01ed42f89f02e1c512a4577a
msgid "Delete all items in the specified field with the specified ids. Returns the set of affected book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:1
# c2b89854c5bb464f956ce800239a2082
msgid "Rename items from a many-one or many-many field such as tags or series."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:3
# bfeeb7f27e4c4fd8a3d4bf9e8bee5930
msgid "When renaming in a series-like field also change the series_index values."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_book:1
# 7313b9b0e9fd4db399d6f31945ba1846
msgid "Restore the book entry in the database for a book that already exists on the filesystem"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_original_format:1
# 9e7437a2f5664c1489364d7629943e04
msgid "Restore the specified format from the previously saved ORIGINAL_FORMAT, if any. Return True on success. The ORIGINAL_FORMAT is deleted after a successful restore."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:1
# c71b2e78cb5447b48dc7f4e7b024d59e
msgid "A safe read lock is a lock that does nothing if the thread already has a write lock, otherwise it acquires a read lock. This is necessary to prevent DowngradeLockErrors, which can happen when updating the search cache in the presence of composite columns. Updating the search cache holds an exclusive lock, but searching a composite column involves reading field values via ProxyMetadata which tries to get a shared lock. There may be other scenarios that trigger this as well."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:9
# 6dd05b4dce1f4544bd301e000989217f
msgid "This property returns a new lock object on every access. This lock object is not recursive (for performance) and must only be used in a with statement as ``with cache.safe_read_lock:`` otherwise bad things will happen."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.save_original_format:1
# 24e54f0cda5740debfa5a15882e8403c
msgid "Save a copy of the specified format as ORIGINAL_FORMAT, overwriting any existing ORIGINAL_FORMAT."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:1
# e78ebbdaec094caba2addf7cf3b85b02
msgid "Search the database for the specified query, returning a set of matched book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:3
# 7647653da7f449e7b801f4958c5340b9
msgid "A restriction that is ANDed to the specified query. Note that restrictions are cached, therefore the search for a AND b will be slower than a with restriction b."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:6
# cfd41bccea514cd9bf765867dfb7783e
msgid "Used internally (virtual fields such as on_device to search over)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:8
# 765c74f0759841699e2f57f7ee854a80
msgid "If not None, a set of book ids for which books will be searched instead of searching all books."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_conversion_options:1
# 13f0599cafb946dba5e50a60c1e78de5
msgid "options must be a map of the form {book_id:conversion_options}"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_cover:1
# 66b08e19a29b4c92974b918278b49f00
msgid "Set the cover for this book.  data can be either a QImage, QPixmap, file object or bytestring. It can also be None, in which case any existing cover is removed."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:1
# 585cf566f00c40c58f866375f6ae4ac7
msgid "Set the values of the field specified by ``name``. Returns the set of all book ids that were affected by the change."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:3
# 0cef4c2337d04356b90f2c223986d58a
msgid "Mapping of book_ids to values that should be applied."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:4
# 1c1c3425bf334459a7b75934046e7cb9
msgid "If True, the case of many-one or many-many fields will be changed. For example, if a  book has the tag ``tag1`` and you set the tag for another book to ``Tag1`` then the both books will have the tag ``Tag1`` if allow_case_change is True, otherwise they will both have the tag ``tag1``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:8
# 9035ed4e30cc450db3e022bd8cccee3a
msgid "Used internally, you should never change it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:1
# 5314f8ab35274cd88fe92dd9b09770e7
msgid "Set metadata for the book `id` from the `Metadata` object `mi`"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:3
# 04a9d68ef4e644dead3ca8f36403e459
msgid "Setting force_changes=True will force set_metadata to update fields even if mi contains empty values. In this case, 'None' is distinguished from 'empty'. If mi.XXX is None, the XXX is not replaced, otherwise it is. The tags, identifiers, and cover attributes are special cases. Tags and identifiers cannot be set to None so then will always be replaced if force_changes is true. You must ensure that mi contains the values you want the book to have. Covers are always changed if a new cover is provided, but are never deleted. Also note that force_changes has no effect on setting title or authors."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_pref:1
# 0275e7ff86ac4df9a64cc40e4a4df999
msgid "Set the specified preference to the specified value. See also :meth:`pref`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:1
# fa7e6c380e4d4965993edb8b173e75ae
msgid "Return the ids of all books having the tag ``tag`` that are older than than the specified time. tag comparison is case insensitive."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:4
# bfb630f9047648b2b70a44645f35613f
msgid "A timedelta object or None. If None, then all ids with the tag are returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:7
# 3801f93c22c44fce9a21f9ea543ab737
msgid "If not None the list of matches will be restricted to books that have this tag"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:10
# aa4e74a4795d45ccb3cf28a07f28a0c0
msgid "A list of authors. If not None the list of matches will be restricted to books that have these authors (case insensitive)."
msgstr ""

