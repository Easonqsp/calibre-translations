# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.8.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-31 08:00+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/db_api.rst:4
# 4da6caed6891498ca443963b8efa8440
msgid "API Documentation for the database interface"
msgstr ""

#: ../../home/kovid/work/calibre/manual/db_api.rst:9
# f3d7aa70dfdd4763becc6db7ce440207
msgid "This API is thread safe (it uses a multiple reader, single writer locking scheme).  You can access this API like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/db_api.rst:14
# 36975983eb324abfb4183d58348ae8a1
msgid "If you are in a calibre plugin that is part of the main calibre GUI, you get access to it like this instead::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:1
# 29e38ff6b0c1458ab56c3d2aa2203174
msgid "An in-memory cache of the metadata.db file from a calibre library. This class also serves as a threadsafe API for accessing the database. The in-memory cache is maintained in normal form for maximum performance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:5
# 8eac472fa5354113a81ab034424921b5
msgid "SQLITE is simply used as a way to read and write from metadata.db robustly. All table reading/sorting/searching/caching logic is re-implemented. This was necessary for maximum performance and flexibility."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:1
# ac12d3db3a174ae09f97be542a913de2
msgid "Add the specified books to the library. Books should be an iterable of 2-tuples, each 2-tuple of the form :code:`(mi, format_map)` where mi is a Metadata object and format_map is a dictionary of the form :code:`{fmt: path_or_stream}`, for example: :code:`{'EPUB': '/path/to/file.epub'}`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:6
# 3bf8082b877a4130b96d6ca8f4e81d25
msgid "Returns a pair of lists: :code:`ids, duplicates`. ``ids`` contains the book ids for all newly created books in the database. ``duplicates`` contains the :code:`(mi, format_map)` for all books that already exist in the database as per the simple duplicate detection heuristic used by :meth:`has_book`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_custom_book_data:1
# fc715f82149f4f5390b169f6f1fef6a5
msgid "Add data for name where val_map is a map of book_ids to values. If delete_first is True, all previously stored data for name will be removed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:1
# ed4dec098a4f4b749d7d547cd2d498ee
msgid "Add a format to the specified book. Return True of the format was added successfully."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:3
# 2458a925fb5c4f43877ab6cd38bdf2c1
msgid "If True replace existing format, otherwise if the format already exists, return False."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:4
# 7b7fc8c4471847d78761da7d8f7058b3
msgid "If True, file type plugins are run on the format before and after being added."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:5
# c847420777834d3ca7e7434677ca1c2e
msgid "Internal use only."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_book_ids:1
# 6946df5a859f4abeb5aff70b788e4715
msgid "Frozen set of all known book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_for:1
# 4e118712697f465687be83435d626d97
msgid "Same as field_for, except that it operates on multiple books at once"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_ids:1
# 71ec25b6d50b45c1853a45616cd62c98
msgid "Frozen set of ids for all values in the field ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_names:1
# 3fd8691953464617813223e23dbf827c
msgid "Frozen set of all fields names (should only be used for many-one and many-many fields)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:1
# 6e32380f22e54bd792e91ce42a94f19f
msgid "Return author data as a dictionary with keys: name, sort, link"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:3
# f1213119bd0d431b80ac6d872fac9ebd
msgid "If no authors with the specified ids are found an empty dictionary is returned. If author_ids is None, data for all authors is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_sort_from_authors:1
# d010f9e7a56c4aaa90eb00dd9ada4d07
msgid "Given a list of authors, return the author_sort string for the authors, preferring the author sort associated with the author over the computed string."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:1
# b183055e921a4674a7fc2c5fb1cc4a99
msgid "Return all the books associated with the item identified by ``item_id``, where the item belongs to the field ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:4
# 7a7f9804499f417da84579d1e71f0c10
msgid "Returned value is a set of book ids, or the empty set if the item or the field does not exist."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_cover_to:1
# c04eafb85f454c3385c28122eddce608
msgid "Copy the cover to the file like object ``dest``. Returns False if no cover exists or dest is the same file as the current cover. dest can also be a path in which case the cover is copied to it if and only if the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_format_to:1
# 1dc31e149dc24aa4a18a576cdcc9565d
msgid "Copy the format ``fmt`` to the file like object ``dest``. If the specified format does not exist, raises :class:`NoSuchFormat` error. dest can also be a path, in which case the format is copied to it, iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:1
# 3f45bdb4e9c94d7d830460fb6d2cf938
msgid "Return the cover image or None. By default, returns the cover as a bytestring."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:4
# 7d982aedc3dc403b9e5ce502faf46276
msgid "WARNING: Using as_path will copy the cover to a temp file and return the path to the temp file. You should delete the temp file when you are done with it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:8
# 95354c57bce7470bb92b181447e65bba
msgid "If True return the image as an open file object (a SpooledTemporaryFile)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:9
# 804c529769424c9ebf43034487b76367
msgid "If True return the image as a QImage object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:10
# 16c20836797a4c6a994745c00d80a319
msgid "If True return the image as a path pointing to a temporary file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.delete_custom_book_data:1
# cefbd785bf3e4f3aa1d0d0849b1d01a8
msgid "Delete data for name. By default deletes all data, if you only want to delete data for some book ids, pass in a list of book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.embed_metadata:1
# 552408a88fd042ffa15a7bb14e7b9871
msgid "Update metadata in all formats of the specified book_ids to current metadata in the database."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.fast_field_for:1
# 247275d96962450594b0fda209d69d5f
msgid "Same as field_for, except that it avoids the extra lookup to get the field object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:1
# f9ecb085749549ec8e39a385ff0f454a
msgid "Return the value of the field ``name`` for the book identified by ``book_id``. If no such book exists or it has no defined value for the field ``name`` or no such field exists, then ``default_value`` is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:6
# 65b492bf49d04861957e1aab52d5e537
msgid "``default_value`` is not used for title, title_sort, authors, author_sort and series_index. This is because these always have values in the db. ``default_value`` is used for all custom columns."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:10
# d1d59b099336468aada2491967071b63
msgid "The returned value for is_multiple fields are always tuples, even when no values are found (in other words, default_value is ignored). The exception is identifiers for which the returned value is always a dict. The returned tuples are always in link order, that is, the order in which they were created."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_ids_for:1
# 1eeccb00a70c4537a4c4a9281a8ce335
msgid "Return the ids (as a tuple) for the values that the field ``name`` has on the book identified by ``book_id``. If there are no values, or no such book, or no such field, an empty tuple is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.find_identical_books:1
# e80fe87baead4f938a22dc9844a3cf82
msgid "Finds books that have a superset of the authors in mi and the same title (title is fuzzy matched)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:1
# 8bcb0b0459dc4fa691f412b7f31d454e
msgid "Return the ebook format as a bytestring or `None` if the format doesn't exist, or we don't have permission to write to the ebook file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:4
# 9a1ca160a3904cc79a53da956e54b967
msgid "If True the ebook format is returned as a file object. Note that the file object is a SpooledTemporaryFile, so if what you want to do is copy the format to another file, use :meth:`copy_format_to` instead for performance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:8
# f8fa744b4de243df90a51c1a93efb7f0
msgid "Copies the format file to a temp file and returns the path to the temp file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:10
# dfc47ba1ee1a4761924be9282e7251d9
msgid "If True and returning a path the filename is the same as that used in the library. Note that using this means that repeated calls yield the same temp file (which is re-created each time)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:1
# 5ca5b38f4cc449b68db110674c4adfdb
msgid "Return absolute path to the ebook file of format `format`. You should almost never use this, as it breaks the threadsafe promise of this API. Instead use, :meth:`copy_format_to`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:5
# dcbb9d54d6c548c79a74c3c76a610a7f
msgid "Currently used only in calibredb list, the viewer, edit book, compare_format to original format and the catalogs (via get_data_as_dict())."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:9
# 559b70bc99f64a11a1c91daa88e117f4
msgid "Apart from the viewer and edit book, I don't believe any of the others do any file write I/O with the results of this call."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_hash:1
# e2d7ecb6a3ca46e5baf75e18398ea006
msgid "Return the hash of the specified format for the specified book. The kind of hash is backend dependent, but is usually SHA-256."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:1
# a449d5b785bd4aad979617472fae4d0f
msgid "Return the path, size and mtime for the specified format for the specified book. You should not use path unless you absolutely have to, since accessing it directly breaks the threadsafe guarantees of this API. Instead use the :meth:`copy_format_to` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:6
# 6b880d1f1a704e9e9c98eed57d55992c
msgid "If ``True`` cached values are used, otherwise a slow filesystem access is done. The cache values could be out of date if access was performed to the filesystem outside of this API."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:10
# 25cbcc3153d849b4bc0b5aceb036aa7a
msgid "If ``True`` The max_size field of the database is updates for this book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.formats:1
# e8faf0a9aa3548a0859c06b0824201c1
msgid "Return tuple of all formats for the specified book. If verify_formats is True, verifies that the files exist on disk."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_categories:1
# e6d294d0113b428aba644f87a7c98261
msgid "Used internally to implement the Tag Browser"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_custom_book_data:1
# ab7152677ba847bb849a6997651d3418
msgid "Get data for name. By default returns data for all book_ids, pass in a list of book ids if you only want some data. Returns a map of book_id to values. If a particular value could not be decoded, uses default for it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_id_map:1
# ce6705d4413a4f20b2118bf5188fa70a
msgid "Return a mapping of id numbers to values for the specified field. The field must be a many-one or many-many field, otherwise a ValueError is raised."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_ids_for_custom_book_data:1
# 0827ce36f32244f48298f15e92e719db
msgid "Return the set of book ids for which name has data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_id:1
#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_ids:1
# 8917f084693b41e9a36abccf72be381b
# f29a5805f4e44bfea837fd37171ed768
msgid "Return the item id for item_name (case-insensitive)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_name:1
# a9029c72077f434888911365bbe89e88
msgid "Return the item name for the item specified by item_id in the specified field. See also :meth:`get_id_map`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_metadata:1
# 638dbff43615453bbfb735cc5c410ae5
msgid "Return metadata for the book identified by book_id as a :class:`Metadata` object. Note that the list of formats is not verified. If get_cover is True, the cover is returned, either a path to temp file as mi.cover or if cover_as_data is True then as mi.cover_data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:1
# f7a3f198e5934a3cb714df17a73356ab
msgid "Return the next series index for the specified series, taking into account the various preferences that control next series number generation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:4
# 0b16efa0092b4c5e90d5a1ae54f0b253
msgid "The series-like field (defaults to the builtin series column)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:5
# c1058969099344389a9950a6a2a3f2c5
msgid "If True, returns a mapping of book_id to current series_index value instead."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_proxy_metadata:1
# a0ba159ab06e44cfba1b7f0e537b658d
msgid "Like :meth:`get_metadata` except that it returns a ProxyMetadata object that only reads values from the database on demand. This is much faster than get_metadata when only a small number of fields need to be accessed from the returned metadata object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_usage_count_by_id:1
# 9fbf810605074b76b8f398e01b047788
msgid "Return a mapping of id to usage count for all values of the specified field, which must be a many-one or many-many field."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_book:1
# 0d1c5465644c488da7ca8f4a4b4e5f06
msgid "Return True iff the database contains an entry with the same title as the passed in Metadata object. The comparison is case-insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_format:1
# 2a387d6c38a44020839b39dab2b3fab0
msgid "Return True iff the format exists on disk"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_id:1
# 7fd10b62f0a248b7b6ecbda0e62f9629
msgid "Return True iff the specified book_id exists in the db"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.init:1
# aff5c042e8094957ab3ad0d21ea5541c
msgid "Initialize this cache with data from the backend."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:1
# f9c57598741b49beb0c929b7bd7e33c1
msgid "Return a list of sorted book ids. If ids_to_sort is None, all book ids are returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:4
# b8e188b43758420f9af834887e29cb6f
msgid "fields must be a list of 2-tuples of the form (field_name, ascending=True or False). The most significant field is the first 2-tuple."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.pref:1
# 986a59074c8e4a80b8038729109b8a1c
msgid "Return the value for the specified preference or the value specified as ``default`` if the preference is not set."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.read_backup:1
# c4bdc6ca05e640ef83bb5a6faefb9402
msgid "Return the OPF metadata backup for the book as a bytestring or None if no such backup exists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_books:1
# b1147f9d486b4e5f91cd14133f4b0634
msgid "Remove the books specified by the book_ids from the database and delete their format files. If ``permanent`` is False, then the format files are not deleted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:1
# 9b6a0c7c75694dce85ae81d0b9202755
msgid "Remove the specified formats from the specified books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:3
# 8874aa9b7f3344dab3b4dce051419a19
msgid "A mapping of book_id to a list of formats to be removed from the book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:4
# 235c22ae967b481db1e8e4e824f3720a
msgid "If True, only remove the record for the format from the db, do not delete the actual format file from the filesystem."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_items:1
# 6cd3cd2eec164ee6ac6dfde741fd10cc
msgid "Delete all items in the specified field with the specified ids. Returns the set of affected book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:1
# 6e5cad56128a44a5969762ebe19f40af
msgid "Rename items from a many-one or many-many field such as tags or series."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:3
# 34ea5576e2144d7e9f184f9b5402aa05
msgid "When renaming in a series-like field also change the series_index values."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_book:1
# f688467658374af28d9a075cf4505a6a
msgid "Restore the book entry in the database for a book that already exists on the filesystem"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_original_format:1
# f2cb46b138ad4d428f44b8e91d60930f
msgid "Restore the specified format from the previously saved ORIGINAL_FORMAT, if any. Return True on success. The ORIGINAL_FORMAT is deleted after a successful restore."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:1
# 7cfdf5e429294950bef401f6c300aed1
msgid "A safe read lock is a lock that does nothing if the thread already has a write lock, otherwise it acquires a read lock. This is necessary to prevent DowngradeLockErrors, which can happen when updating the search cache in the presence of composite columns. Updating the search cache holds an exclusive lock, but searching a composite column involves reading field values via ProxyMetadata which tries to get a shared lock. There may be other scenarios that trigger this as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:9
# 065a951a9dc64e299e72d3e7f997a473
msgid "This property returns a new lock object on every access. This lock object is not recursive (for performance) and must only be used in a with statement as ``with cache.safe_read_lock:`` otherwise bad things will happen."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.save_original_format:1
# 7d489b1201a244a1bcb7b58d0e3174fc
msgid "Save a copy of the specified format as ORIGINAL_FORMAT, overwriting any existing ORIGINAL_FORMAT."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:1
# 739bce6b85f04575a9dd5646eb6b8750
msgid "Search the database for the specified query, returning a set of matched book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:3
# eceebf26a9834f9caaa2eb4b54da92fa
msgid "A restriction that is ANDed to the specified query. Note that restrictions are cached, therefore the search for a AND b will be slower than a with restriction b."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:6
# 79b713c8cbe345b299fc6363d9b28dd0
msgid "Used internally (virtual fields such as on_device to search over)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:8
# dab13317578041cc82b7af4f7447902d
msgid "If not None, a set of book ids for which books will be searched instead of searching all books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_conversion_options:1
# b44a7f9bc8a14c29b1a511c9e1d443a4
msgid "options must be a map of the form {book_id:conversion_options}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_cover:1
# 0fdb7b7572fe489c8428e826ad954571
msgid "Set the cover for this book.  data can be either a QImage, QPixmap, file object or bytestring. It can also be None, in which case any existing cover is removed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:1
# cc2b32f6af7d4efe83a7e99fef0921e8
msgid "Set the values of the field specified by ``name``. Returns the set of all book ids that were affected by the change."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:3
# c722c132145b460583ec81c9b2482aa7
msgid "Mapping of book_ids to values that should be applied."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:4
# 7acb15936e664bf48dc7983675f98eea
msgid "If True, the case of many-one or many-many fields will be changed. For example, if a  book has the tag ``tag1`` and you set the tag for another book to ``Tag1`` then the both books will have the tag ``Tag1`` if allow_case_change is True, otherwise they will both have the tag ``tag1``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:8
# 0fa5f72dc3e740309b54d993e8761fb6
msgid "Used internally, you should never change it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:1
# b9c8875b87364af6b719448956703791
msgid "Set metadata for the book `id` from the `Metadata` object `mi`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:3
# 88d7f56728784959967b631eb2ebbac5
msgid "Setting force_changes=True will force set_metadata to update fields even if mi contains empty values. In this case, 'None' is distinguished from 'empty'. If mi.XXX is None, the XXX is not replaced, otherwise it is. The tags, identifiers, and cover attributes are special cases. Tags and identifiers cannot be set to None so then will always be replaced if force_changes is true. You must ensure that mi contains the values you want the book to have. Covers are always changed if a new cover is provided, but are never deleted. Also note that force_changes has no effect on setting title or authors."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_pref:1
# 72613c9fcbac4dd0a878ccdc58ce85a5
msgid "Set the specified preference to the specified value. See also :meth:`pref`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:1
# 3271c5fc7ed44806928527c33a7ab067
msgid "Return the ids of all books having the tag ``tag`` that are older than the specified time. tag comparison is case insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:4
# a9c6bcc41bb2404cb43987628a2b61f3
msgid "A timedelta object or None. If None, then all ids with the tag are returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:7
# 90313c33c1d44d8a8f2e9a17f5045ad0
msgid "If not None the list of matches will be restricted to books that have this tag"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:10
# a9e52c5ed6e44830aaff9e17c6ffe96e
msgid "A list of authors. If not None the list of matches will be restricted to books that have these authors (case insensitive)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.user_categories_for_books:1
# f5a2dbf53bb74d4e87e42a65894883be
msgid "Return the user categories for the specified books. proxy_metadata_map is optional and is useful for a performance boost, in contexts where a ProxyMetadata object for the books already exists. It should be a mapping of book_ids to their corresponding ProxyMetadata objects."
msgstr ""

