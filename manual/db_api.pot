# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.16.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-10 06:53+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/db_api.rst:4
# 3cbfb657d0dc4473bd60ea709e072b4f
msgid "API Documentation for the database interface"
msgstr ""

#: ../../home/kovid/work/calibre/manual/db_api.rst:9
# f11525b3b381422f914264ad283e413b
msgid "This API is thread safe (it uses a multiple reader, single writer locking scheme).  You can access this API like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/db_api.rst:14
# fa80518d83fc4afdbdac29e3751e1fd8
msgid "If you are in a calibre plugin that is part of the main calibre GUI, you get access to it like this instead::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:1
# e6c1f0504ae14ed9a3c6ed6d0839b963
msgid "An in-memory cache of the metadata.db file from a calibre library. This class also serves as a threadsafe API for accessing the database. The in-memory cache is maintained in normal form for maximum performance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:5
# fcd3030612a1416d99241df504801a93
msgid "SQLITE is simply used as a way to read and write from metadata.db robustly. All table reading/sorting/searching/caching logic is re-implemented. This was necessary for maximum performance and flexibility."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:1
# 63099eeda57c4c7a9b4776a70a202d09
msgid "Add the specified books to the library. Books should be an iterable of 2-tuples, each 2-tuple of the form :code:`(mi, format_map)` where mi is a Metadata object and format_map is a dictionary of the form :code:`{fmt: path_or_stream}`, for example: :code:`{'EPUB': '/path/to/file.epub'}`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:6
# 5ec16909a67a456cad54ab3b2d8fcd6c
msgid "Returns a pair of lists: :code:`ids, duplicates`. ``ids`` contains the book ids for all newly created books in the database. ``duplicates`` contains the :code:`(mi, format_map)` for all books that already exist in the database as per the simple duplicate detection heuristic used by :meth:`has_book`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_custom_book_data:1
# 42c2c323d286429fa657c99045c973b6
msgid "Add data for name where val_map is a map of book_ids to values. If delete_first is True, all previously stored data for name will be removed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:1
# f2560983651d4d408c81aeab7e4c4e09
msgid "Add a format to the specified book. Return True of the format was added successfully."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:3
# c14e1a9564a34eae9486fe185b02a1df
msgid "If True replace existing format, otherwise if the format already exists, return False."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:4
# 97c9c9a5549c4613aae7c7207e46731d
msgid "If True, file type plugins are run on the format before and after being added."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:5
# 4aa55f5a46b2499eb3d9be4cfb8d78df
msgid "Internal use only."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_book_ids:1
# 31803c6651af41c5af99a2c517420ddc
msgid "Frozen set of all known book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_for:1
# b78581e45ea84ebb8488cba0355dfcde
msgid "Same as field_for, except that it operates on multiple books at once"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_ids:1
# ab40fcd430cf4419bcae2ec2a019fc33
msgid "Frozen set of ids for all values in the field ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_names:1
# 6afbc24d62b644239c36dadbd961f46b
msgid "Frozen set of all fields names (should only be used for many-one and many-many fields)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:1
# 213aa601a34b466f8f0b4362c2b0df7a
msgid "Return author data as a dictionary with keys: name, sort, link"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:3
# 4c37a3c8fca542e7b4f8dca330a93773
msgid "If no authors with the specified ids are found an empty dictionary is returned. If author_ids is None, data for all authors is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_sort_from_authors:1
# 9c6f7052ce47480db10e9beb59b03289
msgid "Given a list of authors, return the author_sort string for the authors, preferring the author sort associated with the author over the computed string."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:1
# d547cb387a934b06b21fd28a823cdc9a
msgid "Return all the books associated with the item identified by ``item_id``, where the item belongs to the field ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:4
# f41500293f4f4f769fa6fa49cd15e8c6
msgid "Returned value is a set of book ids, or the empty set if the item or the field does not exist."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_cover_to:1
# 94176f134fb64fdfafafd1529a19cc87
msgid "Copy the cover to the file like object ``dest``. Returns False if no cover exists or dest is the same file as the current cover. dest can also be a path in which case the cover is copied to it if and only if the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_format_to:1
# 37f3c80febd24396b1c7baeea50074e6
msgid "Copy the format ``fmt`` to the file like object ``dest``. If the specified format does not exist, raises :class:`NoSuchFormat` error. dest can also be a path, in which case the format is copied to it, iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:1
# c55b775a4ebe4362b533019ba0e0844c
msgid "Return the cover image or None. By default, returns the cover as a bytestring."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:4
# 7ab7fca082ed4695a57b09a96b1546f0
msgid "WARNING: Using as_path will copy the cover to a temp file and return the path to the temp file. You should delete the temp file when you are done with it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:8
# d9f5a6bdc9f64e0da65e55d3929a48c8
msgid "If True return the image as an open file object (a SpooledTemporaryFile)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:9
# 8e06e42fbfe14826a2bf68dc906c6f77
msgid "If True return the image as a QImage object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:10
# 437a31959772435e89f4f89d9994c71b
msgid "If True return the image as a path pointing to a temporary file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.data_for_find_identical_books:1
# 7dcd45b59af7492d8cb5ae4e4d1d78e6
msgid "Return data that can be used to implement :meth:`find_identical_books` in a worker process without access to the db. See db.utils for an implementation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.data_for_has_book:1
# 7f5d05bff8ac448f8d0db14ec5641637
msgid "Return data suitable for use in :meth:`has_book`. This can be used for an implementation of :meth:`has_book` in a worker process without access to the db."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.delete_custom_book_data:1
# 3aa3c28cf8d1490884ae75749fc07d23
msgid "Delete data for name. By default deletes all data, if you only want to delete data for some book ids, pass in a list of book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.embed_metadata:1
# a2c2216b93bf40aaab8502328ec2471f
msgid "Update metadata in all formats of the specified book_ids to current metadata in the database."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.fast_field_for:1
# b39909742198418ab85496a2018b11b2
msgid "Same as field_for, except that it avoids the extra lookup to get the field object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:1
# a6cd66a0f05c475ab7fcb50fc13dd9fc
msgid "Return the value of the field ``name`` for the book identified by ``book_id``. If no such book exists or it has no defined value for the field ``name`` or no such field exists, then ``default_value`` is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:6
# 9271fe37256e4833b71f6cb62d7dac00
msgid "``default_value`` is not used for title, title_sort, authors, author_sort and series_index. This is because these always have values in the db. ``default_value`` is used for all custom columns."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:10
# e423e5041cea482cad99c6880f108687
msgid "The returned value for is_multiple fields are always tuples, even when no values are found (in other words, default_value is ignored). The exception is identifiers for which the returned value is always a dict. The returned tuples are always in link order, that is, the order in which they were created."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_ids_for:1
# d979fb67b4fa4042beffee304a4bf273
msgid "Return the ids (as a tuple) for the values that the field ``name`` has on the book identified by ``book_id``. If there are no values, or no such book, or no such field, an empty tuple is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.find_identical_books:1
# 89e3cd39e9034e528b313f730f8afa1a
msgid "Finds books that have a superset of the authors in mi and the same title (title is fuzzy matched). See also :meth:`data_for_find_identical_books`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:1
# dd86bd663b8443ef8ed194465ae744d1
msgid "Return the ebook format as a bytestring or `None` if the format doesn't exist, or we don't have permission to write to the ebook file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:4
# 9d7374b8325d4a37b434388bb9323e1b
msgid "If True the ebook format is returned as a file object. Note that the file object is a SpooledTemporaryFile, so if what you want to do is copy the format to another file, use :meth:`copy_format_to` instead for performance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:8
# eb344ed01ca6461c824da028cc75db40
msgid "Copies the format file to a temp file and returns the path to the temp file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:10
# 1f4d16104258485180324f6a1af8a39c
msgid "If True and returning a path the filename is the same as that used in the library. Note that using this means that repeated calls yield the same temp file (which is re-created each time)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:1
# 83650da864c544538c46fd733b8c368d
msgid "Return absolute path to the ebook file of format `format`. You should almost never use this, as it breaks the threadsafe promise of this API. Instead use, :meth:`copy_format_to`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:5
# 8600ca770e954539a3b4829d36dead46
msgid "Currently used only in calibredb list, the viewer, edit book, compare_format to original format and the catalogs (via get_data_as_dict())."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:9
# 5dca685ef4d545428ab911b589941658
msgid "Apart from the viewer and edit book, I don't believe any of the others do any file write I/O with the results of this call."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_hash:1
# a23c2ef8e6ff452f814c103ecd0d7289
msgid "Return the hash of the specified format for the specified book. The kind of hash is backend dependent, but is usually SHA-256."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:1
# 5f5397631bb5447a9f3f1b0f4030a0d2
msgid "Return the path, size and mtime for the specified format for the specified book. You should not use path unless you absolutely have to, since accessing it directly breaks the threadsafe guarantees of this API. Instead use the :meth:`copy_format_to` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:6
# 0649ec0cdbbc41f190d65fc052f7be55
msgid "If ``True`` cached values are used, otherwise a slow filesystem access is done. The cache values could be out of date if access was performed to the filesystem outside of this API."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:10
# e08acb6ba83e436d841d9047e1389d3e
msgid "If ``True`` The max_size field of the database is updates for this book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.formats:1
# ee343c7ad6dd455eb622fe7032150a33
msgid "Return tuple of all formats for the specified book. If verify_formats is True, verifies that the files exist on disk."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_categories:1
# 374eda9f67244c4ca6fd713949f554b1
msgid "Used internally to implement the Tag Browser"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_custom_book_data:1
# 93e7573f42014e18a8bccd39f3accc3f
msgid "Get data for name. By default returns data for all book_ids, pass in a list of book ids if you only want some data. Returns a map of book_id to values. If a particular value could not be decoded, uses default for it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_id_map:1
# 0a68490eaa0548de85a41a278f663ffe
msgid "Return a mapping of id numbers to values for the specified field. The field must be a many-one or many-many field, otherwise a ValueError is raised."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_ids_for_custom_book_data:1
# 463eda10af964a248b4900f4189ee431
msgid "Return the set of book ids for which name has data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_id:1
#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_ids:1
# 974bcb2b6dc046d79371627a09d7a066
# 70d8d0e2368949b38868bacaee656dbc
msgid "Return the item id for item_name (case-insensitive)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_name:1
# 8220cde56e2643b6be9c93955353ae51
msgid "Return the item name for the item specified by item_id in the specified field. See also :meth:`get_id_map`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_metadata:1
# 109ce9c265984bb1b2b8c153111842e4
msgid "Return metadata for the book identified by book_id as a :class:`Metadata` object. Note that the list of formats is not verified. If get_cover is True, the cover is returned, either a path to temp file as mi.cover or if cover_as_data is True then as mi.cover_data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:1
# 13d68f1218d5435f8b5a4a12abded414
msgid "Return the next series index for the specified series, taking into account the various preferences that control next series number generation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:4
# 20482d16837545b5be95cf03ad41f742
msgid "The series-like field (defaults to the builtin series column)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:5
# ec6a10651cd043bf929ad35644c4750a
msgid "If True, returns a mapping of book_id to current series_index value instead."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_proxy_metadata:1
# ff39add503804d6594cceb8adf7233c6
msgid "Like :meth:`get_metadata` except that it returns a ProxyMetadata object that only reads values from the database on demand. This is much faster than get_metadata when only a small number of fields need to be accessed from the returned metadata object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_usage_count_by_id:1
# 805022cc81cd4cdfaa535aaccc75d8f8
msgid "Return a mapping of id to usage count for all values of the specified field, which must be a many-one or many-many field."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_book:1
# ce53483d27f341ec9e4fa4c11c3408ef
msgid "Return True iff the database contains an entry with the same title as the passed in Metadata object. The comparison is case-insensitive. See also :meth:`data_for_has_book`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_format:1
# 1755856b3193467cb4d0ffc3c3f8eb0e
msgid "Return True iff the format exists on disk"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_id:1
# 1dd8143930f34ca2ae2b860b1b76c966
msgid "Return True iff the specified book_id exists in the db"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.init:1
# e96772f119594798ab023d8c4909358c
msgid "Initialize this cache with data from the backend."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:1
# 2001718044204539afd08b6ba85bb5df
msgid "Return a list of sorted book ids. If ids_to_sort is None, all book ids are returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:4
# 92bdf117f8c24840b7cc16bedcb851f6
msgid "fields must be a list of 2-tuples of the form (field_name, ascending=True or False). The most significant field is the first 2-tuple."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.pref:1
# 01729fed3804465da4dfd98804bc55ee
msgid "Return the value for the specified preference or the value specified as ``default`` if the preference is not set."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.read_backup:1
# 7a3bbdd932754acbbd26b15d2e61b0c8
msgid "Return the OPF metadata backup for the book as a bytestring or None if no such backup exists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_books:1
# 1ac7aa772b84440e8f67be6c51f18292
msgid "Remove the books specified by the book_ids from the database and delete their format files. If ``permanent`` is False, then the format files are not deleted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:1
# b682fb82306d4d02abf2b909f8516cfd
msgid "Remove the specified formats from the specified books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:3
# 0a9efae55d064ebdb2b46976af4fafcb
msgid "A mapping of book_id to a list of formats to be removed from the book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:4
# 9810e8e673bd4c908d04306afbe84e50
msgid "If True, only remove the record for the format from the db, do not delete the actual format file from the filesystem."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_items:1
# 24ad5d005db1439381899b1223bb60a2
msgid "Delete all items in the specified field with the specified ids. Returns the set of affected book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:1
# 9d338a0bd1594665aede98858e2230a9
msgid "Rename items from a many-one or many-many field such as tags or series."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:3
# c24f269dd0874fe78da2853a0bd09612
msgid "When renaming in a series-like field also change the series_index values."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_book:1
# 5a07a7115b604930be5fbc4f44a140b8
msgid "Restore the book entry in the database for a book that already exists on the filesystem"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_original_format:1
# dd6e6ebe169a428c9090ed7008fb8fab
msgid "Restore the specified format from the previously saved ORIGINAL_FORMAT, if any. Return True on success. The ORIGINAL_FORMAT is deleted after a successful restore."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:1
# fa20af747be64d50b99ee4198c884bcb
msgid "A safe read lock is a lock that does nothing if the thread already has a write lock, otherwise it acquires a read lock. This is necessary to prevent DowngradeLockErrors, which can happen when updating the search cache in the presence of composite columns. Updating the search cache holds an exclusive lock, but searching a composite column involves reading field values via ProxyMetadata which tries to get a shared lock. There may be other scenarios that trigger this as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:9
# f16be9af9e714381a27a8660e225d1bf
msgid "This property returns a new lock object on every access. This lock object is not recursive (for performance) and must only be used in a with statement as ``with cache.safe_read_lock:`` otherwise bad things will happen."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.save_original_format:1
# 1ca2128777ef48b38709ca5b2014047f
msgid "Save a copy of the specified format as ORIGINAL_FORMAT, overwriting any existing ORIGINAL_FORMAT."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:1
# b1c4ff6a86b548c08a600ba396a19190
msgid "Search the database for the specified query, returning a set of matched book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:3
# 9b23f51e998c4b798cb0151e020dcba6
msgid "A restriction that is ANDed to the specified query. Note that restrictions are cached, therefore the search for a AND b will be slower than a with restriction b."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:6
# fe8e2fe530ed48959fa521cc49a7359a
msgid "Used internally (virtual fields such as on_device to search over)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:8
# 7f356f95e7cb422d85f003d94f9334e4
msgid "If not None, a set of book ids for which books will be searched instead of searching all books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_conversion_options:1
# bf10150569dc49409f299f16a7849cb8
msgid "options must be a map of the form {book_id:conversion_options}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_cover:1
# 40aca06cf97c4b60bc5cfe59264e9b1a
msgid "Set the cover for this book.  data can be either a QImage, QPixmap, file object or bytestring. It can also be None, in which case any existing cover is removed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:1
# 1622479c2b2b444e83e468ae38d85c17
msgid "Set the values of the field specified by ``name``. Returns the set of all book ids that were affected by the change."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:3
# f55f0c56104a4bec8e22b8659ca799ad
msgid "Mapping of book_ids to values that should be applied."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:4
# aad549b3cdab427fac6fa74fc721f1f4
msgid "If True, the case of many-one or many-many fields will be changed. For example, if a  book has the tag ``tag1`` and you set the tag for another book to ``Tag1`` then the both books will have the tag ``Tag1`` if allow_case_change is True, otherwise they will both have the tag ``tag1``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:8
# 13baefe1713d4059b2f49197b6f7e715
msgid "Used internally, you should never change it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:1
# 34989dc947da4aaa968524f4db2e1b96
msgid "Set metadata for the book `id` from the `Metadata` object `mi`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:3
# 7f0d61017a474f568d9aa9e3c10c9673
msgid "Setting force_changes=True will force set_metadata to update fields even if mi contains empty values. In this case, 'None' is distinguished from 'empty'. If mi.XXX is None, the XXX is not replaced, otherwise it is. The tags, identifiers, and cover attributes are special cases. Tags and identifiers cannot be set to None so then will always be replaced if force_changes is true. You must ensure that mi contains the values you want the book to have. Covers are always changed if a new cover is provided, but are never deleted. Also note that force_changes has no effect on setting title or authors."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_pref:1
# 0423ce8be2d24def8b07b88207a266f5
msgid "Set the specified preference to the specified value. See also :meth:`pref`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:1
# 1ffb43f374e7424ab32037c6e88acec8
msgid "Return the ids of all books having the tag ``tag`` that are older than the specified time. tag comparison is case insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:4
# fd530dbd0cbc4db28ee3ae36a5380ae6
msgid "A timedelta object or None. If None, then all ids with the tag are returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:7
# fe60fcc7a0d04653b3a8e838830f333f
msgid "If not None the list of matches will be restricted to books that have this tag"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:10
# e9056ef386464058b062c64d99920798
msgid "A list of authors. If not None the list of matches will be restricted to books that have these authors (case insensitive)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.user_categories_for_books:1
# eed027cf9d784c7298de4a29a51e22ee
msgid "Return the user categories for the specified books. proxy_metadata_map is optional and is useful for a performance boost, in contexts where a ProxyMetadata object for the books already exists. It should be a mapping of book_ids to their corresponding ProxyMetadata objects."
msgstr ""

