# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.48.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-11 23:35+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../db_api.rst:5
# aa078779622a483989c0774188594de4
msgid "API Documentation for the database interface"
msgstr ""

#: ../../db_api.rst:10
# c72625d8d3b44eed8912c37d43c4f452
msgid "This API is thread safe (it uses a multiple reader, single writer locking scheme).  You can access this API like this::"
msgstr ""

#: ../../db_api.rst:15
# 79f23001f59d44198c95d70c46e96dda
msgid "If you are in a calibre plugin that is part of the main calibre GUI, you get access to it like this instead::"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:1
# 0d225fbd216a4c04983abd4c8ca2105e
msgid "An in-memory cache of the metadata.db file from a calibre library. This class also serves as a threadsafe API for accessing the database. The in-memory cache is maintained in normal form for maximum performance."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:5
# e76f8c69cf654600b0d76cf458a78382
msgid "SQLITE is simply used as a way to read and write from metadata.db robustly. All table reading/sorting/searching/caching logic is re-implemented. This was necessary for maximum performance and flexibility."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:1
# 9f32b1c16818455cb536964defbffcb6
msgid "Add the specified books to the library. Books should be an iterable of 2-tuples, each 2-tuple of the form :code:`(mi, format_map)` where mi is a Metadata object and format_map is a dictionary of the form :code:`{fmt: path_or_stream}`, for example: :code:`{'EPUB': '/path/to/file.epub'}`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:6
# ba1d30eb63e347cc98e4af0f7ed730b7
msgid "Returns a pair of lists: :code:`ids, duplicates`. ``ids`` contains the book ids for all newly created books in the database. ``duplicates`` contains the :code:`(mi, format_map)` for all books that already exist in the database as per the simple duplicate detection heuristic used by :meth:`has_book`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_custom_book_data:1
# 4c3892225c54431fa860051f752267f1
msgid "Add data for name where val_map is a map of book_ids to values. If delete_first is True, all previously stored data for name will be removed."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:1
# 89766a5263c44d7c857458f6f9698a70
msgid "Add a format to the specified book. Return True of the format was added successfully."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:3
# cc9b572832cd4d0587eaaa2cc9e6da2c
msgid "If True replace existing format, otherwise if the format already exists, return False."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:4
# ab95ad21f07c457dadf65aad2328ff1e
msgid "If True, file type plugins are run on the format before and after being added."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:5
# ddb577f1cc63490da33dd1f9a0dc36bf
msgid "Internal use only."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_book_ids:1
# 99e844c24202447680ad9b31c152a32e
msgid "Frozen set of all known book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_for:1
# ec783196bb724a71bf31a733fbe82cf1
msgid "Same as field_for, except that it operates on multiple books at once"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_ids:1
# 12ff2c1344934d4f823c0bff4f731238
msgid "Frozen set of ids for all values in the field ``name``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_names:1
# f7cc5731ee9b41be977990929ccc6b4c
msgid "Frozen set of all fields names (should only be used for many-one and many-many fields)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:1
# 1f324d16bead4539bf8ed0b21481d8bd
msgid "Return author data as a dictionary with keys: name, sort, link"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:3
# 7949aeec2a224f88b473234148a6fffb
msgid "If no authors with the specified ids are found an empty dictionary is returned. If author_ids is None, data for all authors is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_sort_from_authors:1
# 18f48a98db73438a880b0c2d0a4cf154
msgid "Given a list of authors, return the author_sort string for the authors, preferring the author sort associated with the author over the computed string."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:1
# 3eb1ffe86e374f39b2a633c44017e5a5
msgid "Return all the books associated with the item identified by ``item_id``, where the item belongs to the field ``name``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:4
# bb0ef61404c94cd3a9324a8cc94f3c67
msgid "Returned value is a set of book ids, or the empty set if the item or the field does not exist."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_cover_to:1
# 6c213d5d91474bf9b830c8980cfa2591
msgid "Copy the cover to the file like object ``dest``. Returns False if no cover exists or dest is the same file as the current cover. dest can also be a path in which case the cover is copied to it iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_format_to:1
# efe6bebd2a6841f1b9df97eb834bdbcf
msgid "Copy the format ``fmt`` to the file like object ``dest``. If the specified format does not exist, raises :class:`NoSuchFormat` error. dest can also be a path, in which case the format is copied to it, iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:1
# 3cef4320bb094f02a52776a6ce04fe53
msgid "Return the cover image or None. By default, returns the cover as a bytestring."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:4
# fadfd8713fba4ca38877891e48fc0464
msgid "WARNING: Using as_path will copy the cover to a temp file and return the path to the temp file. You should delete the temp file when you are done with it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:8
# 2d8ce87194b346a1868ceac2f93e48eb
msgid "If True return the image as an open file object (a SpooledTemporaryFile)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:9
# 33392654a7274c9d9c996abf832dba56
msgid "If True return the image as a QImage object"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:10
# 3a1547c22a604228b7b77f3f5aeb227b
msgid "If True return the image as a path pointing to a temporary file"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.delete_custom_book_data:1
# e74f9c9ce8eb491abf350cc2aaa00332
msgid "Delete data for name. By default deletes all data, if you only want to delete data for some book ids, pass in a list of book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.embed_metadata:1
# 156952a64c4445c5a26c3e8bb0ffe3f9
msgid "Update metadata in all formats of the specified book_ids to current metadata in the database."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.fast_field_for:1
# 49ea8c24444842eb8c32ff03f5f1f6f8
msgid "Same as field_for, except that it avoids the extra lookup to get the field object"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:1
# 6f3a972cec674f48afc1edea1ebeb46f
msgid "Return the value of the field ``name`` for the book identified by ``book_id``. If no such book exists or it has no defined value for the field ``name` or no such field exists, then ``default_value`` is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:6
# 4648ab2f16df4f3a95dffcd29c255362
msgid "``default_value`` is not used for title, title_sort, authors, author_sort and series_index. This is because these always have values in the db. ``default_value`` is used for all custom columns."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:10
# af9230c23d5d4136ab269dfaf8595831
msgid "The returned value for is_multiple fields are always tuples, even when no values are found (in other words, default_value is ignored). The exception is identifiers for which the returned value is always a dict. The returned tuples are always in link order, that is, the order in which they were created."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_ids_for:1
# e20f8be20e0b4df8869da511a445878f
msgid "Return the ids (as a tuple) for the values that the field ``name`` has on the book identified by ``book_id``. If there are no values, or no such book, or no such field, an empty tuple is returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.find_identical_books:1
# eafc0a78ae5a44c88fee3c11219fd545
msgid "Finds books that have a superset of the authors in mi and the same title (title is fuzzy matched)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:1
# 38133f9cc8a64291aa4633fbf9b5f490
msgid "Return the ebook format as a bytestring or `None` if the format doesn't exist, or we don't have permission to write to the ebook file."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:4
# 33317442a1b84b598d578cfaa95c7c14
msgid "If True the ebook format is returned as a file object. Note that the file object is a SpooledTemporaryFile, so if what you want to do is copy the format to another file, use :meth:`copy_format_to` instead for performance."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:8
# 53d645c1cac54e39a2d613de3297c66f
msgid "Copies the format file to a temp file and returns the path to the temp file"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:10
# 4078c755524346698c61195f795982a6
msgid "If True and returning a path the filename is the same as that used in the library. Note that using this means that repeated calls yield the same temp file (which is re-created each time)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:1
# 33f60f51ea514fc1827ef786e336a312
msgid "Return absolute path to the ebook file of format `format`. You should almost never use this, as it breaks the threadsafe promise of this API. Instead use, :meth:`copy_format_to`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:5
# b4b7fcb05adb4fb98dcbacbb4dec1a62
msgid "Currently used only in calibredb list, the viewer, edit book, compare_format to original format and the catalogs (via get_data_as_dict())."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:9
# f2914d7a442947ce90ddc4b4c54a2ccb
msgid "Apart from the viewer and edit book, I don't believe any of the others do any file write I/O with the results of this call."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_hash:1
# 693ad58a5eb9480c8980a5cc2fe5bfc6
msgid "Return the hash of the specified format for the specified book. The kind of hash is backend dependent, but is usually SHA-256."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:1
# 2a9c59e69e0b4ff7aee11455b5a2ad9c
msgid "Return the path, size and mtime for the specified format for the specified book. You should not use path unless you absolutely have to, since accessing it directly breaks the threadsafe guarantees of this API. Instead use the :meth:`copy_format_to` method."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:6
# bf9295d40d24470e95c41c7687ee9146
msgid "If ``True`` cached values are used, otherwise a slow filesystem access is done. The cache values could be out of date if access was performed to the filesystem outside of this API."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:10
# db895768cde8443faee5713764f1a93f
msgid "If ``True`` The max_size field of the database is updates for this book."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.formats:1
# a9521aa699404c8680644000528889a4
msgid "Return tuple of all formats for the specified book. If verify_formats is True, verifies that the files exist on disk."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_categories:1
# acb9f4d011504b5b9e7ec18419c7adc9
msgid "Used internally to implement the Tag Browser"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_custom_book_data:1
# 28668e8a7158435f981ef60cb15d122f
msgid "Get data for name. By default returns data for all book_ids, pass in a list of book ids if you only want some data. Returns a map of book_id to values. If a particular value could not be decoded, uses default for it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_id_map:1
# fc3b47dc0c654a9383901f69f7eb01b1
msgid "Return a mapping of id numbers to values for the specified field. The field must be a many-one or many-many field, otherwise a ValueError is raised."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_ids_for_custom_book_data:1
# 46088530550644c9a5457e884f849494
msgid "Return the set of book ids for which name has data."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_id:1
#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_ids:1
# 450e6ee3f9404f72b98cec560e1d5205
# 447249bc70d042c89688fc7df27daae8
msgid "Return the item id for item_name (case-insensitive)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_name:1
# db6bb972486945079600541b582cd9d4
msgid "Return the item name for the item specified by item_id in the specified field. See also :meth:`get_id_map`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_metadata:1
# 5bb578bcacf9449c9a84666d76adce47
msgid "Return metadata for the book identified by book_id as a :class:`Metadata` object. Note that the list of formats is not verified. If get_cover is True, the cover is returned, either a path to temp file as mi.cover or if cover_as_data is True then as mi.cover_data."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:1
# 9978008978bc4b0db4e7ef562f5eb765
msgid "Return the next series index for the specified series, taking into account the various preferences that control next series number generation."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:4
# 0c3e65d0317248e8844373f7042e0314
msgid "The series-like field (defaults to the builtin series column)"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:5
# fa21e6bea0784eb28d1645eb696343f3
msgid "If True, returns a mapping of book_id to current series_index value instead."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_proxy_metadata:1
# 3ce20eb8323648cfb2b69ffa0e17f3a5
msgid "Like :meth:`get_metadata` except that it returns a ProxyMetadata object that only reads values from the database on demand. This is much faster than get_metadata when only a small number of fields need to be accessed from the reutrned metadata object."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_usage_count_by_id:1
# cb78c02db2d14e379b438799a49c9fc2
msgid "Return a mapping of id to usage count for all values of the specified field, which must be a many-one or many-many field."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_book:1
# 506171120d864cef9280f6868b0fb09f
msgid "Return True iff the database contains an entry with the same title as the passed in Metadata object. The comparison is case-insensitive."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_format:1
# bdb2930194654da5a1ddd3c622aa05a4
msgid "Return True iff the format exists on disk"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_id:1
# 5dacc31bfe12421dac5226a37cab3206
msgid "Return True iff the specified book_id exists in the db"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.init:1
# d25a978e162543038f85d055015b3604
msgid "Initialize this cache with data from the backend."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:1
# edcebc559bf4468db4d716bda9af0dbe
msgid "Return a list of sorted book ids. If ids_to_sort is None, all book ids are returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:4
# 20e7217085f94b9b946d96fcc9bc5f87
msgid "fields must be a list of 2-tuples of the form (field_name, ascending=True or False). The most significant field is the first 2-tuple."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.pref:1
# a0a6655322ff490ea5acb0bf34965109
msgid "Return the value for the specified preference or the value specified as ``default`` if the preference is not set."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.read_backup:1
# f4e563b9c8684e0ca09fe2d8d7092aa7
msgid "Return the OPF metadata backup for the book as a bytestring or None if no such backup exists."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_books:1
# 3b6f9f5c5fe14f668d575ee0589d4c18
msgid "Remove the books specified by the book_ids from the database and delete their format files. If ``permanent`` is False, then the format files are not deleted."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:1
# d99abd4f88a24e50a6af8965b199b480
msgid "Remove the specified formats from the specified books."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:3
# 74742547ed7c4409ad637586299a4505
msgid "A mapping of book_id to a list of formats to be removed from the book."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:4
# 9ba2589782d34a22be38948d7f1dca15
msgid "If True, only remove the record for the format from the db, do not delete the actual format file from the filesystem."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_items:1
# 84fe395d6de24f169f1ffedcb0998adf
msgid "Delete all items in the specified field with the specified ids. Returns the set of affected book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:1
# 84befceff44a4bce8b9be767b4f54563
msgid "Rename items from a many-one or many-many field such as tags or series."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:3
# eec662ecc5ad49bdbba111aa8dec1e79
msgid "When renaming in a series-like field also change the series_index values."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_book:1
# 85deaf218e464bbf99c199ada9680ccd
msgid "Restore the book entry in the database for a book that already exists on the filesystem"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_original_format:1
# abf36ca2cdc24e0087572fdc950a9076
msgid "Restore the specified format from the previously saved ORIGINAL_FORMAT, if any. Return True on success. The ORIGINAL_FORMAT is deleted after a successful restore."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:1
# 1afdbfeda7d74935b1c1b2dd6d7debc7
msgid "A safe read lock is a lock that does nothing if the thread already has a write lock, otherwise it acquires a read lock. This is necessary to prevent DowngradeLockErrors, which can happen when updating the search cache in the presence of composite columns. Updating the search cache holds an exclusive lock, but searching a composite column involves reading field values via ProxyMetadata which tries to get a shared lock. There may be other scenarios that trigger this as well."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:9
# bccc7aa3bbe049ae9b650bd40fc3cbad
msgid "This property returns a new lock object on every access. This lock object is not recursive (for performance) and must only be used in a with statement as ``with cache.safe_read_lock:`` otherwise bad things will happen."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.save_original_format:1
# 22fe044bc270473290d4b9eae398f1b9
msgid "Save a copy of the specified format as ORIGINAL_FORMAT, overwriting any existing ORIGINAL_FORMAT."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:1
# 81a75aa0eed0414e8e2926c94dc3a51f
msgid "Search the database for the specified query, returning a set of matched book ids."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:3
# 5f79934745f54a939a541677398fff89
msgid "A restriction that is ANDed to the specified query. Note that restrictions are cached, therefore the search for a AND b will be slower than a with restriction b."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:6
# 885bb4152ee045668f3a8eb2e675484d
msgid "Used internally (virtual fields such as on_device to search over)."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:8
# 4e3d8b850b2b4243bd37b6042cd518ec
msgid "If not None, a set of book ids for which books will be searched instead of searching all books."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_conversion_options:1
# cf5d198498d346fe9ad203c04e469698
msgid "options must be a map of the form {book_id:conversion_options}"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_cover:1
# 12a15c1f5b574eccb0f966d22d619544
msgid "Set the cover for this book.  data can be either a QImage, QPixmap, file object or bytestring. It can also be None, in which case any existing cover is removed."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:1
# 24b326a4a284462eb8699116b3d77297
msgid "Set the values of the field specified by ``name``. Returns the set of all book ids that were affected by the change."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:3
# 71551b1518b74accae606e7bbc4fd449
msgid "Mapping of book_ids to values that should be applied."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:4
# 4507b3558fc647c1ab38183afa774c79
msgid "If True, the case of many-one or many-many fields will be changed. For example, if a  book has the tag ``tag1`` and you set the tag for another book to ``Tag1`` then the both books will have the tag ``Tag1`` if allow_case_change is True, otherwise they will both have the tag ``tag1``."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:8
# daf29ed27eee4cff924cfa83b09bf43f
msgid "Used internally, you should never change it."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:1
# 153fa51accbb43af8bae75f555ca41a1
msgid "Set metadata for the book `id` from the `Metadata` object `mi`"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:3
# 2267a13e7671488c8069c7e744918fd1
msgid "Setting force_changes=True will force set_metadata to update fields even if mi contains empty values. In this case, 'None' is distinguished from 'empty'. If mi.XXX is None, the XXX is not replaced, otherwise it is. The tags, identifiers, and cover attributes are special cases. Tags and identifiers cannot be set to None so then will always be replaced if force_changes is true. You must ensure that mi contains the values you want the book to have. Covers are always changed if a new cover is provided, but are never deleted. Also note that force_changes has no effect on setting title or authors."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_pref:1
# 9331457198164b4ebd843bd944020cec
msgid "Set the specified preference to the specified value. See also :meth:`pref`."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:1
# 83b2dcf5efae40448affefcfe5ffb158
msgid "Return the ids of all books having the tag ``tag`` that are older than than the specified time. tag comparison is case insensitive."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:4
# bdebdc1695bc4cfc90cf4223ee078b50
msgid "A timedelta object or None. If None, then all ids with the tag are returned."
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:7
# 7ea771d751aa4c849a182651593b103e
msgid "If not None the list of matches will be restricted to books that have this tag"
msgstr ""

#: ../../../src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:10
# 49e27809df804ce9b93babf61b2c4979
msgid "A list of authors. If not None the list of matches will be restricted to books that have these authors (case insensitive)."
msgstr ""

