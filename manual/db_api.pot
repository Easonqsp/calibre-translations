# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.24.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-10 06:46+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/db_api.rst:4
# 2059c13aa3564c1da103e090a04279bd
msgid "API Documentation for the database interface"
msgstr ""

#: ../../home/kovid/work/calibre/manual/db_api.rst:9
# 3a0aadaa8de84cbebe198f56540ee1c7
msgid "This API is thread safe (it uses a multiple reader, single writer locking scheme).  You can access this API like this::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/db_api.rst:14
# fadd1c34e60642588c948e64882fc3e6
msgid "If you are in a calibre plugin that is part of the main calibre GUI, you get access to it like this instead::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:1
# 533f13b437824ee89b13cff349864b35
msgid "An in-memory cache of the metadata.db file from a calibre library. This class also serves as a threadsafe API for accessing the database. The in-memory cache is maintained in normal form for maximum performance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache:5
# cd47f83694d64f86924c373dea58581c
msgid "SQLITE is simply used as a way to read and write from metadata.db robustly. All table reading/sorting/searching/caching logic is re-implemented. This was necessary for maximum performance and flexibility."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:1
# 1b50ff10e681401691093ae96b3e7e96
msgid "Add the specified books to the library. Books should be an iterable of 2-tuples, each 2-tuple of the form :code:`(mi, format_map)` where mi is a Metadata object and format_map is a dictionary of the form :code:`{fmt: path_or_stream}`, for example: :code:`{'EPUB': '/path/to/file.epub'}`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_books:6
# 791742e3f2b8430fa84a5265bbbb6f12
msgid "Returns a pair of lists: :code:`ids, duplicates`. ``ids`` contains the book ids for all newly created books in the database. ``duplicates`` contains the :code:`(mi, format_map)` for all books that already exist in the database as per the simple duplicate detection heuristic used by :meth:`has_book`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_custom_book_data:1
# 64e9223445df4279b6797c82c35fea5f
msgid "Add data for name where val_map is a map of book_ids to values. If delete_first is True, all previously stored data for name will be removed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:1
# d5b13ef734a9469b9e869ecd093209cd
msgid "Add a format to the specified book. Return True of the format was added successfully."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:3
# c0195f39502f4622939f25211108d4a2
msgid "If True replace existing format, otherwise if the format already exists, return False."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:4
# eb1ab23852284e4999e06ac1c53813eb
msgid "If True, file type plugins are run on the format before and after being added."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.add_format:5
# 5f96da8c3cd3484d94be95ff6add0bf9
msgid "Internal use only."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_book_ids:1
# 2f5d7f3b9a1047ec907d040b5e52faae
msgid "Frozen set of all known book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_for:1
# 5dddf19689df486288363a988219e573
msgid "Same as field_for, except that it operates on multiple books at once"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_ids:1
# 8c9780dfd13049dda92f5a8515dcf983
msgid "Frozen set of ids for all values in the field ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.all_field_names:1
# 48ac6b820c044d4ea1c380790caefbbd
msgid "Frozen set of all fields names (should only be used for many-one and many-many fields)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:1
# 8c384926ee1d4af692fd32b3c544279f
msgid "Return author data as a dictionary with keys: name, sort, link"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_data:3
# fe060b2c90754667bea0f66d2f453a6e
msgid "If no authors with the specified ids are found an empty dictionary is returned. If author_ids is None, data for all authors is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.author_sort_from_authors:1
# 97acc61f22df4b98a16ed71e4cfcf103
msgid "Given a list of authors, return the author_sort string for the authors, preferring the author sort associated with the author over the computed string."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:1
# 149b97793d044a4198ddd07f7b75e6bb
msgid "Return all the books associated with the item identified by ``item_id``, where the item belongs to the field ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.books_for_field:4
# 10b5a9772ae6496982c3c605904c7d7b
msgid "Returned value is a set of book ids, or the empty set if the item or the field does not exist."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_cover_to:1
# a647c26be4194e469d5fd382cdb13243
msgid "Copy the cover to the file like object ``dest``. Returns False if no cover exists or dest is the same file as the current cover. dest can also be a path in which case the cover is copied to it if and only if the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.copy_format_to:1
# 6812e15ddd7a4a21a8a4042db0003e54
msgid "Copy the format ``fmt`` to the file like object ``dest``. If the specified format does not exist, raises :class:`NoSuchFormat` error. dest can also be a path, in which case the format is copied to it, iff the path is different from the current path (taking case sensitivity into account)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:1
# 6cfb00aac4324ec9b81745689f21810c
msgid "Return the cover image or None. By default, returns the cover as a bytestring."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:4
# ad06d4a7c77346799e16c20ece2ba972
msgid "WARNING: Using as_path will copy the cover to a temp file and return the path to the temp file. You should delete the temp file when you are done with it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:8
# e0306901af0d4630ab6e4539fb35a5b8
msgid "If True return the image as an open file object (a SpooledTemporaryFile)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:9
# 7aa52c769133473a9130d9dbde36abae
msgid "If True return the image as a QImage object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.cover:10
# 99c11bbb5c8f4178add005009b73a03b
msgid "If True return the image as a path pointing to a temporary file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.data_for_find_identical_books:1
# 38289478463743f1bb19eb04145cfe80
msgid "Return data that can be used to implement :meth:`find_identical_books` in a worker process without access to the db. See db.utils for an implementation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.data_for_has_book:1
# d3d68f3c917a4d0eb254ee2a8520529c
msgid "Return data suitable for use in :meth:`has_book`. This can be used for an implementation of :meth:`has_book` in a worker process without access to the db."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.delete_custom_book_data:1
# fa19f42776ce44afaf563a2f0cfdd51d
msgid "Delete data for name. By default deletes all data, if you only want to delete data for some book ids, pass in a list of book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.embed_metadata:1
# 83d7f884c6bf4308848d16583d549718
msgid "Update metadata in all formats of the specified book_ids to current metadata in the database."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.fast_field_for:1
# 45de3f6839104fd2b5363880c0fe6377
msgid "Same as field_for, except that it avoids the extra lookup to get the field object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:1
# 9b17d31752be4b4f8e43db3c285316d6
msgid "Return the value of the field ``name`` for the book identified by ``book_id``. If no such book exists or it has no defined value for the field ``name`` or no such field exists, then ``default_value`` is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:6
# 3af8078fbcf8498ebc60b0ba693a3112
msgid "``default_value`` is not used for title, title_sort, authors, author_sort and series_index. This is because these always have values in the db. ``default_value`` is used for all custom columns."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_for:10
# 56403d186f6c463da56b1c86ea4ad101
msgid "The returned value for is_multiple fields are always tuples, even when no values are found (in other words, default_value is ignored). The exception is identifiers for which the returned value is always a dict. The returned tuples are always in link order, that is, the order in which they were created."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.field_ids_for:1
# 02cbe7d3e3164a8faa5f1742b391b9de
msgid "Return the ids (as a tuple) for the values that the field ``name`` has on the book identified by ``book_id``. If there are no values, or no such book, or no such field, an empty tuple is returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.find_identical_books:1
# f31866c95ede443b948cc1fc71ed1190
msgid "Finds books that have a superset of the authors in mi and the same title (title is fuzzy matched). See also :meth:`data_for_find_identical_books`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:1
# 820d290e1e61457390edeff12db45351
msgid "Return the ebook format as a bytestring or `None` if the format doesn't exist, or we don't have permission to write to the ebook file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:4
# 11a691d8f08b40d197056caa1f533dd0
msgid "If True the ebook format is returned as a file object. Note that the file object is a SpooledTemporaryFile, so if what you want to do is copy the format to another file, use :meth:`copy_format_to` instead for performance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:8
# 69543a571dec4b35913e338321e9602e
msgid "Copies the format file to a temp file and returns the path to the temp file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format:10
# 87feb775e5be4947849b4173c897664d
msgid "If True and returning a path the filename is the same as that used in the library. Note that using this means that repeated calls yield the same temp file (which is re-created each time)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:1
# 62d18156912a42c4a95367618aae8588
msgid "Return absolute path to the ebook file of format `format`. You should almost never use this, as it breaks the threadsafe promise of this API. Instead use, :meth:`copy_format_to`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:5
# 3d2bde8dbbfd4da18a77e1ef49aac428
msgid "Currently used only in calibredb list, the viewer, edit book, compare_format to original format, open with and the catalogs (via get_data_as_dict())."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_abspath:9
# b086951f21074c28adbe2cbdc9f41372
msgid "Apart from the viewer, open with and edit book, I don't believe any of the others do any file write I/O with the results of this call."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_hash:1
# db79f0327e4446d9ac4848106670ca2c
msgid "Return the hash of the specified format for the specified book. The kind of hash is backend dependent, but is usually SHA-256."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:1
# 089d6a02473b475ca152c0102485f21b
msgid "Return the path, size and mtime for the specified format for the specified book. You should not use path unless you absolutely have to, since accessing it directly breaks the threadsafe guarantees of this API. Instead use the :meth:`copy_format_to` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:6
# 19c9ce80f0e74eb69b8da7984a1a2519
msgid "If ``True`` cached values are used, otherwise a slow filesystem access is done. The cache values could be out of date if access was performed to the filesystem outside of this API."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.format_metadata:10
# 4a400a3a19e9497481aa158ab304e037
msgid "If ``True`` The max_size field of the database is updates for this book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.formats:1
# 822161f866424078b370605c4767fa53
msgid "Return tuple of all formats for the specified book. If verify_formats is True, verifies that the files exist on disk."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_categories:1
# 34ba4ac3ca6d4550a9437da2aac94fb5
msgid "Used internally to implement the Tag Browser"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_custom_book_data:1
# f426f6a4ab9f4fbeb07bb41d98a1d333
msgid "Get data for name. By default returns data for all book_ids, pass in a list of book ids if you only want some data. Returns a map of book_id to values. If a particular value could not be decoded, uses default for it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_id_map:1
# cfaa45ff748a45cba5329a4fa40d39c4
msgid "Return a mapping of id numbers to values for the specified field. The field must be a many-one or many-many field, otherwise a ValueError is raised."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_ids_for_custom_book_data:1
# eec465b131c64c398f6d893f368fdc89
msgid "Return the set of book ids for which name has data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_id:1
#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_ids:1
# ce046f162a624e81abaeb717032fc167
# 19bef3aaa4b84c0da8f09a5407d36fa0
msgid "Return the item id for item_name (case-insensitive)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_item_name:1
# 89755b7df17b413886d41dee2ab657e1
msgid "Return the item name for the item specified by item_id in the specified field. See also :meth:`get_id_map`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_metadata:1
# 76d74745041443af8b985e6f078787a5
msgid "Return metadata for the book identified by book_id as a :class:`Metadata` object. Note that the list of formats is not verified. If get_cover is True, the cover is returned, either a path to temp file as mi.cover or if cover_as_data is True then as mi.cover_data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:1
# 3018df6b1f4648048ab94b174e59cf25
msgid "Return the next series index for the specified series, taking into account the various preferences that control next series number generation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:4
# 318b2b26e4c54fd19081d82e69dcc3f1
msgid "The series-like field (defaults to the builtin series column)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_next_series_num_for:5
# 6ec7e5dcd53f4128864f81724864e1e3
msgid "If True, returns a mapping of book_id to current series_index value instead."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_proxy_metadata:1
# d6c0791956134e7a94d323a08c1dce85
msgid "Like :meth:`get_metadata` except that it returns a ProxyMetadata object that only reads values from the database on demand. This is much faster than get_metadata when only a small number of fields need to be accessed from the returned metadata object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.get_usage_count_by_id:1
# 669a62d66e8b49d49c9635d91c6f48e3
msgid "Return a mapping of id to usage count for all values of the specified field, which must be a many-one or many-many field."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_book:1
# 8d420722f2df4923be62da54956875d3
msgid "Return True iff the database contains an entry with the same title as the passed in Metadata object. The comparison is case-insensitive. See also :meth:`data_for_has_book`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_format:1
# f41ae00206654c0b8fc70b456ee6f745
msgid "Return True iff the format exists on disk"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.has_id:1
# 59e9baba1ce14adf9ec350be6d7fccb7
msgid "Return True iff the specified book_id exists in the db"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.init:1
# 96619b5eb9874dc583f2e207bef290b9
msgid "Initialize this cache with data from the backend."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:1
# fc2c4641884145e8b7764a76383c8918
msgid "Return a list of sorted book ids. If ids_to_sort is None, all book ids are returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.multisort:4
# 32d3e448391942409fac860af669aea8
msgid "fields must be a list of 2-tuples of the form (field_name, ascending=True or False). The most significant field is the first 2-tuple."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.pref:1
# 82a1505597324f659e9b25c42c7c2954
msgid "Return the value for the specified preference or the value specified as ``default`` if the preference is not set."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.read_backup:1
# d7aafec114ae479cbcf7edce3fd72c23
msgid "Return the OPF metadata backup for the book as a bytestring or None if no such backup exists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_books:1
# 046b86dcb0bd47b2931cc7d793e040cf
msgid "Remove the books specified by the book_ids from the database and delete their format files. If ``permanent`` is False, then the format files are not deleted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:1
# 3ed167c5681c47e88414d0e84cc2f251
msgid "Remove the specified formats from the specified books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:3
# c1552503130741d79e370d2e7cf6260d
msgid "A mapping of book_id to a list of formats to be removed from the book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_formats:4
# 71049077ca13410b86bd04fca8789002
msgid "If True, only remove the record for the format from the db, do not delete the actual format file from the filesystem."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.remove_items:1
# 30d59922e0f74385b18847f4b76ba77f
msgid "Delete all items in the specified field with the specified ids. Returns the set of affected book ids. ``restrict_to_book_ids`` is an optional set of books ids. If specified the items will only be removed from those books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:1
# 8aeaf2166a474cd79e71adae17bdb850
msgid "Rename items from a many-one or many-many field such as tags or series."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:3
# 843095ec32444155a642bc07c6a6dca1
msgid "When renaming in a series-like field also change the series_index values."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.rename_items:4
# 6a63f01c064f48b094d2ded272d84186
msgid "An optional set of book ids for which the rename is to be performed, defaults to all books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_book:1
# 2791e81418f541ce89df29509443043f
msgid "Restore the book entry in the database for a book that already exists on the filesystem"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.restore_original_format:1
# a342c1293da8471094c360189ae094c0
msgid "Restore the specified format from the previously saved ORIGINAL_FORMAT, if any. Return True on success. The ORIGINAL_FORMAT is deleted after a successful restore."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:1
# 7918c65256d949e9a4b1d5954053460a
msgid "A safe read lock is a lock that does nothing if the thread already has a write lock, otherwise it acquires a read lock. This is necessary to prevent DowngradeLockErrors, which can happen when updating the search cache in the presence of composite columns. Updating the search cache holds an exclusive lock, but searching a composite column involves reading field values via ProxyMetadata which tries to get a shared lock. There may be other scenarios that trigger this as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.safe_read_lock:9
# fda178a804ac459996ea680390953a5a
msgid "This property returns a new lock object on every access. This lock object is not recursive (for performance) and must only be used in a with statement as ``with cache.safe_read_lock:`` otherwise bad things will happen."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.save_original_format:1
# aa958982a7ba46a4a3ba48b1153d7725
msgid "Save a copy of the specified format as ORIGINAL_FORMAT, overwriting any existing ORIGINAL_FORMAT."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:1
# 15b11cdeb19f453ea0aef6e89a5ac70e
msgid "Search the database for the specified query, returning a set of matched book ids."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:3
# 53090d17475747ffbcfb6089a549b756
msgid "A restriction that is ANDed to the specified query. Note that restrictions are cached, therefore the search for a AND b will be slower than a with restriction b."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:6
# dcc14d7e9ccf4484802b22688c8fb5db
msgid "Used internally (virtual fields such as on_device to search over)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.search:8
# 70d6546d6e76450ab71be93ea43a2525
msgid "If not None, a set of book ids for which books will be searched instead of searching all books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_conversion_options:1
# 6d4e22903d1e4cdfb58d27807e9585ff
msgid "options must be a map of the form {book_id:conversion_options}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_cover:1
# fed4cffe4a104cb0be1ce99cab067954
msgid "Set the cover for this book.  data can be either a QImage, QPixmap, file object or bytestring. It can also be None, in which case any existing cover is removed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:1
# 77f7d42ab80d4601bcd7c14b38e56e28
msgid "Set the values of the field specified by ``name``. Returns the set of all book ids that were affected by the change."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:3
# d646036bd4944cf78ea2eb44ee9e9866
msgid "Mapping of book_ids to values that should be applied."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:4
# 45b1d4d1c223415eb3c4ec756c0da029
msgid "If True, the case of many-one or many-many fields will be changed. For example, if a  book has the tag ``tag1`` and you set the tag for another book to ``Tag1`` then the both books will have the tag ``Tag1`` if allow_case_change is True, otherwise they will both have the tag ``tag1``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_field:8
# 53c44623ec844b30ab2ec002a22075f0
msgid "Used internally, you should never change it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:1
# 4557b881ce914728a1b1d4c130634282
msgid "Set metadata for the book `id` from the `Metadata` object `mi`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_metadata:3
# d324b11bc89141a694a257d69d2f6a97
msgid "Setting force_changes=True will force set_metadata to update fields even if mi contains empty values. In this case, 'None' is distinguished from 'empty'. If mi.XXX is None, the XXX is not replaced, otherwise it is. The tags, identifiers, and cover attributes are special cases. Tags and identifiers cannot be set to None so then will always be replaced if force_changes is true. You must ensure that mi contains the values you want the book to have. Covers are always changed if a new cover is provided, but are never deleted. Also note that force_changes has no effect on setting title or authors."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.set_pref:1
# 189a0e1394484cae8c3283b7db63a845
msgid "Set the specified preference to the specified value. See also :meth:`pref`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:1
# 2a98d466bda74adc8a1d40177548deb2
msgid "Return the ids of all books having the tag ``tag`` that are older than the specified time. tag comparison is case insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:4
# 221fca15d62641ef9885781cd4ed28b3
msgid "A timedelta object or None. If None, then all ids with the tag are returned."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:7
# 2e22aeb159914f55b5a50bc49aa5047a
msgid "If not None the list of matches will be restricted to books that have this tag"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.tags_older_than:10
# e37fa9404fcf4437be69d3702b3d2b50
msgid "A list of authors. If not None the list of matches will be restricted to books that have these authors (case insensitive)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/db/cache.py:docstring of calibre.db.cache.Cache.user_categories_for_books:1
# 20cefea47340460c9a0465ce3e3f5963
msgid "Return the user categories for the specified books. proxy_metadata_map is optional and is useful for a performance boost, in contexts where a ProxyMetadata object for the books already exists. It should be a mapping of book_ids to their corresponding ProxyMetadata objects."
msgstr ""

