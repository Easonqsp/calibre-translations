# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-14 08:53+0530\n"
"PO-Revision-Date: 2014-11-14 03:24+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Albanian (http://www.transifex.com/projects/p/calibre/language/sq/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sq\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 8b7df6be2b5b4b04b1f2b03c1c4cc32d
#: ../../home/kovid/work/calibre/manual/develop.rst:4
msgid "Setting up a calibre development environment"
msgstr ""

# 7939ffad511a479ebb9b6a63e1923d0d
#: ../../home/kovid/work/calibre/manual/develop.rst:6
msgid ""
"calibre is completely open source, licensed under the `GNU GPL v3 "
"<http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to "
"download and modify the program to your heart's content. In this section, "
"you will learn how to get a calibre development environment set up on the "
"operating system of your choice. calibre is written primarily in `Python "
"<https://www.python.org>`_ with some C/C++ code for speed and system "
"interfacing. Note that calibre is not compatible with Python 3 and requires "
"at least Python 2.7."
msgstr ""

# cd166c1d2c0643db8d27ed2542c321ff
#: ../../home/kovid/work/calibre/manual/develop.rst:0
msgid "Contents"
msgstr ""

# 5b8fc5960d244249877c857dfba48a27
#: ../../home/kovid/work/calibre/manual/develop.rst:17
msgid "Design philosophy"
msgstr ""

# 60569e982f53493d8ea53906cd3da001
#: ../../home/kovid/work/calibre/manual/develop.rst:19
msgid ""
"calibre has its roots in the Unix world, which means that its design is "
"highly modular. The modules interact with each other via well defined "
"interfaces. This makes adding new features and fixing bugs in calibre very "
"easy, resulting in a frenetic pace of development. Because of its roots, "
"calibre has a comprehensive command line interface for all its functions, "
"documented in :doc:`generated/en/cli-index`."
msgstr ""

# 6c7d9d0574914cef9b87e12894cc7210
#: ../../home/kovid/work/calibre/manual/develop.rst:24
msgid ""
"The modular design of calibre is expressed via ``Plugins``. There is a "
":ref:`tutorial <customize>` on writing calibre plugins. For example, adding "
"support for a new device to calibre typically involves writing less than a "
"100 lines of code in the form of a device driver plugin. You can browse the "
"`built-in drivers "
"<http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_."
" Similarly, adding support for new conversion formats involves writing "
"input/output format plugins. Another example of the modular design is the "
":ref:`recipe system <news>` for fetching news. For more examples of plugins "
"designed to add features to calibre, see the `plugin index "
"<http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

# 3027b3f86a6b485da840da7f4b105b68
#: ../../home/kovid/work/calibre/manual/develop.rst:34
msgid "Code layout"
msgstr ""

# 5df447201cd241f38333ab2884bdfa2f
#: ../../home/kovid/work/calibre/manual/develop.rst:36
msgid ""
"All the calibre python code is in the ``calibre`` package. This package "
"contains the following main sub-packages"
msgstr ""

# 6bddbb0ad71f450a9e43f549a65d4d9a
#: ../../home/kovid/work/calibre/manual/develop.rst:38
msgid ""
"devices - All the device drivers. Just look through some of the built-in "
"drivers to get an idea for how they work."
msgstr ""

# e96e72cbbe96425c8a02ddd30ded951f
#: ../../home/kovid/work/calibre/manual/develop.rst:40
msgid ""
"For details, see: ``devices.interface`` which defines the interface "
"supported by device drivers and ``devices.usbms`` which defines a generic "
"driver that connects to a USBMS device. All USBMS based drivers in calibre "
"inherit from it."
msgstr ""

# f8189fd1a73648a3a58411838e8e8d80
#: ../../home/kovid/work/calibre/manual/develop.rst:43
msgid ""
"ebooks  - All the ebook conversion/metadata code. A good starting point is "
"``calibre.ebooks.conversion.cli`` which is the module powering the :command"
":`ebook-convert` command. The conversion process is controlled via "
"``conversion.plumber``. The format independent code is all in ``ebooks.oeb``"
" and the format dependent code is in ``ebooks.format_name``."
msgstr ""

# c5e07c4f21ce43e4a50bdb3977bb0865
#: ../../home/kovid/work/calibre/manual/develop.rst:47
msgid ""
"Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

# 05251ac604424d4db45fa0ce9d583637
#: ../../home/kovid/work/calibre/manual/develop.rst:48
msgid ""
"Conversion happens in a pipeline, for the structure of the pipeline, see "
":ref:`conversion-introduction`. The pipeline consists of an input plugin, "
"various transforms and an output plugin. The code that constructs and drives"
" the pipeline is in :file:`plumber.py`. The pipeline works on a "
"representation of an ebook that is like an unzipped epub, with manifest, "
"spine, toc, guide, html content, etc. The class that manages this "
"representation is OEBBook in ``ebooks.oeb.base``. The various "
"transformations that are applied to the book during conversions live in "
":file:`oeb/transforms/*.py`. And the input and output plugins live in "
":file:`conversion/plugins/*.py`."
msgstr ""

# 40a8633bdce94b4faa8a26657da2d76d
#: ../../home/kovid/work/calibre/manual/develop.rst:58
msgid ""
"Ebook editing happens using a different container object. It is documented "
"in :ref:`polish_api`."
msgstr ""

# b2d0adcc824346c384bbaa840b381bd8
#: ../../home/kovid/work/calibre/manual/develop.rst:61
msgid ""
"db - The database back-end. See :ref:`db_api` for the interface to the "
"calibre library."
msgstr ""

# 2523a82fe50a46768f9a866ee1cc91d0
#: ../../home/kovid/work/calibre/manual/develop.rst:63
msgid "content server: ``library.server`` is the calibre Content Server."
msgstr ""

# 7058774cffcc40a4b9c853ce3d8651c4
#: ../../home/kovid/work/calibre/manual/develop.rst:65
msgid ""
"gui2 - The Graphical User Interface. GUI initialization happens in "
"``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The "
"ebook editor is in ``gui2.tweak_book``."
msgstr ""

# ec9138a42abe455085203b1fbfe360e1
#: ../../home/kovid/work/calibre/manual/develop.rst:67
msgid ""
"If you want to locate the entry points for all the various calibre "
"executables, look at the ``entry_points`` structure in `linux.py "
"<https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

# d62dfca68c844b59b21ff34279d27757
#: ../../home/kovid/work/calibre/manual/develop.rst:71
msgid ""
"If you need help understanding the code, post in the `development forum "
"<http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will "
"most likely get help from one of calibre's many developers."
msgstr ""

# 1f3b22cfd51444d4affdacb85f77e051
#: ../../home/kovid/work/calibre/manual/develop.rst:75
msgid "Getting the code"
msgstr ""

# 1b4b66d8eac94519a71e59a1cb634aeb
#: ../../home/kovid/work/calibre/manual/develop.rst:77
msgid ""
"You can get the calibre source code in two ways, using a version control "
"system or directly downloading a `tarball <http://status.calibre-"
"ebook.com/dist/src>`_."
msgstr ""

# 7d783349f1794b84bad44178fb8575df
#: ../../home/kovid/work/calibre/manual/develop.rst:80
msgid ""
"calibre uses `Git <http://www.git-scm.com/>`_, a distributed version control"
" system. Git is available on all the platforms calibre supports.  After "
"installing Git, you can get the calibre source code with the command::"
msgstr ""

# b3eed9657ee64253899140503d708baa
#: ../../home/kovid/work/calibre/manual/develop.rst:86
msgid ""
"On Windows you will need the complete path name, that will be something like"
" :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

# 882a078e88cb4774a0d433d3409c85ee
#: ../../home/kovid/work/calibre/manual/develop.rst:88
msgid ""
"calibre is a very large project with a very long source control history, so "
"the above can take a while (10 mins to an hour depending on your internet "
"speed)."
msgstr ""

# 5339d4fd22194f87a837dd8716db1708
#: ../../home/kovid/work/calibre/manual/develop.rst:91
msgid ""
"If you want to get the code faster, the source code for the latest release "
"is always available as an `archive <http://status.calibre-"
"ebook.com/dist/src>`_."
msgstr ""

# e3ca0c93b3eb4df68c40408222107ed0
#: ../../home/kovid/work/calibre/manual/develop.rst:94
msgid "To update a branch to the latest code, use the command::"
msgstr ""

# d5bea6a1dc704da2b2e8fc72e12c72c5
#: ../../home/kovid/work/calibre/manual/develop.rst:99
msgid "Submitting your changes to be included"
msgstr ""

# 930846d06b63445b87d2819d7c927284
#: ../../home/kovid/work/calibre/manual/develop.rst:101
msgid ""
"If you only plan to make a few small changes, you can make your changes and "
"create a \"merge directive\" which you can then attach to a ticket in the "
"calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, "
"make your changes, then run::"
msgstr ""

# 745a0c32f1cf4a65919a1f549bff94ad
#: ../../home/kovid/work/calibre/manual/develop.rst:109
msgid ""
"This will create a :file:`my-changes` file in the current directory, simply "
"attach that to a ticket on the calibre `bug tracker "
"<https://bugs.launchpad.net/calibre>`_. Note that this will include *all* "
"the commits you have made. If you only want to send some commits, you have "
"to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

# 766e9e076ea248eaacf0c22a37229f66
#: ../../home/kovid/work/calibre/manual/develop.rst:117
msgid ""
"To send the last *n* commits, replace *1* with *n*, for example, for the "
"last 3 commits::"
msgstr ""

# 4d656386dc8e43feaa93967ee4c4632f
#: ../../home/kovid/work/calibre/manual/develop.rst:122
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

# 5ca0cd6f87974ec2b6a53e58230080ae
#: ../../home/kovid/work/calibre/manual/develop.rst:124
msgid ""
"If you plan to do a lot of development on calibre, then the best method is "
"to create a `GitHub <https://github.com>`_ account. Below is a basic guide "
"to setting up your own fork of calibre in a way that will allow you to "
"submit pull requests for inclusion into the main calibre repository:"
msgstr ""

# ca96179fe32e4e9c9326bd8143df24f8
#: ../../home/kovid/work/calibre/manual/develop.rst:129
msgid ""
"Setup git on your machine as described in this article: `Setup Git "
"<https://help.github.com/articles/set-up-git>`_"
msgstr ""

# 86e7b369cfac4af49095229c109b0ffd
#: ../../home/kovid/work/calibre/manual/develop.rst:130
msgid ""
"Setup ssh keys for authentication to GitHub, as described here: `Generating "
"SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

# 3b8d00699b10432587bc8faeb5e4378c
#: ../../home/kovid/work/calibre/manual/develop.rst:131
msgid ""
"Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` "
"button."
msgstr ""

# 4ca5ba6889b04dfba25ac13e84d8cadc
#: ../../home/kovid/work/calibre/manual/develop.rst:132
msgid "In a Terminal do::"
msgstr ""

# e26f21079ec44259b147e63b6b0ff076
#: ../../home/kovid/work/calibre/manual/develop.rst:137
msgid ""
"Replace <username> above with your github username. That will get your fork "
"checked out locally."
msgstr ""

# 8367bbea56994e7eb7174c8fafb1ce49
#: ../../home/kovid/work/calibre/manual/develop.rst:138
msgid ""
"You can make changes and commit them whenever you like. When you are ready "
"to have your work merged, do a::"
msgstr ""

# 2f6749196e3f41a48883f75d3e12b002
#: ../../home/kovid/work/calibre/manual/develop.rst:142
msgid ""
"and go to ``https://github.com/<username>/calibre`` and click the "
":guilabel:`Pull Request` button to generate a pull request that can be "
"merged."
msgstr ""

# a6c79443c828406d87c3c4a50a675144
#: ../../home/kovid/work/calibre/manual/develop.rst:143
msgid ""
"You can update your local copy with code from the main repo at any time by "
"doing::"
msgstr ""

# a68d9f72d44f419b9a088e5cdab7321a
#: ../../home/kovid/work/calibre/manual/develop.rst:148
msgid ""
"You should also keep an eye on the calibre `development forum "
"<http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making "
"major changes, you should discuss them in the forum or contact Kovid "
"directly (his email address is all over the source code)."
msgstr ""

# f9bfada4ebd44390a8932d5e7bce097f
#: ../../home/kovid/work/calibre/manual/develop.rst:154
msgid "Windows development environment"
msgstr ""

# e80a5d32caae49a193729f814c9497f9
# 613c4990183d4d8a8c89ff7045c14f31
# 7bfa54cb9a894ee6b8fd5b78769503e2
#: ../../home/kovid/work/calibre/manual/develop.rst:156
#: ../../home/kovid/work/calibre/manual/develop.rst:187
#: ../../home/kovid/work/calibre/manual/develop.rst:219
msgid ""
"You must also get the calibre source code separately as described above."
msgstr ""

# 5799837e28cb4a618f81bb4b92d499f1
#: ../../home/kovid/work/calibre/manual/develop.rst:158
msgid ""
"Install calibre normally, using the Windows installer. Then open a Command "
"Prompt and change to the previously checked out calibre code directory. For "
"example::"
msgstr ""

# 3ea5d14cfc3b4275b42c08f51bc3ad5f
# dc99595c17814abc9aae4fe73123f027
#: ../../home/kovid/work/calibre/manual/develop.rst:163
#: ../../home/kovid/work/calibre/manual/develop.rst:231
msgid ""
"calibre is the directory that contains the src and resources sub-"
"directories."
msgstr ""

# 383366349a684da5aa678baf1a960a4c
#: ../../home/kovid/work/calibre/manual/develop.rst:165
msgid ""
"The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to"
" the absolute path of the src directory. So, following the example above, it"
" would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide "
"<https://docs.python.org/2/using/windows.html#excursus-setting-environment-"
"variables>`_ to setting environment variables on Windows."
msgstr ""

# b04aaa0f1b574bee8ebdd62f30738dcf
#: ../../home/kovid/work/calibre/manual/develop.rst:170
msgid ""
"Once you have set the environment variable, open a new command prompt and "
"check that it was correctly set by using the command::"
msgstr ""

# 6746a6e5497445b7949347d5abe11e53
# 5c200a45f381410a8bac02ef3fb0e6f2
#: ../../home/kovid/work/calibre/manual/develop.rst:175
#: ../../home/kovid/work/calibre/manual/develop.rst:242
msgid ""
"Setting this environment variable means that calibre will now load all its "
"Python code from the specified location."
msgstr ""

# 2f06782a1bd84ad1913846a7e9ca9ae2
#: ../../home/kovid/work/calibre/manual/develop.rst:177
msgid ""
"That's it! You are now ready to start hacking on the calibre code. For "
"example, open the file :file:`src\\\\calibre\\\\__init__.py` in your "
"favorite editor and add the line::"
msgstr ""

# 836b6d9462b1419fa8656f69966c46a8
# ccd2739d201445a291c51f9c7e10064f
#: ../../home/kovid/work/calibre/manual/develop.rst:182
#: ../../home/kovid/work/calibre/manual/develop.rst:249
msgid ""
"near the top of the file. Now run the command :command:`calibredb`. The very"
" first line of output should be ``Hello, world!``."
msgstr ""

# 9232a32c33b54713a2cab2f030056cca
#: ../../home/kovid/work/calibre/manual/develop.rst:185
msgid "OS X development environment"
msgstr ""

# b60f7951e6224f92b7d668728f8dcf9c
#: ../../home/kovid/work/calibre/manual/develop.rst:189
msgid ""
"Install calibre normally using the provided .dmg. Then open a Terminal and "
"change to the previously checked out calibre code directory, for example::"
msgstr ""

# 0d71850a9481495f86018de830637685
#: ../../home/kovid/work/calibre/manual/develop.rst:194
msgid ""
"calibre is the directory that contains the src and resources sub-"
"directories. Ensure you have installed the calibre commandline tools via "
":guilabel:`Preferences->Advanced->Miscellaneous` in the calibre GUI."
msgstr ""

# 8c4b48560f354ae286bae23326d5b36c
#: ../../home/kovid/work/calibre/manual/develop.rst:196
msgid ""
"The next step is to create a bash script that will set the environment "
"variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory "
"when running calibre in debug mode."
msgstr ""

# 22f30cc172444f0c90d0044629d8c517
#: ../../home/kovid/work/calibre/manual/develop.rst:198
msgid "Create a plain text file::"
msgstr ""

# cfd4249abf60494b93e467c5f23039bc
#: ../../home/kovid/work/calibre/manual/develop.rst:204
msgid ""
"Save this file as ``/usr/bin/calibre-develop``, then set its permissions so "
"that it can be executed::"
msgstr ""

# 9718ed8d585f4aacbf64a36455d130d8
#: ../../home/kovid/work/calibre/manual/develop.rst:208
msgid "Once you have done this, run::"
msgstr ""

# 377d7943d80349fba787568d233ed5c2
#: ../../home/kovid/work/calibre/manual/develop.rst:212
msgid ""
"You should see some diagnostic information in the Terminal window as calibre"
" starts up, and you should see an asterisk after the version number in the "
"GUI window, indicating that you are running from source."
msgstr ""

# 1317262e84754e16a422d7deebe93922
#: ../../home/kovid/work/calibre/manual/develop.rst:217
msgid "Linux development environment"
msgstr ""

# 264f242592c74b0ba1ddc47e6ef24dbd
#: ../../home/kovid/work/calibre/manual/develop.rst:221
msgid ""
"calibre is primarily developed on Linux. You have two choices in setting up "
"the development environment. You can install the calibre binary as normal "
"and use that as a runtime environment to do your development. This approach "
"is similar to that used in Windows and OS X. Alternatively, you can install "
"calibre from source. Instructions for setting up a development environment "
"from source are in the INSTALL file in the source tree. Here we will address"
" using the binary at runtime, which is the recommended method."
msgstr ""

# dd63f5fc2d85472988a79e49a7e7472f
#: ../../home/kovid/work/calibre/manual/develop.rst:227
msgid ""
"Install calibre using the binary installer. Then open a terminal and change "
"to the previously checked out calibre code directory, for example::"
msgstr ""

# b0f787c788cf432fb5d4bd707527c7b6
#: ../../home/kovid/work/calibre/manual/develop.rst:233
msgid ""
"The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to"
" the absolute path of the src directory. So, following the example above, it"
" would be ``/home/kovid/work/calibre/src``. How to set environment variables"
" depends on your Linux distribution and what shell you are using."
msgstr ""

# db019371704a44079f0986236e02fbb0
#: ../../home/kovid/work/calibre/manual/develop.rst:237
msgid ""
"Once you have set the environment variable, open a new terminal and check "
"that it was correctly set by using the command::"
msgstr ""

# 44aeabfcd10a46aea22fa664d4e5a882
#: ../../home/kovid/work/calibre/manual/develop.rst:244
msgid ""
"That's it! You are now ready to start hacking on the calibre code. For "
"example, open the file :file:`src/calibre/__init__.py` in your favorite "
"editor and add the line::"
msgstr ""

# ddfee32aa91f4084b9923d2e1f7ef8dc
#: ../../home/kovid/work/calibre/manual/develop.rst:252
msgid ""
"Having separate \"normal\" and \"development\" calibre installs on the same "
"computer"
msgstr ""

# 5ec3e7e4ecfd46e0a6672e88de18963d
#: ../../home/kovid/work/calibre/manual/develop.rst:254
msgid ""
"The calibre source tree is very stable and rarely breaks, but if you feel "
"the need to run from source on a separate test library and run the released "
"calibre version with your everyday library, you can achieve this easily "
"using .bat files or shell scripts to launch calibre. The example below shows"
" how to do this on Windows using .bat files (the instructions for other "
"platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

# 0246f73357be4e4aa54b904675dcdf79
#: ../../home/kovid/work/calibre/manual/develop.rst:259
msgid "To launch the release version of calibre with your everyday library:"
msgstr ""

# 28fb7ef949af44fca2a24726dc2b67cf
#: ../../home/kovid/work/calibre/manual/develop.rst:261
msgid "calibre-normal.bat::"
msgstr ""

# ade2e140dff24220953840a1196590ef
#: ../../home/kovid/work/calibre/manual/develop.rst:265
msgid "calibre-dev.bat::"
msgstr ""

# abd7e11467c3498696e197980bf514bc
#: ../../home/kovid/work/calibre/manual/develop.rst:272
msgid "Debugging tips"
msgstr ""

# 4b17d1148bd047d3a4267d73266ac223
#: ../../home/kovid/work/calibre/manual/develop.rst:274
msgid ""
"Python is a dynamically typed language with excellent facilities for "
"introspection. Kovid wrote the core calibre code without once using a "
"debugger. There are many strategies to debug calibre code:"
msgstr ""

# 75994dbf4d3e40fe86b8846a9dfc38b1
#: ../../home/kovid/work/calibre/manual/develop.rst:279
msgid "Using print statements"
msgstr ""

# bcab659598ee4882a43ad8908f351df2
#: ../../home/kovid/work/calibre/manual/develop.rst:281
msgid ""
"This is Kovid's favorite way to debug. Simply insert print statements at "
"points of interest and run your program in the terminal. For example, you "
"can start the GUI from the terminal as::"
msgstr ""

# e969a129763545489778de5daa6c4cac
#: ../../home/kovid/work/calibre/manual/develop.rst:286
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

# 92b5f84ebdd64d7bb85020385ef7d760
#: ../../home/kovid/work/calibre/manual/develop.rst:290
msgid "The ebook-editor can be started as::"
msgstr ""

# ea3d094dcde64839b057cf7b0b74e460
#: ../../home/kovid/work/calibre/manual/develop.rst:295
msgid "Using an interactive python interpreter"
msgstr ""

# 1bc65d17457d45119d0526f07047c4e7
#: ../../home/kovid/work/calibre/manual/develop.rst:297
msgid ""
"You can insert the following two lines of code to start an interactive "
"python session at that point::"
msgstr ""

# 203491d8905045eab4c7578f752d4411
#: ../../home/kovid/work/calibre/manual/develop.rst:302
msgid ""
"When running from the command line, this will start an interactive Python "
"interpreter with access to all locally defined variables (variables in the "
"local scope). The interactive prompt even has TAB completion for object "
"properties and you can use the various Python facilities for introspection, "
"such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

# fca5d0442df0455bac38a75a9bafaaec
#: ../../home/kovid/work/calibre/manual/develop.rst:308
msgid "Using the python debugger as a remote debugger"
msgstr ""

# 72ed6954ab584774bd93846b442a4158
#: ../../home/kovid/work/calibre/manual/develop.rst:310
msgid ""
"You can use the builtin python debugger (pdb) as a remote debugger from the "
"command line. First, start the remote debugger at the point in the calibre "
"code you are interested in, like this::"
msgstr ""

# 665adefe01714ea7aeac7909b4297b97
#: ../../home/kovid/work/calibre/manual/develop.rst:317
msgid ""
"Then run calibre, either as normal, or using one of the calibre-debug "
"commands described in the previous section. Once the above point in the code"
" is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

# 43be993ff49b4e68a8ce6826bea3292e
#: ../../home/kovid/work/calibre/manual/develop.rst:321
msgid ""
"Now open a terminal or command prompt and use the following command to start"
" the debugging session::"
msgstr ""

# ef784baabb574af69d083852f052ada4
#: ../../home/kovid/work/calibre/manual/develop.rst:326
msgid ""
"You can read about how to use the python debugger in the `python stdlib docs"
" for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-"
"commands>`_."
msgstr ""

# d7b272a67e964dbb88bddfa8a6caa2e6
#: ../../home/kovid/work/calibre/manual/develop.rst:330
msgid ""
"By default, the remote debugger will try to connect on port 4444. You can "
"change it, by passing the port parameter to both the set_trace() and the "
"cli() functions above, like this: ``set_trace(port=1234)`` and "
"``cli(port=1234)``."
msgstr ""

# 9495f9b91e58457ab7f7ef90f49b0f03
#: ../../home/kovid/work/calibre/manual/develop.rst:336
msgid ""
"The python debugger cannot handle multiple threads, so you have to call "
"set_trace once per thread, each time with a different port number."
msgstr ""

# afd560c5f3df4e0b9fbe47702f800681
#: ../../home/kovid/work/calibre/manual/develop.rst:340
msgid "Using the debugger in your favorite python IDE"
msgstr ""

# e646de2c708640bfa9ea65f38503d75d
#: ../../home/kovid/work/calibre/manual/develop.rst:342
msgid ""
"It is possible to use the builtin debugger in your favorite python IDE, if "
"it supports remote debugging. The first step is to add the calibre src "
"checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory "
"you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the "
"``PYTHONPATH`` of your IDE."
msgstr ""

# 8f37a518bc204262a7e0b7c7962f5d10
#: ../../home/kovid/work/calibre/manual/develop.rst:347
msgid ""
"Then place the IDE's remote debugger module into the :file:`src` "
"subdirectory of the calibre source code checkout. Add whatever code is "
"needed to launch the remote debugger to calibre at the point of interest, "
"for example in the main function. Then run calibre as normal. Your IDE "
"should now be able to connect to the remote debugger running inside calibre."
msgstr ""

# 7fb4f24d137c4bbabac35accafacd959
#: ../../home/kovid/work/calibre/manual/develop.rst:354
msgid "Executing arbitrary scripts in the calibre python environment"
msgstr ""

# 05eb462ef94f46378179c542c609f25c
#: ../../home/kovid/work/calibre/manual/develop.rst:356
msgid ""
"The :command:`calibre-debug` command provides a couple of handy switches to "
"execute your own code, with access to the calibre modules::"
msgstr ""

# 0535741011cd42b6995053a70179f368
#: ../../home/kovid/work/calibre/manual/develop.rst:361
msgid ""
"is great for testing a little snippet of code on the command line. It works "
"in the same way as the -c switch to the python interpreter::"
msgstr ""

# 120d7f5f410f4f179320e056d92225dd
#: ../../home/kovid/work/calibre/manual/develop.rst:365
msgid ""
"can be used to execute your own Python script. It works in the same way as "
"passing the script to the Python interpreter, except that the calibre "
"environment is fully initialized, so you can use all the calibre code in "
"your script. To use command line arguments with your script, use the form::"
msgstr ""

# c0adb4af2607440ab734adedff7b4530
#: ../../home/kovid/work/calibre/manual/develop.rst:370
msgid ""
"The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

# 9bcb956a73814f3caa78e9eccd7abd93
#: ../../home/kovid/work/calibre/manual/develop.rst:374
msgid "Using calibre in your projects"
msgstr ""

# 77baddcbbb8d48cf931b26eeceaa12a3
#: ../../home/kovid/work/calibre/manual/develop.rst:376
msgid ""
"It is possible to directly use calibre functions/code in your Python "
"project. Two ways exist to do this:"
msgstr ""

# e587467718e34d32ab8b111f2413c936
#: ../../home/kovid/work/calibre/manual/develop.rst:379
msgid "Binary install of calibre"
msgstr ""

# cacb5f00f3284146b09fdccf446b2bfb
#: ../../home/kovid/work/calibre/manual/develop.rst:381
msgid ""
"If you have a binary install of calibre, you can use the Python interpreter "
"bundled with calibre, like this::"
msgstr ""

# 5569da8ebe9e4ab381247f43cd30f129
#: ../../home/kovid/work/calibre/manual/develop.rst:386
msgid "Source install on Linux"
msgstr ""

# 01363fbb761a4c22b0938a51d5a0cf21
#: ../../home/kovid/work/calibre/manual/develop.rst:388
msgid ""
"In addition to using the above technique, if you do a source install on "
"Linux, you can also directly import calibre, as follows::"
msgstr ""

# 01621ab824594785903a2525a32339e8
#: ../../home/kovid/work/calibre/manual/develop.rst:396
msgid ""
"It is essential that you import the init_calibre module before any other "
"calibre modules/packages as it sets up the interpreter to run calibre code."
msgstr ""

# 4dcc80785f804879807cad5f9ea946a8
#: ../../home/kovid/work/calibre/manual/develop.rst:400
msgid "API documentation for various parts of calibre"
msgstr ""
