# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# Merarom <merarom@yahoo.es>, 2014
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-08 08:53+0530\n"
"PO-Revision-Date: 2014-08-09 17:20+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Swedish (http://www.transifex.com/projects/p/calibre/language/sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 7aac719b2f224be6a3d3520c8954bd58
#: ../../template_ref.rst:6
msgid "Reference for all built-in template language functions"
msgstr "Referens till alla inbyggda mallfunktioner"

# 5e33301806284322ba15577fc6a84c10
#: ../../template_ref.rst:8
msgid ""
"Here, we document all the built-in functions available in the |app| template"
" language. Every function is implemented as a class in python and you can "
"click the source links to see the source code, in case the documentation is "
"insufficient. The functions are arranged in logical groups by type."
msgstr "Här dokumenterar vi alla de inbyggda funktionerna finns i |app|-mallspråk. Varje funktion implementeras som en klass i python och du kan klicka på källänkarna för att se källkoden, ifall dokumentationen är otillräcklig. Funktionerna är ordnade i logiska grupper efter typ."

# faae71e52df04eedb6098d6d6f941881
#: ../../template_ref.rst:17
msgid "Arithmetic"
msgstr "Aritmetik"

# 161a2e38036d41fe8cdd50dd4d25a7d4
#: ../../template_ref.rst:20
msgid "add(x, y)"
msgstr "add(x, y)"

# e8c48dd538ee4c528098328367f1a080
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinAdd:1
msgid ""
"add(x, y) -- returns x + y. Throws an exception if either x or y are not "
"numbers."
msgstr "add(x, y) - returnerar x + y. Ger ett undantag om antingen x eller y är inte siffror."

# aca215b0187a41c1962ae8eb07b24e1a
#: ../../template_ref.rst:25
msgid "divide(x, y)"
msgstr ""

# 05ef8301c3dc451ca420066e493c5686
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinDivide:1
msgid ""
"divide(x, y) -- returns x / y. Throws an exception if either x or y are not "
"numbers."
msgstr "divide(x, y) - returnerar x / y. Ger ett undantag om antingen x eller y är inte siffror."

# a1a49661bc3c487bad148143f0501209
#: ../../template_ref.rst:30
msgid "multiply(x, y)"
msgstr ""

# 2dcd98fc7a414ae0a4c4dfdc9d412139
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinMultiply:1
msgid ""
"multiply(x, y) -- returns x * y. Throws an exception if either x or y are "
"not numbers."
msgstr "multiply(x, y) - returnerar x * y. Ger ett undantag om antingen x eller y är inte siffror."

# 7b28aabe2842445798595c56e3e6f9f6
#: ../../template_ref.rst:35
msgid "subtract(x, y)"
msgstr ""

# 5d813135e49149b98a4d60569c7d7083
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSubtract:1
msgid ""
"subtract(x, y) -- returns x - y. Throws an exception if either x or y are "
"not numbers."
msgstr "subtract(x, y) - returnerar x - y. Ger ett undantag om antingen x eller y är inte siffror."

# b74c2327d9e94747b40f57b918526413
#: ../../template_ref.rst:40
msgid "Boolean"
msgstr ""

# b31d7186734843c2a2f2b3108ad99b27
#: ../../template_ref.rst:43
msgid "and(value, value, ...)"
msgstr ""

# 2fa35e9821824a9e9590657de6e8e6b4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinAnd:1
msgid ""
"and(value, value, ...) -- returns the string \"1\" if all values are not "
"empty, otherwise returns the empty string. This function works well with "
"test or first_non_empty. You can have as many values as you want."
msgstr "och (värde, värde, ...) - returnerar strängen \"1\" om alla värden är inte tom, annars returneras en tom sträng. Denna funktion fungerar bra med test eller first_non_empty. Du kan ha så många värden som du vill."

# 0c2d545ef6a44d4baa9057dfbd03b82e
#: ../../template_ref.rst:48
msgid "not(value)"
msgstr ""

# 6787ef66385546e8970107842e5310dc
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinNot:1
msgid ""
"not(value) -- returns the string \"1\" if the value is empty, otherwise "
"returns the empty string. This function works well with test or "
"first_non_empty. You can have as many values as you want."
msgstr "not (värde) - returnerar strängen \"1\" om värdet är tom, annars returneras en tom sträng. Denna funktion fungerar bra med test eller first_non_empty. Du kan ha så många värden som du vill."

# 88ba3fa52e2546f6a002701ae5781d8a
#: ../../template_ref.rst:53
msgid "or(value, value, ...)"
msgstr ""

# 88e65971df6245a58563b095c8d1ee89
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinOr:1
msgid ""
"or(value, value, ...) -- returns the string \"1\" if any value is not empty,"
" otherwise returns the empty string. This function works well with test or "
"first_non_empty. You can have as many values as you want."
msgstr "or (värde, värde, ...) - returnerar strängen \"1\" om något värde inte är tomt, annars returneras en tom sträng. Denna funktion fungerar bra med test eller first_non_empty. Du kan ha så många värden som du vill."

# 7b6a0a15f297449ab402a61caaf3d94f
#: ../../template_ref.rst:58
msgid "Date functions"
msgstr "Datumfunktioner"

# 1253a27b8f7443149f885495678ecb7f
#: ../../template_ref.rst:61
msgid "days_between(date1, date2)"
msgstr ""

# a4273e54ebaf4442817e47eb4cec2c42
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinDaysBetween:1
msgid ""
"days_between(date1, date2) -- return the number of days between date1 and "
"date2. The number is positive if date1 is greater than date2, otherwise "
"negative. If either date1 or date2 are not dates, the function returns the "
"empty string."
msgstr "days_between (datum1, datum2) - returnerar antalet dagar mellan datum1 och datum2. Numret är positivt om date1 är större än date2, annars negativ. Om någon datum1 eller datum2 inte datum, returnerar funktionen en tom sträng."

# 4f0e48fb55764c09ba6d6ddd5b6a0989
#: ../../template_ref.rst:66
msgid "today()"
msgstr "today()"

# fe681135d9b643968286a7c2611fb7c1
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinToday:1
msgid ""
"today() -- return a date string for today. This value is designed for use in"
" format_date or days_between, but can be manipulated like any other string. "
"The date is in ISO format."
msgstr "today() - returnera en datumsträng för idag. Detta värde är avsedd för användning i format_date eller days_between, men kan manipuleras som alla andra strängen. Datumet är i ISO-format."

# 65f4dd9028904afd93c1ecc2b13844b9
#: ../../template_ref.rst:71
msgid "Formatting values"
msgstr "Formaterar värden"

# 2011bf940e054300a118b8fa17cdd5d4
#: ../../template_ref.rst:74
msgid "finish_formatting(val, fmt, prefix, suffix)"
msgstr ""

# 50f0807d7dda4ae287221c51f132b48e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFinishFormatting:1
msgid ""
"finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and"
" suffix to a value in the same way as done in a template like "
"`{series_index:05.2f| - |- }`. For example, the following program produces "
"the same output as the above template: program: "
"finish_formatting(field(\"series_index\"), \"05.2f\", \" - \", \" - \")"
msgstr "finish_formatting(val, fmt, prefix, suffix) -- tillämpa formatet, prefix och suffix till ett värde på samma sätt som görs i en mall som `{series_index: 05.2f | - | -}`. Till exempel ger följande program samma resultat som ovanstående mall: program:finish_formatting(field(\"series_index\"), \"05.2f\", \" - \", \" - \")"

# c9ccb810ff554fdda5b6629b0028c5b3
#: ../../template_ref.rst:79
msgid "format_date(val, format_string)"
msgstr ""

# 30ac0c2aaf7f4f7f990cc8f6112a2a24
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatDate:1
msgid ""
"format_date(val, format_string) -- format the value, which must be a date, "
"using the format_string, returning a string. The formatting codes are: d    "
": the day as number without a leading zero (1 to 31) dd   : the day as "
"number with a leading zero (01 to 31) ddd  : the abbreviated localized day "
"name (e.g. \"Mon\" to \"Sun\"). dddd : the long localized day name (e.g. "
"\"Monday\" to \"Sunday\"). M    : the month as number without a leading zero"
" (1 to 12). MM   : the month as number with a leading zero (01 to 12) MMM  :"
" the abbreviated localized month name (e.g. \"Jan\" to \"Dec\"). MMMM : the "
"long localized month name (e.g. \"January\" to \"December\"). yy   : the "
"year as two digit number (00 to 99). yyyy : the year as four digit number. h"
"    : the hours without a leading 0 (0 to 11 or 0 to 23, depending on am/pm)"
" hh   : the hours with a leading 0 (00 to 11 or 00 to 23, depending on "
"am/pm) m    : the minutes without a leading 0 (0 to 59) mm   : the minutes "
"with a leading 0 (00 to 59) s    : the seconds without a leading 0 (0 to 59)"
" ss   : the seconds with a leading 0 (00 to 59) ap   : use a 12-hour clock "
"instead of a 24-hour clock, with \"ap\" replaced by the localized string for"
" am or pm AP   : use a 12-hour clock instead of a 24-hour clock, with \"AP\""
" replaced by the localized string for AM or PM iso  : the date with time and"
" timezone. Must be the only format present"
msgstr "format_date (val, format_string) - formaterar värdet, vilket måste vara ett datum, genom att använda format_string, returneras en sträng. De formateringskoder är: d: den dag som tal utan inledande nolla (1 till 31) dd: dagen som tal med inledande nolla (01 till 31) MMM: den förkortade lokaliserade dag namn (t.ex. \"Mon\" till \"Sun \"). dddd: den långa lokaliserade dag namn (t.ex. \"måndag\" till \"sönday\"). M: månaden som tal utan inledande nolla (1 till 12). MM: månad som tal med inledande nolla (01 till 12) MMM: den förkortade lokaliserade månaden namn (t.ex. \"Jan\" till \"Dec\"). MMMM: den långa lokaliserade månaden namn (t.ex. \"Januari\" till \"December\"). yy: året som två siffror (00 till 99). dd: året som fyra siffror. h: timmar utan inledande 0 (0 till 11 eller 0 till 23, beroende på am / pm) hh: de timmar med en inledande 0 (00 till 11 eller 00 till 23, beroende på am / pm) m: protokollet utan inledande 0 (0 till 59) mm: protokollet med en inledande 0 (00 till 59) s: de sekund utan inledande 0 (0 till 59) ss: sekunderna med en inledande 0 (00 till 59) AP: använd en 12-timmars klocka istället för en 24-timmars klocka, med \"ap\" ersättas med lokaliserad strängen för am eller pm AP: använd en 12-timmars klocka istället för en 24-timmars klocka, med \"AP\" ersättas med lokaliserad sträng för AM eller PM iso: datum med tid och tidszon. Måste vara det enda närvarande formatet"

# 51b1a4a4f3fa4f1087050e9524fdd4f6
#: ../../template_ref.rst:84
msgid "format_number(v, template)"
msgstr ""

# 563f257ccb9b4839baf1aad1de8cc2b6
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatNumber:1
msgid ""
"format_number(v, template) -- format the number v using a python formatting "
"template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The "
"field_name part of the template must be a 0 (zero) (the \"{0:\" in the above"
" examples). See the template language and python documentation for more "
"examples. Returns the empty string if formatting fails."
msgstr "format_number(v, template) -- format numret v med hjälp av ett python formatering mall som \"{0:5.2f}\" eller \"{0:,d}\" eller \"${0:5,.2f}\".  field_name del av mallen ska vara en 0 (noll) ( \"{0:\"  i exemplen ovan). Se språkmallen och python-dokumentationen för fler exempel. Returnerar tom sträng om formatering misslyckas."

# 5d6b18912c7e4667a1f460188c6e0da6
#: ../../template_ref.rst:89
msgid "human_readable(v)"
msgstr ""

# 8ce00157db6d40dda3c91ba2b3752d9f
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinHumanReadable:1
msgid ""
"human_readable(v) -- return a string representing the number v in KB, MB, "
"GB, etc."
msgstr "human_readable (v) - returnerar en sträng som representerar antalet v i KB, MB, GB, etc."

# 16dcef32e6ed45eea2ff64371d928592
#: ../../template_ref.rst:94
msgid "Get values from metadata"
msgstr "Hämta värden från metadata"

# 478649789b774616bff54f4ebe389cb0
#: ../../template_ref.rst:97
msgid "approximate_formats()"
msgstr ""

# 63f75731f03d43ceb2ac0521897ba265
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinApproximateFormats:1
msgid ""
"approximate_formats() -- return a comma-separated list of formats that at "
"one point were associated with the book. There is no guarantee that this "
"list is correct, although it probably is. This function can be called in "
"template program mode using the template \"{:'approximate_formats()'}\". "
"Note that format names are always uppercase, as in EPUB. This function works"
" only in the GUI. If you want to use these values in save-to-disk or send-"
"to-device templates then you must make a custom \"Column built from other "
"columns\", use the function in that column's template, and use that column's"
" value in your save/send templates"
msgstr "approximate_formats() -- returnerar en kommaseparerad lista med format som vid ett tillfälle var i samband med boken. Det finns ingen garanti för att denna lista är korrekt, även om den antagligen är det. Denna funktion kan anropas i mallprogramläge med mallen \"{: 'approximate_formats ()'}\". Observera att formatnamnen alltid är versaler, som i EPUB. Den här funktionen fungerar bara i grafiska gränssnittet. Om du vill använda dessa värden på spara-till-disk eller skicka-till-enhet-mallar måste du göra en egen \"kolumn byggd från andra kolumner\", använder du funktionen i kolumnmallen och använda den kolumnens värde i din spar/skicka mallar"

# 62dd93987ec146a4aeff7a9587b7b0b6
#: ../../template_ref.rst:102
msgid "author_links(val_separator, pair_separator)"
msgstr ""

# 034b0c7cfb7740489725d0400cd59206
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinAuthorLinks:1
msgid ""
"author_links(val_separator, pair_separator) -- returns a string containing a"
" list of authors and that author's link values in the form author1 "
"val_separator author1link pair_separator author2 val_separator author2link "
"etc. An author is separated from its link value by the val_separator string "
"with no added spaces. author:linkvalue pairs are separated by the "
"pair_separator string argument with no added spaces. It is up to you to "
"choose separator strings that do not occur in author names or links. An "
"author is included even if the author link is empty."
msgstr "author_links(val_separator, pair_separator) -- returnerar en sträng som innehåller en lista av författare och denna författares länkvärde i formen author1 val_separator author1link pair_separator author2 val_separator author2link etc. En författare är separerad från dess länkvärde med val_separator sträng utan tillagda mellanrum. author:linkvalue par är separerade med  pair_separator strängargument utan tillagda mellanrum. \nDet är upp till dig att välja separatorsträngar som inte uppträder i författarnamn eller länkar. En författare är inkluderad även om författarlänken är tom."

# 5984448bccbb4997bd8108ca904c4ecd
#: ../../template_ref.rst:107
msgid "booksize()"
msgstr ""

# 5c58f5f359ce4a49b8884304a86ac7fc
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinBooksize:1
msgid ""
"booksize() -- return value of the size field. This function works only in "
"the GUI. If you want to use this value in save-to-disk or send-to-device "
"templates then you must make a custom \"Column built from other columns\", "
"use the function in that column's template, and use that column's value in "
"your save/send templates"
msgstr "booksize() -- returnera värdet av storleken fältet. Den här funktionen fungerar bara i grafiska gränssnittet. Om du vill använda detta värde i Save-to-disk eller skicka-till-enhet-mallar måste du göra en egen \"kolumn byggd från andra kolumner\", använder du funktionen i kolumnmallen och använda den kolumnens värde i din spara/skicka mallar"

# d333f30e46ca44d2b0d817ec375cb6e9
#: ../../template_ref.rst:112
msgid "current_library_name()"
msgstr ""

# a4e8dd391617426f8bb350abd1af125b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCurrentLibraryName:1
msgid ""
"current_library_name() -- return the last name on the path to the current "
"calibre library. This function can be called in template program mode using "
"the template \"{:'current_library_name()'}\"."
msgstr "current_library_name() -- returnera efternamnet på sökvägen till den nuvarande Calibre-biblioteket. Denna funktion kan anropas i mallprogrammeringsläget genom att använda mallen \"{: 'current_library_name ()'}\"."

# c270a34b8fde4c8494d9ad91778fb197
#: ../../template_ref.rst:117
msgid "current_library_path()"
msgstr ""

# 47f3947effb54682a5073936ae6fb95d
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCurrentLibraryPath:1
msgid ""
"current_library_path() -- return the path to the current calibre library. "
"This function can be called in template program mode using the template "
"\"{:'current_library_path()'}\"."
msgstr "current_library_path () - returnera sökvägen till den aktuella Calibre-biblioteket. Denna funktion kan anropas i mallens programmeringsläget genom att använda mallen \"{: 'current_library_path ()'}\"."

# 4306ae1a520844f5982f74f0e99374af
#: ../../template_ref.rst:122
msgid "field(name)"
msgstr ""

# 6a977d0d47e447cf889deb67cd25b6e4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinField:1
msgid "field(name) -- returns the metadata field named by name"
msgstr "field(namn) - returnerar metadatafält med namnet efter namn"

# d7787f08e5234581b99b718ee0be51c7
#: ../../template_ref.rst:127
msgid "formats_modtimes(date_format)"
msgstr ""

# e8511948368140de8ceec0a9416a8265
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatsModtimes:1
msgid ""
"formats_modtimes(date_format) -- return a comma-separated list of "
"colon_separated items representing modification times for the formats of a "
"book. The date_format parameter specifies how the date is to be formatted. "
"See the date_format function for details. You can use the select function to"
" get the mod time for a specific format. Note that format names are always "
"uppercase, as in EPUB."
msgstr "formats_modtimes(date_format) -- returnen kommaseparerad lista med kolon_separateradeobjekt som representerar förändrings tider för formaten i en bok. . date_format parametern anger hur datum ska formateras. Se date_format funktionen för mer information. Du kan använda val funktionen för att få ändringstiden för ett visst format. Observera att formatnamn alltid är versaler, som i EPUB."

# b5062e1d1a2643708da41009e2e4e869
#: ../../template_ref.rst:132
msgid "formats_paths()"
msgstr ""

# 921df356623046258bb328f9d74d1e47
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatsPaths:1
msgid ""
"formats_paths() -- return a comma-separated list of colon_separated items "
"representing full path to the formats of a book. You can use the select "
"function to get the path for a specific format. Note that format names are "
"always uppercase, as in EPUB."
msgstr "formats_paths () - returnera en kommaseparerad lista över colon_separated objekt som representerar fullständig sökväg till format i en bok. Du kan använda Select-funktionen för att få söktvägen i ett visst format. Observera att formatet namn alltid är versaler, som i EPUB."

# e741e631c8d64ce3b4adc2c9e8d004e5
#: ../../template_ref.rst:137
msgid "formats_sizes()"
msgstr ""

# 14108a85a84e416e8cddd7f629d2b429
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFormatsSizes:1
msgid ""
"formats_sizes() -- return a comma-separated list of colon_separated items "
"representing sizes in bytes of the formats of a book. You can use the select"
" function to get the size for a specific format. Note that format names are "
"always uppercase, as in EPUB."
msgstr "formats_sizes() -- returnera en kommaseparerad lista med kolon_separaterade objekt som representerar storleken i byte av format i en bok. Du kan använda välja funktionen för att få storleken för ett visst format. Observera att formatnamn alltid är versaler, som i EPUB."

# 242b8e8a30654c43983041ab484fada6
#: ../../template_ref.rst:142
msgid "has_cover()"
msgstr ""

# 1dabe5a295d742ad80e31c7529b961c6
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinHasCover:1
msgid ""
"has_cover() -- return Yes if the book has a cover, otherwise return the "
"empty string"
msgstr "has_cover () - returnera Ja om boken har ett omslag, annars tillbaka den tomma strängen"

# c8ecb28adb2d441fb65dd954d7f4e2eb
#: ../../template_ref.rst:147
msgid "language_codes(lang_strings)"
msgstr ""

# c8245faa0a354f739cc6da6b22aabd11
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLanguageCodes:1
msgid ""
"language_codes(lang_strings) -- return the language codes for the strings "
"passed in lang_strings. The strings must be in the language of the current "
"locale. Lang_strings is a comma-separated list."
msgstr "language_codes(lang_strings) -- returnera språkkoderna för strängarna som finns i lang_strings. Strängarna ska vara på samma språk som den aktuella lokalen. Lang_strings är en kommaseparerad lista."

# 4d07a94fbb5a422ab9239d29f819928b
#: ../../template_ref.rst:152
msgid "language_strings(lang_codes, localize)"
msgstr ""

# 051c87b0d9394fbc943fbcae4f2391f7
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLanguageStrings:1
msgid ""
"language_strings(lang_codes, localize) -- return the strings for the "
"language codes passed in lang_codes. If localize is zero, return the strings"
" in English. If localize is not zero, return the strings in the language of "
"the current locale. Lang_codes is a comma-separated list."
msgstr "language_strings(lang_codes, localize) -- returnera strängarna för språkkoder som finns i lang_codes. Om lokalisera är noll, returneras strängarna på engelska. Om lokalisera inte är noll, returneras strängarna tillbaka på språket i den aktuella lokalen. Lang_codes är en kommaseparerad lista."

# 0bde2f184fab45d0a925e85f252563f7
#: ../../template_ref.rst:157
msgid "ondevice()"
msgstr ""

# 0b0f0ba301f74538a25cb10435d06e95
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinOndevice:1
msgid ""
"ondevice() -- return Yes if ondevice is set, otherwise return the empty "
"string. This function works only in the GUI. If you want to use this value "
"in save-to-disk or send-to-device templates then you must make a custom "
"\"Column built from other columns\", use the function in that column's "
"template, and use that column's value in your save/send templates"
msgstr "ondevice() -- returnerar tillbaka Ja om ondevice är satt, annars returneras den tomma strängen. Den här funktionen fungerar bara i grafiska gränssnittet. Om du vill använda detta värde i Save-to-disk eller skicka-till-enhet-mallar måste du göra en egen \"kolumn byggd från andra kolumner\", använder du funktionen i kolumnmallen och använder den kolumnen värde i din spara/skicka mallar"

# df644a733def4d66b9fc69c5b5982f2b
#: ../../template_ref.rst:162
msgid "raw_field(name)"
msgstr ""

# 06b6737e47414ffc8a937dc1013440c5
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinRawField:1
msgid ""
"raw_field(name) -- returns the metadata field named by name without applying"
" any formatting."
msgstr "raw_field (namn) - returnerar metadata fält med namnet på namn utan att tillämpa någon formatering."

# b613c972c0b147719066175ab7d40444
#: ../../template_ref.rst:167
msgid "series_sort()"
msgstr ""

# cc2a92b4f2fe4728978ebc7895713736
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSeriesSort:1
msgid "series_sort() -- return the series sort value"
msgstr "series_sort() -- returnerar seriesorteringsvärde"

# df1bb19a3b414536ae90fcc694c7d4a0
#: ../../template_ref.rst:172
msgid "virtual_libraries()"
msgstr ""

# 930660af0ed44dd68d2705225572d4df
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinVirtualLibraries:1
msgid ""
"virtual_libraries() -- return a comma-separated list of virtual libraries "
"that contain this book. This function works only in the GUI. If you want to "
"use these values in save-to-disk or send-to-device templates then you must "
"make a custom \"Column built from other columns\", use the function in that "
"column's template, and use that column's value in your save/send templates"
msgstr "virtual_libraries() -- returnera en kommaseparerad lista med virtuella bibliotek som innehåller den här boken. Den här funktionen fungerar bara i grafiska gränssnitt. Om du vill använda dessa värden på spara-till-disk eller skicka-till-enhet-mallar måste du göra en egen \"kolumn byggd från andra kolumner\", använder du funktionen i kolumnmallen och använd den kolumnens värde i din spar/skicka mallar"

# e2c98676643942bf8db1070ad656f8c7
#: ../../template_ref.rst:177
msgid "If-then-else"
msgstr ""

# 179b9ac20c164d26aaecfa35c0152c06
#: ../../template_ref.rst:180
msgid "contains(val, pattern, text if match, text if not match)"
msgstr ""

# 0945dae6cb9e4c6da7c50050a487d39a
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinContains:1
msgid ""
"contains(val, pattern, text if match, text if not match) -- checks if field "
"contains matches for the regular expression `pattern`. Returns `text if "
"match` if matches are found, otherwise it returns `text if no match`"
msgstr "contains(val, mönster, text om matchen, text om inte matchen) - kontrollerar om fältet innehåller träffar för det reguljära uttrycket \"mönster\". Returnerar \"text om matchen\" om träffar hittas annars returnerar \"text om ingen träff\""

# f0c45d6f36a743bfb951076a2589f775
#: ../../template_ref.rst:185
msgid "ifempty(val, text if empty)"
msgstr ""

# 80e5d9f995964e678f8262fe5ae8cbc4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinIfempty:1
msgid ""
"ifempty(val, text if empty) -- return val if val is not empty, otherwise "
"return `text if empty`"
msgstr "ifempty(val, text om den är tom) - Returnerar val om val inte är tom, annars returneras \"texten om den är tom\""

# b696d6bb7f1f43809998f057e1fe1c3d
#: ../../template_ref.rst:190
msgid "test(val, text if not empty, text if empty)"
msgstr ""

# 53fb61e3a7b54adfa9a883674cf7fef9
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTest:1
msgid ""
"test(val, text if not empty, text if empty) -- return `text if not empty` if"
" the field is not empty, otherwise return `text if empty`"
msgstr "test(val, text om inte tom, text om den är tom) - returvärde \"text om inte tom\" Om fältet inte är tomt, annars returnera \"texten om den är tom\""

# 17111c12e247482e906dab1f064f7d54
#: ../../template_ref.rst:195
msgid "Iterating over values"
msgstr ""

# 81c28c2b7b204039a6ac914c02f81924
#: ../../template_ref.rst:198
msgid "first_non_empty(value, value, ...)"
msgstr ""

# 849784ccbce64969be4c4105397b7fa9
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFirstNonEmpty:1
msgid ""
"first_non_empty(value, value, ...) -- returns the first value that is not "
"empty. If all values are empty, then the empty value is returned. You can "
"have as many values as you want."
msgstr "first_non_empty (värde, värde, ...) - returnerar det första värdet som inte är tomt. Om alla värden är tomma, då returneras det tomma värdet. Du kan ha så många värden som du vill."

# 83474080306943ffaee918f9c829ef44
#: ../../template_ref.rst:203
msgid "lookup(val, pattern, field, pattern, field, ..., else_field)"
msgstr ""

# dc19a62c32b3464bbd333135b3eda781
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLookup:1
msgid ""
"lookup(val, pattern, field, pattern, field, ..., else_field) -- like switch,"
" except the arguments are field (metadata) names, not text. The value of the"
" appropriate field will be fetched and used. Note that because composite "
"columns are fields, you can use this function in one composite field to use "
"the value of some other composite field. This is extremely useful when "
"constructing variable save paths"
msgstr "lookup(val, mönster, fält, mönster, fält, ..., else_field) - som switch, förutom argumenten fält (metadata) namn, inte text. Värdet på lämpligt fält kommer att hämtas och användas. Observera att eftersom sammansatta kolumn är fält, kan du använda denna funktion i ett sammansatt fält och använda värdet av vissa andra sammansatta området. Detta är mycket användbart vid konstruerandet av variabla sparvägar"

# 0e9000a8481b4f5b9498074617bc4c79
#: ../../template_ref.rst:208
msgid "switch(val, pattern, value, pattern, value, ..., else_value)"
msgstr ""

# 2e45daec376b4a4a9feaf52951533f3f
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSwitch:1
msgid ""
"switch(val, pattern, value, pattern, value, ..., else_value) -- for each "
"`pattern, value` pair, checks if the field matches the regular expression "
"`pattern` and if so, returns that `value`. If no pattern matches, then "
"else_value is returned. You can have as many `pattern, value` pairs as you "
"want"
msgstr "switch(val, mönster, värde, mönster, värde, ..., else_value) - för varje \"mönster, värde\" par, kontrollerar om fältet överensstämmer med det reguljära uttrycket \"mönster\" och i så fall avkastning som \"värde\". Om inget mönster passar, då returneras else_value . Du kan ha så många \"mönster, värdes\" par som du vill"

# 3ad43b97504e4935959daf89b42a04d2
#: ../../template_ref.rst:213
msgid "List lookup"
msgstr "Lista uppslag"

# 0df326ffc872451f8842671f31c9d709
#: ../../template_ref.rst:216
msgid "identifier_in_list(val, id, found_val, not_found_val)"
msgstr ""

# 80b02b7f92194e94a8c190f63f2858a0
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinIdentifierInList:1
msgid ""
"identifier_in_list(val, id, found_val, not_found_val) -- treat val as a list"
" of identifiers separated by commas, comparing the string against each value"
" in the list. An identifier has the format \"identifier:value\". The id "
"parameter should be either \"id\" or \"id:regexp\". The first case matches "
"if there is any identifier with that id. The second case matches if the "
"regexp matches the identifier's value. If there is a match, return "
"found_val, otherwise return not_found_val."
msgstr "identifier_in_list(val, id, found_val, not_found_val) -- behandla val som en lista med identifierare separerade med kommatecken och jämför strängen mot varje värde i listan. En identifierare har formatet \"ID: värde\". ID-parametern ska vara antingen \"id\" eller \"id: RegExp\". Det första fallet ger träff om det finns någon identifierare med detta ID. Det andra fallet ger träff om regexp matchar identifierare värde. Om det är en träff, returneras found_val, annars returneras not_found_val."

# 635a0420a89b4027afcf248dfe18c60b
#: ../../template_ref.rst:221
msgid "in_list(val, separator, pattern, found_val, not_found_val)"
msgstr ""

# 7ddc879f4e3448579d1dcacf3787a698
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinInList:1
msgid ""
"in_list(val, separator, pattern, found_val, not_found_val) -- treat val as a"
" list of items separated by separator, comparing the pattern against each "
"value in the list. If the pattern matches a value, return found_val, "
"otherwise return not_found_val."
msgstr "in_list (Val, separator, mönster, found_val, not_found_val) - behandla val som en lista med poster avdelade med separator, att jämföra mönstret mot varje värde i listan. Om mönstret matchar ett värde, avkastning found_val, annars återvänder not_found_val."

# 0bff3de398e6489eac9e6e3c98410820
#: ../../template_ref.rst:226
msgid "list_item(val, index, separator)"
msgstr ""

# 18d176a9f6b345bcaa7e6d7bbc84e6e4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListitem:1
msgid ""
"list_item(val, index, separator) -- interpret the value as a list of items "
"separated by `separator`, returning the `index`th item. The first item is "
"number zero. The last item can be returned using `list_item(-1,separator)`. "
"If the item is not in the list, then the empty value is returned. The "
"separator has the same meaning as in the count function."
msgstr "list_item(val, index, separator) - tolka värdet som en lista av element åtskilda av \"separator\", returnerar \"indexet\":e objekt. Den första punkten är siffran noll. Den sista komponenten kan återsändas med hjälp av `list_item (-1, separator).\" Om objektet inte finns i listan, kommer det tomma värdet returneras. Avskiljaren har samma betydelse som i funktionen ANTAL."

# f1ec26b96b5a4362b7dfb66366cb0593
#: ../../template_ref.rst:231
msgid "select(val, key)"
msgstr ""

# 0d0d1fa208d74c638c3a121db82ba684
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSelect:1
msgid ""
"select(val, key) -- interpret the value as a comma-separated list of items, "
"with the items being \"id:value\". Find the pair with the id equal to key, "
"and return the corresponding value."
msgstr "select(val, key) --  tolka värdet som en kommaseparerad lista, med den post som \"id: värde\". Hitta paret med ID lika med nyckel, och returnera motsvarande värde."

# e9e409e0013d4b30af6943df4ead3d4d
#: ../../template_ref.rst:236
msgid "str_in_list(val, separator, string, found_val, not_found_val)"
msgstr ""

# 74c78e1d3cb144e9b3960a6b363b830e
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrInList:1
msgid ""
"str_in_list(val, separator, string, found_val, not_found_val) -- treat val "
"as a list of items separated by separator, comparing the string against each"
" value in the list. If the string matches a value, return found_val, "
"otherwise return not_found_val. If the string contains separators, then it "
"is also treated as a list and each value is checked."
msgstr "str_in_list (Val, separator, sträng, found_val, not_found_val) - behandla val som en lista med poster avdelade med separator, att jämföra strängen mot varje värde i listan. Om strängen matchar ett värde, avkastning found_val, annars återvänder not_found_val. Om strängen innehåller separatorer, då är det också behandlas som en lista och varje värde är markerat."

# 4ccddc5e4de7434e81adec531de91d58
#: ../../template_ref.rst:241
msgid "List manipulation"
msgstr ""

# 99175fd3b2c54067b26d8959e2ea0085
#: ../../template_ref.rst:244
msgid "count(val, separator)"
msgstr ""

# e7006f17d2794b9ea826d387d387ae3f
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCount:1
msgid ""
"count(val, separator) -- interprets the value as a list of items separated "
"by `separator`, returning the number of items in the list. Most lists use a "
"comma as the separator, but authors uses an ampersand. Examples: "
"{tags:count(,)}, {authors:count(&)}"
msgstr "count(val, separator) - tolkar värdet som en lista av element åtskilda av \"separator\", returnerar antalet objekt i listan. De flesta listor använder kommatecken som avgränsare, men författarna använder ett et-tecken. Exempel: {Tags: (,)}, räkna {författare: räknare (&)}"

# 0df423f941014ba89aa3e487e5e417b2
#: ../../template_ref.rst:249
msgid "list_difference(list1, list2, separator)"
msgstr ""

# e20ecf96a2704323a0f71df4b9c49abe
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListDifference:1
msgid ""
"list_difference(list1, list2, separator) -- return a list made by removing "
"from list1 any item found in list2, using a case-insensitive compare. The "
"items in list1 and list2 are separated by separator, as are the items in the"
" returned list."
msgstr "list_difference (List1, List2, sorterare) - returnera en lista genom att ta bort List1 alla objekt som finns i List2 med en skiftlägeskänslig jämförelse. Objekten i List1 och List2 skiljs åt av separator, liksom de artiklar i den returnerade listan."

# f77a88c83ceb4913bddc908dc0541d0c
#: ../../template_ref.rst:254
msgid "list_equals(list1, sep1, list2, sep2, yes_val, no_val)"
msgstr ""

# 1174917b0e4d4e4fb7f284a186f32fd4
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListEquals:1
msgid ""
"list_equals(list1, sep1, list2, sep2, yes_val, no_val) -- return yes_val if "
"list1 and list2 contain the same items, otherwise return no_val. The items "
"are determined by splitting each list using the appropriate separator "
"character (sep1 or sep2). The order of items in the lists is not relevant. "
"The compare is case insensitive."
msgstr "list_equals(list1, sep1, list2, sep2, yes_val, no_val) -- returnerar yes_val om list1 och list2 innehåller samma poster, annars returneras no_val. Föremålen bestäms genom att dela upp varje lista med lämpliga avgränsare (sep1 eller sep2). Ordningen på objekten i listorna inte är relevant. Jämförelsen är inte skiftlägeskänslig."

# fbb89c38ea25437982d87ab61fa9451a
#: ../../template_ref.rst:259
msgid "list_intersection(list1, list2, separator)"
msgstr ""

# d9d8cbb4b6b04b0bb046210df18f5b3a
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListIntersection:1
msgid ""
"list_intersection(list1, list2, separator) -- return a list made by removing"
" from list1 any item not found in list2, using a case-insensitive compare. "
"The items in list1 and list2 are separated by separator, as are the items in"
" the returned list."
msgstr "list_intersection (List1, List2, sorterare) - returnera en lista görs genom att ta bort List1 varje punkt som inte finns i List2 med en skiftlägeskänslig jämföra. Objekten i List1 och List2 skiljs åt av separator, liksom de artiklar i den returnerade listan."

# 8a6a1f2a03e14f5694807e0964dc0e6f
#: ../../template_ref.rst:264
msgid "list_re(src_list, separator, include_re, opt_replace)"
msgstr ""

# 03dc418765354fbdb917678d5843962a
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListRe:1
msgid ""
"list_re(src_list, separator, include_re, opt_replace) -- Construct a list by"
" first separating src_list into items using the separator character. For "
"each item in the list, check if it matches include_re. If it does, then add "
"it to the list to be returned. If opt_replace is not the empty string, then "
"apply the replacement before adding the item to the returned list."
msgstr "list_re(src_list, separator, include_re, opt_replace) -- Konstruera en lista genom att först separera src_list till poster med hjälp av avgränsningstecken. För varje post i listan, kontrollera om det passar include_re. Om den gör det, sedan lägga till den i listan som ska returneras. Om opt_replace inte är den tomma strängen, tillämpa sedan bytet innan du lägger till objekt åter till listan."

# a81ff9a5eed14f48bae0c1c18fb89b0e
#: ../../template_ref.rst:269
msgid ""
"list_re_group(src_list, separator, include_re, search_re, group_1_template, "
"...)"
msgstr ""

# 0ef641c8e0f4436dbed7d05d95dda814
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListReGroup:1
msgid ""
"list_re_group(src_list, separator, include_re, search_re, group_1_template, "
"...) -- Like list_re except replacements are not optional. It uses "
"re_group(list_item, search_re, group_1_template, ...) when doing the "
"replacements on the resulting list."
msgstr "list_re_group(src_list, separator, include_re, search_re, group_1_template, ...) -- Som list_re utom ersättare är inte valfritt. Den använder re_group(list_item, search_re, group_1_template, ...) när du gör ersättare på den resulterande listan."

# 853045c7be814f9ca85735dd0f8b9e39
#: ../../template_ref.rst:274
msgid "list_sort(list, direction, separator)"
msgstr ""

# 5d781f191cdb4e9b9e5984c5c70729e2
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListSort:1
msgid ""
"list_sort(list, direction, separator) -- return list sorted using a case-"
"insensitive sort. If direction is zero, the list is sorted ascending, "
"otherwise descending. The list items are separated by separator, as are the "
"items in the returned list."
msgstr "list_sort (lista, riktning, sorterare) - Returnera lista sorterad med en skiftlägesokänslig sortering. Om riktningen är noll, listan är sorterad stigande, annars fallande. Listan objekt skiljs åt av separator, liksom de artiklar i den returnerade listan."

# 8196412fa91d4c24bc379e83e9ca29ec
#: ../../template_ref.rst:279
msgid "list_union(list1, list2, separator)"
msgstr ""

# c2ae9b628d8a4b92b9e69e10c7952101
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinListUnion:1
msgid ""
"list_union(list1, list2, separator) -- return a list made by merging the "
"items in list1 and list2, removing duplicate items using a case-insensitive "
"compare. If items differ in case, the one in list1 is used. The items in "
"list1 and list2 are separated by separator, as are the items in the returned"
" list."
msgstr "list_union (List1, List2, sorterare) - returnera en lista som görs av en sammanslagning av poster i List1 och List2, ta bort dubbletter med en skiftlägeskänslig jämförelse. Om objekt skiljer sig i fallet är den i List1 används. Objekten i List1 och List2 skiljs åt av separator, liksom de artiklar i den returnerade listan."

# 491cb329b2d1433c9da6a851b45d3a8d
#: ../../template_ref.rst:284
msgid "subitems(val, start_index, end_index)"
msgstr ""

# ff2567b480584c639d63606519b357bb
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSubitems:1
msgid ""
"subitems(val, start_index, end_index) -- This function is used to break "
"apart lists of items such as genres. It interprets the value as a comma-"
"separated list of items, where each item is a period-separated list. Returns"
" a new list made by first finding all the period-separated items, then for "
"each such item extracting the `start_index` to the `end_index` components, "
"then combining the results back together. The first component in a period-"
"separated list has an index of zero. If an index is negative, then it counts"
" from the end of the list. As a special case, an end_index of zero is "
"assumed to be the length of the list. Example using basic template mode and "
"assuming a #genre value of \"A.B.C\": {#genre:subitems(0,1)} returns \"A\". "
"{#genre:subitems(0,2)} returns \"A.B\". {#genre:subitems(1,0)} returns "
"\"B.C\". Assuming a #genre value of \"A.B.C, D.E.F\", {#genre:subitems(0,1)}"
" returns \"A, D\". {#genre:subitems(0,2)} returns \"A.B, D.E\""
msgstr "subitems(val, start_index, end_index) -- Denna funktion används för att bryta isär listor över objekt som genrer. Det tolkar värdet som en kommaseparerad lista, där varje objekt är en period-separerad lista. Returnerar en ny lista genom att först hitta alla period-separerade objekt, då för varje sådan post utvinna `start_index` till `end_index`komponenter, och sedan kombinera resultaten tillbaka tillsammans. Den första komponenten i en periodseparerad lista har ett index på noll. Om ett index är negativ, så det räknas från slutet av listan. Som ett specialfall, är en end_index på noll antas vara längden på listan. Exempel med grundlägande mallläge och antar ett #genre värde av \"A.B.C\": {#genre:subitems(0,1)} returnerar \"A\". {#genre:subitems(0,2)} returnerar \"A.B\". {#genre:subitems(1,0)} returnerar \"B.C\". Förutsatt ett #genre värde av \"A.B.C, D.E.F\", {#genre:subitems(0,1)} returnerar \"A, D\". {#genre:subitems(0,2)} returnerar \"A.B, D.E\""

# adbdee1de2824797b0acfab42e9e3392
#: ../../template_ref.rst:289
msgid "sublist(val, start_index, end_index, separator)"
msgstr ""

# f02b301e9e024dc3b04cfef7e8966d5f
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSublist:1
msgid ""
"sublist(val, start_index, end_index, separator) -- interpret the value as a "
"list of items separated by `separator`, returning a new list made from the "
"`start_index` to the `end_index` item. The first item is number zero. If an "
"index is negative, then it counts from the end of the list. As a special "
"case, an end_index of zero is assumed to be the length of the list. Examples"
" using basic template mode and assuming that the tags column (which is "
"comma-separated) contains \"A, B, C\": {tags:sublist(0,1,\\,)} returns "
"\"A\". {tags:sublist(-1,0,\\,)} returns \"C\". {tags:sublist(0,-1,\\,)} "
"returns \"A, B\"."
msgstr "sublist(val, start_index, end_index, separator) --  tolka värdet som en lista med objekt separerade av `separator ', returnerar en ny lista görs från` start_index `till` end_index `objekt. Den första punkten är nummer noll. Om ett index är negativt, då det räknas från slutet av listan. Som ett specialfall, är, om end_index är noll antas vara längden på listan. Exempel med grundmall läge och förutsatt att taggarna kolumnen (som är kommaseparerad) innehåller \"A, B, C\": {tags:sublist(0,1,\\,)} returnerar \"A\". {tags:sublist(-1,0,\\,)} returnerar \"C\". {tags:sublist(0,-1,\\,)} returnerar \"A, B\"."

# 2a8fa95ea13b4a889fb1e7f293d3bfcf
#: ../../template_ref.rst:294
msgid "Other"
msgstr "Övriga"

# 5a412c057daf44b2a257f58b2e4c8332
#: ../../template_ref.rst:297
msgid "assign(id, val)"
msgstr ""

# ec38043e2b364c9b84334e99a90db9a3
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinAssign:1
msgid ""
"assign(id, val) -- assigns val to id, then returns val. id must be an "
"identifier, not an expression"
msgstr "assign(id, Val) - tilldelar val till id, sedan återgår val. id måste vara en identifierare, inte ett uttryck"

# ca26dac330244c8face271daf0722cd2
#: ../../template_ref.rst:302
msgid "print(a, b, ...)"
msgstr ""

# 3edfc90f549e40e59aa0ef02cd2c46ea
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinPrint:1
msgid ""
"print(a, b, ...) -- prints the arguments to standard output. Unless you "
"start calibre from the command line (calibre-debug -g), the output will go "
"to a black hole."
msgstr "print(a, b, ...) - skriver ut argument till standard ut. Såvida du startar Caliber från kommandoraden (caliber-debug-g), kommer utdata att gå till ett svart hål."

# b28133dad1dd41048bf04f0325c98b75
#: ../../template_ref.rst:307
msgid "Recursion"
msgstr ""

# b36d44e8bb6249d9868270f259aa08db
#: ../../template_ref.rst:310
msgid "eval(template)"
msgstr ""

# 56b9f79dcf71496e9567d992567c3140
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinEval:1
msgid ""
"eval(template) -- evaluates the template, passing the local variables (those"
" 'assign'ed to) instead of the book metadata.  This permits using the "
"template processor to construct complex results from local variables. "
"Because the { and } characters are special, you must use [[ for the { "
"character and ]] for the } character; they are converted automatically. Note"
" also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be "
"used in the argument to this function when using template program mode."
msgstr "eval (mall) - utvärderar mallen, sänder de lokala variablerna (de \"assign'ed till) i stället för bokens metadata. Detta möjliggör användning av mallenprocessorn för att konstruera komplexa resultat från lokala variabler. Eftersom {and} tecken är speciella, måste du använda [[ for the { character and ]] for the } karaktär; de konverteras automatiskt. Notera också att prefix och suffix (i `| prefix | suffix` syntax) inte kan användas i argumentet för denna funktion när du använder mallprogramläget."

# 96e3780989fb49a8a98e95543dae578f
#: ../../template_ref.rst:315
msgid "template(x)"
msgstr ""

# 4b630147000e449591560f50ad988077
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTemplate:1
msgid ""
"template(x) -- evaluates x as a template. The evaluation is done in its own "
"context, meaning that variables are not shared between the caller and the "
"template evaluation. Because the { and } characters are special, you must "
"use [[ for the { character and ]] for the } character; they are converted "
"automatically. For example, template('[[title_sort]]') will evaluate the "
"template {title_sort} and return its value. Note also that prefixes and "
"suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to "
"this function when using template program mode."
msgstr "template(x) - utvärderar x som en mall. Utvärderingen görs i sitt eget sammanhang, vilket innebär att variabler inte delas mellan den som anropande och mallutvärderingen. Eftersom {and} tecken är speciella, måste du använda  [[ for the { character and ]] for the } tecken, och de konverteras automatiskt. Till exempel, template('[[title_sort]]') kommer att utvärdera mallen {title_sort} och returnera dess värde. Notera också att prefix och suffix (i `| prefix | suffix` syntax) inte kan användas i argumentet för denna funktion när du använder mallprogramläget ."

# d14dbbd3097d4a12a11788017a094486
#: ../../template_ref.rst:320
msgid "Relational"
msgstr ""

# 737c03e77fcd4d34ab7aa4381ee24caa
#: ../../template_ref.rst:323
msgid "cmp(x, y, lt, eq, gt)"
msgstr ""

# 50aaeb3cda504c099fd3a947dc7bd7b3
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCmp:1
msgid ""
"cmp(x, y, lt, eq, gt) -- compares x and y after converting both to numbers. "
"Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr "CMP (x, y, LT, eq, GT) - jämför x-och y efter konvertering till både siffror. Returnerar LT om x <y. Returnerar eq om x == y. Annars returneras gt."

# 31672f824a2c4cb8b6a145c3312a39cc
#: ../../template_ref.rst:328
msgid "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)"
msgstr ""

# d5d320bc38eb4d8dabf0873a39169741
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinFirstMatchingCmp:1
msgid ""
"first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result) -- "
"compares \"val < cmpN\" in sequence, returning resultN for the first "
"comparison that succeeds. Returns else_result if no comparison succeeds. "
"Example: "
"first_matching_cmp(10,5,\"small\",10,\"middle\",15,\"large\",\"giant\") "
"returns \"large\". The same example with a first value of 16 returns "
"\"giant\"."
msgstr "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result) - jämför \"val <cmpN\" i följd, returnerar resultN för den första jämförelsen som lyckas. Returnerar else_result om ingen jämförelse lyckas. Exempel: first_matching_cmp (10,5, \"liten\", 10, \"mitten\", 15, \"stor\", \"jätte\") returnerar \"large\". Samma exempel med ett första värde på 16 returnerar \"jätte\"."

# 96159778e5b444c1bce59cbd0254b2f4
#: ../../template_ref.rst:333
msgid "strcmp(x, y, lt, eq, gt)"
msgstr ""

# 7a5876d42dd94f25ab6d532cf4dc6d76
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrcmp:1
msgid ""
"strcmp(x, y, lt, eq, gt) -- does a case-insensitive comparison of x and y as"
" strings. Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr "strcmp (x, y, LT, eq, GT) - gör en skiftlägeskänslig jämförelse mellan X och Y som strängar. Returnerar LT om x <y. Returnerar eq om x == y. Annars returneras gt."

# 4bd07fb858504bf4ae5842c212491507
#: ../../template_ref.rst:338
msgid "String case changes"
msgstr ""

# e0931fe55c114babbdc239b77bcca503
#: ../../template_ref.rst:341
msgid "capitalize(val)"
msgstr ""

# ab445587e4684972877d770d2181906b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinCapitalize:1
msgid "capitalize(val) -- return value of the field capitalized"
msgstr "capitalize(Val) - Returnerar värdet av fältet med versaler"

# ae4492b7cb374bf2b33292c12d761414
#: ../../template_ref.rst:346
msgid "lowercase(val)"
msgstr ""

# 242261876a6847d193ef32b48f272143
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinLowercase:1
msgid "lowercase(val) -- return value of the field in lower case"
msgstr "lowercase(val) - Returnerar värdet i fältet med gemener"

# 57d4009b9aa248229cf5c1c41b18651a
#: ../../template_ref.rst:351
msgid "titlecase(val)"
msgstr ""

# c2ab4cfbdbac4b36a4394c4492612488
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTitlecase:1
msgid "titlecase(val) -- return value of the field in title case"
msgstr "titlecase(val) - returvärde på fältet i titelformat"

# dbc66f0963564991bf2a92ec4076b4e3
#: ../../template_ref.rst:356
msgid "uppercase(val)"
msgstr ""

# 7e55f27cd69a4bf0803e2b21580763ef
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinUppercase:1
msgid "uppercase(val) -- return value of the field in upper case"
msgstr "uppercase(val) - Returnerar värdet i fältet med versaler"

# a602d705ff2a4f2192827b8dcb394e98
#: ../../template_ref.rst:361
msgid "String manipulation"
msgstr ""

# 41dc489a6dc347169b03cdcdeaa98642
#: ../../template_ref.rst:364
msgid "re(val, pattern, replacement)"
msgstr ""

# 407a3debba8d439aaa78a194afae15df
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinRe:1
msgid ""
"re(val, pattern, replacement) -- return the field after applying the regular"
" expression. All instances of `pattern` are replaced with `replacement`. As "
"in all of calibre, these are python-compatible regular expressions"
msgstr "re(val, mönster, ersättning) - Returvärdet på området efter applicering av reguljära uttryck. Alla förekomster av \"mönster\" ersättas med \"ersättning\". Som allid i Caliber, dessa är python-kompatibla reguljära uttryck"

# 01f2023a57d4419f85e18744058d75fd
#: ../../template_ref.rst:369
msgid "re_group(val, pattern, template_for_group_1, for_group_2, ...)"
msgstr ""

# d523934338db453392cedea7f1b32d15
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinReGroup:1
msgid ""
"re_group(val, pattern, template_for_group_1, for_group_2, ...) -- return a "
"string made by applying the reqular expression pattern to the val and "
"replacing each matched instance with the string computed by replacing each "
"matched group by the value returned by the corresponding template. The "
"original matched value for the group is available as $. In template program "
"mode, like for the template and the eval functions, you use [[ for { and ]] "
"for }. The following example in template program mode looks for series with "
"more than one word and uppercases the first word: {series:'re_group($, "
"\"(\\S* )(.*)\", \"[[$:uppercase()]]\", \"[[$]]\")'}"
msgstr "re_group(värde, mönster, mall_för_grupp_1, för_grupp_2, ...) - returnerar en sträng med användande av reguljära uttrycksmönstret för värdet och ersätter varje passande instans med strängen beräknas genom att ersätta varje passande grupp med det värde som returneras av motsvarande mall. Det ursprungliga passande värdet för gruppen finns som $. I mallprogramläge, som till mallen och de eval funktioner använder du [[för {och]] för}. Följande exempel på mall programläget ser ut för serier med flera ord och versaler det första ordet: {series:'re_group($, \"(\\S* )(.*)\", \"[[$:uppercase()]]\", \"[[$]]\")'}"

# 761ea46d217d45bd8e3c95f8ab5e0c9a
#: ../../template_ref.rst:374
msgid "shorten(val, left chars, middle text, right chars)"
msgstr ""

# 8038808c9e2149a78eae683c6e037f89
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinShorten:1
msgid ""
"shorten(val, left chars, middle text, right chars) -- Return a shortened "
"version of the field, consisting of `left chars` characters from the "
"beginning of the field, followed by `middle text`, followed by `right chars`"
" characters from the end of the string. `Left chars` and `right chars` must "
"be integers. For example, assume the title of the book is `Ancient English "
"Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most "
"15 characters. If you use {title:shorten(9,-,5)}, the result will be "
"`Ancient E-nhoe`. If the field's length is less than left chars + right "
"chars + the length of `middle text`, then the field will be used intact. For"
" example, the title `The Dome` would not be changed."
msgstr "shorten(val, vänster tecken, mitten text, rätt tecken) - Returnerar en förkortad version av området, som består av \"vänster tecken` \", tecken från början av fältet, följt av\" mitten text följt av \"rätt tecken\" tecken från slutet av strängen. \"Vänster tecken\" och \"rätt\" tecken måste vara heltal. Antag exempelvis titeln på boken är \"Ancient engelska lag i Times of Ivanhoe\", och du vill att den ska passa i ett utrymme på högst 15 tecken. Om du använder {titel: förkorta (9, -, 5)}, kommer resultatet att bli \"Ancient E-nhoe\". Om fältets längd är mindre än vänster chars + höger chars + längden på \"mitt text\", då området kommer att användas intakt. Till exempel titeln \"The Dome\" inte skulle ändras."

# 050dcd91f2e14dbfb30aee40af978cf4
#: ../../template_ref.rst:379
msgid "strcat(a, b, ...)"
msgstr ""

# 4e7bf836b8b84ec09d6ffdfab5f241ae
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrcat:1
msgid ""
"strcat(a, b, ...) -- can take any number of arguments. Returns a string "
"formed by concatenating all the arguments"
msgstr "strcat (a, b, ...) - kan ta valfritt antal argument. Returnerar en sträng som bildas av sammanfogning med alla argument"

# b5c58f94f2464baea0aeafdbe0c265d8
#: ../../template_ref.rst:384
msgid "strcat_max(max, string1, prefix2, string2, ...)"
msgstr ""

# 792426e778ee4ab7833a24373bf2a06b
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrcatMax:1
msgid ""
"strcat_max(max, string1, prefix2, string2, ...) -- Returns a string formed "
"by concatenating the arguments. The returned value is initialized to "
"string1. `Prefix, string` pairs are added to the end of the value as long as"
" the resulting string length is less than `max`. String1 is returned even if"
" string1 is longer than max. You can pass as many `prefix, string` pairs as "
"you wish."
msgstr "strcat_max(max, string1, prefix2, string2, ...) -- Returnerar en sträng som bildas genom att sammanfoga argumenten. Det returnerade värdet initieras till sträng1. `Prefix, är sträng` par till i slutet av värde så länge den resulterande strängens längd är mindre än `max`. Sträng1 returneras även om sträng1 är längre än max. Du kan skicka så många 'prefix, sträng `par som du vill."

# 1699c971fc49422b9b36c0ffd717b910
#: ../../template_ref.rst:389
msgid "strlen(a)"
msgstr ""

# d23ce45383d142849407cbe64e3c5b72
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinStrlen:1
msgid "strlen(a) -- Returns the length of the string passed as the argument"
msgstr "strlen(a) - Returnerar längden av den sträng som skickas som argument"

# 1c5ba1267c24481ca515213d73d657e6
#: ../../template_ref.rst:394
msgid "substr(str, start, end)"
msgstr ""

# 02ca4e43292c42a2ac6ae0e565848619
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSubstr:1
msgid ""
"substr(str, start, end) -- returns the start'th through the end'th "
"characters of str. The first character in str is the zero'th character. If "
"end is negative, then it indicates that many characters counting from the "
"right. If end is zero, then it indicates the last character. For example, "
"substr('12345', 1, 0) returns '2345', and substr('12345', 1, -1) returns "
"'234'."
msgstr "substr(str, start, slut) - returnerar starttecknet till och med sluttecknet i str. Det första tecknet i STR är nollkaraktär. Om slutet är negativt, då det tyder på att för många tecken räknat från höger. Om slutet är noll, indikerar det sista tecknet. Till exempel substr ('12345 ', 1, 0) returnerar '2345', och substr ('12345 ', 1, -1) returnerar '234'."

# be9afddd290446a9afbb76d914324950
#: ../../template_ref.rst:399
msgid "swap_around_comma(val)"
msgstr ""

# cd3eff0f41a9434482033ff026466a49
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinSwapAroundComma:1
msgid ""
"swap_around_comma(val) -- given a value of the form \"B, A\", return \"A "
"B\". This is most useful for converting names in LN, FN format to FN LN. If "
"there is no comma, the function returns val unchanged"
msgstr "swap_around_comma (Val) - ges ett värde av blanketten \"B, A\", retur \"AB\". Detta är mest användbar för att konvertera namn i LN, FN-format till FN LN. Om det inte finns komma, returnerar funktionen Val oförändrad"

# be1b7703f0574984b259babd03a15d4e
#: ../../template_ref.rst:404
msgid "transliterate(a)"
msgstr ""

# ddf48add58844a90b70de72a96763d1d
#: ../../../src/calibre/utils/formatter_functions.pydocstring of
#: calibre.utils.formatter_functions.BuiltinTransliterate:1
msgid ""
"transliterate(a) -- Returns a string in a latin alphabet formed by "
"approximating the sound of the words in the source string. For example, if "
"the source is \"Фёдор Миха́йлович Достоевский\" the function returns "
"\"Fiodor Mikhailovich Dostoievskii\"."
msgstr ""

# 3730f1d6f10f428489fcf9fad6343cb5
#: ../../template_ref.rst:410
msgid "API of the Metadata objects"
msgstr "API för metadataobjekt"

# 9e340b074de64dcaaaa96d6ad14471c6
#: ../../template_ref.rst:412
msgid ""
"The python implementation of the template functions is passed in a Metadata "
"object. Knowing it's API is useful if you want to define your own template "
"functions."
msgstr "Python implementation av mallfunktioner förs in i ett metadataobjekt. Att veta att det är API är användbart om du vill definiera egna mallfunktioner."

# 889f15c9b11e4704ab97682ab4e0bd41
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:1
msgid ""
"A class representing all the metadata for a book. The various standard "
"metadata fields are available as attributes of this object. You can also "
"stick arbitrary attributes onto this object."
msgstr ""

# 56216d40eea3459bac3ef53d19a18bf0
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:5
msgid ""
"Metadata from custom columns should be accessed via the get() method, "
"passing in the lookup name for the column, for example: \"#mytags\"."
msgstr ""

# 029f4fe21c6d439db66c142cd0e58108
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:8
msgid "Use the :meth:`is_null` method to test if a field is null."
msgstr ""

# afa5ca7e971944d3a903ca707be818bd
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:10
msgid "This object also has functions to format fields into strings."
msgstr ""

# ee10e28ff97640a8a8d31dd825d0c86a
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:12
msgid ""
"The list of standard metadata fields grows with time is in "
":data:`STANDARD_METADATA_FIELDS`."
msgstr ""

# 26f80927a91c47ae9a733a515a0be64c
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata:15
msgid ""
"Please keep the method based API of this class to a minimum. Every method "
"becomes a reserved field name."
msgstr ""

# e70218551cc947a6bcac4760659f3066
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.is_null:1
msgid ""
"Return True if the value of field is null in this object. 'null' means it is"
" unknown or evaluates to False. So a title of _('Unknown') is null or a "
"language of 'und' is null."
msgstr ""

# 28f735a193e44c35a875892535458eac
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.is_null:5
msgid ""
"Be careful with numeric fields since this will return True for zero as well "
"as None."
msgstr ""

# bda6b3c6a91e4e8c9076cbda5dbb50ca
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.is_null:8
msgid "Also returns True if the field does not exist."
msgstr ""

# 33d2606768744d5bb9561dc3ee1b91cc
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.deepcopy:1
msgid ""
"Do not use this method unless you know what you are doing, if you want to "
"create a simple clone of this object, use :meth:`deepcopy_metadata` instead."
" Class_generator must be a function that returns an instance of Metadata or "
"a subclass of it."
msgstr ""

# c77abcbf59be42f1aeef71dd94ea96e2
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_identifiers:1
msgid ""
"Return a copy of the identifiers dictionary. The dict is small, and the "
"penalty for using a reference where a copy is needed is large. Also, we "
"don't want any manipulations of the returned dict to show up in the book."
msgstr ""

# 4c47ad05ce7b455a9bf774657ef0e612
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_identifiers:1
msgid ""
"Set all identifiers. Note that if you previously set ISBN, calling this "
"method will delete it."
msgstr ""

# cea17a2a65964bdab556f60edb354048
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_identifier:1
msgid "If val is empty, deletes identifier of type typ"
msgstr ""

# 13155eba1eae408ca116757c52b31a52
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.standard_field_keys:1
msgid ""
"return a list of all possible keys, even if this book doesn't have them"
msgstr ""

# 3d0394a5fb25432784506bf1eb0f99e0
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.custom_field_keys:1
msgid "return a list of the custom fields in this book"
msgstr ""

# 4c4c239fbdbc4644b4c33cb100447b33
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.all_field_keys:1
msgid "All field keys known by this instance, even if their value is None"
msgstr ""

# c8319b13e1794a279b727b83c3390700
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.metadata_for_field:1
msgid "return metadata describing a standard or custom field."
msgstr ""

# b162a718491f4028ba98e09597a8c5f7
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.all_non_none_fields:1
msgid ""
"Return a dictionary containing all non-None metadata fields, including the "
"custom ones."
msgstr ""

# 50037ed46ec14e188dcc883264cdb634
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_standard_metadata:1
msgid ""
"return field metadata from the field if it is there. Otherwise return None. "
"field is the key name, not the label. Return a copy if requested, just in "
"case the user wants to change values in the dict."
msgstr ""

# 94f0019a5e164a38a1586dc8db5b513e
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_all_standard_metadata:1
msgid ""
"return a dict containing all the standard field metadata associated with the"
" book."
msgstr ""

# 6deff1d2995646c38c43d1a27eeb8dd4
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_all_user_metadata:1
msgid ""
"return a dict containing all the custom field metadata associated with the "
"book."
msgstr ""

# abf875d2ce1e4af88f56f4c49d81b992
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.get_user_metadata:1
msgid ""
"return field metadata from the object if it is there. Otherwise return None."
" field is the key name, not the label. Return a copy if requested, just in "
"case the user wants to change values in the dict."
msgstr ""

# 88ad0c6e07404588b07da20e44c22c25
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_all_user_metadata:1
msgid ""
"store custom field metadata into the object. Field is the key name not the "
"label"
msgstr ""

# a8b21701379044e787a6508c1d32b177
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.set_user_metadata:1
msgid ""
"store custom field metadata for one column into the object. Field is the key"
" name not the label"
msgstr ""

# d331a3c5198c4db8a1fcc773687f81fe
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.template_to_attribute:1
msgid ""
"Takes a list [(src,dest), (src,dest)], evaluates the template in the context"
" of other, then copies the result to self[dest]. This is on a best-efforts "
"basis. Some assignments can make no sense."
msgstr ""

# f328117aff554bb89db71bdd17e5f07a
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.smart_update:1
msgid ""
"Merge the information in `other` into self. In case of conflicts, the "
"information in `other` takes precedence, unless the information in `other` "
"is NULL."
msgstr ""

# e43f4700407a465c9df0c6a7ba47d642
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.format_field:1
msgid "Returns the tuple (display_name, formatted_value)"
msgstr ""

# c70460c9741b4b2cb2ce46d007303a02
#: ../../../src/calibre/ebooks/metadata/book/base.pydocstring of
#: calibre.ebooks.metadata.book.base.Metadata.to_html:1
msgid "A HTML representation of this object."
msgstr ""

# 17218141e5854e46b08a72ad0b14b3cb
#: ../../template_ref.rst:422
msgid "The set of standard metadata fields."
msgstr ""
