# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
# dario hereñu <magallania@gmail.com>, 2014
# Jellby <jellby@yahoo.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-07 08:59+0530\n"
"PO-Revision-Date: 2014-11-08 10:31+0000\n"
"Last-Translator: Jellby <jellby@yahoo.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/calibre/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# ba1428bbfc274265853ed45a38f8c729
#: ../../home/kovid/work/calibre/manual/regexp.rst:4
msgid "All about using regular expressions in calibre"
msgstr "Todo acerca de cómo utilizar expresiones regulares en calibre"

# 6a2936b416c8435eb735eb1c8e38182e
#: ../../home/kovid/work/calibre/manual/regexp.rst:6
msgid ""
"Regular expressions are features used in many places in calibre to perform "
"sophisticated manipulation of ebook content and metadata. This tutorial is a"
" gentle introduction to getting you started with using regular expressions "
"in calibre."
msgstr "Las expresiones regulares son funciones utilizadas en muchos lugares en calibre para llevar a cabo sofisticadas manipulaciones de contenido y metadatos de libros electrónicos. Este cursillo es una breve introducción al uso de expresiones regulares en calibre."

# 8749613843ea472bbfe6296bbec4f761
#: ../../home/kovid/work/calibre/manual/regexp.rst:0
msgid "Contents"
msgstr "Índice"

# 8cf835297f834dad9351d7bf9e13649e
#: ../../home/kovid/work/calibre/manual/regexp.rst:14
msgid "First, a word of warning and a word of courage"
msgstr "Primero, una advertencia y unas palabras de aliento"

# b6af85d475224f88b558b8976d9c2a23
#: ../../home/kovid/work/calibre/manual/regexp.rst:16
msgid ""
"This is, inevitably, going to be somewhat technical- after all, regular "
"expressions are a technical tool for doing technical stuff. I'm going to "
"have to use some jargon and concepts that may seem complicated or "
"convoluted. I'm going to try to explain those concepts as clearly as I can, "
"but really can't do without using them at all. That being said, don't be "
"discouraged by any jargon, as I've tried to explain everything new. And "
"while regular expressions themselves may seem like an arcane, black magic "
"(or, to be more prosaic, a random string of mumbo-jumbo letters and signs), "
"I promise that they are not all that complicated. Even those who understand "
"regular expressions really well have trouble reading the more complex ones, "
"but writing them isn't as difficult- you construct the expression step by "
"step. So, take a step and follow me into the rabbit hole."
msgstr "Esto, inevitablemente, va a ser un poco técnico, después de todo, las expresiones regulares son una herramienta técnica para hacer cosas técnicas. Voy a tener que usar una jerga y conceptos que pueden parecer complicados o enrevesados. Voy a tratar de explicar esos conceptos tan claramente como pueda, pero realmente no puedo hacerlo sin utilizarlos en absoluto. Dicho esto, no se desanime por la jerga según intento explicar las cosas nuevas. Y mientras que las expresiones regulares en sí pueden parecer cosa magia negra y arcana (o, siendo más prosaicos, una serie aleatoria de letras y signos sin sentido), le aseguro que no son tan complicadas. Incluso los que entienden las expresiones regulares muy bien tienen problemas para leer las más complejas, pero escribirlas no es tan difícil: se va construyendo la expresión paso a paso. Dicho esto, dé el primer paso y sígame en la madriguera."

# 6c2622032fe04db89a10cc7071421702
#: ../../home/kovid/work/calibre/manual/regexp.rst:19
msgid "Where in calibre can you use regular expressions?"
msgstr "¿Dónde puedo utilizar expresiones regulares en calibre?"

# 68288e0b0c824f47bc2f0506b53c2cd3
#: ../../home/kovid/work/calibre/manual/regexp.rst:21
msgid ""
"There are a few places calibre uses regular expressions. There's the Search "
"& Replace in conversion options, metadata detection from filenames in the "
"import settings and Search & Replace when editing the metadata of books in "
"bulk."
msgstr "Son pocos los lugares donde calibre utiliza expresiones regulares. Está en Buscar y reemplazar en las opciones de conversión, en la detección de metadatos desde los nombres de archivo en los ajustes de importación y en Buscar & Reemplazar al editar los metadatos de los libros en forma masiva."

# 5d4435a7008c425893e7c7fdaf07f99d
#: ../../home/kovid/work/calibre/manual/regexp.rst:24
msgid "What on earth *is* a regular expression?"
msgstr "¿Pero qué *es* una expresión regular?"

# a73ed2fedf3b4f6b892c983f20901608
#: ../../home/kovid/work/calibre/manual/regexp.rst:26
msgid ""
"A regular expression is a way to describe sets of strings. A single regular "
"expression can *match* a number of different strings. This is what makes "
"regular expression so powerful -- they are a concise way of describing a "
"potentially large number of variations."
msgstr "Una expresión regular es una manera de describir conjuntos de cadenas de texto. Una sola expresión regular puede hacer *coincidir* una serie de diferentes cadenas. Esto es lo que hace tan poderosa una expresión regular - son una forma concisa de describir un número potencialmente elevado de variaciones."

# 24d0338b9ea04f3a893105c9134f8f0a
#: ../../home/kovid/work/calibre/manual/regexp.rst:28
msgid ""
"I'm using string here in the sense it is used in programming languages: a "
"string of one or more characters, characters including actual characters, "
"numbers, punctuation and so-called whitespace (linebreaks, tabulators etc.)."
" Please note that generally, uppercase and lowercase characters are not "
"considered the same, thus \"a\" being a different character from \"A\" and "
"so forth. In calibre, regular expressions are case insensitive in the search"
" bar, but not in the conversion options. There's a way to make every regular"
" expression case insensitive, but we'll discuss that later. It gets "
"complicated because regular expressions allow for variations in the strings "
"it matches, so one expression can match multiple strings, which is why "
"people bother using them at all. More on that in a bit."
msgstr "Estoy usando cadena aquí en el sentido de cómo es utilizado en los lenguajes de programación: una cadena de uno o más caracteres, caracteres incluyendo caracteres reales, números, puntuacion y los llamados espacios en blanco (tabuladores, saltos de línea, etc.). Por favor, tenga en cuenta que en general, los caracteres en mayúsculas y minúsculas no se consideran iguales, por lo tanto \"a\" es  diferente de \"A\" y así sucesivamente. En calibre, las expresiones regulares no distinguen mayúsculas y minúsculas en la barra de búsqueda, pero si en las opciones de conversión. Hay una manera de hacer que todos los casos de expresiones regulares sean insensibles a las mayúsculas y minúsculas, pero hablaremos de eso más tarde. Así se complica porque las expresiones regulares permiten variaciones en las cadenas que coincide, por lo que una expresión pueden coincidir varias cadenas, y el por qué las personas se fastidian al usarlas. Más sobre esto en un momento."

# 683a532db49c438bb167371ad074b367
#: ../../home/kovid/work/calibre/manual/regexp.rst:31
msgid "Care to explain?"
msgstr "¿Me lo puede explicar?"

# 60a0626d5a414a04b982de5ee2ac63e3
#: ../../home/kovid/work/calibre/manual/regexp.rst:33
msgid ""
"Well, that's why we're here. First, this is the most important concept in "
"regular expressions: *A string by itself is a regular expression that "
"matches itself*. That is to say, if I wanted to match the string ``\"Hello, "
"World!\"`` using a regular expression, the regular expression to use would "
"be ``Hello, World!``. And yes, it really is that simple. You'll notice, "
"though, that this *only* matches the exact string ``\"Hello, World!\"``, not"
" e.g. ``\"Hello, wOrld!\"`` or ``\"hello, world!\"`` or any other such "
"variation."
msgstr "Bueno, es por eso que estamos aquí. En primer lugar, este es el concepto más importante en las expresiones regulares: *Una cadena por sí misma es una expresión regular que coincide así misma*. Es decir, si yo quería que coincida la cadena ``\"¡Hola, mundo!\"`` utilizando una expresión regular, la misma sería ``Hola, mundo!''. Y sí, realmente es así de simple. Se dará cuenta, sin embargo, que esto *sólo* coincide con la cadena exacta ``\"¡Hola, mundo!\"``, no por ejemplo ``\"¡Hola, mUndo!\"`` u ``\"hola, mundo!\"`` o cualquier otra variación."

# d5d324958dd34c418aad9938b337fabd
#: ../../home/kovid/work/calibre/manual/regexp.rst:36
msgid "That doesn't sound too bad. What's next?"
msgstr "No suena tan mal. ¿Qué viene después?"

# 8e043cdb199149d38af4f00ef0524730
#: ../../home/kovid/work/calibre/manual/regexp.rst:38
msgid ""
"Next is the beginning of the really good stuff. Remember where I said that "
"regular expressions can match multiple strings? This is were it gets a "
"little more complicated. Say, as a somewhat more practical exercise, the "
"ebook you wanted to convert had a nasty footer counting the pages, like "
"\"Page 5 of 423\". Obviously the page number would rise from 1 to 423, thus "
"you'd have to match 423 different strings, right? Wrong, actually: regular "
"expressions allow you to define sets of characters that are matched: To "
"define a set, you put all the characters you want to be in the set into "
"square brackets. So, for example, the set ``[abc]`` would match either the "
"character \"a\", \"b\" or \"c\". *Sets will always only match one of the "
"characters in the set*. They \"understand\" character ranges, that is, if "
"you wanted to match all the lower case characters, you'd use the set "
"``[a-z]`` for lower- and uppercase characters you'd use ``[a-zA-Z]`` and so "
"on. Got the idea? So, obviously, using the expression ``Page [0-9] of 423`` "
"you'd be able to match the first 9 pages, thus reducing the expressions "
"needed to three: The second expression ``Page [0-9][0-9] of 423`` would "
"match all two-digit page numbers, and I'm sure you can guess what the third "
"expression would look like. Yes, go ahead. Write it down."
msgstr "El siguiente es el principio de cosas realmente buenas. ¿Recuerda cuando dije que las expresiones regulares pueden coincidir varias cadenas? Aquí se pone un poco más complicado. Digamos, como un ejercicio un poco más práctico, el libro electrónico que quería convertir tenía un desagradable pie de página contando las páginas, como \"Página 5 de 423\". Obviamente el número de página se elevaría de  1 a 423, así que tendría que coincidir con 423 cadenas diferentes, ¿no? Equivocado: las expresiones regulares permiten definir conjuntos de caracteres que coinciden: para definir un conjunto, disponga de todos los caracteres que desea que estén en el conjunto entre corchetes. Así, por ejemplo, el conjunto ``[abc]`` coincidirían el carácter \"a\", \"b\" o \"c\". *Los conjuntos solo coincidirán uno de los caracteres del conjunto*. Ellos \"entienden\" rangos de caracteres, es decir, si se quería hacer coincidir todos los caracteres en minúsculas, tendrá que utilizar el conjunto de minúsculas ``[az]`` y para mayúsculas tendría que utilizar ``[a-zA-Z]`` y así sucesivamente. ¿Comprendido? Así, obviamente, usando la expresión ``Página [0-9] de 423`` será capaz de seleccionar las primeras 9 páginas, reduciendo así las expresiones necesarias a tres. La segunda expresión ``Página [0-9] [0-9] de 423`` hará coincidir todos los números de página de dos dígitos, y estoy seguro que puede adivinar como la tercera expresión se vería. Sí, adelante. Escríbalo."

# 66d72898b7594bd78ecc389816ace0f9
#: ../../home/kovid/work/calibre/manual/regexp.rst:41
msgid "Hey, neat! This is starting to make sense!"
msgstr "Hey, hermano! Esto está empezando a tener sentido!"

# a06a3c714135475daab02743c6e1db6b
#: ../../home/kovid/work/calibre/manual/regexp.rst:43
msgid ""
"I was hoping you'd say that. But brace yourself, now it gets even better! We"
" just saw that using sets, we could match one of several characters at once."
" But you can even repeat a character or set, reducing the number of "
"expressions needed to handle the above page number example to one. Yes, ONE!"
" Excited? You should be! It works like this: Some so-called special "
"characters, \"+\", \"?\" and \"*\", *repeat the single element preceding "
"them*. (Element means either a single character, a character set, an escape "
"sequence or a group (we'll learn about those last two later)- in short, any "
"single entity in a regular expression.) These characters are called "
"wildcards or quantifiers. To be more precise, \"?\" matches *0 or 1* of the "
"preceding element, \"*\" matches *0 or more* of the preceding element and "
"\"+\" matches *1 or more* of the preceding element. A few examples: The "
"expression ``a?`` would match either \"\" (which is the empty string, not "
"strictly useful in this case) or \"a\", the expression ``a*`` would match "
"\"\", \"a\", \"aa\" or any number of a's in a row, and, finally, the "
"expression ``a+`` would match \"a\", \"aa\" or any number of a's in a row "
"(Note: it wouldn't match the empty string!). Same deal for sets: The "
"expression ``[0-9]+`` would match *every integer number there is*! I know "
"what you're thinking, and you're right: If you use that in the above case of"
" matching page numbers, wouldn't that be the single one expression to match "
"all the page numbers? Yes, the expression ``Page [0-9]+ of 423`` would match"
" every page number in that book!"
msgstr ""

# 4060730ad6de4941abb706ba12071bb1
#: ../../home/kovid/work/calibre/manual/regexp.rst:46
msgid ""
"A note on these quantifiers: They generally try to match as much text as "
"possible, so be careful when using them. This is called \"greedy "
"behaviour\"- I'm sure you get why. It gets problematic when you, say, try to"
" match a tag. Consider, for example, the string ``\"<p "
"class=\"calibre2\">Title here</p>\"`` and let's say you'd want to match the "
"opening tag (the part between the first pair of angle brackets, a little "
"more on tags later). You'd think that the expression ``<p.*>`` would match "
"that tag, but actually, it matches the whole string! (The character \".\" is"
" another special character. It matches anything *except* linebreaks, so, "
"basically, the expression ``.*`` would match any single line you can think "
"of.) Instead, try using ``<p.*?>`` which makes the quantifier ``\"*\"`` non-"
"greedy. That expression would only match the first opening tag, as intended."
" There's actually another way to accomplish this: The expression "
"``<p[^>]*>`` will match that same opening tag- you'll see why after the next"
" section. Just note that there quite frequently is more than one way to "
"write a regular expression."
msgstr ""

# c406d9c855e94da68eecdedb675831f2
#: ../../home/kovid/work/calibre/manual/regexp.rst:50
msgid ""
"Well, these special characters are very neat and all, but what if I wanted "
"to match a dot or a question mark?"
msgstr "Bien, estos caracteres especiales son perfectos, pero ¿que hay si quería que coincida con un punto o un signo de interrogación?"

# d2922d7263ce4a8ab0fe69770ad32b88
#: ../../home/kovid/work/calibre/manual/regexp.rst:52
msgid ""
"You can of course do that: Just put a backslash in front of any special "
"character and it is interpreted as the literal character, without any "
"special meaning. This pair of a backslash followed by a single character is "
"called an escape sequence, and the act of putting a backslash in front of a "
"special character is called escaping that character. An escape sequence is "
"interpreted as a single element. There are of course escape sequences that "
"do more than just escaping special characters, for example ``\"\\t\"`` means"
" a tabulator. We'll get to some of the escape sequences later. Oh, and by "
"the way, concerning those special characters: Consider any character we "
"discuss in this introduction as having some function to be special and thus "
"needing to be escaped if you want the literal character."
msgstr "Por supuesto, puede hacer lo siguiente: solo hay que poner una barra invertida delante de cualquier carácter especial y es interpretado como un carácter literal, sin ningún significado especial. Este par de barras invertidas seguida por un solo personaje se llama una secuencia de escape, y el acto de poner una barra invertida delante de un carácter especial se llama escapando ese carácter. Una secuencia de escape se interpreta como un solo elemento. Hay, por supuesto, secuencias de escape que hacen más que sólo escapar caracteres especiales, como por ejemplo ``\"\\t\"`` significa un tabulador. Vamos a llegar a algunas de las secuencias de escape más tarde. Ah, y por cierto, en relación con esos caracteres especiales: considere a cualquier carácter que señalamos en esta introducción como poseedores de alguna función especial y por lo tanto necesita ser escapado si desea que sea un carácter literal."

# c16da456cb64438b95fd2ac9756aeb5f
#: ../../home/kovid/work/calibre/manual/regexp.rst:55
msgid "So, what are the most useful sets?"
msgstr "¿Y cuáles son los conjuntos más útiles?"

# ffa36860bb4d4886bab592435128481e
#: ../../home/kovid/work/calibre/manual/regexp.rst:57
msgid ""
"Knew you'd ask. Some useful sets are ``[0-9]`` matching a single number, "
"``[a-z]`` matching a single lowercase letter, ``[A-Z]`` matching a single "
"uppercase letter, ``[a-zA-Z]`` matching a single letter and ``[a-zA-Z0-9]`` "
"matching a single letter or number. You can also use an escape sequence as "
"shorthand::"
msgstr ""

# 78a350c728f249d0a0415df1e167ddae
#: ../../home/kovid/work/calibre/manual/regexp.rst:64
msgid ""
"\"Whitespace\" is a term for anything that won't be printed. These "
"characters include space, tabulator, line feed, form feed and carriage "
"return."
msgstr "\"Espacios en blanco\" es un término para cualquier cosa que no se imprime. Estos caracteres incluyen el espacio, tabulador, avance de línea, salto de página y retorno de carro."

# 952d3fb8e68e4ec2b07e299d5412bff6
#: ../../home/kovid/work/calibre/manual/regexp.rst:66
msgid ""
"As a last note on sets, you can also define a set as any character *but* "
"those in the set. You do that by including the character ``\"^\"`` as the "
"*very first character in the set*. Thus, ``[^a]`` would match any character "
"excluding \"a\". That's called complementing the set. Those escape sequence "
"shorthands we saw earlier can also be complemented: ``\"\\D\"`` means any "
"non-number character, thus being equivalent to ``[^0-9]``. The other "
"shorthands can be complemented by, you guessed it, using the respective "
"uppercase letter instead of the lowercase one. So, going back to the example"
" ``<p[^>]*>`` from the previous section, now you can see that the character "
"set it's using tries to match any character except for a closing angle "
"bracket."
msgstr ""

# bad93b1acccb4a458b412e36686fc5df
#: ../../home/kovid/work/calibre/manual/regexp.rst:69
msgid ""
"But if I had a few varying strings I wanted to match, things get "
"complicated?"
msgstr "Pero ¿si tuviera un par de cadenas diferentes a igualar, las cosas se complican?"

# d5b94edd741840ebae677cae59536e10
#: ../../home/kovid/work/calibre/manual/regexp.rst:71
msgid ""
"Fear not, life still is good and easy. Consider this example: The book "
"you're converting has \"Title\" written on every odd page and \"Author\" "
"written on every even page. Looks great in print, right? But in ebooks, it's"
" annoying. You can group whole expressions in normal parentheses, and the "
"character ``\"|\"`` will let you match *either* the expression to its right "
"*or* the one to its left. Combine those and you're done. Too fast for you? "
"Okay, first off, we group the expressions for odd and even pages, thus "
"getting ``(Title)(Author)`` as our two needed expressions. Now we make "
"things simpler by using the vertical bar (``\"|\"`` is called the vertical "
"bar character): If you use the expression ``(Title|Author)`` you'll either "
"get a match for \"Title\" (on the odd pages) or you'd match \"Author\" (on "
"the even pages). Well, wasn't that easy?"
msgstr ""

# dea4e654c97c43de88db75596331e270
#: ../../home/kovid/work/calibre/manual/regexp.rst:73
msgid ""
"You can, of course, use the vertical bar without using grouping parentheses,"
" as well. Remember when I said that quantifiers repeat the element preceding"
" them? Well, the vertical bar works a little differently: The expression "
"\"Title|Author\" will also match either the string \"Title\" or the string "
"\"Author\", just as the above example using grouping. *The vertical bar "
"selects between the entire expression preceding and following it*. So, if "
"you wanted to match the strings \"Calibre\" and \"calibre\" and wanted to "
"select only between the upper- and lowercase \"c\", you'd have to use the "
"expression ``(c|C)alibre``, where the grouping ensures that only the \"c\" "
"will be selected. If you were to use ``c|Calibre``, you'd get a match on the"
" string \"c\" or on the string \"Calibre\", which isn't what we wanted. In "
"short: If in doubt, use grouping together with the vertical bar."
msgstr "Puede, por supuesto, usar la barra vertical sin utilizar paréntesis de agrupamiento, también. ¿Recuerdas cuando dije que los cuantificadores repiten el elemento anterior a ellos? Bueno, la barra vertical funciona un poco diferente. La expresión \"Título|Autor\" también corresponde o a la cadena \"Título\" o la cadena \"Autor\", al igual que el ejemplo anterior utilizando agrupamiento. *La barra vertical selecciona entre toda la expresión anterior y posterior a la misma*. Así que, si quiere que coincidan las cadenas \"Calibre\" y \"calibre\" y quiso seleccionar sólo entre la \"c\" mayúsculas y minúsculas, tendría que utilizar la expresión `` (c|C)alibre``, donde el agrupamiento asegura que sólo la \"c\" se seleccionará. Si va a usar ``c|Calibre``, obtendrá coincidencias con la cadena \"c\" o la cadena \"Calibre\", que no es lo que queríamos. En caso de duda, utilice el agrupamiento con la barra vertical."

# 7fe05fecf5fb441b9ac1048670c8077b
#: ../../home/kovid/work/calibre/manual/regexp.rst:76
msgid "You missed..."
msgstr "Falta algo..."

# 6f54df46694140cb95a8f237edc7a01a
#: ../../home/kovid/work/calibre/manual/regexp.rst:78
msgid ""
"... wait just a minute, there's one last, really neat thing you can do with "
"groups. If you have a group that you previously matched, you can use "
"references to that group later in the expression: Groups are numbered "
"starting with 1, and you reference them by escaping the number of the group "
"you want to reference, thus, the fifth group would be referenced as ``\\5``."
" So, if you searched for ``([^ ]+) \\1`` in the string \"Test Test\", you'd "
"match the whole string!"
msgstr ""

# 1c12f84d895746d4a7cfbaa7d9b5c671
#: ../../home/kovid/work/calibre/manual/regexp.rst:82
msgid ""
"In the beginning, you said there was a way to make a regular expression case"
" insensitive?"
msgstr "En el inicio, ¿dijo que había una manera de hacer una especie de expresión regular que no dscrimina mayúsculas y minúsculas?"

# 12d86c56311e4918a32922530e541289
#: ../../home/kovid/work/calibre/manual/regexp.rst:84
msgid ""
"Yes, I did, thanks for paying attention and reminding me. You can tell "
"calibre how you want certain things handled by using something called flags."
" You include flags in your expression by using the special construct "
"``(?flags go here)`` where, obviously, you'd replace \"flags go here\" with "
"the specific flags you want. For ignoring case, the flag is ``i``, thus you "
"include ``(?i)`` in your expression. Thus, ``test(?i)`` would match "
"\"Test\", \"tEst\", \"TEst\" and any case variation you could think of."
msgstr ""

# 83b857ec0db24fbba9c794a4d1cbe473
#: ../../home/kovid/work/calibre/manual/regexp.rst:86
msgid ""
"Another useful flag lets the dot match any character at all, *including* the"
" newline, the flag ``s``. If you want to use multiple flags in an "
"expression, just put them in the same statement: ``(?is)`` would ignore case"
" and make the dot match all. It doesn't matter which flag you state first, "
"``(?si)`` would be equivalent to the above. By the way, good places for "
"putting flags in your expression would be either the very beginning or the "
"very end. That way, they don't get mixed up with anything else."
msgstr ""

# 407af7d5dbef4bfb8aedad2a351185f8
#: ../../home/kovid/work/calibre/manual/regexp.rst:89
msgid ""
"I think I'm beginning to understand these regular expressions now... how do "
"I use them in calibre?"
msgstr "Creo que empiezo a entender esto de las expresiones regulares... ¿cómo las utilizo en calibre?"

# 5d7f4ed4c830462caf24eafbdc6b9cab
#: ../../home/kovid/work/calibre/manual/regexp.rst:92
msgid "Conversions"
msgstr "Conversiones"

# 8a140454a45a45a3b87db7b7a9e40f92
#: ../../home/kovid/work/calibre/manual/regexp.rst:94
msgid ""
"Let's begin with the conversion settings, which is really neat. In the "
"Search and Replace part, you can input a regexp (short for regular "
"expression) that describes the string that will be replaced during the "
"conversion. The neat part is the wizard. Click on the wizard staff and you "
"get a preview of what calibre \"sees\" during the conversion process. Scroll"
" down to the string you want to remove, select and copy it, paste it into "
"the regexp field on top of the window. If there are variable parts, like "
"page numbers or so, use sets and quantifiers to cover those, and while "
"you're at it, remember to escape special characters, if there are some. Hit "
"the button labeled :guilabel:`Test` and calibre highlights the parts it "
"would replace were you to use the regexp. Once you're satisfied, hit OK and "
"convert. Be careful if your conversion source has tags like this example::"
msgstr ""

# 65b222bf6a82499daa2d391151c74a6a
#: ../../home/kovid/work/calibre/manual/regexp.rst:104
msgid ""
"(shamelessly ripped out of `this thread "
"<http://www.mobileread.com/forums/showthread.php?t=75594\">`_). You'd have "
"to remove some of the tags as well. In this example, I'd recommend beginning"
" with the tag ``<b class=\"calibre2\">``, now you have to end with the "
"corresponding closing tag (opening tags are ``<tag>``, closing tags are "
"``</tag>``), which is simply the next ``</b>`` in this case. (Refer to a "
"good HTML manual or ask in the forum if you are unclear on this point.) The "
"opening tag can be described using ``<b.*?>``, the closing tag using "
"``</b>``, thus we could remove everything between those tags using "
"``<b.*?>.*?</b>``. But using this expression would be a bad idea, because it"
" removes everything enclosed by <b>- tags (which, by the way, render the "
"enclosed text in bold print), and it's a fair bet that we'll remove portions"
" of the book in this way. Instead, include the beginning of the enclosed "
"string as well, making the regular expression "
"``<b.*?>\\s*Generated\\s+by\\s+ABC\\s+Amber\\s+LIT.*?</b>`` The ``\\s`` with"
" quantifiers are included here instead of explicitly using the spaces as "
"seen in the string to catch any variations of the string that might occur. "
"Remember to check what calibre will remove to make sure you don't remove any"
" portions you want to keep if you test a new expression. If you only check "
"one occurrence, you might miss a mismatch somewhere else in the text. Also "
"note that should you accidentally remove more or fewer tags than you "
"actually wanted to, calibre tries to repair the damaged code after doing the"
" removal."
msgstr ""

# 4827156652aa42cc953f17e8c3868cc9
#: ../../home/kovid/work/calibre/manual/regexp.rst:107
msgid "Adding books"
msgstr "Añadir libros"

# 1da4e80784a64b4dbd4d4442e4bfe5b2
#: ../../home/kovid/work/calibre/manual/regexp.rst:109
msgid ""
"Another thing you can use regular expressions for is to extract metadata "
"from filenames. You can find this feature in the \"Adding books\" part of "
"the settings. There's a special feature here: You can use field names for "
"metadata fields, for example ``(?P<title>)`` would indicate that calibre "
"uses this part of the string as book title. The allowed field names are "
"listed in the windows, together with another nice test field. An example: "
"Say you want to import a whole bunch of files named like ``Classical Texts: "
"The Divine Comedy by Dante Alighieri.mobi``. (Obviously, this is already in "
"your library, since we all love classical italian poetry) or ``Science "
"Fiction epics: The Foundation Trilogy by Isaac Asimov.epub``. This is "
"obviously a naming scheme that calibre won't extract any meaningful data out"
" of - its standard expression for extracting metadata is ``(?P<title>.+) - "
"(?P<author>[^_]+)``. A regular expression that works here would be "
"``[a-zA-Z]+: (?P<title>.+) by (?P<author>.+)``. Please note that, inside the"
" group for the metadata field, you need to use expressions to describe what "
"the field actually matches. And also note that, when using the test field "
"calibre provides, you need to add the file extension to your testing "
"filename, otherwise you won't get any matches at all, despite using a "
"working expression."
msgstr "También puede utilizar expresiones regulares para extraer metadatos de los nombres de archivo.  Puede encontrar esta función de \"Adición de libros\" en la sección de ajustes. Hay una característica especial: puede utilizar nombres de campo para los campos de metadatos, por ejemplo ``(?P<title>)`` que indicaría que calibre utiliza esta parte de la cadena como el título del libro. Los nombres de los campos permitidos se enumeran en las ventanas, junto con otro campo de prueba. Un ejemplo: digamos que desea importar un montón de archivos llamados así ``Textos Clásicos: La Divina Comedia de Dante Alighieri.mobi``. (Obviamente, ya está en la biblioteca, ya que a todos nos gusta la poesía italiana clásica) o `` Ciencia ficción épica: La Trilogía de la Fundación por Isaac Asimov.epub``. Esto es obviamente un esquema de nombres que calibre no va a extraer datos significativos  - la expresión estándar para la extracción de los metadatos es ``(?P<titulo>.+) - (?P<autor>[^_]+)``. Una expresión regular que funciona aquí sería ``[a-zA-Z]+: (?P<titulo>.+) by (?P<autor>.+)``. Tenga en cuenta que, dentro del grupo para el campo de metadatos, es necesario utilizar expresiones para describir lo que el campo actualmente iguala. Y también tenga en cuenta que, cuando se utiliza el campo de prueba que calibre ofrece, es necesario agregar la extensión de archivo a su nombre de archivo de prueba, de lo contrario no recibirá ninguna correspondencia en absoluto, a pesar de utilizar una expresión de trabajo."

# 51513aed6b6b43a5bde39611a9ad04d1
#: ../../home/kovid/work/calibre/manual/regexp.rst:113
msgid "Bulk editing metadata"
msgstr "Edición de metadatos masiva"

# 21de7ddcb41842579cd8d5ad70ae306a
#: ../../home/kovid/work/calibre/manual/regexp.rst:115
msgid ""
"The last part is regular expression search and replace in metadata fields. "
"You can access this by selecting multiple books in the library and using "
"bulk metadata edit. Be very careful when using this last feature, as it can "
"do **Very Bad Things** to your library! Doublecheck that your expressions do"
" what you want them to using the test fields, and only mark the books you "
"really want to change! In the regular expression search mode, you can search"
" in one field, replace the text with something and even write the result "
"into another field. A practical example: Say your library contained the "
"books of Frank Herbert's Dune series, named after the fashion ``Dune 1 - "
"Dune``, ``Dune 2 - Dune Messiah`` and so on. Now you want to get ``Dune`` "
"into the series field. You can do that by searching for ``(.*?) \\d+ - .*`` "
"in the title field and replacing it with ``\\1`` in the series field. See "
"what I did there? That's a reference to the first group you're replacing the"
" series field with. Now that you have the series all set, you only need to "
"do another search for ``.*? -`` in the title field and replace it with "
"``\"\"`` (an empty string), again in the title field, and your metadata is "
"all neat and tidy. Isn't that great? By the way, instead of replacing the "
"entire field, you can also append or prepend to the field, so, if you "
"*wanted* the book title to be prepended with series info, you could do that "
"as well. As you by now have undoubtedly noticed, there's a checkbox labeled "
":guilabel:`Case sensitive`, so you won't have to use flags to select "
"behaviour here."
msgstr "La última parte es la búsqueda y reemplazo de expresiones regulares en los campos de metadatos. Puede acceder a ésta seleccionando varios libros en la biblioteca y editar metadatos masivamente. Tenga mucho cuidado al utilizar esta última característica, ya que puede hacer **cosas muy malas** en su biblioteca! Verifique que sus expresiones hacen lo que quiere que haga en los campos de prueba, y sólo marcan los libros que realmente quiere cambiar! En el modo de búsqueda de expresiones regulares, puede buscar en un campo, reemplazar el texto con algo e incluso escribir el resultado en otro campo. Un ejemplo práctico: Digamos que su biblioteca contenía los libros de la serie Dune de Frank Herbert, nombrados de este modo `` Dune 1 - Dune``, ``Dune 2 - Dune Messiah`` y así sucesivamente. Ahora desea conseguir ``Dune`` en el campo series. Puede hacerlo mediante la búsqueda ``(.*?) \\d+ - .*`` en el campo Título y reemplazando con ``\\1`` en el campo series. Ve lo que hice allí? Eso es una referencia al primer grupo que está reemplazando. Ahora que tiene toda la serie lista, sólo tiene que hacer otra búsqueda ``.*? -`` en el campo Título y reemplazarlo con ``\"\"`` (una cadena vacía), de nuevo en el campo Título, y sus metadatos están todos limpios y ordenado. ¿No es genial? Por cierto, en lugar de sustituir todo el campo, puede también añadir o anteponer al campo, por lo que, si *quería* el título del libro que se anteponga con la información de la serie, puede hacerlo también. Como sin duda se ha dado cuenta, hay una casilla etiquetada :guilabel:`Mayúsculas-minúsculas`, así no tendrá que usar marcas para seleccionar comportamientos aquí."

# 16b5b28550c647a6bea02534fb143b21
#: ../../home/kovid/work/calibre/manual/regexp.rst:117
msgid ""
"Well, that just about concludes the very short introduction to regular "
"expressions. Hopefully I'll have shown you enough to at least get you "
"started and to enable you to continue learning by yourself- a good starting "
"point would be the `Python documentation for regexps "
"<http://docs.python.org/library/re.html>`_."
msgstr "Bueno, casi llegamos a la conclusión de la muy breve introducción a las expresiones regulares. Esperemos que le haya mostrado lo suficiente como para, al menos, comenzar y seguir aprendiendo por sí mismo. Un buen punto de partida sería la documentación `Python para expresiones regulares <http://docs.python.org/library/re.html> `_."

# 5bf0ca78fec24f9092c89e22d4c07a48
#: ../../home/kovid/work/calibre/manual/regexp.rst:119
msgid ""
"One last word of warning, though: Regexps are powerful, but also really easy"
" to get wrong. calibre provides really great testing possibilities to see if"
" your expressions behave as you expect them to. Use them. Try not to shoot "
"yourself in the foot. (God, I love that expression...) But should you, "
"despite the warning, injure your foot (or any other body parts), try to "
"learn from it."
msgstr "Una última palabra de advertencia: las expresiones regulares son poderosas, pero también es muy fácil equivocarse. calibre ofrece muy buenas posibilidades de pruebas para ver si sus expresiones se comportan como se espera que lo hagan. Úselos. Trate de dispararse los pies. (Dios, me encanta esa expresión ...) Pero en caso de que, a pesar de la advertencia, lesionar su pie (o cualquier otra parte del cuerpo), trate de aprender de ellas."

# a4036f5e7f554763bc7d7c1a07310afb
#: ../../home/kovid/work/calibre/manual/regexp.rst:122
msgid "Credits"
msgstr "Créditos"

# 6c4a76639b29490980cf70051b93052d
#: ../../home/kovid/work/calibre/manual/regexp.rst:124
msgid "Thanks for helping with tips, corrections and such:"
msgstr "Gracias por ayudar con sugerencias, correcciones y demás:"

# 933127edd7fd4898aaab1b92ce78eb91
#: ../../home/kovid/work/calibre/manual/regexp.rst:126
msgid "ldolse"
msgstr "ldolse"

# 15f3464d8a8b44fe846f22f6518ea68b
#: ../../home/kovid/work/calibre/manual/regexp.rst:127
msgid "kovidgoyal"
msgstr "kovidgoyal"

# 7d477ed0c3fb4526a15fb6992aa29838
#: ../../home/kovid/work/calibre/manual/regexp.rst:128
msgid "chaley"
msgstr "chaley"

# 2ccc2186dd3248109c569589dbe508d4
#: ../../home/kovid/work/calibre/manual/regexp.rst:129
msgid "dwanthny"
msgstr "dwanthny"

# 81dc5b48e5b848a38d5c2e8e2a078090
#: ../../home/kovid/work/calibre/manual/regexp.rst:130
msgid "kacir"
msgstr "kacir"

# 0767d37b3925453e942d49cbb2f647bb
#: ../../home/kovid/work/calibre/manual/regexp.rst:131
msgid "Starson17"
msgstr "Starson17"

# 72e09731fee74a629e6ee2d22c63c9f3
#: ../../home/kovid/work/calibre/manual/regexp.rst:133
msgid ""
"For more about regexps see `The Python User Manual "
"<http://docs.python.org/library/re.html>`_."
msgstr "Para saber más acerca de las expresiones regulares, vea `El manual de usuario de Python <http://docs.python.org/library/re.html>`_ (en inglés)."
