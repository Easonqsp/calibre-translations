# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.41.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-21 08:59+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../xpath.rst:6
# 4bf62510457d4ea0a2f03cb4000267ef
msgid "XPath Tutorial"
msgstr ""

#: ../../xpath.rst:8
# 70f64b67ef8149338db4b402a46efd82
msgid "In this tutorial, you will be given a gentle introduction to `XPath <http://en.wikipedia.org/wiki/XPath>`_, a query language that can be used to select arbitrary parts of `HTML <http://en.wikipedia.org/wiki/HTML>`_ documents in |app|. XPath is a widely used standard, and googling it will yield a ton of information. This tutorial, however, focuses on using XPath for ebook related tasks like finding chapter headings in an unstructured HTML document."
msgstr ""

#: ../../xpath.rst:0
# ae625fea9e7e4f82963b134a9ffa8575
msgid "Contents"
msgstr ""

#: ../../xpath.rst:21
# a8944cbd2f774475ae59fc64c8f93682
msgid "Selecting by tagname"
msgstr ""

#: ../../xpath.rst:23
# 94401578ab0642f89d58849fffbd6f5c
msgid "The simplest form of selection is to select tags by name. For example, suppose you want to select all the ``<h2>`` tags in a document. The XPath query for this is simply::"
msgstr ""

#: ../../xpath.rst:29
# 8041b920f07a475c972f276046c031e3
msgid "The prefix `//` means *search at any level of the document*. Now suppose you want to search for ``<span>`` tags that are inside ``<a>`` tags. That can be achieved with::"
msgstr ""

#: ../../xpath.rst:35
# 8af0e95415d244eb85b70f0f1f709684
msgid "If you want to search for tags at a particular level in the document, change the prefix::"
msgstr ""

#: ../../xpath.rst:41
# da4f7ab3a46b41f2a55c8546f8bb25d1
msgid "This will match only ``<p>A very short ebook to demonstrate the use of XPath.</p>`` in the `Sample ebook`_ but not any of the other ``<p>`` tags. The ``h:`` prefix in the above examples is needed to match XHTML tags. This is because internally, |app| represents all content as XHTML. In XHTML tags have a *namespace*, and ``h:`` is the namespace prefix for HTML tags."
msgstr ""

#: ../../xpath.rst:47
# d150a1671e8d46718c6710d6b8dcccb1
msgid "Now suppose you want to select both ``<h1>`` and ``<h2>`` tags. To do that, we need a XPath construct called *predicate*. A :dfn:`predicate` is simply a test that is used to select tags. Tests can be arbitrarily powerful and as this tutorial progresses, you will see more powerful examples. A predicate is created by enclosing the test expression in square brackets::"
msgstr ""

#: ../../xpath.rst:55
# a3a0ba3391644bcc92c58534273caaef
msgid "There are several new features in this XPath expression. The first is the use of the wildcard ``*``. It means *match any tag*. Now look at the test expression ``name()='h1' or name()='h2'``. :term:`name()` is an example of a *built-in function*. It simply evaluates to the name of the tag. So by using it, we can select tags whose names are either `h1` or `h2`. Note that the :term:`name()` function ignores namespaces so that there is no need for the ``h:`` prefix. XPath has several useful built-in functions. A few more will be introduced in this tutorial."
msgstr ""

#: ../../xpath.rst:64
# f70d0d8522614318b914852c665fc14c
msgid "Selecting by attributes"
msgstr ""

#: ../../xpath.rst:66
# 92ed392bc1434250a1c82d795286bd0b
msgid "To select tags based on their attributes, the use of predicates is required::"
msgstr ""

#: ../../xpath.rst:72
# a55d4e501b604f16b9d3543bdf09c325
msgid "Here, the ``@`` operator refers to the attributes of the tag. You can use some of the `XPath built-in functions`_ to perform more sophisticated matching on attribute values."
msgstr ""

#: ../../xpath.rst:78
# c0617ed66e94438aaf8ab9ae12e5cf63
msgid "Selecting by tag content"
msgstr ""

#: ../../xpath.rst:80
# e0d601613c024f0ea68da3ecc5356f1a
msgid "Using XPath, you can even select tags based on the text they contain. The best way to do this is to use the power of *regular expressions* via the built-in function :term:`re:test()`::"
msgstr ""

#: ../../xpath.rst:86
# 5ab66c4dc9e44fd88ef7434fef8439e8
msgid "Here the ``.`` operator refers to the contents of the tag, just as the ``@`` operator referred to its attributes."
msgstr ""

#: ../../xpath.rst:91
# c7f7c224b97745fdb727ff13f4a7e1ba
msgid "Sample ebook"
msgstr ""

#: ../../xpath.rst:97
# 6bea13d371874baab10f71d702b32a03
msgid "XPath built-in functions"
msgstr ""

#: ../../xpath.rst:100
# 7f979c7e467341b8ad80abf58c6ac0ac
msgid "name()"
msgstr ""

#: ../../xpath.rst:102
# 60c5ea342a824da59cc37251e9c39227
msgid "The name of the current tag."
msgstr ""

#: ../../xpath.rst:103
# dc57d24b4d354035a7b94e5c93452bfe
msgid "contains()"
msgstr ""

#: ../../xpath.rst:105
# 50fa7f10addf4445b0287a7ba2df571d
msgid "``contains(s1, s2)`` returns `true` if s1 contains s2."
msgstr ""

#: ../../xpath.rst:106
# 7f9bd7b8855e4436bfdfa7f8015df889
msgid "re:test()"
msgstr ""

#: ../../xpath.rst:108
# aa0db0a549554b97ab62c8c8dbdd7768
msgid "``re:test(src, pattern, flags)`` returns `true` if the string `src` matches the regular expression `pattern`. A particularly useful flag is ``i``, it makes matching case insensitive. A good primer on the syntax for regular expressions can be found at `regexp syntax <http://docs.python.org/lib/re-syntax.html>`_"
msgstr ""

