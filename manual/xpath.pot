# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.42.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-28 13:56+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../xpath.rst:6
# 59b3e67e66d34168817ef0ce39829460
msgid "XPath Tutorial"
msgstr ""

#: ../../xpath.rst:8
# e37cd2339c0b41d9bd267e93a5dbaf46
msgid "In this tutorial, you will be given a gentle introduction to `XPath <http://en.wikipedia.org/wiki/XPath>`_, a query language that can be used to select arbitrary parts of `HTML <http://en.wikipedia.org/wiki/HTML>`_ documents in |app|. XPath is a widely used standard, and googling it will yield a ton of information. This tutorial, however, focuses on using XPath for ebook related tasks like finding chapter headings in an unstructured HTML document."
msgstr ""

#: ../../xpath.rst:0
# 44beac51e5c149d89b456ef1c1b41ac7
msgid "Contents"
msgstr ""

#: ../../xpath.rst:21
# 0e11b8c9d3d049aa9ede2c95246031e4
msgid "Selecting by tagname"
msgstr ""

#: ../../xpath.rst:23
# 6f0b27a9ff65424388b38f89930933c0
msgid "The simplest form of selection is to select tags by name. For example, suppose you want to select all the ``<h2>`` tags in a document. The XPath query for this is simply::"
msgstr ""

#: ../../xpath.rst:29
# c442662dc1ef498bab616e8a53fbc12d
msgid "The prefix `//` means *search at any level of the document*. Now suppose you want to search for ``<span>`` tags that are inside ``<a>`` tags. That can be achieved with::"
msgstr ""

#: ../../xpath.rst:35
# f6d005cc394d414c9b167026f91571c3
msgid "If you want to search for tags at a particular level in the document, change the prefix::"
msgstr ""

#: ../../xpath.rst:41
# bbc2889eb19246ff9fc1c6eff87fa7c4
msgid "This will match only ``<p>A very short ebook to demonstrate the use of XPath.</p>`` in the `Sample ebook`_ but not any of the other ``<p>`` tags. The ``h:`` prefix in the above examples is needed to match XHTML tags. This is because internally, |app| represents all content as XHTML. In XHTML tags have a *namespace*, and ``h:`` is the namespace prefix for HTML tags."
msgstr ""

#: ../../xpath.rst:47
# 20c52f9bbf314f569d0b6ccf22a4d9c6
msgid "Now suppose you want to select both ``<h1>`` and ``<h2>`` tags. To do that, we need a XPath construct called *predicate*. A :dfn:`predicate` is simply a test that is used to select tags. Tests can be arbitrarily powerful and as this tutorial progresses, you will see more powerful examples. A predicate is created by enclosing the test expression in square brackets::"
msgstr ""

#: ../../xpath.rst:55
# 7abf3a9f7d76454fa20d08b2d0f1be79
msgid "There are several new features in this XPath expression. The first is the use of the wildcard ``*``. It means *match any tag*. Now look at the test expression ``name()='h1' or name()='h2'``. :term:`name()` is an example of a *built-in function*. It simply evaluates to the name of the tag. So by using it, we can select tags whose names are either `h1` or `h2`. Note that the :term:`name()` function ignores namespaces so that there is no need for the ``h:`` prefix. XPath has several useful built-in functions. A few more will be introduced in this tutorial."
msgstr ""

#: ../../xpath.rst:64
# aeba397b574446c4837d03e9d33c2f5b
msgid "Selecting by attributes"
msgstr ""

#: ../../xpath.rst:66
# feb0419bd80c4989943a8496517f4602
msgid "To select tags based on their attributes, the use of predicates is required::"
msgstr ""

#: ../../xpath.rst:72
# c673dd3576f54044866280a75d911490
msgid "Here, the ``@`` operator refers to the attributes of the tag. You can use some of the `XPath built-in functions`_ to perform more sophisticated matching on attribute values."
msgstr ""

#: ../../xpath.rst:78
# ace94047d851410a9755c196e0096b6b
msgid "Selecting by tag content"
msgstr ""

#: ../../xpath.rst:80
# df51710ef01046819b1b8d28fd5854aa
msgid "Using XPath, you can even select tags based on the text they contain. The best way to do this is to use the power of *regular expressions* via the built-in function :term:`re:test()`::"
msgstr ""

#: ../../xpath.rst:86
# b0c0dcc367354afdaed54a02aab33f50
msgid "Here the ``.`` operator refers to the contents of the tag, just as the ``@`` operator referred to its attributes."
msgstr ""

#: ../../xpath.rst:91
# dd7db7567c824ee09234384ca5587126
msgid "Sample ebook"
msgstr ""

#: ../../xpath.rst:97
# 54a6be878c6c44c7b2e1aa067afdd614
msgid "XPath built-in functions"
msgstr ""

#: ../../xpath.rst:100
# 7f3dab2ffd5e49d5be4dfced9af162c7
msgid "name()"
msgstr ""

#: ../../xpath.rst:102
# dbc584c1f91d4cf4872eab8d6f210e55
msgid "The name of the current tag."
msgstr ""

#: ../../xpath.rst:103
# c1ba35f9e32e481c8973ca2f4ef56d1e
msgid "contains()"
msgstr ""

#: ../../xpath.rst:105
# f59779d881024b2c949366f02473f8b8
msgid "``contains(s1, s2)`` returns `true` if s1 contains s2."
msgstr ""

#: ../../xpath.rst:106
# 7752841466b44e0abb1bc3e691692a5e
msgid "re:test()"
msgstr ""

#: ../../xpath.rst:108
# 5d40bbae5fa94e7ca5a5d9b50bdc1af1
msgid "``re:test(src, pattern, flags)`` returns `true` if the string `src` matches the regular expression `pattern`. A particularly useful flag is ``i``, it makes matching case insensitive. A good primer on the syntax for regular expressions can be found at `regexp syntax <http://docs.python.org/lib/re-syntax.html>`_"
msgstr ""

