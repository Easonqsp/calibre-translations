# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.48.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-08 08:53+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../xpath.rst:6
# 7491c3e147ed48a398b3220efe46a59d
msgid "XPath Tutorial"
msgstr ""

#: ../../xpath.rst:8
# 1cb1e5ff0f64456294782eb8924afd87
msgid "In this tutorial, you will be given a gentle introduction to `XPath <http://en.wikipedia.org/wiki/XPath>`_, a query language that can be used to select arbitrary parts of `HTML <http://en.wikipedia.org/wiki/HTML>`_ documents in |app|. XPath is a widely used standard, and googling it will yield a ton of information. This tutorial, however, focuses on using XPath for ebook related tasks like finding chapter headings in an unstructured HTML document."
msgstr ""

#: ../../xpath.rst:0
# aea82b085b5344d6ae24fbefa8bd403e
msgid "Contents"
msgstr ""

#: ../../xpath.rst:21
# 6338e7b776a2457fbe0ac9f4eaf47626
msgid "Selecting by tagname"
msgstr ""

#: ../../xpath.rst:23
# bd1373bf19d747fdaf5db70c235bd85d
msgid "The simplest form of selection is to select tags by name. For example, suppose you want to select all the ``<h2>`` tags in a document. The XPath query for this is simply::"
msgstr ""

#: ../../xpath.rst:29
# ac50cbc9a65543119436173ebd817825
msgid "The prefix `//` means *search at any level of the document*. Now suppose you want to search for ``<span>`` tags that are inside ``<a>`` tags. That can be achieved with::"
msgstr ""

#: ../../xpath.rst:35
# a8b94f9e1c344c7496b8a0ca5c1a19bd
msgid "If you want to search for tags at a particular level in the document, change the prefix::"
msgstr ""

#: ../../xpath.rst:41
# 3c3b4a8345144e2a9680edbf724f88e5
msgid "This will match only ``<p>A very short ebook to demonstrate the use of XPath.</p>`` in the `Sample ebook`_ but not any of the other ``<p>`` tags. The ``h:`` prefix in the above examples is needed to match XHTML tags. This is because internally, |app| represents all content as XHTML. In XHTML tags have a *namespace*, and ``h:`` is the namespace prefix for HTML tags."
msgstr ""

#: ../../xpath.rst:47
# 2dff508053244afa8460ecefb2dd666d
msgid "Now suppose you want to select both ``<h1>`` and ``<h2>`` tags. To do that, we need a XPath construct called *predicate*. A :dfn:`predicate` is simply a test that is used to select tags. Tests can be arbitrarily powerful and as this tutorial progresses, you will see more powerful examples. A predicate is created by enclosing the test expression in square brackets::"
msgstr ""

#: ../../xpath.rst:55
# df5851319f864f42bb9780315fe9c53f
msgid "There are several new features in this XPath expression. The first is the use of the wildcard ``*``. It means *match any tag*. Now look at the test expression ``name()='h1' or name()='h2'``. :term:`name()` is an example of a *built-in function*. It simply evaluates to the name of the tag. So by using it, we can select tags whose names are either `h1` or `h2`. Note that the :term:`name()` function ignores namespaces so that there is no need for the ``h:`` prefix. XPath has several useful built-in functions. A few more will be introduced in this tutorial."
msgstr ""

#: ../../xpath.rst:64
# 960371776c2a4db78a8b032e301302d3
msgid "Selecting by attributes"
msgstr ""

#: ../../xpath.rst:66
# 9891b3a342ff4ec6a013355c7335e275
msgid "To select tags based on their attributes, the use of predicates is required::"
msgstr ""

#: ../../xpath.rst:72
# 950ae465052040bbb2d033dcc8765afe
msgid "Here, the ``@`` operator refers to the attributes of the tag. You can use some of the `XPath built-in functions`_ to perform more sophisticated matching on attribute values."
msgstr ""

#: ../../xpath.rst:78
# 4e69f8cf2caf4ef6b0e6bee49490d229
msgid "Selecting by tag content"
msgstr ""

#: ../../xpath.rst:80
# 81d7ff0ee727404488f1def5415fd0c3
msgid "Using XPath, you can even select tags based on the text they contain. The best way to do this is to use the power of *regular expressions* via the built-in function :term:`re:test()`::"
msgstr ""

#: ../../xpath.rst:86
# 5bf378ce43a54e398a273d6012dfa2d6
msgid "Here the ``.`` operator refers to the contents of the tag, just as the ``@`` operator referred to its attributes."
msgstr ""

#: ../../xpath.rst:91
# 00599d8682634f0fa0fa8f25eae79e8a
msgid "Sample ebook"
msgstr ""

#: ../../xpath.rst:97
# 9a92e36ae651445dae3058f5cf969bea
msgid "XPath built-in functions"
msgstr ""

#: ../../xpath.rst:100
# 333333f75c97472b81d826d548b89133
msgid "name()"
msgstr ""

#: ../../xpath.rst:102
# 33f41a5e4cae4fd28b8104ac27b46f7b
msgid "The name of the current tag."
msgstr ""

#: ../../xpath.rst:103
# 4e105e9a9cc24ca1b3257faf5368ebf6
msgid "contains()"
msgstr ""

#: ../../xpath.rst:105
# b82416cee60348319fc92542d44ff81c
msgid "``contains(s1, s2)`` returns `true` if s1 contains s2."
msgstr ""

#: ../../xpath.rst:106
# a51c5dc2614142e7b26936d95b1e4d2e
msgid "re:test()"
msgstr ""

#: ../../xpath.rst:108
# cfe223485bf842ad87763cfd5e34f7a3
msgid "``re:test(src, pattern, flags)`` returns `true` if the string `src` matches the regular expression `pattern`. A particularly useful flag is ``i``, it makes matching case insensitive. A good primer on the syntax for regular expressions can be found at `regexp syntax <http://docs.python.org/lib/re-syntax.html>`_"
msgstr ""

