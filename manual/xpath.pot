# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.9.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-10 16:05+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/xpath.rst:4
# fd4eab868e8c420598c2e37f15795a30
msgid "XPath Tutorial"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:6
# abb2ec582313494fb8012a16ffcdf84d
msgid "In this tutorial, you will be given a gentle introduction to `XPath <http://en.wikipedia.org/wiki/XPath>`_, a query language that can be used to select arbitrary parts of `HTML <http://en.wikipedia.org/wiki/HTML>`_ documents in calibre. XPath is a widely used standard, and googling it will yield a ton of information. This tutorial, however, focuses on using XPath for ebook related tasks like finding chapter headings in an unstructured HTML document."
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:0
# 0e8f2be08c304ab0b32b86279fdb884c
msgid "Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:19
# d1105491037b4ef6a03bd1e700dfab85
msgid "Selecting by tagname"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:21
# ca8e1c12294d41f3955aecb6998185ea
msgid "The simplest form of selection is to select tags by name. For example, suppose you want to select all the ``<h2>`` tags in a document. The XPath query for this is simply::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:27
# cfe1e3856589437793317e2e1926c291
msgid "The prefix `//` means *search at any level of the document*. Now suppose you want to search for ``<span>`` tags that are inside ``<a>`` tags. That can be achieved with::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:33
# 4b4f2bf874194422ace43e37d47af121
msgid "If you want to search for tags at a particular level in the document, change the prefix::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:39
# 7aaa4989e7c74fa28038ef3cd4c4b60b
msgid "This will match only ``<p>A very short ebook to demonstrate the use of XPath.</p>`` in the :ref:`sample_ebook` but not any of the other ``<p>`` tags. The ``h:`` prefix in the above examples is needed to match XHTML tags. This is because internally, calibre represents all content as XHTML. In XHTML tags have a *namespace*, and ``h:`` is the namespace prefix for HTML tags."
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:45
# 56c553d5d3b04f86ab9df641c064b673
msgid "Now suppose you want to select both ``<h1>`` and ``<h2>`` tags. To do that, we need a XPath construct called *predicate*. A :dfn:`predicate` is simply a test that is used to select tags. Tests can be arbitrarily powerful and as this tutorial progresses, you will see more powerful examples. A predicate is created by enclosing the test expression in square brackets::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:53
# aa92510198264e4b9f10fdb0c2325c23
msgid "There are several new features in this XPath expression. The first is the use of the wildcard ``*``. It means *match any tag*. Now look at the test expression ``name()='h1' or name()='h2'``. :term:`name()` is an example of a *built-in function*. It simply evaluates to the name of the tag. So by using it, we can select tags whose names are either `h1` or `h2`. Note that the :term:`name()` function ignores namespaces so that there is no need for the ``h:`` prefix. XPath has several useful built-in functions. A few more will be introduced in this tutorial."
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:62
# b33daec419684540a127d000d04609b6
msgid "Selecting by attributes"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:64
# ed1aa1632ffd425ebe90ab180467074a
msgid "To select tags based on their attributes, the use of predicates is required::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:70
# 3c8c438847e04e49b70addb730bf830b
msgid "Here, the ``@`` operator refers to the attributes of the tag. You can use some of the `XPath built-in functions`_ to perform more sophisticated matching on attribute values."
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:76
# eb51d787b5034f819ae5c020d0153158
msgid "Selecting by tag content"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:78
# 723295eeb3e24dbca517792f51a0b0d0
msgid "Using XPath, you can even select tags based on the text they contain. The best way to do this is to use the power of *regular expressions* via the built-in function :term:`re:test()`::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:84
# 8a6132a6e342441b89190d9367892e1a
msgid "Here the ``.`` operator refers to the contents of the tag, just as the ``@`` operator referred to its attributes."
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:90
# 00da94b1c4c0464aa6167e31d2eef918
msgid "Sample ebook"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:96
# b4adc751d04d44f684fdeed55d8c6c42
msgid "XPath built-in functions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:99
# 0bc304c002274bea8522152c685a0ffd
msgid "name()"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:101
# 1466f25de8e0491ca9134179b9fe0693
msgid "The name of the current tag."
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:102
# 4ad8a7e8856742f6b1b1deb08329ebf2
msgid "contains()"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:104
# 704dd7cde0a7436f84e6ac59ff9295be
msgid "``contains(s1, s2)`` returns `true` if s1 contains s2."
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:105
# 95f7c747948e427fb18e9ced4180bf7a
msgid "re:test()"
msgstr ""

#: ../../home/kovid/work/calibre/manual/xpath.rst:107
# 493f86954e3d4a2d9cdbc3ad1ca620a4
msgid "``re:test(src, pattern, flags)`` returns `true` if the string `src` matches the regular expression `pattern`. A particularly useful flag is ``i``, it makes matching case insensitive. A good primer on the syntax for regular expressions can be found at `regexp syntax <http://docs.python.org/lib/re-syntax.html>`_"
msgstr ""

