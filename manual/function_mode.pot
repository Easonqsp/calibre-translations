# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.11.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-21 08:24+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/function_mode.rst:2
# b11a67c931324e8d839a0ebfb654057a
msgid "Function Mode for Search & Replace in the Editor"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:4
# 74f5aa7978d2435394719edddcfe0fc2
msgid "The Search & Replace tool in the editor support a *function mode*. In this mode, you can combine regular expressions (see :doc:`regexp`) with arbitrarily powerful python functions to do all sorts of advanced text processing."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:9
# 3dd24af53c684bb0911ea2ecc939fc3c
msgid "In the standard *regexp* mode for search and replace, you specify both a regular expression to search for as well as a template that is used to replace all found matches. In function mode, instead of using a fixed template, you specify an arbitrary function, in the `python programming language <https://docs.python.org/2.7/>`_. This allows you to do lots of things that are not possible with simple templates."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:16
# 3f763246a2bd4223bd942769ad037c3a
msgid "Techniques for using function mode and the syntax will be described by means of examples, showing you how to create functions to perform progressively more complex tasks."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:26
# 6e061ab413f0459ab098a0a4ca8ac766
msgid "Automatically fixing the case of headings in the document"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:28
# 61b90faefa4d45339636aa732877e527
msgid "Here, we will leverage one of the builtin functions in the editor to automatically change the case of all text inside heading tags to title case::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:33
# f008dbc534a44b69b7db38eb53a93d0f
msgid "For the function, simply choose the :guilabel:`Title-case text` builtin function. The will change titles that look like: ``<h1>some TITLE</h1>`` to ``<h1>Some Title</h1>``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:39
# 532a577af7b2414782f698a466ef0dc9
msgid "Your first custom function - smartening hyphens"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:41
# 0b4612d11c6b4bc5b1b60d68c55d9b84
msgid "The real power of function mode comes from being able to create your own functions to process text in arbitrary ways. The Smarten Punctuation tool in the editor leaves individual hyphens alone, so you can use the this function to replace them with em-dashes."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:46
# 039160d6ccb942d893b6ea59b4ad3cf8
msgid "To create a new function, simply click the Create/Edit button to create a new function and copy the python code from below."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:54
# 120cce891d9d462fb4e46a17e4111664
msgid "Every Search & Replace custom function must have a unique name and consist of a python function named replace, that accepts all the arguments shown above. For the moment, we wont worry about all the different arguments to ``replace()`` function. Just focus on the ``match`` argument. It represents a match when running a search and replace. Its full documentation in available `here <https://docs.python.org/2.7/library/re.html#match-objects>`_. ``match.group()`` simply returns all the matched text and all we do is replace hyphens in that text with em-dashes, first replacing double hyphens and then single hyphens."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:64
# 3482ab7737db4c3c80493c2d769d96be
msgid "Use this function with the find regular expression::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:68
# ffa4dcaeb46145bda480a940e0391769
msgid "And it will replace all hyphens with em-dashes, but only in actual text and not inside HTML tag definitions."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:73
# 1d48a47dcb1f4e2aba7d0972b4ad5bc0
msgid "The power of function mode - using a spelling dictionary to fix mis-hyphenated words"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:75
# d4f3c14877694935aa44c59a68e6b836
msgid "Often, ebooks created from scans of printed books contain mis-hyphenated words -- words that were split at the end of the line on the printed page. We will write a simple function to automatically find and fix such words."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:100
# 53fa85ab4c894bcc9541d4ddd877ce49
msgid "Use this function with the same find expression as before, namely::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:104
# d8dcb77e7c684eefb14311587b104c75
msgid "And it will magically fix all mis-hyphenated words in the text of the book. The main trick is to use one of the useful extra arguments to the replace function, ``dictionaries``.  This refers to the dictionaries the editor itself uses to spell check text in the book. What this function does is look for words separated by a hyphen, remove the hyphen and check if the dictionary recognizes the composite word, if it does, the original words are replaced by the hyphen free composite word."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:112
# a420db300939483a93f9f480069e606f
msgid "Note that one limitation of this technique is it will only work for mono-lingual books, because, by default, ``dictionaries.recognized()`` uses the main language of the book."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:118
# 51ae6899f5a743dba8b04f5bb3636abc
msgid "Auto numbering sections"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:120
# 20ba2fd096124ad394376a3089942889
msgid "Now we will see something a little different. Suppose your HTML file has many sections, each with a heading in an :code:`<h2>` tag that looks like :code:`<h2>Some text</h2>`. You can create a custom function that will automatically number these headings with consecutive section numbers, so that they look like :code:`<h2>1. Some text</h2>`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:132
# 6a3308c98d144953b79c0583f10b5262
msgid "Use it with the find expression::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:136
# ab22724f28194139980d43f4649bfe1c
msgid "Place the cursor at the top of the file and click :guilabel:`Replace all`. This function uses another of the useful extra arguments to ``replace()``: the ``number`` argument. When doing a :guilabel:`Replace All` number is automatically incremented for every successive match."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:143
# 1461e4017ca849a2b3998f8d05e693f2
msgid "Auto create a Table of Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:145
# 56c2c14babe34fa3a799d97892fa67b0
msgid "Finally, lets try something a little more ambitious. Suppose your book has headings in ``h1`` and ``h2`` tags that look like ``<h1 id=\"someif\">Some Text</h1>``. We will auto-generate an HTML Table of Contents based on these headings. Create the custom function below:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:189
# 3dfe8fe62b9249c1a94ed7220bfa8843
msgid "And use it with the find expression::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:193
# 030ce4e3a74b47e6982bd6b6e028bc81
msgid "Run the search of :guilabel:`All text files` and at the end of the search, a window will popup with \"Debug Output from your function\" which will have the HTML Table of Contents, ready to be pasted into :file:`toc.html`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:197
# 8a13c93e05e44d788c6256e919526c08
msgid "The function above is heavily commented, so it should be easy to follow. The key new feature is the use of another useful extra argument to the ``replace()`` function, the ``data`` object. The ``data`` object is a python *dict* that persists between all successive invocations of ``replace()`` during a single :guilabel:`Replace All` operation."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:203
# 356005f1e7ee4297a9f61129220000ed
msgid "Another new feature is the use of ``call_after_last_match`` setting that to True on the ``replace()`` function means that the editor will call ``replace()`` one extra time after all matches have been found. For this extra call, the match object will be ``None``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:209
# 674e09ec494b4f1db1ca51c959eccfc9
msgid "The API for the function mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:211
# 60010367719940e2b15520ae34e62dc6
msgid "All function mode functions must be python functions named replace, with the following signature::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:217
# fe6dd8f5565c413f9dd3227113feb0ce
msgid "When a find/replace is run, for every match that is found, the ``replace()`` function will be called, it must return the replacement string for that match. If no replacements are to be done, it should return ``match.group()`` which is the original string. The various arguments to the ``replace()`` function are documented below."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:224
# ede22ea5f09549a7b10c5ff203ab18d8
msgid "The ``match`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:226
# a68879efc226455e8c4698d6b92e2c43
msgid "The ``match`` argument represents the currently found match. It is a `python Match object <https://docs.python.org/2.7/library/re.html#match-objects>`_. It's most useful method is ``group()`` which can be used to get the matched text corresponding to individual capture groups in the search regular expression."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:233
# 29b0da34ff8341c2b26946844d7a724d
msgid "The ``number`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:235
# 6d0a0e3e40ba4fc68a543c882b20e294
msgid "The ``number`` argument is the number of the current match. When you run :guilabel:`Replace All`, every successive match will cause ``replace()`` to be called with an increasing number. The first match has number 1."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:240
# 3f6473018104418986fadf6ae8989291
msgid "The ``file_name`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:242
# cd4c358fe2884d02bfd0ad716074543f
msgid "This is the filename of the file in which the current match was found. When searching inside marked text, the ``file_name`` is empty. The ``file_name`` is in canonical form, a path relative to the root of the book, using ``/`` as the path separator."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:248
# 2fde1e8d23b648ccb39a555a359170c4
msgid "The ``metadata`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:250
# 507e4de3c50048f889a35547817a56ee
msgid "This represents the metadata of the current book, such as title, authors, language, etc. It is an object of class :class:`calibre.ebooks.metadata.book.base.Metadata`. Useful attributes include, ``title``, ``authors`` (a list of authors) and ``language`` (the language code)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:256
# 93993d48914b41c79b50641f5ef0be41
msgid "The ``dictionaries`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:258
# 6a328329749b41b08727ce7ea1eea210
msgid "This represents the collection of dictionaries used for spell checking the current book. It's most useful method is ``dictionaries.recognized(word)`` which will return ``True`` if the passed in word is recognized by the dictionary for the current book's language."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:264
# f85d8934782f466fb1a695bbf86d8515
msgid "The ``data`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:266
# a76efdb181a542f2892600fbdd8c5a64
msgid "This a simple python ``dict``. When you run :guilabel:`Replace All`, every successive match will cause ``replace()`` to be called with the same ``dict`` as data. You can thus use it to store arbitrary data between invocations of ``replace()`` during a :guilabel:`Replace All` operation."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:273
# b9f2c8b167c642b98d53fd5c4a7a88c5
msgid "The ``functions`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:275
# 2b332b0f02ad464eaa5f6110c890dab1
msgid "The ``functions`` argument gives you access to all other user defined functions. This is useful for code re-use. You can define utility functions in one place and re-use them in all your other functions. For example, suppose you create a function name ``My Function`` like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:288
# a3289a8dafa3454caee97a6623d954e4
msgid "Then, in another function, you can access the ``utility()`` function like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:296
# 136b5ef86b724c66985d6b9577645c14
msgid "You can also use the functions object to store persistent data, that can be re-used by other functions. For example, you could have one function that when run with :guilabel:`Replace All` collects some data and another function that uses it when it is run afterwards. Consider the following two functions:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:316
# 14323307abce4f0792cb76705f59b4e7
msgid "Debugging your functions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:318
# 346f4a51a7e2499e96b33d6c449beda9
msgid "You can debug the functions you create by using the standard ``print()`` function from python. The output of print will be displayed in a popup window after the Find/replace has completed. You saw an example of using ``print()`` to output an entire table of contents above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:324
# 6a20614dc83f4f3392221455736fe6f7
msgid "Having your function called an extra time after the last match is found"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:326
# 8eb92c93959b4d4c8b818851b0cfaa3f
msgid "Sometimes, as in the auto generate table of contents example above, it is useful to have your function called an extra time after the last match is found. You can do this by setting the call_after_last_match attribute on your function, like this:"
msgstr ""

