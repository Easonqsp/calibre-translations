# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.21.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-13 08:42+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/function_mode.rst:2
# 43525787ba9c47508c582fd7baf06ca2
msgid "Function Mode for Search & Replace in the Editor"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:4
# cbec99074bdf49d6bab20c35d241af88
msgid "The Search & Replace tool in the editor support a *function mode*. In this mode, you can combine regular expressions (see :doc:`regexp`) with arbitrarily powerful python functions to do all sorts of advanced text processing."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:9
# 11772b1e4a87499cba60fda71173dd21
msgid "In the standard *regexp* mode for search and replace, you specify both a regular expression to search for as well as a template that is used to replace all found matches. In function mode, instead of using a fixed template, you specify an arbitrary function, in the `python programming language <https://docs.python.org/2.7/>`_. This allows you to do lots of things that are not possible with simple templates."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:16
# a1900d1af42742b28bea8a1a1c640ce9
msgid "Techniques for using function mode and the syntax will be described by means of examples, showing you how to create functions to perform progressively more complex tasks."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:26
# 197003c4110d4a2db9a5ad4b7870e8e6
msgid "Automatically fixing the case of headings in the document"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:28
# 9bbed6b9ebbf41a69534a22c1d9af7f2
msgid "Here, we will leverage one of the builtin functions in the editor to automatically change the case of all text inside heading tags to title case::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:33
# c0fb1d2c213049608292d0787bc057ed
msgid "For the function, simply choose the :guilabel:`Title-case text (ignore tags)` builtin function. The will change titles that look like: ``<h1>some TITLE</h1>`` to ``<h1>Some Title</h1>``. It will work even if there are other HTML tags inside the heading tags."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:40
# 4c65d1ad141545acbe5de85e1b062997
msgid "Your first custom function - smartening hyphens"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:42
# 50c0b2cd54d44d56b3d8f541254da144
msgid "The real power of function mode comes from being able to create your own functions to process text in arbitrary ways. The Smarten Punctuation tool in the editor leaves individual hyphens alone, so you can use the this function to replace them with em-dashes."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:47
# 91c349d448a84ec0a711f38c653aa2fe
msgid "To create a new function, simply click the Create/Edit button to create a new function and copy the python code from below."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:55
# 6368f7a2695741b29994e2e1843643e5
msgid "Every Search & Replace custom function must have a unique name and consist of a python function named replace, that accepts all the arguments shown above. For the moment, we wont worry about all the different arguments to ``replace()`` function. Just focus on the ``match`` argument. It represents a match when running a search and replace. Its full documentation in available `here <https://docs.python.org/2.7/library/re.html#match-objects>`_. ``match.group()`` simply returns all the matched text and all we do is replace hyphens in that text with em-dashes, first replacing double hyphens and then single hyphens."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:65
# ef6374618e974324a227dbea14d28463
msgid "Use this function with the find regular expression::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:69
# 82fd6aa7719b4a56b9dca0c01573ef16
msgid "And it will replace all hyphens with em-dashes, but only in actual text and not inside HTML tag definitions."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:74
# 30da46b58ea54fb2acdf5f869525d843
msgid "The power of function mode - using a spelling dictionary to fix mis-hyphenated words"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:76
# a851ac5cbd2c4204999538d89d03b2c2
msgid "Often, ebooks created from scans of printed books contain mis-hyphenated words -- words that were split at the end of the line on the printed page. We will write a simple function to automatically find and fix such words."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:101
# 105d5a59fac444d089505d0171e48f9e
msgid "Use this function with the same find expression as before, namely::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:105
# 57ac168f07b4441fb4d379a041090e52
msgid "And it will magically fix all mis-hyphenated words in the text of the book. The main trick is to use one of the useful extra arguments to the replace function, ``dictionaries``.  This refers to the dictionaries the editor itself uses to spell check text in the book. What this function does is look for words separated by a hyphen, remove the hyphen and check if the dictionary recognizes the composite word, if it does, the original words are replaced by the hyphen free composite word."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:113
# b664cafd025b4d3b9036028c8fd6fa35
msgid "Note that one limitation of this technique is it will only work for mono-lingual books, because, by default, ``dictionaries.recognized()`` uses the main language of the book."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:119
# a0df0a6787724f229a89c07777388034
msgid "Auto numbering sections"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:121
# 2bdad4c1958a45e99ea2745327342405
msgid "Now we will see something a little different. Suppose your HTML file has many sections, each with a heading in an :code:`<h2>` tag that looks like :code:`<h2>Some text</h2>`. You can create a custom function that will automatically number these headings with consecutive section numbers, so that they look like :code:`<h2>1. Some text</h2>`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:137
# b953a51ab1dd4cca8f0a57af42714a12
msgid "Use it with the find expression::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:141
# 02f5f2424b08437493c438338a2fa5d7
msgid "Place the cursor at the top of the file and click :guilabel:`Replace all`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:143
# df1b495fd6cc4d03a4859896173245e1
msgid "This function uses another of the useful extra arguments to ``replace()``: the ``number`` argument. When doing a :guilabel:`Replace All` number is automatically incremented for every successive match."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:147
# dbf8af70e7ba46788c01082cc8b9431a
msgid "Another new feature is the use of ``replace.file_order`` -- setting that to ``'spine'`` means that if this search is run on multiple HTML files, the files are processed in the order in which they appear in the book. See :ref:`file_order_replace_all` for details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:154
# 3392cc6884364085b3b92f486a60f0c2
msgid "Auto create a Table of Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:156
# 19354c1c214a4a3db3785a938c4e98a7
msgid "Finally, lets try something a little more ambitious. Suppose your book has headings in ``h1`` and ``h2`` tags that look like ``<h1 id=\"someid\">Some Text</h1>``. We will auto-generate an HTML Table of Contents based on these headings. Create the custom function below:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:199
# 9e12884f2cc64681a1dec88b86e25888
msgid "And use it with the find expression::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:203
# 63adc84326284de792b45509f0e0bd85
msgid "Run the search on :guilabel:`All text files` and at the end of the search, a window will popup with \"Debug Output from your function\" which will have the HTML Table of Contents, ready to be pasted into :file:`toc.html`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:207
# a8b8028d24144465a8605b628b6f609f
msgid "The function above is heavily commented, so it should be easy to follow. The key new feature is the use of another useful extra argument to the ``replace()`` function, the ``data`` object. The ``data`` object is a python *dict* that persists between all successive invocations of ``replace()`` during a single :guilabel:`Replace All` operation."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:213
# 67951514f2dd4fa68b6a3f920d05aa2b
msgid "Another new feature is the use of ``call_after_last_match`` -- setting that to ``True`` on the ``replace()`` function means that the editor will call ``replace()`` one extra time after all matches have been found. For this extra call, the match object will be ``None``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:218
# 7c63992fff744079ac06025b6c03b9d5
msgid "This was just a demonstration to show you the power of function mode, if you really needed to generate a Table of Contents from headings in your book, you would be better off using the dedicated Table of Contents tool in :guilabel:`Tools->Table of Contents`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:224
# 678cf93251ec4d2ba71ec6f4ef4409f4
msgid "The API for the function mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:226
# f54a734fe9324de1a35e2a5264628fd6
msgid "All function mode functions must be python functions named replace, with the following signature::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:232
# 6f106bed73d64f8fa5ee17dada46117b
msgid "When a find/replace is run, for every match that is found, the ``replace()`` function will be called, it must return the replacement string for that match. If no replacements are to be done, it should return ``match.group()`` which is the original string. The various arguments to the ``replace()`` function are documented below."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:239
# 25a01f2468fb457a938b5f84fa0fefc0
msgid "The ``match`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:241
# b58044a9e21a4050af989537a911d937
msgid "The ``match`` argument represents the currently found match. It is a `python Match object <https://docs.python.org/2.7/library/re.html#match-objects>`_. It's most useful method is ``group()`` which can be used to get the matched text corresponding to individual capture groups in the search regular expression."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:248
# 387c6aba126b4409b8387e1b275cc962
msgid "The ``number`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:250
# 985332246e544998b25c9e30ffbbf042
msgid "The ``number`` argument is the number of the current match. When you run :guilabel:`Replace All`, every successive match will cause ``replace()`` to be called with an increasing number. The first match has number 1."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:255
# 23ae21da25454ba6aa14a1154528d696
msgid "The ``file_name`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:257
# 18364f8e5590475ca13f01cfcb678c50
msgid "This is the filename of the file in which the current match was found. When searching inside marked text, the ``file_name`` is empty. The ``file_name`` is in canonical form, a path relative to the root of the book, using ``/`` as the path separator."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:263
# 73f1cc67326340e781a16dbeb09b2114
msgid "The ``metadata`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:265
# 595ebfa6aae54f3b8c9b5af1c6a21a0b
msgid "This represents the metadata of the current book, such as title, authors, language, etc. It is an object of class :class:`calibre.ebooks.metadata.book.base.Metadata`. Useful attributes include, ``title``, ``authors`` (a list of authors) and ``language`` (the language code)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:271
# 53c38c29ec8b49d4b48d1b3ca4a8345f
msgid "The ``dictionaries`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:273
# 62f0de31ccde454b952fcc438bea1778
msgid "This represents the collection of dictionaries used for spell checking the current book. It's most useful method is ``dictionaries.recognized(word)`` which will return ``True`` if the passed in word is recognized by the dictionary for the current book's language."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:279
# aa4462e74af147a398b844b70ff34435
msgid "The ``data`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:281
# c185a8a85bfd4c26af6ab980fce1e901
msgid "This a simple python ``dict``. When you run :guilabel:`Replace All`, every successive match will cause ``replace()`` to be called with the same ``dict`` as data. You can thus use it to store arbitrary data between invocations of ``replace()`` during a :guilabel:`Replace All` operation."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:288
# d667433839ab495d876f5e502fdab03c
msgid "The ``functions`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:290
# 24298a2d06114cfd932dca21617edd15
msgid "The ``functions`` argument gives you access to all other user defined functions. This is useful for code re-use. You can define utility functions in one place and re-use them in all your other functions. For example, suppose you create a function name ``My Function`` like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:303
# 443f992934dd44c081b7b9cd1c0226f3
msgid "Then, in another function, you can access the ``utility()`` function like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:311
# ad4983f85973432e8af10edb8477205c
msgid "You can also use the functions object to store persistent data, that can be re-used by other functions. For example, you could have one function that when run with :guilabel:`Replace All` collects some data and another function that uses it when it is run afterwards. Consider the following two functions:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:331
# c9e2dc924aab4866b3981bcd1cb41767
msgid "Debugging your functions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:333
# 2a1d3196506445918740d2e0ea513dc8
msgid "You can debug the functions you create by using the standard ``print()`` function from python. The output of print will be displayed in a popup window after the Find/replace has completed. You saw an example of using ``print()`` to output an entire table of contents above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:341
# 8ae29cef9ce74d63aead50158bed5ba0
msgid "Choose file order when running on multiple HTML files"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:343
# 672ec078c6be4367a1dc8727ecec6c94
msgid "When you run a :guilabel:`Replace All` on multiple HTML files, the order in which the files are processes depends on what files you have open for editing. You can force the search to process files in the order in which the appear by setting the ``file_order`` attribute on your function, like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:355
# 1e743783c67a40dfab04599ec9b57dca
msgid "``file_order`` accepts two values, ``spine`` and ``spine-reverse`` which cause the search to process multiple files in the order they appear in the book, either forwards or backwards, respectively."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:360
# b06f75a2b73645eb8bd4020efcda41d9
msgid "Having your function called an extra time after the last match is found"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:362
# c0d1ca70e7ae4e48b67eed4b68e6b427
msgid "Sometimes, as in the auto generate table of contents example above, it is useful to have your function called an extra time after the last match is found. You can do this by setting the ``call_after_last_match`` attribute on your function, like this:"
msgstr ""

