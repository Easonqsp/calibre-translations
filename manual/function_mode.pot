# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.13.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-19 08:34+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/function_mode.rst:2
# 9768fd8acfe442048d0e33ff29608cf8
msgid "Function Mode for Search & Replace in the Editor"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:4
# 43a9fd09ab6a43539f1c0e11ffef0489
msgid "The Search & Replace tool in the editor support a *function mode*. In this mode, you can combine regular expressions (see :doc:`regexp`) with arbitrarily powerful python functions to do all sorts of advanced text processing."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:9
# 91760f9a5c5b48ceba9ea6cc6ba4aa23
msgid "In the standard *regexp* mode for search and replace, you specify both a regular expression to search for as well as a template that is used to replace all found matches. In function mode, instead of using a fixed template, you specify an arbitrary function, in the `python programming language <https://docs.python.org/2.7/>`_. This allows you to do lots of things that are not possible with simple templates."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:16
# a137f3ff2fe340b28caa459c26a417f0
msgid "Techniques for using function mode and the syntax will be described by means of examples, showing you how to create functions to perform progressively more complex tasks."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:26
# 8fd5dbcaab9e4f918d0ca9629bc9553b
msgid "Automatically fixing the case of headings in the document"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:28
# 2b82517e4b1b4e46b87bcca61013c38a
msgid "Here, we will leverage one of the builtin functions in the editor to automatically change the case of all text inside heading tags to title case::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:33
# 2ee7e11778fc43d788db432ebbca7dbb
msgid "For the function, simply choose the :guilabel:`Title-case text` builtin function. The will change titles that look like: ``<h1>some TITLE</h1>`` to ``<h1>Some Title</h1>``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:39
# cf8c9646b1f04abda877913e25a955c3
msgid "Your first custom function - smartening hyphens"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:41
# 20a710f2e1f043969799c447bfca88dd
msgid "The real power of function mode comes from being able to create your own functions to process text in arbitrary ways. The Smarten Punctuation tool in the editor leaves individual hyphens alone, so you can use the this function to replace them with em-dashes."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:46
# 071682e40b82456b807ed3aae7969673
msgid "To create a new function, simply click the Create/Edit button to create a new function and copy the python code from below."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:54
# 6b655852f12540449943ddaf6ad868fc
msgid "Every Search & Replace custom function must have a unique name and consist of a python function named replace, that accepts all the arguments shown above. For the moment, we wont worry about all the different arguments to ``replace()`` function. Just focus on the ``match`` argument. It represents a match when running a search and replace. Its full documentation in available `here <https://docs.python.org/2.7/library/re.html#match-objects>`_. ``match.group()`` simply returns all the matched text and all we do is replace hyphens in that text with em-dashes, first replacing double hyphens and then single hyphens."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:64
# 98a7056664054dd9a9e5baefb9416908
msgid "Use this function with the find regular expression::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:68
# 74252d4fd1724844afd34a9f39af8db6
msgid "And it will replace all hyphens with em-dashes, but only in actual text and not inside HTML tag definitions."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:73
# 84865a2287a84e3ab8c9edea9f5ee277
msgid "The power of function mode - using a spelling dictionary to fix mis-hyphenated words"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:75
# 663b4d3f1dfc491a805a4cd2b0c87129
msgid "Often, ebooks created from scans of printed books contain mis-hyphenated words -- words that were split at the end of the line on the printed page. We will write a simple function to automatically find and fix such words."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:100
# fbc399f56bc24af09f151a761cb29073
msgid "Use this function with the same find expression as before, namely::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:104
# f8d00c5c75fa49f185286cc957f5e7a7
msgid "And it will magically fix all mis-hyphenated words in the text of the book. The main trick is to use one of the useful extra arguments to the replace function, ``dictionaries``.  This refers to the dictionaries the editor itself uses to spell check text in the book. What this function does is look for words separated by a hyphen, remove the hyphen and check if the dictionary recognizes the composite word, if it does, the original words are replaced by the hyphen free composite word."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:112
# 0b2a576af961483e85589acf26193ea0
msgid "Note that one limitation of this technique is it will only work for mono-lingual books, because, by default, ``dictionaries.recognized()`` uses the main language of the book."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:118
# 903d4541fb4c437384f783809499b985
msgid "Auto numbering sections"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:120
# 9b58735e45f54226b475cf9281b0a89e
msgid "Now we will see something a little different. Suppose your HTML file has many sections, each with a heading in an :code:`<h2>` tag that looks like :code:`<h2>Some text</h2>`. You can create a custom function that will automatically number these headings with consecutive section numbers, so that they look like :code:`<h2>1. Some text</h2>`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:136
# c2463616f36d44609e22d2a8cb44de5e
msgid "Use it with the find expression::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:140
# 364b5f3aa90f452e81ddb54afd14b071
msgid "Place the cursor at the top of the file and click :guilabel:`Replace all`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:142
# e8873e7797264441af1af0dd9038358f
msgid "This function uses another of the useful extra arguments to ``replace()``: the ``number`` argument. When doing a :guilabel:`Replace All` number is automatically incremented for every successive match."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:146
# 19c5798e24004cd7a1fbd6adbbd96097
msgid "Another new feature is the use of ``replace.file_order`` -- setting that to ``'spine'`` means that if this search is run on multiple HTML files, the files are processed in the order in which they appear in the book. See :ref:`file_order_replace_all` for details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:153
# 8b27876e353c469fa1929a6ec5f6c730
msgid "Auto create a Table of Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:155
# e9d9d057f0d94ed88575ae53b00a46cc
msgid "Finally, lets try something a little more ambitious. Suppose your book has headings in ``h1`` and ``h2`` tags that look like ``<h1 id=\"someid\">Some Text</h1>``. We will auto-generate an HTML Table of Contents based on these headings. Create the custom function below:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:198
# 06a9bd94f0364e18a5622bfc0239b478
msgid "And use it with the find expression::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:202
# bd910e11be644f2a890b3eaefa382962
msgid "Run the search on :guilabel:`All text files` and at the end of the search, a window will popup with \"Debug Output from your function\" which will have the HTML Table of Contents, ready to be pasted into :file:`toc.html`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:206
# a715fde3fd28415c836d7a35afdbc48b
msgid "The function above is heavily commented, so it should be easy to follow. The key new feature is the use of another useful extra argument to the ``replace()`` function, the ``data`` object. The ``data`` object is a python *dict* that persists between all successive invocations of ``replace()`` during a single :guilabel:`Replace All` operation."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:212
# 5721ef331bcd404d86aec03f178149df
msgid "Another new feature is the use of ``call_after_last_match`` -- setting that to ``True`` on the ``replace()`` function means that the editor will call ``replace()`` one extra time after all matches have been found. For this extra call, the match object will be ``None``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:217
# af37b858e797450586c82a832e434595
msgid "This was just a demonstration to show you the power of function mode, if you really needed to generate a Table of Contents from headings in your book, you would be better off using the dedicated Table of Contents tool in :guilabel:`Tools->Table of Contents`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:223
# ee53b7ff77784d33a4cf5e2eea2b8d34
msgid "The API for the function mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:225
# 73fc3fd13888429cbbfbf05f1d6e36fa
msgid "All function mode functions must be python functions named replace, with the following signature::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:231
# a282c16f0c1f4d3d804469b9822b8c84
msgid "When a find/replace is run, for every match that is found, the ``replace()`` function will be called, it must return the replacement string for that match. If no replacements are to be done, it should return ``match.group()`` which is the original string. The various arguments to the ``replace()`` function are documented below."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:238
# c421abef8beb4a99bcf058c4757e6b8b
msgid "The ``match`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:240
# 0cbf3bdeb1424fe0bc152f996c916ea0
msgid "The ``match`` argument represents the currently found match. It is a `python Match object <https://docs.python.org/2.7/library/re.html#match-objects>`_. It's most useful method is ``group()`` which can be used to get the matched text corresponding to individual capture groups in the search regular expression."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:247
# 4467dfef4df54f6ca4e0e4a5f5c0b16e
msgid "The ``number`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:249
# 86fb3a6334234d2abcaffab0fda74325
msgid "The ``number`` argument is the number of the current match. When you run :guilabel:`Replace All`, every successive match will cause ``replace()`` to be called with an increasing number. The first match has number 1."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:254
# 1abe37587c924fa5a29db2d9006e0c72
msgid "The ``file_name`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:256
# f361338ae9d04f2abef9fc67e3a0e5f7
msgid "This is the filename of the file in which the current match was found. When searching inside marked text, the ``file_name`` is empty. The ``file_name`` is in canonical form, a path relative to the root of the book, using ``/`` as the path separator."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:262
# 56531e88651e4c8aa991d34c23c19996
msgid "The ``metadata`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:264
# f870c796300b4034b726f7e7f45a32a5
msgid "This represents the metadata of the current book, such as title, authors, language, etc. It is an object of class :class:`calibre.ebooks.metadata.book.base.Metadata`. Useful attributes include, ``title``, ``authors`` (a list of authors) and ``language`` (the language code)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:270
# ea26a26f51d045f694663c54ebbd7be0
msgid "The ``dictionaries`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:272
# 5cf1b70fa5ac4379adb2e919131b63d9
msgid "This represents the collection of dictionaries used for spell checking the current book. It's most useful method is ``dictionaries.recognized(word)`` which will return ``True`` if the passed in word is recognized by the dictionary for the current book's language."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:278
# 8c5cdd292f5f496fa7000e6280637ea9
msgid "The ``data`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:280
# 01acfd6a106a42d3a4a3f87df3f47319
msgid "This a simple python ``dict``. When you run :guilabel:`Replace All`, every successive match will cause ``replace()`` to be called with the same ``dict`` as data. You can thus use it to store arbitrary data between invocations of ``replace()`` during a :guilabel:`Replace All` operation."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:287
# e83373a802a149ba9d4c5d892779f5c5
msgid "The ``functions`` argument"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:289
# fcad2e6bdaaa42e9b15d3162d2b8c292
msgid "The ``functions`` argument gives you access to all other user defined functions. This is useful for code re-use. You can define utility functions in one place and re-use them in all your other functions. For example, suppose you create a function name ``My Function`` like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:302
# 523faa56b4a649f4a1b71126baf60d2a
msgid "Then, in another function, you can access the ``utility()`` function like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:310
# fcb3ee4b228444c3b9b019ed49a1861f
msgid "You can also use the functions object to store persistent data, that can be re-used by other functions. For example, you could have one function that when run with :guilabel:`Replace All` collects some data and another function that uses it when it is run afterwards. Consider the following two functions:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:330
# 34002c06f7b94affa6dde42b105dca05
msgid "Debugging your functions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:332
# 4037d365b2994f6fb184ade3182ce818
msgid "You can debug the functions you create by using the standard ``print()`` function from python. The output of print will be displayed in a popup window after the Find/replace has completed. You saw an example of using ``print()`` to output an entire table of contents above."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:340
# 9cde3af078ed40c88f6130275aa58030
msgid "Choose file order when running on multiple HTML files"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:342
# 44b3197bbb254330b5a735751e92db03
msgid "When you run a :guilabel:`Replace All` on multiple HTML files, the order in which the files are processes depends on what files you have open for editing. You can force the search to process files in the order in which the appear by setting the ``file_order`` attribute on your function, like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:354
# 9af4765bfa444295a935aa7b4c17568b
msgid "``file_order`` accepts two values, ``spine`` and ``spine-reverse`` which cause the search to process multiple files in the order they appear in the book, either forwards or backwards, respectively."
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:359
# b4deaf8da9c5400cad3c2e5693150c08
msgid "Having your function called an extra time after the last match is found"
msgstr ""

#: ../../home/kovid/work/calibre/manual/function_mode.rst:361
# 79091989faf949aeb64b0909319cf6d5
msgid "Sometimes, as in the auto generate table of contents example above, it is useful to have your function called an extra time after the last match is found. You can do this by setting the ``call_after_last_match`` attribute on your function, like this:"
msgstr ""

