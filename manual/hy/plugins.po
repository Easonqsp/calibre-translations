# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-09 09:04+0530\n"
"PO-Revision-Date: 2014-07-06 12:15+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Armenian (http://www.transifex.com/projects/p/calibre/language/hy/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: hy\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 5cf9058b9d0140e7b7b0d367cdce9341
#: ../../plugins.rst:6
msgid "API Documentation for plugins"
msgstr ""

# 26b7c08a77fb4c589e3b0b4eb5af7486
#: ../../plugins.rst:11
msgid ""
"Defines various abstract base classes that can be subclassed to create "
"powerful plugins. The useful classes are:"
msgstr ""

# 2c14177c0cc74bae9b8eeb6c7024c5c3
#: ../../plugins.rst:21
msgid "Plugin"
msgstr ""

# 47a66ce223034dde845550c62fe52374
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:1
msgid "A calibre plugin. Useful members include:"
msgstr ""

# 6cc84522dae84231844e7fb74f3934c1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:4
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

# 0ea5e01f37bb4bdb9e03c4728e0c5fc3
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:4
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

# 68cae051daa0442fab751d6945c2e1c1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:7
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

# 7288dea053814716964e0075fd7ca7f3
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:7
msgid "by the user."
msgstr ""

# f172eb5523624eeab16bd903a2d673b5
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:9
msgid "Methods that should be overridden in sub classes:"
msgstr ""

# 591ad63a1bdc4cdb9159342ae704fd05
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:11
msgid ":meth:`initialize`"
msgstr ""

# 482daa7bcbf041138bbc989223201865
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:12
msgid ":meth:`customization_help`"
msgstr ""

# ad3fdd1860434721838fee73dec6b43a
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:14
msgid "Useful methods:"
msgstr ""

# b74000b8a1354423929135439282e9d8
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin:16
msgid ":meth:`temporary_file`"
msgstr ""

# 43b4774715204eaca07a58c29b2ba4fe
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.supported_platforms:1
msgid ""
"List of platforms this plugin works on For example: ``['windows', 'osx', "
"'linux']``"
msgstr ""

# 261ab9a237974d5587f60d05f80f9d96
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.name:1
msgid ""
"The name of this plugin. You must set it something other than Trivial Plugin"
" for it to work."
msgstr ""

# 1b6c7369d94a483f8f55f67375d5a900
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.version:1
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

# 4fc07f96ff614856958d956a1893839e
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.description:1
msgid "A short string describing what this plugin does"
msgstr ""

# abba1a004b714303abe1103603919034
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.author:1
msgid "The author of this plugin"
msgstr ""

# 73723c4b5f694acb9983ca6d146e26a1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.priority:1
msgid ""
"When more than one plugin exists for a filetype, the plugins are run in "
"order of decreasing priority i.e. plugins with higher priority will be run "
"first. The highest possible priority is ``sys.maxint``. Default priority is "
"1."
msgstr ""

# 32bd78cc647641e4a04c038101d1b5aa
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.minimum_calibre_version:1
msgid "The earliest version of calibre this plugin requires"
msgstr ""

# ea826b26ab5d4c98a4776bdfed9a837f
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.can_be_disabled:1
msgid ""
"If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

# 98fc354dd3cb49f7a0479dae3e20edb4
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.type:1
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

# 8ca98b28f8d54fb782592557e7b1e523
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:1
msgid ""
"Called once when calibre plugins are initialized. Plugins are re-initialized"
" every time a new plugin is added."
msgstr ""

# b2fd5c838ae443a98e4ad0c7fc1c526d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:4
msgid ""
"Perform any plugin specific initialization here, such as extracting "
"resources from the plugin zip file. The path to the zip file is available as"
" ``self.plugin_path``."
msgstr ""

# c2e4be113d154680a08901f818ae8db8
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.initialize:8
msgid ""
"Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

# 262249475221423d9356743e41eab15b
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:1
msgid ""
"Implement this method and :meth:`save_settings` in your plugin to use a "
"custom configuration dialog, rather then relying on the simple string based "
"default customization."
msgstr ""

# 1a0d88acd90c4860a2309738dd6b9f18
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:5
msgid ""
"This method, if implemented, must return a QWidget. The widget can have an "
"optional method validate() that takes no arguments and is called immediately"
" after the user clicks OK. Changes are applied if and only if the method "
"returns True."
msgstr ""

# a66c79bde643422daeeedbc1296bc35f
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.config_widget:10
msgid ""
"If for some reason you cannot perform the configuration at this time, return"
" a tuple of two strings (message, details), these will be displayed as a "
"warning dialog to the user and the process will be aborted."
msgstr ""

# 1b9836815f7647d28465597dd77933e1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:1
msgid "Save the settings specified by the user with config_widget."
msgstr ""

# 0b787aa9e71e4b179882a0139121d41d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.save_settings:3
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

# d7f7f99644974f88b258080b1688b5f8
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.do_user_config:1
msgid ""
"This method shows a configuration dialog for this plugin. It returns True if"
" the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

# 761009993d374ee8b3e29436f0eca0cb
# 5ee695560b7540e09980768f7852799e
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:1
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:1
msgid ""
"If this plugin comes in a ZIP file (user added plugin), this method will "
"allow you to load resources from the ZIP file."
msgstr ""

# a7b375f712334f1ba407b011a8733549
# 8074e0357115427d86100f188dd6a8ab
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:4
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:4
msgid "For example to load an image::"
msgstr ""

# b3cad15d3f434d339a016ceb8019a7cf
# 2bd1b756fd2b47738fd04e2f2522784d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:10
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:10
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

# 4dd57a1377344885b39b0a8937f9509c
# 2500519391b1402b82fa2c1be629fad9
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.load_resources:12
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.load_resources:12
msgid ""
"A dictionary of the form ``{name : file_contents}``. Any names that were not"
" found in the zip file will not be present in the dictionary."
msgstr ""

# c7ee4d61990847579a78a6c01018a7bd
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:1
msgid ""
"Return a string giving help on how to customize this plugin. By default "
"raise a :class:`NotImplementedError`, which indicates that the plugin does "
"not require customization."
msgstr ""

# e38589bf17764038ac863ec61931c77f
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:5
msgid ""
"If you re-implement this method in your subclass, the user will be asked to "
"enter a string as customization for this plugin. The customization string "
"will be available as ``self.site_customization``."
msgstr ""

# 027e631daa4140bfbe63e1bfa575b038
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:10
msgid ""
"Site customization could be anything, for example, the path to a needed "
"binary on the user's computer."
msgstr ""

# 35abfc47c71947cabfcee17f383fc388
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.customization_help:13
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

# 8d86598d855047b2bad913afdae87db7
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:1
msgid ""
"Return a file-like object that is a temporary file on the file system. This "
"file will remain available even after being closed and will only be removed "
"on interpreter shutdown. Use the ``name`` member of the returned object to "
"access the full path to the created temporary file."
msgstr ""

# 0aadd69b783c48b6b0564eecbe7c6779
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.temporary_file:6
msgid "The suffix that the temporary file will have."
msgstr ""

# 0bb03a9f1687435da877d5ffbb5eb533
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.Plugin.cli_main:1
msgid ""
"This method is the main entry point for your plugins command line interface."
" It is called when the user does: calibre-debug -r \"Plugin Name\". Any "
"arguments passed are present in the args variable."
msgstr ""

# ad38add9b76c4e63af56f320b3495500
#: ../../plugins.rst:30
msgid "FileTypePlugin"
msgstr ""

# bcff0d70f938410590473ca77e526142
# b04daccb398c42b1af6ebb7463ef352b
# ffcb85fb364840cf8d09c2ff3207522d
# 89b391516975430fb161a984675ef0a3
# badf634525f84ec3bc964f8fdc861d90
# bfe8ba7493df4482ab8bd9fd725b5a66
# 070dc2c1a55145608a27a4dbe718ad38
# c878c0fe65d5459585379c9b02b167ed
# 84b8a94a2d724d58a7a7ff184011de01
# fdbb2a324f6a4f8cb1326310f43b5bbc
# bca0061b05cd48ccb0afcefb55b6cc63
#: ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1
#: ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1
#: ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

# 875b657aace9431ab8c84e074c35a491
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin:1
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

# 7b46e871daa84f5daeabbc71d7955db9
# 82e318b33dfc4dd1835298b29a1bc393
# 3fdf0e8ae86d4356b9baf20c849e9ff8
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.file_types:1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run For example: "
"``set(['lit', 'mobi', 'prc'])``"
msgstr ""

# be5ce03d0da243748a0d9ca5f35c4870
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_import:1
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

# d6be55a11f3f4f9a84bc917492664408
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_postimport:1
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

# 4d1b559034bb43efb224d8f9843659eb
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_preprocess:1
msgid "If True, this plugin is run just before a conversion"
msgstr ""

# a44020ce61654400a75429f7dd654f2d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.on_postprocess:1
msgid ""
"If True, this plugin is run after conversion on the final file produced by "
"the conversion output plugin."
msgstr ""

# 0cdb63e41f8347b3baabdc1b35df940c
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should perform "
"whatever modifications are required on the ebook and return the absolute "
"path to the modified ebook. If no modifications are needed, it should return"
" the path to the original ebook. If an error is encountered it should raise "
"an Exception. The default implementation simply return the path to the "
"original ebook."
msgstr ""

# 02f69ae781804c1f9d2195c5140c8350
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:9
msgid ""
"The modified ebook file should be created with the :meth:`temporary_file` "
"method."
msgstr ""

# 48e0485b52e94ce4898ade2364c9c2a4
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:12
msgid "Absolute path to the ebook."
msgstr ""

# c1d856274e63496f8b656bb807420819
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.run:14
msgid "Absolute path to the modified ebook."
msgstr ""

# bab7c7aa77684cb4af70ec498a0976b0
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:1
msgid ""
"Called post import, i.e., after the book file has been added to the "
"database."
msgstr ""

# ff82f7c4db374081b5f2a04371aa89a0
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:3
msgid "Database id of the added book."
msgstr ""

# adf987551074460e8242b296618128ae
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.FileTypePlugin.postimport:4
msgid "The file type of the book that was added. :param db: Library database."
msgstr ""

# fea64160fd974d88a62c2bbd7d431fef
#: ../../plugins.rst:41
msgid "Metadata plugins"
msgstr ""

# ad8689a11f0d4efc98638e30bcb0b281
# 576fcc31bfd644c79f0e07e7e448c465
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin:1
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin:1
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

# 9995e98145294a8789b9fa6e165ec67e
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataReaderPlugin.get_metadata:1
msgid ""
"Return metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data. :param type: The type of file. Guaranteed to be one of the entries in "
":attr:`file_types`. :return: A "
":class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

# 138bffc2c81a4cb08dbbf166c665deb8
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.MetadataWriterPlugin.set_metadata:1
msgid ""
"Set metadata for the file represented by stream (a file like object that "
"supports reading). Raise an exception when there is an error with the input "
"data. :param type: The type of file. Guaranteed to be one of the entries in "
":attr:`file_types`. :param mi: A "
":class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

# 826a909f5c3148c6b0cf4d15fbeb85fd
#: ../../plugins.rst:56
msgid "Catalog plugins"
msgstr ""

# 566f164588874414b0eed65721c42f90
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin:1
msgid "A plugin that implements a catalog generator."
msgstr ""

# 2c0ef0d642a64c66a3c4b32370c4f58b
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.file_types:1
msgid ""
"Output file type for which this plugin should be run For example: 'epub' or "
"'xml'"
msgstr ""

# 276ece3579454d1fa5073e6d16a2a7c2
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.cli_options:1
msgid ""
"CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

# 9fe9bffad8f7492393f6e0fefc227463
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.initialize:1
msgid ""
"If plugin is not a built-in, copy the plugin's .ui and .py files from the "
"zip file to $TMPDIR. Tab will be dynamically generated and added to the "
"Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

# 44b213bc1e124448a71386d53178b116
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:1
msgid ""
"Run the plugin. Must be implemented in subclasses. It should generate the "
"catalog in the format specified in file_types, returning the absolute path "
"to the generated catalog file. If an error is encountered it should raise an"
" Exception."
msgstr ""

# 5a462ac5a71f45b58a7e45cc316b3240
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:7
msgid ""
"The generated catalog file should be created with the :meth:`temporary_file`"
" method."
msgstr ""

# b1942c813e034daf8e598ffdfaa4a7c0
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:10
msgid "Absolute path to the generated catalog file."
msgstr ""

# fb9c3bc6709b49c58bb53d44769a72e0
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:11
msgid "A dictionary of keyword arguments"
msgstr ""

# 21ba5ecab3b949839e0667a6bc976a83
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.CatalogPlugin.run:12
msgid "A LibraryDatabase2 object"
msgstr ""

# bdb463721e5a42bfb209603031bfff3b
#: ../../plugins.rst:66
msgid "Metadata download plugins"
msgstr ""

# 20279f59cef64aaa8ecb479c6fce4216
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.capabilities:1
msgid ""
"Set of capabilities supported by this plugin. Useful capabilities are: "
"'identify', 'cover'"
msgstr ""

# 6f09a4b0516e432e906230e00356e59d
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.touched_fields:1
msgid ""
"List of metadata fields that can potentially be download by this plugin "
"during the identify phase"
msgstr ""

# 87cfe5fb1bea440796589591cf966414
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

# 0fc46e49f9584148921de29aa53262b6
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
msgid ""
"Setting this to True means that the browser object will add Accept-Encoding:"
" gzip to all requests. This can speedup downloads but make sure that the "
"source actually supports gzip transfer encoding correctly first"
msgstr ""

# ae6d442c4d5748448cc3c8b526c06715
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
msgid ""
"Cached cover URLs can sometimes be unreliable (i.e. the download could fail "
"or the returned image could be bogus. If that is often the case with this "
"source set to False"
msgstr ""

# c6eb2ee6408b468cb8b44d08a1f84cf1
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.options:1
msgid ""
"A list of :class:`Option` objects. They will be used to automatically "
"construct the configuration widget for this plugin"
msgstr ""

# 95bc9b62da81402898290dab464221ff
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.config_help_message:1
msgid ""
"A string that is displayed at the top of the config widget for this plugin"
msgstr ""

# c6b9669864f2410299b86f02f1eb45c8
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
msgid "If True this source can return multiple covers for a given query"
msgstr ""

# 20e3a9cdc3234570b1f1d9014e570f63
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
msgid ""
"If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

# c854b59e9d36453186fc97cb1cb7fb4f
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.is_configured:1
msgid ""
"Return False if your plugin needs to be configured before it can be used. "
"For example, it might need a username/password/API key."
msgstr ""

# aab2d93c4a89400eb0c84353f445ed34
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
msgid ""
"Take a list of authors and return a list of tokens useful for an AND search "
"query. This function tries to return tokens in first name middle names last "
"name order, by assuming that if a comma is in the author name, the name is "
"in lastname, other names form."
msgstr ""

# 382ed8824ac5460aba3bf8fcf07a3027
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
msgid ""
"Take a title and return a list of tokens useful for an AND search query. "
"Excludes connectives(optionally) and punctuation."
msgstr ""

# de7acf69b9ac436d92a6967eced5e460
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.split_jobs:1
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

# 04e6dd8dd8e147a9b6dd92bbf4eebea9
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.test_fields:1
msgid ""
"Return the first field from self.touched_fields that is null on the mi "
"object"
msgstr ""

# 596e79953e18489eab677af6a2b848c6
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
msgid ""
"Call this method in your plugin's identify method to normalize metadata "
"before putting the Metadata object into result_queue. You can of course, use"
" a custom algorithm suited to your metadata source."
msgstr ""

# cd9c6646d7cd429e91c664053e396078
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_book_url:1
msgid ""
"Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, "
"identifier_value, URL). The URL is the URL for the book identified by "
"identifiers at this source. identifier_type, identifier_value specify the "
"identifier corresponding to the URL. This URL must be browseable to by a "
"human using a browser. It is meant to provide a clickable link for the user "
"to easily visit the books page at this source. If no URL is found, return "
"None. This method must be quick, and consistent, so only implement it if it "
"is possible to construct the URL from a known scheme given identifiers."
msgstr ""

# 39d552d486e5438495746e95fb69759e
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

# ad5564da2e694609a46360476ab68f71
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
msgid ""
"Return cached cover URL for the book identified by the identifiers dict or "
"None if no such URL exists."
msgstr ""

# b4165ef29c2240d9ac5b75229446322d
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
msgid ""
"Note that this method must only return validated URLs, i.e. not URLS that "
"could result in a generic cover image or a not found error."
msgstr ""

# 86d48803832a4c69a417c8e851856e54
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
msgid ""
"Return a function that is used to generate a key that can sort Metadata "
"objects by their relevance given a search query (title, authors, "
"identifiers)."
msgstr ""

# dd0f4fd2ef3241fcbeb0024344769938
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

# e41d623db00341d79be9cc0db7dcf305
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
msgid ""
"For details on the default algorithm see "
":class:`InternalMetadataCompareKeyGen`. Re-implement this function in your "
"plugin if the default algorithm is not suitable."
msgstr ""

# 8e0394f6475d4105a40ec2c1e8d4104c
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:1
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

# 67ea5369ff81435e8758cfca0f1dbd2f
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:3
msgid ""
"If identifiers(s) are specified and no match is found and this metadata "
"source does not store all related identifiers (for example, all ISBNs of a "
"book), this method should retry with just the title and author (assuming "
"they were specified)."
msgstr ""

# e117fc3f5b934e7bb6afe1f008eb2571
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:8
msgid ""
"If this metadata source also provides covers, the URL to the cover should be"
" cached so that a subsequent call to the get covers API with the same "
"ISBN/special identifier does not need to get the cover URL again. Use the "
"caching API for this."
msgstr ""

# b8846da815234014843cdcef8d2c066d
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:13
msgid ""
"Every Metadata object put into result_queue by this method must have a "
"`source_relevance` attribute that is an integer indicating the order in "
"which the results were returned by the metadata source for this query. This "
"integer will be used by :meth:`compare_identify_results`. If the order is "
"unimportant, set it to zero for every result."
msgstr ""

# 7b50a5c27a44426ba7a1b32f89564d21
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:19
msgid ""
"Make sure that any cover/isbn mapping information is cached before the "
"Metadata object is put into result_queue."
msgstr ""

# ee3706e4ffbb45178a50777b2b1ad8be
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:22
msgid "A log object, use it to output debugging information/errors"
msgstr ""

# c4efbdd0845c4ae9b24918cba231c39a
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:23
msgid ""
"A result Queue, results should be put into it. Each result is a Metadata "
"object"
msgstr ""

# 434d83a937bc423caf3039471e7a6cfd
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:25
msgid ""
"If abort.is_set() returns True, abort further processing and return as soon "
"as possible"
msgstr ""

# ece2536cbbde4be9b187036fb6ee15f4
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:27
msgid "The title of the book, can be None"
msgstr ""

# 1b8f591cf31c4f0b99ba73955274c9a9
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:28
msgid "A list of authors of the book, can be None"
msgstr ""

# 4810ac576e214d229fb9ab6f4034efd1
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:29
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

# 27e751f0f4c74fc396947e452172aa1d
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:31
msgid ""
"Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

# 9c2025e17f7147989903491debd6f408
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.identify:33
msgid ""
"None if no errors occurred, otherwise a unicode representation of the error "
"suitable for showing to the user"
msgstr ""

# d4ca893c9fd541d3ba167c5935ce78b6
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.download_cover:1
msgid ""
"Download a cover and put it into result_queue. The parameters all have the "
"same meaning as for :meth:`identify`. Put (self, cover_data) into "
"result_queue."
msgstr ""

# 25ccc25fffdb44e0b21ede1682dff979
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.download_cover:5
msgid ""
"This method should use cached cover URLs for efficiency whenever possible. "
"When cached data is not present, most plugins simply call identify and use "
"its results."
msgstr ""

# 1ffe1b1b5cb943e4bbcdefcf4ba9820c
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.Source.download_cover:9
msgid ""
"If the parameter get_best_cover is True and this plugin can get multiple "
"covers, it should only get the \"best\" one."
msgstr ""

# cd1a21fc5a7d4f159dd9551506c7958b
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
msgid ""
"Generate a sort key for comparison of the relevance of Metadata objects, "
"given a search query. This is used only to compare results from the same "
"metadata source, not across different sources."
msgstr ""

# 462fa4ea2db24d13847feb4a877414f4
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
msgid ""
"The sort key ensures that an ascending order sort is a sort by order of "
"decreasing relevance."
msgstr ""

# d703fde8d78843b29231170027ba49f9
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
msgid "The algorithm is:"
msgstr ""

# 67c534328924446b9625932c54358bcc
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
msgid "Prefer results that have the same ISBN as specified in the query"
msgstr ""

# 1ae274709f404e6fb9691dff8a9e17e5
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
msgid "Prefer results with a cached cover URL"
msgstr ""

# df2312dcddfd4d53a0216008cd011d7f
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
msgid "Prefer results with all available fields filled in"
msgstr ""

# b97d2e303cb34c09a61fca348c473f1e
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
msgid "Prefer results that are an exact title match to the query"
msgstr ""

# 14f84f6799454c04a75f9160015caff2
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

# ae694aba21a04dc48b0106c92c1b0e7c
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
msgid ""
"Use the relevance of the result as reported by the metadata source's search"
msgstr ""

# 67c76dc8a8944dca99ec54588a8c141a
#: ../../../src/calibre/ebooks/metadata/sources/base.pydocstring of
#: calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
msgid "engine"
msgstr ""

# 156818f6ab904d12a25db8d6d25016bd
#: ../../plugins.rst:78
msgid "Conversion plugins"
msgstr ""

# 0220503edde14430a481171d2d3c824c
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin:1
msgid ""
"InputFormatPlugins are responsible for converting a document into "
"HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. "
"The main action happens in :meth:`convert`."
msgstr ""

# 40a4f60990f84e49afbb862c60271584
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.file_types:1
msgid ""
"Set of file types for which this plugin should be run For example: "
"``set(['azw', 'mobi', 'prc'])``"
msgstr ""

# 16eed4a16d054209931fa9e7d4965f26
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
msgid ""
"If True, this input plugin generates a collection of images, one per HTML "
"file. This can be set dynamically, in the convert method if the input files "
"can be both image collections and non-image collections. If you set this to "
"True, you must implement the get_images() method that returns a list of "
"images."
msgstr ""

# 20b649e35bd4452bb30f6e0a20c63083
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.core_usage:1
msgid ""
"Number of CPU cores used by this plugin A value of -1 means that it uses all"
" available cores"
msgstr ""

# 89ea537ba02b415d85245c437040fdc7
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.for_viewer:1
msgid ""
"If set to True, the input plugin will perform special processing to make its"
" output suitable for viewing"
msgstr ""

# 69f8ae710d09403d8d2635e9c0c419c2
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.output_encoding:1
msgid ""
"The encoding that this input plugin creates files in. A value of None means "
"that the encoding is undefined and must be detected individually"
msgstr ""

# fd1afd07a781422d9afdb9ac03cad262
# 0e7a5e8736f94a8ea3cef120beb87ddd
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.common_options:1
msgid ""
"Options shared by all Input format plugins. Do not override in sub-classes. "
"Use :attr:`options` instead. Every option must be an instance of "
":class:`OptionRecommendation`."
msgstr ""

# e5a09ad2328d44cea31da77f327460c6
# 430a586b52804cabbdf4d03e3b21da2d
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.options:1
msgid ""
"Options to customize the behavior of this plugin. Every option must be an "
"instance of :class:`OptionRecommendation`."
msgstr ""

# 36390b3ddddf4785a841f91d75c27840
# 9936ed8bb9964e60b7f65c1ea93f4e3d
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.recommendations:1
msgid ""
"A set of 3-tuples of the form (option_name, recommended_value, "
"recommendation_level)"
msgstr ""

# 9f8757a1fdb248bdb1d56e9e21dba6d9
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.get_images:1
msgid ""
"Return a list of absolute paths to the images, if this input plugin "
"represents an image collection. The list of images is in the same order as "
"the spine and the TOC."
msgstr ""

# 265a96aa04ae42be8006ac5794c45a60
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:1
msgid ""
"This method must be implemented in sub-classes. It must return the path to "
"the created OPF file or an :class:`OEBBook` instance. All output should be "
"contained in the current directory. If this plugin creates files outside the"
" current directory they must be deleted/marked for deletion before this "
"method returns."
msgstr ""

# e0865b05f4e1446a9b2337c777f4682a
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:8
msgid "A file like object that contains the input file."
msgstr ""

# ec607ed6efc545d894d10c52deabcc5c
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:9
msgid ""
"Options to customize the conversion process. Guaranteed to have attributes "
"corresponding to all the options declared by this plugin. In addition, it "
"will have a verbose attribute that takes integral values from zero upwards. "
"Higher numbers mean be more verbose. Another useful attribute is "
"``input_profile`` that is an instance of "
":class:`calibre.customize.profiles.InputProfile`."
msgstr ""

# b69102db20154eeca8623acc837404e9
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:17
msgid ""
"The extension (without the .) of the input file. It is guaranteed to be one "
"of the `file_types` supported by this plugin."
msgstr ""

# bfd44701a3de4be89fad132a6810a08f
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:20
msgid ""
"A :class:`calibre.utils.logging.Log` object. All output should use this "
"object."
msgstr ""

# d1eab4b0cc934da488f56edb9d0503f6
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.convert:22
msgid ""
"A dictionary of various information that the input plugin can get easily "
"that would speed up the subsequent stages of the conversion."
msgstr ""

# 50ae3371612547948dda8c63a02dc940
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
msgid ""
"Called to allow the input plugin to perform postprocessing after the book "
"has been parsed."
msgstr ""

# e588dc7450924da4aa40395aee29eedf
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.specialize:1
msgid ""
"Called to allow the input plugin to specialize the parsed book for a "
"particular output format. Called after postprocess_book and before any "
"transforms are performed on the parsed book."
msgstr ""

# b6ef4b5f8e3f4153a60802af68f671a9
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builting input plugins for examples."
msgstr ""

# 0b1f29ccca694c67a6b33ffd14fbbbdd
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:1
msgid ""
"OutputFormatPlugins are responsible for converting an OEB document "
"(OPF+HTML) into an output ebook."
msgstr ""

# 591cd7c2504b444ab4fb50c657446943
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin:4
msgid ""
"The OEB document can be assumed to be encoded in UTF-8. The main action "
"happens in :meth:`convert`."
msgstr ""

# 4d9e4a01d516439e9681010768314380
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.file_type:1
msgid ""
"The file type (extension without leading period) that this plugin outputs"
msgstr ""

# bfe58c23296e4d2ab30ec2e729b2615a
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:1
msgid ""
"Render the contents of `oeb_book` (which is an instance of "
":class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

# 53aaee812fce47ae9de3108a5e603a6e
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:4
msgid ""
"Either a file like object or a string. If it is a string it is the path to a"
" directory that may or may not exist. The output plugin should write its "
"output into that directory. If it is a file like object, the output plugin "
"should write its output into the file."
msgstr ""

# c915483fa5394e8aa483fba5782be8db
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:8
msgid ""
"The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

# 774cd1d7556543048f3ef32c15a2356f
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:10
msgid ""
"Conversion options. Guaranteed to have attributes corresponding to the "
"OptionRecommendations of this plugin."
msgstr ""

# 113899f162144ac9b3a498b4d734b07f
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.convert:12
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

# 3d9522f9459f4969b6404c0b6c474fa7
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
msgid ""
"Can be used to make changes to the css during the CSS flattening process."
msgstr ""

# 8b019c5f07ae41a69ce9547d1d0333ae
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
msgid "The item (HTML file) being processed"
msgstr ""

# 29ecee95219d43429e87421085bf5f43
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
msgid ""
"A Stylizer object containing the flattened styles for item. You can get the "
"style for any element by stylizer.style(element)."
msgstr ""

# 698f8b6c6dd94e45ac59d2b45d373a33
#: ../../../src/calibre/customize/conversion.pydocstring of
#: calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
msgid ""
"Called to create the widget used for configuring this plugin in the calibre "
"GUI. The widget must be an instance of the PluginWidget class. See the "
"builtin output plugins for examples."
msgstr ""

# 9bd3f7b3932d488d81856b63f3c1ad40
#: ../../plugins.rst:93
msgid "Device Drivers"
msgstr ""

# 05478eddf66043a7bd8998843bb76204
#: ../../plugins.rst:97
msgid ""
"The base class for all device drivers is :class:`DevicePlugin`. However, if "
"your device exposes itself as a USBMS drive to the operating system, you "
"should use the USBMS class instead as it implements all the logic needed to "
"support these kinds of devices."
msgstr ""

# 648b3b08b2ec4577927d9aa646d9a747
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin:1
msgid ""
"Defines the interface that should be implemented by backends that "
"communicate with an ebook reader."
msgstr ""

# c130ece50c2b404bb00a8a92faca0204
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.FORMATS:1
msgid "Ordered list of supported formats"
msgstr ""

# 245b5c62981d4406826514d99aaf5032
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.VENDOR_ID:1
msgid ""
"VENDOR_ID can be either an integer, a list of integers or a dictionary If it"
" is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

# 80dfb766e6c44f2b9bc8e185692da1f0
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
msgid "An integer or a list of integers"
msgstr ""

# 99259fa124c54ebcb6b1627a50a7f3f8
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.BCD:1
msgid ""
"BCD can be either None to not distinguish between devices based on BCD, or "
"it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

# b995487cb3774166ab545a91e2f010cb
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
msgid "Height for thumbnails on the device"
msgstr ""

# a458c0cebffb4bbda183c3c2951f6422
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
msgid ""
"Width for thumbnails on the device. Setting this will force thumbnails to "
"this size, not preserving aspect ratio. If it is not set, then the aspect "
"ratio will be preserved and the thumbnail will be no higher than "
"THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 "
"to have better quality thumbnails with fewer compression artifacts. Of "
"course, the thumbnails get larger as well."
msgstr ""

# 540d64f2637942c4974ebdc08d241f94
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
msgid ""
"Set this to True if the device supports updating cover thumbnails during "
"sync_booklists. Setting it to true will ask device.py to refresh the cover "
"thumbnails during book matching"
msgstr ""

# 680f628216e54870b4f5580b2c51c35c
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

# d3f22c9db77c473dbb0b8da6b141883a
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

# dd4ec43a30f047169813e772fd8e2bf8
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.path_sep:1
msgid "Path separator for paths to books on device"
msgstr ""

# cdfb347c35da48dfa30f2cfdae4726f6
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.icon:1
msgid "Icon for this device"
msgstr ""

# 791c5ac9ccf447f7b586fc7f25c6f477
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
msgid ""
"GUI displays this as a message if not None. Useful if opening can take a "
"long time"
msgstr ""

# b38fbc4ab77b4f48b9296c1605675e84
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
msgid ""
"Set of extensions that are \"virtual books\" on the device and therefore "
"cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

# 86eb64418fb849b39fb8d4427f665a14
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
msgid ""
"Whether to nuke comments in the copy of the book sent to the device. If not "
"None this should be short string that the comments will be replaced by."
msgstr ""

# dde97bcea74344569180628a5ca8ed67
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
msgid ""
"If True indicates that  this driver completely manages device detection, "
"ejecting and so forth. If you set this to True, you *must* implement the "
"detect_managed_devices and debug_managed_device_detection methods. A driver "
"with this set to true is responsible for detection of devices, managing a "
"blacklist of devices, a list of ejected devices and so forth. calibre will "
"periodically call the detect_managed_devices() method and is it returns a "
"detected device, calibre will call open(). open() will be called every time "
"a device is returned even is previous calls to open() failed, therefore the "
"driver must maintain its own blacklist of failed devices. Similarly, when "
"ejecting, calibre will call eject() and then assuming the next call to "
"detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

# 91651b889b4644fa89115d192b254f37
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
msgid ""
"If set the True, calibre will call the :meth:`get_driveinfo()` method after "
"the books lists have been loaded to get the driveinfo."
msgstr ""

# d65dec6b405f4f599bcff41f9c0850f3
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
msgid ""
"If set to True, calibre will ask the user if they want to manage the device "
"with calibre, the first time it is detected. If you set this to True you "
"must implement :meth:`get_device_uid()` and "
":meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` "
"and :meth:`set_user_blacklisted_devices`"
msgstr ""

# 2db582cb4156404a971664a429c02e4e
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
msgid ""
"Set this to a dictionary of the form {'title':title, 'msg':msg, "
"'det_msg':detailed_msg} to have calibre popup a message to the user after "
"some callbacks are run (currently only upload_books). Be careful to not spam"
" the user with too many messages. This variable is checked after *every* "
"callback, so only set it when you really need to."
msgstr ""

# f7eb72e99fab41ff9fe1405f3dc0edc1
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:1
msgid ""
"Return True, device_info if a device handled by this plugin is currently "
"connected."
msgstr ""

# 7a8472cfe0ea40cdae550bac6aedf4f1
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_usb_connected:3
msgid "List of devices currently connected"
msgstr ""

# 13a8e58f669a4bd59d3fbe0b9c22e018
# 2eaaa6e5130b4291b2a8c86d4ca14eec
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

# acd9ff43040e4b4d87e6c873e2aba090
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:3
msgid ""
"Scan for devices that this driver can handle. Should return a device object "
"if a device is found. This object will be passed to the open() method as the"
" connected_device. If no device is found, return None. The returned object "
"can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

# ce5e33169e9e47c19e078d6d6161241b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:9
msgid ""
"This method is called periodically by the GUI, so make sure it is not too "
"resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

# 3f567906b49d4126875757634b75b9d4
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:13
msgid "Set of USB devices found on the system."
msgstr ""

# 5807e7691af9456191d7388c87719724
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.detect_managed_devices:15
msgid ""
"If True and the driver uses a cache to prevent repeated scanning, the cache "
"must be flushed."
msgstr ""

# fd364abe24424db18eaecba2a28cd7b6
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
msgid ""
"Should write information about the devices detected on the system to output,"
" which is a file like object."
msgstr ""

# a4b2ec40031442cd8f10b26ccd117744
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
msgid ""
"Should return True if a device was detected and successfully opened, "
"otherwise False."
msgstr ""

# aea10b98fb354c15b45e455890a580ad
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:1
msgid "The key to unlock the device"
msgstr ""

# 7de5736167bb4a41bdb7ab415b8a43de
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:2
msgid "If true the packet stream to/from the device is logged"
msgstr ""

# 9f31a4fc390c49bd92490fba12e095bd
# 6128735a16c54bf6beb39021dd1f995a
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:3
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:3
msgid ""
"Function that is called with a % progress (number between 0 and 100) for "
"various tasks If it is called with -1 that means that the task does not have"
" any progress information"
msgstr ""

# 7e1de55c6f174510b734ac76affd2e4e
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.reset:7
msgid "Device information from the device scanner"
msgstr ""

# 8db1ff83d0ce4b10aeb4317cba9856ee
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:1
msgid ""
"Optional method to perform further checks on a device to see if this driver "
"is capable of handling it. If it is not it should return False. This method "
"is only called after the vendor, product ids and the bcd have matched, so it"
" can do some relatively time intensive checks. The default implementation "
"returns True. This method is called only on windows. See also "
":meth:`can_handle`."
msgstr ""

# 9a80e9dd0b014aa1bd21a05cdf323b29
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle_windows:8
msgid ""
"On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, "
"bcd)``."
msgstr ""

# 311878b6f07741e4b057c12680f63a74
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:1
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

# cbf619ef9cbf4ce2b16c0c3d008c1f42
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.can_handle:3
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

# 79852613fae845a0944a2cf3a7451b65
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:1
msgid ""
"Perform any device specific initialization. Called after the device is "
"detected but before any other functions that communicate with the device. "
"For example: For devices that present themselves as USB Mass storage "
"devices, this method would be responsible for mounting the device or if the "
"device has been automounted, for finding out where it has been mounted. The "
"method :meth:`calibre.devices.usbms.device.Device.open` has an "
"implementation of this function that should serve as a good example for USB "
"Mass storage devices."
msgstr ""

# fa9f963b214f4fdbac020c761d91d5db
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:11
msgid ""
"This method can raise an OpenFeedback exception to display a message to the "
"user."
msgstr ""

# 48c3f051f34f419982fbd2dc1c50ca1b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:14
msgid ""
"The device that we are trying to open. It is a tuple of (vendor id, product "
"id, bcd, manufacturer name, product name, device serial number). However, "
"some devices have no serial number and on windows only the first three "
"fields are present, the rest are None."
msgstr ""

# d778fa3e54d043f9b5b1e5a13c95dead
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.open:20
msgid ""
"The UUID of the current calibre library. Can be None if there is no library "
"(for example when used from the command line)."
msgstr ""

# b362ebce5dcc468da8b83a07c8b4b502
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:1
msgid ""
"Un-mount / eject the device from the OS. This does not check if there are "
"pending GUI jobs that need to communicate with the device."
msgstr ""

# 897aa7e88d574fb681bc72ad2358c7ef
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.eject:4
msgid ""
"NOTE: That this method may not be called on the same thread as the rest of "
"the device methods."
msgstr ""

# e5509686f0504592a11f468d4f04bc64
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

# 1c3f22dba25b467ea9cbd8e3da01ac59
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_progress_reporter:1
msgid "Set a function to report progress information."
msgstr ""

# 2dc74701f715423aac70eb08a147c254
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:1
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

# f78da3e5299449c09b77480e92b85149
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_information:3
msgid ""
"(device name, device version, software version on device, mime type) The "
"tuple can optionally have a fifth element, which is a drive information "
"dictionary. See usbms.driver for an example."
msgstr ""

# aa755e75ec1544dd9b911a136b344b57
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_driveinfo:1
msgid ""
"Return the driveinfo dictionary. Usually called from "
"get_device_information(), but if loading the driveinfo is slow for this "
"driver, then it should set SLOW_DRIVEINFO. In this case, this method will be"
" called by calibre after the book lists have been loaded. Note that it is "
"not called on the device thread, so the driver should cache the drive info "
"in the books() method and this function should return the cached data."
msgstr ""

# 01da405d79b54cf4a70e0740cac2bec0
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.card_prefix:1
msgid ""
"Return a 2 element list of the prefix to paths on the cards. If no card is "
"present None is set for the card's prefix. E.G. ('/place', '/place2') (None,"
" 'place2') ('place', None) (None, None)"
msgstr ""

# bb058472c1174ba1a5f4b2fb3fb4d9a3
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
msgid "Get total space available on the mountpoints:"
msgstr ""

# dea23fd52172428eaa978a698cc30a9e
# 942aa8c49fd1417888bf577adc799a60
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:2
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:2
msgid "Main memory"
msgstr ""

# ca9c1bb4e2e5472a87ffd5d74b230808
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:3
msgid "Memory Card A"
msgstr ""

# 58af88b3d7af47179a6166c0d885ab52
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:4
msgid "Memory Card B"
msgstr ""

# 0777f565bfdd478496c0385088b51ff8
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.total_space:6
msgid ""
"A 3 element list with total space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return 0."
msgstr ""

# a48d3b776abf4f01a06c6e84fcea1f27
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
msgid "Get free space available on the mountpoints:"
msgstr ""

# 49b4b11deef048c58462afa33a673749
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:3
msgid "Card A"
msgstr ""

# bb813c62b59141bc80e6d65af4caa236
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:4
msgid "Card B"
msgstr ""

# 840c7b79b19243179f08f2786d5548b9
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.free_space:6
msgid ""
"A 3 element list with free space in bytes of (1, 2, 3). If a particular "
"device doesn't have any of these locations it should return -1."
msgstr ""

# 4cc1563b7b5c4d12b1a530f24b2b06a6
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:1
msgid "Return a list of ebooks on the device."
msgstr ""

# 55ea4a5760c24aa2ac3a0b8ea51106ad
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:3
msgid ""
"If 'carda' or 'cardb' return a list of ebooks on the specific storage card, "
"otherwise return list of ebooks in main memory of device. If a card is "
"specified and no books are on the card return empty list."
msgstr ""

# f995c1c956514662bcae100ae9a5d20b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.books:8
msgid "A BookList."
msgstr ""

# 1e284eef7bb54ddbbb9519e6b5ec2534
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:1
msgid ""
"Upload a list of books to the device. If a file already exists on the "
"device, it should be replaced. This method should raise a "
":class:`FreeSpaceError` if there is not enough free space on the device. The"
" text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is"
" not None otherwise it must contain the word \"memory\"."
msgstr ""

# 1575fc1416014902b76d99da3d68e17c
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:7
msgid "A list of paths"
msgstr ""

# c6c2f2d9d9674d7aac679665a07e8353
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:8
msgid ""
"A list of file names that the books should have once uploaded to the device."
" len(names) == len(files)"
msgstr ""

# d45f2aa074b142269c8d766f4b4156d9
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:10
msgid ""
"If not None, it is a list of :class:`Metadata` objects. The idea is to use "
"the metadata to determine where on the device to put the book. len(metadata)"
" == len(files). Apart from the regular cover (path to cover), there may also"
" be a thumbnail attribute, which should be used in preference. The thumbnail"
" attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

# cfee890a21544ec78ca61d2120e33c47
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.upload_books:17
msgid ""
"A list of 3-element tuples. The list is meant to be passed to "
":meth:`add_books_to_metadata`."
msgstr ""

# 193f0e2905d44a4c86c598a33ddaf943
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
msgid ""
"Add locations to the booklists. This function must not communicate with the "
"device."
msgstr ""

# 4baa640f2c8a498d9ff7dbddb9eb08f1
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
msgid "Result of a call to L{upload_books}"
msgstr ""

# f441ba6bd2b14bfb97801717614755b1
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

# 526b8ec4c7404276a3d5e8cfd0974454
# 2ee4e490146248728c919d2750d9f0e9
# 34e5ff9cc92c4d4aa380633d877a072d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:3
msgid ""
"A tuple containing the result of calls to (:meth:`books(oncard=None)`, "
":meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

# 6fcf832e558146df913d724d495c91a6
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.delete_books:1
msgid "Delete books at paths on device."
msgstr ""

# 2e15c6d246334655b6b20b8524f5b6ed
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
msgid ""
"Remove books from the metadata list. This function must not communicate with"
" the device."
msgstr ""

# 2796e090bfed47baa8a40de4c0b760df
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
msgid "paths to books on the device."
msgstr ""

# 840e0351cb4e442d84f1451d30b0b31a
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.sync_booklists:1
msgid "Update metadata on device."
msgstr ""

# a5e7aec64f62484ca13af1c4864c883b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:1
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

# 233c745ffe11413eb4f97cc8b99ffecd
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_file:3
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

# a5de31211dee4c5ebeee8375e7786bb4
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.config_widget:1
msgid ""
"Should return a QWidget. The QWidget contains the settings for the device "
"interface"
msgstr ""

# 0e7ea439f22e41298cdf406f5a5849ea
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.save_settings:1
msgid ""
"Should save settings to disk. Takes the widget created in "
":meth:`config_widget` and saves all settings to disk."
msgstr ""

# 702be65049124bada0df2862281c1528
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.settings:1
msgid ""
"Should return an opts object. The opts object should have at least one "
"attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

# e6f351066d5249b584cdcfc455de3280
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:1
msgid ""
"provide the driver the current set of plugboards and a function to select a "
"specific plugboard. This method is called immediately before add_books and "
"sync_booklists."
msgstr ""

# 7e490db0d2d245e093527dab75488d3b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "pb_func is a callable with the following signature::"
msgstr ""

# 23f2ff6520e74e21b358e2312ed9e818
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:6
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

# 2e03494c86574ec6b4940e47cca8b69d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:8
msgid ""
"You give it the current device name (either the class name or "
"DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or"
" 'device_db'), and the plugboards (you were given those by set_plugboards, "
"the same place you got this method)."
msgstr ""

# 026ebfec772140abb109e538eafc74e4
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_plugboards:13
msgid "None or a single plugboard instance."
msgstr ""

# b8aa32dba0234f368fa67be0ed7785bc
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
msgid ""
"Set the device name in the driveinfo file to 'name'. This setting will "
"persist until the file is re-created or the name is changed again."
msgstr ""

# 801e7b5b2f104b9e9edc7c1896bbefe9
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
msgid ""
"Non-disk devices should implement this method based on the location codes "
"returned by the get_device_information() method."
msgstr ""

# 7362ffec2483456e924d823bcc383f2f
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:1
msgid ""
"Given a list of paths, returns another list of paths. These paths point to "
"addable versions of the books."
msgstr ""

# 951b9bf1cd5e46f2b2fb5034b6e76334
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.prepare_addable_books:4
msgid ""
"If there is an error preparing a book, then instead of a path, the position "
"in the returned list for that book should be a three tuple: (original_path, "
"the exception instance, traceback)"
msgstr ""

# 86b209ed4eee43ff82a05f3324574e29
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.startup:1
msgid ""
"Called when calibre is is starting the device. Do any initialization "
"required. Note that multiple instances of the class can be instantiated, and"
" thus __init__ can be called multiple times, but only one instance will have"
" this method called. This method is called on the device thread, not the GUI"
" thread."
msgstr ""

# 0fc11e8558a34149b4a49a3c35aee66b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.shutdown:1
msgid ""
"Called when calibre is shutting down, either for good or in preparation to "
"restart. Do any cleanup required. This method is called on the device "
"thread, not the GUI thread."
msgstr ""

# 42eea251476b49cd92eb0eba862f7f1d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_device_uid:1
msgid ""
"Must return a unique id for the currently connected device (this is called "
"immediately after a successful call to open()). You must implement this "
"method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

# 4de610c19749414f80098ed8a9196955
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.ignore_connected_device:1
msgid ""
"Should ignore the device identified by uid (the result of a call to "
"get_device_uid()) in the future. You must implement this method if you set "
"ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately "
"after open(), so if open() caches some state, the driver should reset that "
"state."
msgstr ""

# c9defb46614945ada7b623321a2b1dd3
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
msgid ""
"Return map of device uid to friendly name for all devices that the user has "
"asked to be ignored."
msgstr ""

# 46e219216b8a4e2ca001867c314684be
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

# d1d803cbfd0e4a80ab3446d36d5e7adc
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
msgid ""
"Implement this method if your device wants to override a particular "
"preference. You must ensure that all call sites that want a preference that "
"can be overridden use device_prefs['something'] instead of "
"prefs['something']. Your method should call "
"device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: "
"metadata management (prefs['manage_device_metadata'])"
msgstr ""

# c3c656a2526c465aab12e71bfb41f06a
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
msgid ""
"Called by the device manager when starting plugins. If this method returns a"
" string, then a) it supports the device manager's dynamic control interface,"
" and b) that name is to be used when talking to the plugin."
msgstr ""

# 4d372cec4b544316ac57551d63843139
# e57f3a1dffbc4100b0b899296892b639
# 5da39e20510a493d90085c423493d761
# dfa568a94b964dda81990117444ca0ac
# 83c046060bb844858549205e32b33657
# 0635a085dd7a4d999f7aac51d4ee6111
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:4
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:3
msgid ""
"This method can be called on the GUI thread. A driver that implements this "
"method must be thread safe."
msgstr ""

# 0795a6bdb4544489bfb1c930d39ec254
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.start_plugin:1
msgid ""
"This method is called to start the plugin. The plugin should begin to accept"
" device connections however it does that. If the plugin is already accepting"
" connections, then do nothing."
msgstr ""

# 54036d7ef7f34fcbbe0e2d9cedc41d7b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.stop_plugin:1
msgid ""
"This method is called to stop the plugin. The plugin should no longer accept"
" connections, and should cleanup behind itself. It is likely that this "
"method should call shutdown. If the plugin is already not accepting "
"connections, then do nothing."
msgstr ""

# 4cf56417ed49416eaa0cc988d653a2b5
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.get_option:1
msgid ""
"Return the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started. Return None if the option does not "
"exist."
msgstr ""

# 87888f9222604e6f9d203f8348ca5e81
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.set_option:1
msgid ""
"Set the value of the option indicated by opt_string. This method can be "
"called when the plugin is not started."
msgstr ""

# 67a5977cb28d422297f229a8633f6fbc
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.is_running:1
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

# 5e5e07d11c144136ac8524c9323b5f8b
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:1
msgid ""
"Called during book matching when a book on the device is matched with a book"
" in calibre's db. The method is responsible for syncronizing data from the "
"device to calibre's db (if needed)."
msgstr ""

# 4e68eee536224fe0bc3181a03b8443ee
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:5
msgid ""
"The method must return a set of calibre book ids changed if calibre's "
"database was changed, None if the database was not changed. If the method "
"returns an empty set then the metadata for the book on the device is updated"
" with calibre's metadata and given back to the device, but no GUI refresh of"
" that book is done. This is useful when the calire data is correct but must "
"be sent to the device."
msgstr ""

# 460cc04e469346b681f44c8d1f297f25
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:12
msgid ""
"Extremely important: this method is called on the GUI thread. It must be "
"threadsafe with respect to the device manager's thread."
msgstr ""

# 275a698583b04741a51943eb03e53726
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.DevicePlugin.synchronize_with_db:15
msgid ""
"book_id: the calibre id for the book in the database. book_metadata: the "
"Metadata object for the book coming from the device."
msgstr ""

# e87648694f9a41cf9f392dfd449c7691
#: ../../<autodoc>:1
msgid "Bases: :class:`list`"
msgstr ""

# f8d6c9784da347c4b855111e05b65f31
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:1
msgid "A list of books. Each Book object must have the fields"
msgstr ""

# 2b8dbda90fc240b699aacb9d7914489a
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:3
msgid "title"
msgstr ""

# d5b4ffb55e6b416083be2752ccb450a2
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:4
msgid "authors"
msgstr ""

# fbef15cfa7bc48ba80f87a74a7dfcaf4
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:5
msgid "size (file size of the book)"
msgstr ""

# e9fda1853b8c4492b7095312aeddb07d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:6
msgid "datetime (a UTC time tuple)"
msgstr ""

# cb0e0ecab1204aa682fd1af7ce67e827
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:7
msgid "path (path on the device to the book)"
msgstr ""

# 3a248e5e7f8349b48111240aeb97f97a
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:8
msgid ""
"thumbnail (can be None) thumbnail is either a str/bytes object with the "
"image data or it should have an attribute image_path that stores an absolute"
" (platform native) path to the image"
msgstr ""

# 526891e6dbe54038a418ce99eb945715
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList:11
msgid "tags (a list of strings, can be empty)."
msgstr ""

# e2c917773a4a4c1c8508353f3fafc08d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.supports_collections:1
msgid "Return True if the device supports collections for this book list."
msgstr ""

# 3fec2cc7e7084359a6ad40899d224122
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.add_book:1
msgid ""
"Add the book to the booklist. Intent is to maintain any device-internal "
"metadata. Return True if booklists must be sync'ed"
msgstr ""

# b88fd96661fd4732910487bd2bc305ba
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.remove_book:1
msgid ""
"Remove a book from the booklist. Correct any device metadata at the same "
"time"
msgstr ""

# d31cf564bd20446f962efa48790bd14d
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:1
msgid ""
"Return a dictionary of collections created from collection_attributes. Each "
"entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

# b5a4b84cbd614c8989ef1188f91b0c29
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:5
msgid ""
"The list of books is sorted by book title, except for collections created "
"from series, in which case series_index is used."
msgstr ""

# e8ff77610ff24c558addf5555efdfe74
#: ../../../src/calibre/devices/interface.pydocstring of
#: calibre.devices.interface.BookList.get_collections:8
msgid "A list of attributes of the Book object"
msgstr ""

# ae03d483e7da496f946715cda8a8cca1
#: ../../plugins.rst:111
msgid "USB Mass Storage based devices"
msgstr ""

# 39bedeb762f9451c8f6b7a87c8db3111
#: ../../plugins.rst:113
msgid ""
"The base class for such devices is "
":class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits "
"some of its functionality from its bases, documented below. A typical basic "
"USBMS based driver looks like this:"
msgstr ""

# 1c15ba8b8ee1414f9975fc4fd8149dcd
#: ../../<autodoc>:1
msgid ""
"Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, "
":class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

# 99a6ecd7022e4debb3924ab0cae1eb1a
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device:1
msgid ""
"This class provides logic common to all drivers for devices that export "
"themselves as USB Mass Storage devices. Provides implementations for "
"mounting/ejecting of USBMS devices on all platforms."
msgstr ""

# 3941f09aa4e546a29b0e4ebb06d5f40a
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
msgid ""
"String identifying the main memory of the device in the windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr ""

# f2ee71778ac4481d9f3f0b9b55c3f7ed
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
msgid ""
"String identifying the first card of the device in the windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr ""

# 1550f9052da140b9abd25f27e6c8b42b
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
msgid ""
"String identifying the second card of the device in the windows PnP id "
"strings This can be None, string, list of strings or compiled regex"
msgstr ""

# e13a6cc5f7cf4adf9e7f75c15fe05000
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
msgid ""
"Used by the new driver detection to disambiguate main memory from storage "
"cards. Should be a regular expression that matches the main memory mount "
"point assigned by OS X"
msgstr ""

# 74315eb58cc644e694f24e043c639c39
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
msgid "The maximum length of paths created on the device"
msgstr ""

# 1434ec5c1f24456985729e1032261e3f
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
msgid "Put news in its own folder"
msgstr ""

# 95e2d279febc402cb62e2d95146398e5
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.windows_sort_drives:1
msgid ""
"Called to disambiguate main memory and storage card for devices that do not "
"distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The "
"EB600"
msgstr ""

# 103cc560e2c34c4b838d9acebd329270
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.sanitize_callback:1
msgid ""
"Callback to allow individual device drivers to override the path "
"sanitization used by :meth:`create_upload_path`."
msgstr ""

# 98dab69ef2f34da590866f4ad2206169
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.filename_callback:1
msgid ""
"Callback to allow drivers to change the default file name set by "
":meth:`create_upload_path`."
msgstr ""

# a9cafe540f2244bd930f4f667ad1b005
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.sanitize_path_components:1
msgid ""
"Perform any device specific sanitization on the path components for files to"
" be uploaded to the device"
msgstr ""

# 21affcf999dc46c096d9788fab1a306f
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.get_annotations:1
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

# 253dc02037cd414e9765efd0589ba3f2
#: ../../../src/calibre/devices/usbms/device.pydocstring of
#: calibre.devices.usbms.device.Device.add_annotation_to_library:1
msgid "Add an annotation to the calibre library"
msgstr ""

# 885fc4e3c57d428288d98078792e5e56
#: ../../<autodoc>:1
msgid ""
"Bases: :class:`calibre.devices.usbms.cli.CLI`, "
":class:`calibre.devices.usbms.device.Device`"
msgstr ""

# 96cc949f6e124b38926bcde76213c4e3
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS:1
msgid ""
"The base class for all USBMS devices. Implements the logic for "
"sending/getting/updating metadata/caching metadata/etc."
msgstr ""

# 33bc624c638640c6aeba3b6bed19ea2c
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:1
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

# 6c748c6588c64e0ba7395f585c9c7738
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:3
msgid "The full path to the directory where the associated book is located."
msgstr ""

# d0008e5310a045f2b3e043f82460c61e
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:4
msgid "The name of the book file without the extension."
msgstr ""

# e81e0eb29fb64b3c98c0d271dba4748a
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:5
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

# d867c515a7e14813b060cac4b4c736b4
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.upload_cover:7
msgid "The full path to the ebook file"
msgstr ""

# 9d3bb3b2d1da4efd96181257a980d1d5
#: ../../../src/calibre/devices/usbms/driver.pydocstring of
#: calibre.devices.usbms.driver.USBMS.normalize_path:1
msgid "Return path with platform native path separators"
msgstr ""

# 2ebe7df9d7fb4d899386c31152c8be77
#: ../../plugins.rst:159
msgid "User Interface Actions"
msgstr ""

# 7ee4ebc86c5b49d0889d0e73d8bcece1
#: ../../plugins.rst:161
msgid ""
"If you are adding your own plugin in a zip file, you should subclass both "
"InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` "
"method of you InterfaceActionBase subclass must return an instantiated "
"object of your InterfaceBase subclass."
msgstr ""

# 8c3357be96244ff39ef9112ca6f4cbe4
#: ../../<autodoc>:1
msgid "Bases: :class:`PyQt4.QtCore.QObject`"
msgstr ""

# 71c6048e9b2c42e3b3e90afe3ee04b24
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:1
msgid ""
"A plugin representing an \"action\" that can be taken in the graphical user "
"interface. All the items in the toolbar and context menus are implemented by"
" these plugins."
msgstr ""

# 0a9fa064d24949399b6786c64a320a02
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:5
msgid ""
"Note that this class is the base class for these plugins, however, to "
"integrate the plugin with calibre's plugin system, you have to make a "
"wrapper class that references the actual plugin. See the "
":mod:`calibre.customize.builtins` module for examples."
msgstr ""

# d11e6c6e1860411d9e777b3df50ebebe
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:10
msgid ""
"If two :class:`InterfaceAction` objects have the same name, the one with "
"higher priority takes precedence."
msgstr ""

# f6e5690f7c5c4597897aa0284ad9203c
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:13
msgid ""
"Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, "
":meth:`location_selected` :meth:`shutting_down` and "
":meth:`initialization_complete` methods."
msgstr ""

# 698cb159b84c40ea987bb70279e8cf22
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:17
msgid ""
"Once initialized, this plugin has access to the main calibre GUI via the "
":attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

# d7e6e8c56bbc4bbba3b5d32a6990d841
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:22
msgid ""
"To access the actual plugin, use the :attr:`interface_action_base_plugin` "
"attribute, this attribute only becomes available after the plugin has been "
"initialized. Useful if you want to use methods from the plugin class like "
"do_user_config()."
msgstr ""

# 287455c2bba447d2a593f627bf6cc876
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction:27
msgid ""
"The QAction specified by :attr:`action_spec` is automatically create and "
"made available as ``self.qaction``."
msgstr ""

# edcbddc5cc684f2cad9ac0e8ac57f0b9
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.name:1
msgid ""
"The plugin name. If two plugins with the same name are present, the one with"
" higher priority takes precedence."
msgstr ""

# 975c41b7d4de4e90a8302541a4b61d9e
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.priority:1
msgid ""
"The plugin priority. If two plugins with the same name are present, the one "
"with higher priority takes precedence."
msgstr ""

# 6ea2141201074f17acac128cbc496a99
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.popup_type:1
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

# 017b02623ca64cc78c4d5f6994677e08
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.auto_repeat:1
msgid ""
"Whether this action should be auto repeated when its shortcut key is held "
"down."
msgstr ""

# 9cf70a51d8134bf1bc5c8bfb0cba1034
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.action_spec:1
msgid ""
"Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and"
" keyboard shortcut can be None shortcut must be a string, None or tuple of "
"shortcuts. If None, a keyboard shortcut corresponding to the action is not "
"registered. If you pass an empty tuple, then the shortcut is registered with"
" no default key binding."
msgstr ""

# 9e0c03f874c84051beaac069a0254fe1
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.action_add_menu:1
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

# a52406ec66fc41a09b14bd707a096fad
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
msgid ""
"If True, a clone of self.qaction is added to the menu of self.qaction If you"
" want the text of this action to be different from that of self.qaction, set"
" this variable to the new text"
msgstr ""

# 6450b9f7c2dd4337a784684971187fa1
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.dont_add_to:1
msgid ""
"Set of locations to which this action must not be added. See "
":attr:`all_locations` for a list of possible locations"
msgstr ""

# 45074ff2ea524c22b4523c134e74148f
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.dont_remove_from:1
msgid ""
"Set of locations from which this action must not be removed. See "
":attr:`all_locations` for a list of possible locations"
msgstr ""

# c0d95b959413409c91506b25c48795f9
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.action_type:1
msgid ""
"Type of action 'current' means acts on the current view 'global' means an "
"action that does not act on the current view, but rather on calibre as a "
"whole"
msgstr ""

# 017fb6ab5b83440f99b395daac41ac56
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accepts_drops:1
msgid ""
"If True, then this InterfaceAction will have the opportunity to interact "
"with drag and drop events. See the methods, :meth:`accept_enter_event`, "
":meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

# a2d0f760dbd441059041ba86fe5b7424
# 2835c2ca8abb4d8c9c0b62de766af26c
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
msgid ""
"This method should return True iff this interface action is capable of "
"handling the drag event. Do not call accept/ignore on the event, that will "
"be taken care of by the calibre UI."
msgstr ""

# 32a4d3b3c9c64d4d94b9047222ad80c6
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.drop_event:1
msgid ""
"This method should perform some useful action and return True iff this "
"interface action is capable of handling the drop event. Do not call "
"accept/ignore on the event, that will be taken care of by the calibre UI. "
"You should not perform blocking/long operations in this function. Instead "
"emit a signal or use QTimer.singleShot and return quickly. See the builtin "
"actions for examples."
msgstr ""

# 7f2a4b3977e84718aac677097151d2eb
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:1
msgid ""
"Convenience method to easily add actions to a QMenu. Returns the created "
"QAction, This action has one extra attribute calibre_shortcut_unique_name "
"which if not None refers to the unique name under which this action is "
"registered with the keyboard manager."
msgstr ""

# e7d66cef9a3144e79eb953f97498e9aa
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:6
msgid "The QMenu the newly created action will be added to"
msgstr ""

# 16a1be71beee420da0d64ab5b5f9b06e
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:7
msgid ""
"A unique name for this action, this must be globally unique, so make it as "
"descriptive as possible. If in doubt add a uuid to it."
msgstr ""

# 0464feb2835d479391c8c5c3632874dd
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:10
msgid "The text of the action."
msgstr ""

# bfebf7566b7145bd90723b990c4bb45b
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:11
msgid ""
"Either a QIcon or a file name. The file name is passed to the I() builtin, "
"so you do not need to pass the full path to the images directory."
msgstr ""

# ba7c351bff2f46b2a8dd490012b3d426
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:14
msgid ""
"A string, a list of strings, None or False. If False, no keyboard shortcut "
"is registered for this action. If None, a keyboard shortcut with no default "
"keybinding is registered. String and list of strings register a shortcut "
"with default keybinding as specified."
msgstr ""

# f9d50b585b3e44528f46d42846147c28
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:18
msgid "A description for this action. Used to set tooltips."
msgstr ""

# 8e8b28841e7344cc92982c352621c0b7
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:20
msgid ""
"A callable which is connected to the triggered signal of the created action."
msgstr ""

# 858f4afd4ff7404d85af02e3c1a47d1a
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.create_menu_action:22
msgid ""
"The test displayed to the user when customizing the keyboard shortcuts for "
"this action. By default it is set to the value of ``text``."
msgstr ""

# ccdbef0479ff41a582423bcf7a292122
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.genesis:1
msgid ""
"Setup this plugin. Only called once during initialization. self.gui is "
"available. The action specified by :attr:`action_spec` is available as "
"``self.qaction``."
msgstr ""

# 333903e7ed494fa399c62da879022dba
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.location_selected:1
msgid ""
"Called whenever the book list being displayed in calibre changes. Currently "
"values for loc are: ``library, main, card and cardb``."
msgstr ""

# 7e55135a07ca4543a78243b745d1a9b9
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.location_selected:4
msgid ""
"This method should enable/disable this action and its sub actions as "
"appropriate for the location."
msgstr ""

# ff9e77e16c1649fc94b22cb3dbd2fdc6
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:1
msgid "Called whenever the current library is changed."
msgstr ""

# c4d9d90dd5b646e89af13cea688317f2
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.library_changed:3
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

# f787b775b67843b7bc207fd97e44a9ba
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
msgid ""
"Called once per action when the layout of the main GUI is completed. If your"
" action needs to make changes to the layout, they should be done here, "
"rather than in :meth:`initialization_complete`."
msgstr ""

# 1df09773741e4b64907bbbd3553813e5
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.initialization_complete:1
msgid ""
"Called once per action when the initialization of the main GUI is completed."
msgstr ""

# b1c79a81423747c4b76ed7ccebee718d
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.shutting_down:1
msgid ""
"Called once per plugin when the main GUI is in the process of shutting down."
" Release any used resources, but try not to block the shutdown for long "
"periods of time."
msgstr ""

# 79b1bafc59e846308eb6f06cb8c255f5
#: ../../../src/calibre/gui2/actions/__init__.pydocstring of
#: calibre.gui2.actions.InterfaceAction.shutting_down:5
msgid ""
"False to halt the shutdown. You are responsible for telling the user why the"
" shutdown was halted."
msgstr ""

# 046a8ff755764fdc9872219e4f638ea7
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.InterfaceActionBase.load_actual_plugin:1
msgid "This method must return the actual interface action plugin object."
msgstr ""

# bf2f2fb5a06249c29f68fdf92f09e074
#: ../../plugins.rst:176
msgid "Preferences Plugins"
msgstr ""

# 90a3d62f946341a49d343db0cb2b014d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:1
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

# 96d4765196104c7a9c0da1b2e5abc40d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin:3
msgid ""
"This plugin has only one important method :meth:`create_widget`. The various"
" fields of the plugin control how it is categorized in the UI."
msgstr ""

# 11b44ec88c204be0a3f2d0d46f47563d
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.config_widget:1
msgid ""
"Import path to module that contains a class named ConfigWidget which "
"implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

# f9d7b52dad3d49ef8b09bacd98f72c96
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.category_order:1
msgid ""
"Where in the list of categories the :attr:`category` of this plugin should "
"be."
msgstr ""

# 28b4ae3600c548279316673912789f16
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.name_order:1
msgid ""
"Where in the list of names in a category, the :attr:`gui_name` of this "
"plugin should be"
msgstr ""

# a8a383b566df49fe9da9b2610df7c831
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.category:1
msgid "The category this plugin should be in"
msgstr ""

# 3470d122d09c47d18dc0f706c8fae170
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.gui_category:1
msgid "The category name displayed to the user for this plugin"
msgstr ""

# 0ff2e1e12b3049958c19f71124115e43
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.gui_name:1
msgid "The name displayed to the user for this plugin"
msgstr ""

# 3ab904761a2049bf83afbf689b5809c5
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.icon:1
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

# c4fb520b18b14952930f76408cba41ca
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.description:1
msgid "The description used for tooltips and the like"
msgstr ""

# 5296495b247940e7bb1f8401cb903992
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:1
msgid ""
"Create and return the actual Qt widget used for setting this group of "
"preferences. The widget must implement the "
":class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

# 36e86c080b4140c7aa3f61262d9f0efb
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.PreferencesPlugin.create_widget:5
msgid ""
"The default implementation uses :attr:`config_widget` to instantiate the "
"widget."
msgstr ""

# 2b44db1bca134161a20c4d58cef3de55
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface:1
msgid ""
"This class defines the interface that all widgets displayed in the "
"Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base "
"class that implements this interface and defines various convenience methods"
" as well."
msgstr ""

# eecc5acfab0949aba6462b493b59b134
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
msgid ""
"This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

# 3a189166b5184e3f817cd1c545fe9695
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

# c3ca65f55c6c49759969537c5113cf0c
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
msgid "The tooltip for the Restore to defaults button"
msgstr ""

# f57bd4cd74b2444897cae68e34fa84ae
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
msgid ""
"If True the Preferences dialog will not allow the user to set any more "
"preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

# 97674d3602f84723bd7538563ab58ceb
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
msgid ""
"Called once before the widget is displayed, should perform any necessary "
"setup."
msgstr ""

# 0f508fd4bf71471ab93895ce7dcbf917
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
msgid "The main calibre graphical user interface"
msgstr ""

# 8a749e744bca48e0a6d73eb06d6542c2
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
msgid ""
"Should set all config values to their initial values (the values stored in "
"the config files)."
msgstr ""

# 821259fc00d3430c817738687d12b821
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
msgid "Should set all config values to their defaults."
msgstr ""

# 274dbdcfa2a746a28124286852d8f5f3
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.commit:1
msgid ""
"Save any changed settings. Return True if the changes require a restart, "
"False otherwise. Raise an :class:`AbortCommit` exception to indicate that an"
" error occurred. You are responsible for giving the user feedback about what"
" the error is and how to correct it."
msgstr ""

# bdd5f914a43c4f2ebd12e8228d891837
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
msgid ""
"Called once after this widget is committed. Responsible for causing the gui "
"to reread any changed settings. Note that by default the GUI re-initializes "
"various elements anyway, so most widgets won't need to use this method."
msgstr ""

# 0c7be7cb0b574a479fec4e2dc5968941
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase:1
msgid ""
"Base class that contains code to easily add standard config widgets like "
"checkboxes, combo boxes, text fields and so on. See the :meth:`register` "
"method."
msgstr ""

# d0d6ba81873041d091723da58fc5e917
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase:5
msgid ""
"This class automatically handles change notification, resetting to default, "
"translation between gui objects and config objects, etc. for registered "
"settings."
msgstr ""

# 446b2e64536c4ba4821000a9385a3ff0
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase:9
msgid ""
"If your config widget inherits from this class but includes setting that are"
" not registered, you should override the :class:`ConfigWidgetInterface` "
"methods and call the base class methods inside the overrides."
msgstr ""

# 654f584e86e2454eb7639fe0990751ad
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:1
msgid "Register a setting."
msgstr ""

# a59a1593c0904b84a431eb16b732c04f
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:3
msgid "The setting name"
msgstr ""

# fd0d5630e5824115b98487bd755addff
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:4
msgid "The config object that reads/writes the setting"
msgstr ""

# b5d3860944834a25a1b9e6a88dc00ea8
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:5
msgid ""
"The name of the GUI object that presents an interface to change the setting."
" By default it is assumed to be ``'opt_' + name``."
msgstr ""

# 4b8264c5fb8f4725810a2a947dfd9195
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:8
msgid ""
"If this setting is a multiple choice (combobox) based setting, the list of "
"choices. The list is a list of two element tuples of the form: ``[(gui name,"
" value), ...]``"
msgstr ""

# 4eb1b030e30f457b8d08bf1eadb5e647
#: ../../../src/calibre/gui2/preferences/__init__.pydocstring of
#: calibre.gui2.preferences.ConfigWidgetBase.register:11
msgid ""
"The class responsible for managing this setting. The default class handles "
"almost all cases, so this param is rarely used."
msgstr ""

# 780a9fc4bf51475ba801d8cea297fc78
#: ../../plugins.rst:192
msgid "Viewer plugins"
msgstr ""

# 9aeb9c9f3a7047d6a4ee890dd6201a69
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin:1
msgid "These plugins are used to add functionality to the calibre viewer."
msgstr ""

# 3eef7e977ec24b6b98a1433a5abab0c8
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.load_fonts:1
msgid ""
"This method is called once at viewer startup. It should load any fonts it "
"wants to make available. For example::"
msgstr ""

# f4cf0a00792d4c41bfd5f325cd537baf
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.load_javascript:1
msgid ""
"This method is called every time a new HTML document is loaded in the "
"viewer. Use it to load javascript libraries into the viewer. For example::"
msgstr ""

# bb458bed02f94aa9b3869c5c929f3266
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.run_javascript:1
msgid ""
"This method is called every time a document has finished loading. Use it in "
"the same way as load_javascript()."
msgstr ""

# 738bd3b5d97d4533a7682a6e70bac3f7
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.customize_ui:1
msgid ""
"This method is called once when the viewer is created. Use it to make any "
"customizations you want to the viewer's user interface. For example, you can"
" modify the toolbars via ui.tool_bar and ui.tool_bar2."
msgstr ""

# de49348c83334ea6bd2dc01ee9eea254
#: ../../../src/calibre/customize/__init__.pydocstring of
#: calibre.customize.ViewerPlugin.customize_context_menu:1
msgid ""
"This method is called every time the context (right-click) menu is shown. "
"You can use it to customize the context menu. ``event`` is the context menu "
"event and hit_test_result is the QWebHitTestResult for this event in the "
"currently loaded document."
msgstr ""
