# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.44.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-11 07:55+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../conversion.rst:6
# 25443512bee5403aada3e55ec7b43a58
msgid "Ebook Conversion"
msgstr ""

#: ../../conversion.rst:8
# c4210adb74c648b3a3d48ebbb700f9e3
msgid "|app| has a conversion system that is designed to be very easy to use. Normally, you just add a book to |app|, click convert and |app| will try hard to generate output that is as close as possible to the input. However, |app| accepts a very large number of input formats, not all of which are as suitable as others for conversion to ebooks. In the case of such input formats, or if you just want greater control over the conversion system, |app| has a lot of options to fine tune the conversion process. Note however that |app|'s conversion system is not a substitute for a full blown ebook editor. To edit ebooks, I recommend first converting them to EPUB or AZW3 using |app| and then using the Edit Book feature to get them into perfect shape. You can then use the edited ebook as input for conversion into other formats in |app|."
msgstr ""

#: ../../conversion.rst:20
# 1ee4cdd80d5e488f9c85bd8381658278
msgid "This document will refer mainly to the conversion settings as found in the conversion dialog, pictured below. All these settings are also available via command line interface to conversion, documented at :ref:`ebook-convert`. In |app|, you can obtain help on any individual setting by holding your mouse over it, a tooltip will appear describing the setting."
msgstr ""

#: ../../conversion.rst:0
#: ../../conversion.rst:0
# 685453441c694685ae92c7c8b3ea7076
# e0e4d27806d44506bf15bc68229620f4
msgid "Contents"
msgstr ""

#: ../../conversion.rst:38
# ef4e3eb1e2b74f0181fd068ebfefc58d
msgid "Introduction"
msgstr ""

#: ../../conversion.rst:44
# 9eee40e0b1a44c5fb6b9d05ab5044bf3
msgid "The first thing to understand about the conversion system is that it is designed as a pipeline. Schematically, it looks like this:"
msgstr ""

#: ../../conversion.rst:51
# 721eda1740d944ac8b8bb0a8c8fa5c08
msgid "The input format is first converted to XHTML by the appropriate *Input Plugin*. This HTML is then *transformed*. In the last step, the processed XHTML is converted to the specified output format by the appropriate *Output Plugin*. The results of the conversion can vary greatly, based on the input format. Some formats convert much better than others. A list of the best source formats for conversion is available :ref:`here <best-source-formats>`."
msgstr ""

#: ../../conversion.rst:58
# 25a2943d6fb140939dcac3812cff8425
msgid "The transforms that act on the XHTML output are where all the work happens. There are various transforms, for example, to insert book metadata as a page at the start of the book, to detect chapter headings and automatically create a Table of Contents, to proportionally adjust font sizes, et cetera. It is important to remeber that all the transforms act on the XHTML output by the *Input Plugin*, not on the input file itself. So, for example, if you ask |app| to convert an RTF file to EPUB, it will first be converted to XHTML internally, the various transforms will be applied to the XHTML and then the *Output Plugin* will create the EPUB file, automatically generating all metadata, Table of Contents, et cetera."
msgstr ""

#: ../../conversion.rst:67
# 4436f191dbee415f8a51a2387eadf425
msgid "You can see this process in action by using the debug option |dbgi|. Just specify the path to a directory for the debug output. During conversion, |app| will place the XHTML generated by the various stages of the conversion pipeline in different sub-directories. The four sub-directories are:"
msgstr ""

#: ../../conversion.rst:0
# cbf6b579a8784e0d8050fd625c341f71
msgid "Stages of the conversion pipeline"
msgstr ""

#: ../../conversion.rst:75
# f6506c074c404f55a0afd2fb61054897
msgid "Directory"
msgstr ""

#: ../../conversion.rst:75
# e91f1f2ae8874172a92ccb75ec78d7cc
msgid "Description"
msgstr ""

#: ../../conversion.rst:77
# cf59fe1c17e6434db6de68ae093235b5
msgid "input"
msgstr ""

#: ../../conversion.rst:77
# a229d84ae202432abd0974ece97afe8a
msgid "This contains the HTML output by the Input Plugin. Use this to debug the Input Plugin."
msgstr ""

#: ../../conversion.rst:78
# fa7a1696189e455f92dfc88f35ff5f23
msgid "parsed"
msgstr ""

#: ../../conversion.rst:78
# c834acbbcc0349f587e2f80b5a6ab37c
msgid "The result of pre-processing and converting to XHTML the output from the Input Plugin. Use to debug structure detection."
msgstr ""

#: ../../conversion.rst:79
# 2a5ef9ad7b8e4f24a5ce2c8e4eacefde
msgid "structure"
msgstr ""

#: ../../conversion.rst:79
# f399cb3713684195a22632d6195edd6b
msgid "Post structure detection, but before CSS flattening and font size conversion. Use to debug font size conversion and CSS transforms."
msgstr ""

#: ../../conversion.rst:80
# 2054a3851e7d40ee9bfb5acee3f1620a
msgid "processed"
msgstr ""

#: ../../conversion.rst:80
# f7cf31abd2ce435db45d46995a0ef23d
msgid "Just before the ebook is passed to the output plugin. Use to debug the Output Plugin."
msgstr ""

#: ../../conversion.rst:83
# 35db5dc8fde34ef495d2995288963cae
msgid "If you want to edit the input document a little before having |app| convert it, the best thing to do is edit the files in the :file:`input` sub-directory, then zip it up, and use the zip file as the input format for subsequent conversions. To do this use the :guilabel:`Edit meta information` dialog to add the zip file as a format for the book and then, in the top left corner of the conversion dialog, select ZIP as the input format."
msgstr ""

#: ../../conversion.rst:89
# 55046799bc824f21aee7a724701efc76
msgid "This document will deal mainly with the various transforms that operate on the intermediate XHTML and how to control them. At the end are some tips specific to each Input/Output format."
msgstr ""

#: ../../conversion.rst:93
# 8a413378b7fc47b3b66ecbe24fbed8fd
msgid "Look & Feel"
msgstr ""

#: ../../conversion.rst:99
# efab6ecfe78247569fe747c839fc7da5
msgid "This group of options controls various aspects of the look and feel of the converted ebook."
msgstr ""

#: ../../conversion.rst:104
# c2b39389721d45ce9fc037dd27dfa648
msgid "Font size rescaling"
msgstr ""

#: ../../conversion.rst:106
# bed32c9fb4994b04920369b3f1635ffd
msgid "One of the nicest features of the e-reading experience is the ability to easily adjust font sizes to suit individual needs and lighting conditions. |app| has sophisticated algorithms to ensure that all the books it outputs have a consistent font sizes, no matter what font sizes are specified in the input document."
msgstr ""

#: ../../conversion.rst:111
# 91ea5c7cfeca41c594417b42053ab2bb
msgid "The base font size of a document is the most common font size in that document, i.e., the size of the bulk of text in that document. When you specify a :guilabel:`Base font size`, |app| automatically rescales all font sizes in the document proportionately, so that the most common font size becomes the specified base font size and other font sizes are rescaled appropriately. By choosing a larger base font size, you can make the fonts in the document larger and vice versa. When you set the base font size, for best results, you should also set the font size key."
msgstr ""

#: ../../conversion.rst:119
# 9c2cc7dbf71348ed9a20e30b313cbde9
msgid "Normally, |app| will automatically choose a base font size appropriate to the Output Profile you have chosen (see :ref:`page-setup`). However, you can override this here in case the default is not suitable for you."
msgstr ""

#: ../../conversion.rst:123
# acd58a245aeb401fad290de28035a9bb
msgid "The :guilabel:`Font size key` option lets you control how non-base font sizes are rescaled. The font rescaling algorithm works using a font size key, which is simply a comma-separated list of font sizes. The font size key tells |app| how many \"steps\" bigger or smaller a given font size should be compared to the base font size. The idea is that there should be a limited number of font sizes in a document. For example, one size for the body text, a couple of sizes for different levels of headings and a couple of sizes for super/sub scripts and footnotes. The font size key allows |app| to compartmentalize the font sizes in the input documents into separate \"bins\" corresponding to the different logical font sizes."
msgstr ""

#: ../../conversion.rst:132
# 5b2cd8631a7b4f5987eecd7d8d316ea0
msgid "Let's illustrate with an example. Suppose the source document we are converting was produced by someone with excellent eyesight and has a base font size of 8pt. That means the bulk of the text in the document is sized at 8pts, while headings are somewhat larger (say 10 and 12pt) and footnotes somewhat smaller at 6pt. Now if we use the following settings::"
msgstr ""

#: ../../conversion.rst:141
# dc635ae02b39434d9bd7f5d8f60e9336
msgid "The output document will have a base font size of 12pt, headings of 14 and 16pt and footnotes of 8pt. Now suppose we want to make the largest heading size stand out more and make the footnotes a little larger as well. To achieve this, the font key should be changed to::"
msgstr ""

#: ../../conversion.rst:147
# f309c64f391a4d46a585c122f195b14c
msgid "The largest headings will now become 18pt, while the footnotes will become 9pt. You can play with these settings to try and figure out what would be optimum for you by using the font rescaling wizard, which can be accessed by clicking the little button next to the :guilabel:`Font size key` setting."
msgstr ""

#: ../../conversion.rst:152
# eebe5f7376c94d44a0d11b5253f56fbc
msgid "All the font size rescaling in the conversion can also be disabled here, if you would like to preserve the font sizes in the input document."
msgstr ""

#: ../../conversion.rst:155
# 040c3af4bebd4af2883d3f83da682619
msgid "A related setting is :guilabel:`Line height`. Line height controls the vertical height of lines. By default, (a line height of 0), no manipulation of line heights is performed. If you specify a non-default value, line heights will be set in all locations that don't specify their own line heights. However, this is something of a blunt weapon and should be used sparingly. If you want to adjust the line heights for some section of the input, it's better to use the :ref:`extra-css`."
msgstr ""

#: ../../conversion.rst:163
# c46bd969ea6f4f128534760eddccdb30
msgid "Paragraph spacing"
msgstr ""

#: ../../conversion.rst:165
# 1a1c8cfc57584a339f455b376b2c02a4
msgid "Normally, paragraphs in XHTML are rendered with a blank line between them and no leading text indent. |app| has a couple of options to control this. :guilabel:`Remove spacing between paragraphs` forcefully ensure that all paragraphs have no inter paragraph spacing. It also sets the text indent to 1.5em (can be changed) to mark the start of every paragraph. :guilabel:`Insert blank line` does the opposite, guaranteeing that there is exactly one blank line between each pair of paragraphs. Both these options are very comprehensive, removing spacing, or inserting it for *all* paragraphs (technically <p> and <div> tags). This is so that you can just set the option and be sure that it performs as advertised, irrespective of how messy the input file is. The one exception is when the input file uses hard line breaks to implement inter-paragraph spacing."
msgstr ""

#: ../../conversion.rst:176
# 977571c8c9364059b972843938e4afec
msgid "If you want to remove the spacing between all paragraphs, except a select few, don't use these options. Instead add the following CSS code to :ref:`extra-css`::"
msgstr ""

#: ../../conversion.rst:182
# 07f5c678f1914842baf2e6540335afc0
msgid "Then, in your source document, mark the paragraphs that need spacing with `class=\"spacious\"`. If your input document is not in HTML, use the Debug option, described in the Introduction to get HTML (use the :file:`input` sub-directory)."
msgstr ""

#: ../../conversion.rst:190
# 352de248efc5481c881fba7f50867839
msgid "Extra CSS"
msgstr ""

#: ../../conversion.rst:192
# 65a966bb1827493b8821fafdb26794b9
msgid "This option allows you to specify arbitrary CSS that will be applied to all HTML files in the input. This CSS is applied with very high priority and so should override most CSS present in the **input document** itself. You can use this setting to fine tune the presentation/layout of your document. For example, if you want all paragraphs of class `endnote` to be right aligned, just add::"
msgstr ""

#: ../../conversion.rst:200
# 56b14a5c909d45e69033b72bc4e251b7
msgid "or if you want to change the indentation of all paragraphs::"
msgstr ""

#: ../../conversion.rst:204
# 9e511d273fc14f5899e2fbc6bf87bf20
msgid ":guilabel:`Extra CSS` is a very powerful option, but you do need an understanding of how CSS works to use it to its full potential. You can use the debug pipeline option described above to see what CSS is present in your input document."
msgstr ""

#: ../../conversion.rst:209
#: ../../conversion.rst:414
# ecf23666dd324388b5efad56b7e29a1e
# 0a2d4f0a912744249ccbc1842c86b0f0
msgid "Miscellaneous"
msgstr ""

#: ../../conversion.rst:211
#: ../../conversion.rst:416
# eb87e4c6b7da4b5da0d780ddc1dd6a79
# 5a3a878f25de4d559702826b5b21957e
msgid "There are a few more options in this section."
msgstr ""

#: ../../conversion.rst:217
# 158709dc2c094b1e849d45b725351b57
msgid ":guilabel:`No text justification`"
msgstr ""

#: ../../conversion.rst:214
# 3cd797d6f1e64b1f8c60769ef849b435
msgid "Normally, if the output format supports it, |app| will force the output ebook to have *justified* text (i.e., a smooth right margin). This option will turn off this behavior, in which case whatever justification is specified in the input document will be used instead."
msgstr ""

#: ../../conversion.rst:224
# 61ae51b522424cdea7a31acea1ef628e
msgid ":guilabel:`Linearize tables`"
msgstr ""

#: ../../conversion.rst:220
# 17328e46bdf74dac861a9391c51927dc
msgid "Some badly designed documents use tables to control the layout of text on the page. When converted these documents often have text that runs off the page and other artifacts. This option will extract the content from the tables and present it in a linear fashion. Note that this option linearizes *all* tables, so only use it if you are sure the input document does not use tables for legitimate purposes, like presenting tabular information."
msgstr ""

#: ../../conversion.rst:233
# 340276aadd7c495dba4dd82d3d7ce182
msgid ":guilabel:`Transliterate unicode characters`"
msgstr ""

#: ../../conversion.rst:227
# 4b90774f8ac24f0fb3b4ca76d204dc8b
msgid "Transliterate unicode characters to an ASCII representation. Use with care because this will replace unicode characters with ASCII. For instance it will replace \"Михаил Горбачёв\" with \"Mikhail Gorbachiov\". Also, note that in cases where there are multiple representations of a character (characters shared by Chinese and Japanese for instance) the representation used by the largest number of people will be used (Chinese in the previous example). This option is mainly useful if you are going to view the ebook on a device that does not have support for unicode."
msgstr ""

#: ../../conversion.rst:242
# dc4c5ae5ae8b429da59f22cd7837e8e5
msgid ":guilabel:`Input character encoding`"
msgstr ""

#: ../../conversion.rst:236
# 4763b4dbbdc24418a6a410f9ec83e914
msgid "Older documents sometimes don't specify their character encoding. When converted, this can result in non-English characters or special characters like smart quotes being corrupted. |app| tries to auto-detect the character encoding of the source document, but it does not' always succeed. You can force it to assume a particular character encoding by using this setting. `cp1252` is a common encoding for documents produced using windows software. You should also read :ref:`char-encoding-faq` for more on encoding issues."
msgstr ""

#: ../../conversion.rst:247
# 6edaec2f62c9480d95b519db8c90bc45
msgid "Page Setup"
msgstr ""

#: ../../conversion.rst:249
# 2b85bc187fa44a748e4d4ae794cddc90
msgid "The Page Setup options are for controlling screen layout, like margins and screen sizes. There are options to setup page margins, which will be used by the Output Plugin, if the selected Output Format supports page margins. In addition, you should choose an Input profile and an Output profile. Both sets of profiles basically deal with how to interpret measurements in the input/output documents, screen sizes and default font rescaling keys."
msgstr ""

#: ../../conversion.rst:255
# 998d7f2717f546b9a46a5f20d0df9c24
msgid "If you know that the file you are converting was intended to be used on a particular device/software platform, choose the corresponding input profile, otherwise just choose the default input profile. If you know the files you are producing are meant for a particular device type, choose the corresponding Output profile. In particular, for MOBI Output files, you should choose the Kindle, for LIT the Microsoft Reader and for EPUB the Sony Reader. In the case of EPUB, the Sony Reader profile will result in EPUB files that will work everywhere. However, it has some side effects, like inserting artificial section breaks to keep internal components below the size threshold, needed for SONY devices. In particular for the iPhone/Android phones, choose the SONY output profile. If you know your EPUB files will not be read on a SONY or similar device, use the default output profile. If you are producing MOBI files that are not intended for the Kindle, choose the Mobipocket books output profile."
msgstr ""

#: ../../conversion.rst:259
# 3c25821d4b3c4ba9998f4843a0bea7eb
msgid "The Output profile also controls the screen size. This will cause, for example, images to be auto-resized to be fit to the screen in some output formats. So choose a profile of a device that has a screen size similar to your device."
msgstr ""

#: ../../conversion.rst:264
# 12c9cf4e851f4ce0ad505deee97fdc67
msgid "Heuristic Processing"
msgstr ""

#: ../../conversion.rst:266
# 692902c7827f4bedba600bbd7236235e
msgid "Heuristic Processing provides a variety of functions which can be used to try and detect and correct common problems in poorly formatted input documents.  Use these functions if your input document suffers from poor formatting. Because these functions rely on common patterns, be aware that in some cases an option may lead to worse results, so use with care.  As an example, several of these options will remove all non-breaking-space entities, or may include false positive matches relating to the function."
msgstr ""

#: ../../conversion.rst:274
# 1921423f8a5640e3a13b5c41e3cf81cb
msgid ":guilabel:`Enable heuristic processing`"
msgstr ""

#: ../../conversion.rst:273
# 1fbed05e05a54fc08d65e9e719bb53bb
msgid "This option activates |app|'s Heuristic Processing stage of the conversion pipeline. This must be enabled in order for various sub-functions to be applied"
msgstr ""

#: ../../conversion.rst:280
# 7a8432b3a62d4f5ca66fd41ce704b087
msgid ":guilabel:`Unwrap lines`"
msgstr ""

#: ../../conversion.rst:277
# 787f65c305fc4414ac19f0eb2073161b
msgid "Enabling this option will cause |app| to attempt to detect and correct hard line breaks that exist within a document using punctuation clues and line length. |app| will first attempt to detect whether hard line breaks exist, if they do not appear to exist |app| will not attempt to unwrap lines. The line-unwrap factor can be reduced if you want to 'force' |app| to unwrap lines."
msgstr ""

#: ../../conversion.rst:286
# 541a982eece84481b93ca2a6738f7252
msgid ":guilabel:`Line-unwrap factor`"
msgstr ""

#: ../../conversion.rst:283
# e771af5bb3444fdd85a3c9e03c3e69f5
msgid "This option controls the algorithm |app| uses to remove hard line breaks. For example, if the value of this option is 0.4, that means calibre will remove hard line breaks from the end of lines whose lengths are less than the length of 40% of all lines in the document.  If your document only has a few line breaks which need correction, then this value should be reduced to somewhere between 0.1 and 0.2."
msgstr ""

#: ../../conversion.rst:301
# fe5dd21ae659409aa159f0593c112c74
msgid ":guilabel:`Detect and markup unformatted chapter headings and sub headings`"
msgstr ""

#: ../../conversion.rst:289
# 5b13a7776f3844929816c95270cfc3da
msgid "If your document does not have chapter headings and titles formatted differently from the rest of the text, |app| can use this option to attempt detection them and surround them with heading tags. <h2> tags are used for chapter headings; <h3> tags are used for any titles that are detected."
msgstr ""

#: ../../conversion.rst:293
# 2cbee4a20a7e42449a43bd1c96d5cd71
msgid "This function will not create a TOC, but in many cases it will cause |app|'s default chapter detection settings to correctly detect chapters and build a TOC.  Adjust the XPath under Structure Detection if a TOC is not automatically created.  If there are no other headings used in the document then setting \"//h:h2\" under Structure Detection would be the easiest way to create a TOC for the document."
msgstr ""

#: ../../conversion.rst:298
# 53a0d2062a8e4dc1a80ee1e555f33d21
msgid "The inserted headings are not formatted, to apply formatting use the :guilabel:`Extra CSS` option under the Look and Feel conversion settings.  For example, to center heading tags, use the following::"
msgstr ""

#: ../../conversion.rst:306
# 96e120266a3b4b98a957a92bdb685d43
msgid ":guilabel:`Renumber sequences of <h1> or <h2> tags`"
msgstr ""

#: ../../conversion.rst:304
# d199e8e8f9ca44edbe78b641385ce247
msgid "Some publishers format chapter headings using multiple <h1> or <h2> tags sequentially. |app|'s default conversion settings will cause such titles to be split into two pieces.  This option will re-number the heading tags to prevent splitting."
msgstr ""

#: ../../conversion.rst:313
# 3773227004574f37bada1edbf6893e88
msgid ":guilabel:`Delete blank lines between paragraphs`"
msgstr ""

#: ../../conversion.rst:309
# add2bea6a9c54cb289e8e475d60f8f9a
msgid "This option will cause |app| to analyze blank lines included within the document.  If every paragraph is interleaved with a blank line, then |app| will remove all those blank paragraphs.  Sequences of multiple blank lines will be considered scene breaks and retained as a single paragraph.  This option differs from the 'Remove Paragraph Spacing' option under 'Look and Feel' in that it actually modifies the HTML content, while the other option modifies the document styles.  This option can also remove paragraphs which were inserted using |app|'s 'Insert blank line' option."
msgstr ""

#: ../../conversion.rst:318
# 3d03bb0b93e54e0bba9759f77f317d05
msgid ":guilabel:`Ensure scene breaks are consistently formatted`"
msgstr ""

#: ../../conversion.rst:316
# 11137464cf4c4f9cb8e40a216e59df56
msgid "With this option |app| will attempt to detect common scene-break markers and ensure that they are center aligned. 'Soft' scene break markers, i.e. scene breaks only defined by extra white space, are styled to ensure that they will not be displayed in conjunction with page breaks."
msgstr ""

#: ../../conversion.rst:334
# b1c56bb11611421f9fcba947fe43bd4d
msgid ":guilabel:`Replace scene breaks`"
msgstr ""

#: ../../conversion.rst:321
# 462817e93bc946ee8f52b519bb9dd886
msgid "If this option is configured then |app| will replace scene break markers it finds with the replacement text specified by the user.  Please note that some ornamental characters may not be supported across all reading devices."
msgstr ""

#: ../../conversion.rst:324
# 57401ea7f0cf463ebba8c445d3c9a95e
msgid "In general you should avoid using html tags, |app| will discard any tags and use pre-defined markup.  <hr /> tags, i.e. horizontal rules, and <img> tags are exceptions.  Horizontal rules can optionally be specified with styles, if you choose to add your own style be sure to include the 'width' setting, otherwise the style information will be discarded.  Image tags can used, but |app| does not provide the ability to add the image during conversion, this must be done after the fact using the 'Edit Book' feature."
msgstr ""

#: ../../conversion.rst:331
# 11e2206533bd49fda40841690af97177
msgid "Example image tag (place the image within an 'Images' folder inside the epub after conversion):"
msgstr ""

#: ../../conversion.rst:331
# 8cabd9f3bc0d4e6d904fec90572dd093
msgid "<img style=\"width:10%\" src=\"../Images/scenebreak.png\" />"
msgstr ""

#: ../../conversion.rst:334
# e480f602ef904296af917b20f2459d1b
msgid "Example horizontal rule with styles:"
msgstr ""

#: ../../conversion.rst:334
# f3ef25a7799b4507b976b9e426c80040
msgid "<hr style=\"width:20%;padding-top: 1px;border-top: 2px ridge black;border-bottom: 2px groove black;\"/>"
msgstr ""

#: ../../conversion.rst:342
# 07ef7c19e6df41c9a95d8071e8bd6f22
msgid ":guilabel:`Remove unnecessary hyphens`"
msgstr ""

#: ../../conversion.rst:337
# 83d5bdab17ec426c9d0411970110bf0c
msgid "|app| will analyze all hyphenated content in the document when this option is enabled.  The document itself is used as a dictionary for analysis.  This allows |app| to accurately remove hyphens for any words in the document in any language, along with made-up and obscure scientific words.  The primary drawback is words appearing only a single time in the document will not be changed.  Analysis happens in two passes, the first pass analyzes line endings.  Lines are only unwrapped if the word exists with or without a hyphen in the document.  The second pass analyzes all hyphenated words throughout the document, hyphens are removed if the word exists elsewhere in the document without a match."
msgstr ""

#: ../../conversion.rst:346
# 1670eea1f8b34a04a1f15939b0302914
msgid ":guilabel:`Italicize common words and patterns`"
msgstr ""

#: ../../conversion.rst:345
# ca7d3627fc6a401aa0976ffb2556fa5d
msgid "When enabled, |app| will look for common words and patterns that denote italics and italicize them.  Examples are common text conventions such as ~word~ or phrases that should generally be italicized, e.g. latin phrases like 'etc.' or 'et cetera'."
msgstr ""

#: ../../conversion.rst:350
# 5f5cbb13d83d41a5b8b742c5c3e4839d
msgid ":guilabel:`Replace entity indents with CSS indents`"
msgstr ""

#: ../../conversion.rst:349
# 0742baab5df147a4a11424094dd29080
msgid "Some documents use a convention of defining text indents using non-breaking space entities.  When this option is enabled |app| will attempt to detect this sort of formatting and convert them to a 3% text indent using css."
msgstr ""

#: ../../conversion.rst:355
# 69c1c3560f774a7da906a705af3c3056
msgid "Search & Replace"
msgstr ""

#: ../../conversion.rst:357
# 43911c4570974b9eb8f4da99c5319b49
msgid "These options are useful primarily for conversion of PDF documents or OCR conversions, though they can also be used to fix many document specific problems. As an example, some conversions can leaves behind page headers and footers in the text. These options use regular expressions to try and detect headers, footers, or other arbitrary text and remove or replace them. Remember that they operate on the intermediate XHTML produced by the conversion pipeline. There is a wizard to help you customize the regular expressions for your document.  Click the magic wand beside the expression box, and click the 'Test' button after composing your search expression.  Successful matches will be highlighted in Yellow."
msgstr ""

#: ../../conversion.rst:365
# 071caa89b1f94230952c86ae3e606f2b
msgid "The search works by using a python regular expression. All matched text is simply removed from the document or replaced using the replacement pattern. The replacement pattern is optional, if left blank then text matching the search pattern will be deleted from the document.  You can learn more about regular expressions and their syntax at :ref:`regexptutorial`."
msgstr ""

#: ../../conversion.rst:373
# fd76d2c4aa28456697f6be49699ec113
msgid "Structure Detection"
msgstr ""

#: ../../conversion.rst:375
# c6a40b032c6846fbb44c85c4b33586a6
msgid "Structure detection involves |app| trying its best to detect structural elements in the input document, when they are not properly specified. For example, chapters, page breaks, headers, footers, etc. As you can imagine, this process varies widely from book to book. Fortunately, |app| has very powerful options to control this. With power comes complexity, but if once you take the time to learn the complexity, you will find it well worth the effort."
msgstr ""

#: ../../conversion.rst:378
# 58e6ff66225c44ceba62746f54a8a0ce
msgid "Chapters and page breaks"
msgstr ""

#: ../../conversion.rst:380
# 64c8ca47d9bb406ba724d0da1963bcf0
msgid "|app| has two sets of options for :guilabel:`chapter detection` and :guilabel:`inserting page breaks`. This can sometimes be slightly confusing, as by default, |app| will insert page breaks before detected chapters as well as the locations detected by the page breaks option. The reason for this is that there are often location where page breaks should be inserted that are not chapter boundaries. Also, detected chapters can be optionally inserted into the auto generated Table of Contents."
msgstr ""

#: ../../conversion.rst:385
# 8b012cedd3d04ceea43ff65f0e74b71c
msgid "|app| uses *XPath*, a powerful language to allow the user to specify chapter boundaries/page breaks. XPath can seem a little daunting to use at first, fortunately, there is a :ref:`XPath tutorial <xpath-tutorial>` in the User Manual. Remember that Structure Detection operates on the intermediate XHTML produced by the conversion pipeline. Use the debug option described in the :ref:`conversion-introduction` to figure out the appropriate settings for your book. There is also a button for a XPath wizard to help with the generation of simple XPath expressions."
msgstr ""

#: ../../conversion.rst:391
# 76aefbdc71fb4c7491010cd19f1b7c1d
msgid "By default, |app| uses the following expression for chapter detection::"
msgstr ""

#: ../../conversion.rst:395
# 1ed12605dd854e37afd3809387dff75c
msgid "This expression is rather complex, because it tries to handle a number of common cases simulataneously. What it means is that |app| will assume chapters start at either `<h1>` or `<h2>` tags that have any of the words `(chapter, book, section or part)` in them or that have the `class=\"chapter\"` attribute."
msgstr ""

#: ../../conversion.rst:399
# 849ecc591c65449a820907654a6e11ca
msgid "A related option is :guilabel:`Chapter mark`, which allows you to control what |app| does when it detects a chapter. By default, it will insert a page break before the chapter. You can have it insert a ruled line instead of, or in addition to the page break. You can also have it do nothing."
msgstr ""

#: ../../conversion.rst:403
# 3c59bd057786486ea8414ee09b1fd965
msgid "The default setting for detecting page breaks is::"
msgstr ""

#: ../../conversion.rst:407
# 33fad7a6f4154dd3b25417a24310f8fd
msgid "which means that |app| will insert page breaks before every `<h1>` and `<h2>` tag by default."
msgstr ""

#: ../../conversion.rst:411
# 37a120f9872343988d37d550ff377c4b
msgid "The default expressions may change depending on the input format you are converting."
msgstr ""

#: ../../conversion.rst:422
# 35c7eacbf4be42f9890a8f5e80242328
msgid ":guilabel:`Insert metadata as page at start of book`"
msgstr ""

#: ../../conversion.rst:419
# f9845d8dbf4b4b608f1021e90543169a
msgid "One of the great things about |app| is that it allows you to maintain very complete metadata about all of your books, for example, a rating, tags, comments, etc. This option will create a single page with all this metadata and insert it into the converted ebook, typically just after the cover. Think of it as a way to create your own customised book jacket."
msgstr ""

#: ../../conversion.rst:429
# fcea52ed2b6e4d909c15e20190777ec5
msgid ":guilabel:`Remove first image`"
msgstr ""

#: ../../conversion.rst:425
# d467be50e7e74eb6952b2255095c8938
msgid "Sometimes, the source document you are converting includes the cover as part of the book, instead of as a separate cover. If you also specify a cover in |app|, then the converted book will have two covers. This option will simply remove the first image from the source document, thereby ensuring that the converted book has only one cover, the one specified in |app|."
msgstr ""

#: ../../conversion.rst:432
# cc1c6fa7d9ac4e1ca91d9a7ed1b0ae95
msgid "Table of Contents"
msgstr ""

#: ../../conversion.rst:434
# c035be017e35472982d71421141942da
msgid "When the input document has a Table of Contents in its metadata, |app| will just use that. However, a number of older formats either do not support a metadata based Table of Contents, or individual documents do not have one. In these cases, the options in this section can help you automatically generate a Table of Contents in the converted ebook, based on the actual content in the input document."
msgstr ""

#: ../../conversion.rst:439
# a39d95575ddb41f0920a7d8232e76722
msgid "Using these options can be a little challenging to get exactly right. If you prefer creating/editing the Table of Contents by hand, convert to the EPUB or AZW3 formats and select the checkbox at the bottom of the Table of Contents section of the conversion dialog that says :guilabel:`Manually fine-tune the Table of Contents after conversion`. This will launch the ToC Editor tool after the conversion. It allows you to create entries in the Table of Contents by simply clicking the place in the book where you want the entry to point. You can also use the ToC Editor by itself, without doing a conversion. Go to :guilabel:`Preferences->Toolbars` and add the ToC Editor to the main toolbar. Then just select the book you want to edit and click the ToC Editor button."
msgstr ""

#: ../../conversion.rst:451
# e088024c0f144bd08465e2f0b023fd49
msgid "The first option is :guilabel:`Force use of auto-generated Table of Contents`. By checking this option you can have |app| override any Table of Contents found in the metadata of the input document with the auto generated one."
msgstr ""

#: ../../conversion.rst:455
# 469fafd220f64301b7b713ec875bf63f
msgid "The default way that the creation of the auto generated Table of Contents works is that, |app| will first try to add any detected chapters to the generated table of contents. You can learn how to customize the detection of chapters in the :ref:`structure-detection` section above. If you do not want to include detected chapters in the generated table of contents, check the :guilabel:`Do not add detected chapters` option."
msgstr ""

#: ../../conversion.rst:460
# 8d844b75aece4ee79ec7af8e7a27296f
msgid "If less than the :guilabel:`Chapter threshold` number of chapters were detected, |app| will then add any hyperlinks it finds in the input document to the Table of Contents. This often works well many input documents include a hyperlinked Table of Contents right at the start. The :guilabel:`Number of links` option can be used to control this behavior. If set to zero, no links are added. If set to a number greater than zero, at most that number of links is added."
msgstr ""

#: ../../conversion.rst:466
# 6a6608a1d57e4f7ab0b7e0c5c097060f
msgid "|app| will automatically filter duplicates from the generated Table of Contents. However, if there are some additional undesirable entries, you can filter them using the :guilabel:`TOC Filter` option. This is a regular expression that will match the title of entries in the generated table of contents. Whenever a match is found, it will be removed. For example, to remove all entries titles \"Next\" or \"Previous\" use::"
msgstr ""

#: ../../conversion.rst:473
# 2d081c3a3dd34200a2d76c715b6cb27e
msgid "The :guilabel:`Level 1,2,3 TOC` options allow you to create a sophisticated multi-level Table of Contents. They are XPath expressions that match tags in the intermediate XHTML produced by the conversion pipeline. See the :ref:`conversion-introduction` for how to get access to this XHTML. Also read the :ref:`xpath-tutorial`, to learn how to construct XPath expressions. Next to each option is a button that launches a wizard to help with the creation of basic XPath expressions. The following simple example illustrates how to use these options."
msgstr ""

#: ../../conversion.rst:479
# 2230b74c919a4008b16aa3ca1a97db22
msgid "Suppose you have an input document that results in XHTML that look like this:"
msgstr ""

#: ../../conversion.rst:501
# 7dea4d6e008f4afeb8c425ec219db708
msgid "Then, we set the options as::"
msgstr ""

#: ../../conversion.rst:506
# 89ccaa112e244816ae3922fc51d92903
msgid "This will result in an automatically generated two level Table of Contents that looks like::"
msgstr ""

#: ../../conversion.rst:517
# 78c8cbaca3ae4048b831e69ebbd0bec0
msgid "Not all output formats support a multi level Table of Contents. You should first try with EPUB Output. If that works, then try your format of choice."
msgstr ""

#: ../../conversion.rst:521
# 4b2138d9e1d3424680256fe5515fec21
msgid "Using images as chapter titles when converting HTML input documents"
msgstr ""

#: ../../conversion.rst:523
# 3cefb45673d94cfa859e2b892c3d0a42
msgid "Suppose you want to use an image as your chapter title, but still want |app| to be able to automatically generate a Table of Contents for you from the chapter titles. Use the following HTML markup to achieve this"
msgstr ""

#: ../../conversion.rst:537
# 691b7ddba4d94808b218a77c5e6352eb
msgid "Set the :guilabel:`Level 1 TOC` setting to ``//h:h2``. Then, for chapter two, |app| will take the title from the value of the ``title`` attribute on the ``<h2>`` tag, since the tag has no text."
msgstr ""

#: ../../conversion.rst:540
# 9bff81ab6a7e4067b67b228c01acdb40
msgid "Using tag attributes to supply the text for entries in the Table of Contents"
msgstr ""

#: ../../conversion.rst:542
# 451f56f5ba004e5fa6daca4b3545549d
msgid "If you have particularly long chapter titles and want shortened versions in the Table of Contents, you can use the title attribute to achieve this, for example:"
msgstr ""

#: ../../conversion.rst:557
# f53cbadbfe4c44bc9d4034cceca7e3e5
msgid "Set the :guilabel:`Level 1 TOC` setting to ``//h:h2/@title``. Then |app| will take the title from the value of the ``title`` attribute on the ``<h2>`` tags, instead of using the text inside the tag. Note the trailing ``/@title`` on the XPath expression, you can use this form to tell |app| to get the text from any attribute you like."
msgstr ""

#: ../../conversion.rst:564
# 4df7cf0e224041e3baf7c4b912936ad8
msgid "How options are set/saved for Conversion"
msgstr ""

#: ../../conversion.rst:566
# dbb7e588f8294ebabdaad0a159741e34
msgid "There are two places where conversion options can be set in |app|. The first is in Preferences->Conversion. These settings are the defaults for the conversion options. Whenever you try to convert a new book, the settings set here will be used by default."
msgstr ""

#: ../../conversion.rst:571
# 76bb82b8904845898ad0256996a65143
msgid "You can also change settings in the conversion dialog for each book conversion. When you convert a book, |app| remembers the settings you used for that book, so that if you convert it again, the saved settings for the individual book will take precedence over the defaults set in Preferences. You can restore the individual settings to defaults by using the Restore to defaults button in the individual book conversion dialog. You can remove the saved settings for a group of books by selecting all the books and then clicking the edit metadata button to bring up the bulk metadata edit dialog, near the bottom of the dialog is an option to remove stored conversion settings."
msgstr ""

#: ../../conversion.rst:581
# 06d22d2bb86743d0a0e7dc0b01b33d87
msgid "When you Bulk Convert a set of books, settings are taken in the following order (last one wins):"
msgstr ""

#: ../../conversion.rst:583
# 2b79d8dfe7e94dcea2e34450a69fc050
msgid "From the defaults set in Preferences->Conversion"
msgstr ""

#: ../../conversion.rst:585
# 7fdfaa2511364f0c8330230e7f0d2805
msgid "From the saved conversion settings for each book being converted (if any). This can be turned off by the option in the top left corner of the Bulk Conversion dialog."
msgstr ""

#: ../../conversion.rst:589
# 29dd396edd984c729af3036a06fa59e7
msgid "From the settings set in the Bulk conversion dialog"
msgstr ""

#: ../../conversion.rst:591
# bb1f46356be743849b77c9693e7c2221
msgid "Note that the final settings for each book in a Bulk Conversion will be saved and re-used if the book is converted again. Since the highest priority in Bulk Conversion is given to the settings in the Bulk Conversion dialog, these will override any book specific settings. So you should only bulk convert books together that need similar settings. The exceptions are metadata and input format specific settings. Since the Bulk Conversion dialog does not have settings for these two categories, they will be taken from book specific settings (if any) or the defaults."
msgstr ""

#: ../../conversion.rst:602
# d63ba5d0b1344ccca47de1fb7babe184
msgid "You can see the actual settings used during any conversion by clicking the rotating icon in the lower right corner and then double clicking the individual conversion job. This will bring up a conversion log that will contain the actual settings used, near the top."
msgstr ""

#: ../../conversion.rst:607
# 624b3899fa7c416a8f367b42daa57780
msgid "Format specific tips"
msgstr ""

#: ../../conversion.rst:609
# e7560cc603f0477e9a9e28ee377cc149
msgid "Here you will find tips specific to the conversion of particular formats. Options specific to particular format, whether input or output are available in the conversion dialog under their own section, for example `TXT Input` or `EPUB Output`."
msgstr ""

#: ../../conversion.rst:614
# b75e087625fe4e8791448a80956ebc03
msgid "Convert Microsoft Word documents"
msgstr ""

#: ../../conversion.rst:616
# 39d897e185c048ea895e98d690ca9735
msgid "|app| can automatically convert ``.docx`` files created by Microsoft Word 2007 and newer. Just add the file to |app| and click convert (make sure you are running the latest version of |app| as support for ``.docx`` files is very new)."
msgstr ""

#: ../../conversion.rst:621
# 5add78d2fb6a48d49f46901a7ae0a78a
msgid "There is a `demo .docx file <http://calibre-ebook.com/downloads/demos/demo.docx>`_ that demonstrates the capabilities of the |app| conversion engine. Just download it and convert it to EPUB or AZW3 to see what |app| can do."
msgstr ""

#: ../../conversion.rst:625
# 48bbd3865fca424db6b0566c00c458ac
msgid "|app| will automatically generate a Table of Contents based on headings if you mark your headings with the ``Heading 1``, ``Heading 2``, etc. styles in Word. Open the output ebook in the calibre viewer and click the Table of Contents button to view the generated Table of Contents."
msgstr ""

#: ../../conversion.rst:631
# 52c221abd6b74c6092ce00c05b5f2f90
msgid "Older .doc files"
msgstr ""

#: ../../conversion.rst:633
# 0e5491a020b6473b8a1d8b997d46df51
msgid "For older .doc files, you can save the document as HTML with Microsoft Word and then convert the resulting HTML file with |app|. When saving as HTML, be sure to use the \"Save as Web Page, Filtered\" option as this will produce clean HTML that will convert well. Note that Word produces really messy HTML, converting it can take a long time, so be patient. If you have a newer version of Word available, you can directly save it as docx as well."
msgstr ""

#: ../../conversion.rst:640
# 27c47dc8696e442c820f46f3a4e61b1f
msgid "Another alternative is to use the free OpenOffice. Open your .doc file in OpenOffice and save it in OpenOffice's format .odt. |app| can directly convert .odt files."
msgstr ""

#: ../../conversion.rst:645
# 2c087aa3aca9471f81dbb032b0d83818
msgid "Convert TXT documents"
msgstr ""

#: ../../conversion.rst:647
# 40f2d68f0b0b48e8a9d65adc6f4dcfc1
msgid "TXT documents have no well defined way to specify formatting like bold, italics, etc, or document structure like paragraphs, headings, sections and so on, but there are a variety of conventions commonly used.  By default |app| attempts automatic detection of the correct formatting and markup based on those conventions."
msgstr ""

#: ../../conversion.rst:652
# 0010ab81bf2a4c1fb0b3a90ee0527bc4
msgid "TXT input supports a number of options to differentiate how paragraphs are detected."
msgstr ""

#: ../../conversion.rst:656
# 0b2222b6efed4edcabf8699ef59395af
msgid ":guilabel:`Paragraph Style: Auto`"
msgstr ""

#: ../../conversion.rst:655
# a212309725f84f30ba9da5ccfd939152
msgid "Analyzes the text file and attempts to automatically determine how paragraphs are defined.  This option will generally work fine, if you achieve undesirable results try one of the manual options."
msgstr ""

#: ../../conversion.rst:664
# fbe04e62da764e4da270b687ff9e4715
msgid ":guilabel:`Paragraph Style: Block`"
msgstr ""

#: ../../conversion.rst:659
# ea0fca8a408b4e0aa485c32e42255971
msgid "Assumes one or more blank lines are a paragraph boundary::"
msgstr ""

#: ../../conversion.rst:671
# 06137cd781f7497aa84f0f02e705be07
msgid ":guilabel:`Paragraph Style: Single`"
msgstr ""

#: ../../conversion.rst:667
# 98b9f1d29f754969b4ddefc1b1e680bc
msgid "Assumes that every line is a paragraph::"
msgstr ""

#: ../../conversion.rst:682
# dcf38950ed244cd889c47e774feaf962
msgid ":guilabel:`Paragraph Style: Print`"
msgstr ""

#: ../../conversion.rst:674
# 99f966d4ada24e12b38478dd7c5662e7
msgid "Assumes that every paragraph starts with an indent (either a tab or 2+ spaces). Paragraphs end when the next line that starts with an indent is reached::"
msgstr ""

#: ../../conversion.rst:686
# b07b1eafbff1465db74d3293ae950a3d
msgid ":guilabel:`Paragraph Style: Unformatted`"
msgstr ""

#: ../../conversion.rst:685
# c9925d6e668a4ce78def1cef87a493a1
msgid "Assumes that the document has no formatting, but does use hard line breaks.  Punctuation and median line length are used to attempt to re-create paragraphs."
msgstr ""

#: ../../conversion.rst:690
# 403a9640b8b045b69b9b2d21e115133c
msgid ":guilabel:`Formatting Style: Auto`"
msgstr ""

#: ../../conversion.rst:689
# 48d5e8d8b39c496fba501015124bec44
msgid "Attemtps to detect the type of formatting markup being used.  If no markup is used then heuristic formatting will be applied."
msgstr ""

#: ../../conversion.rst:694
# 3501fcbfa4ee48959a4076747aec7c85
msgid ":guilabel:`Formatting Style: Heuristic`"
msgstr ""

#: ../../conversion.rst:693
# c81fd871b0804d2fa0109c58b75517fd
msgid "Analyzes the document for common chapter headings, scene breaks, and italicized words and applies the appropriate html markup during conversion."
msgstr ""

#: ../../conversion.rst:701
# 30e6398276084ad999997b88cce8596f
msgid ":guilabel:`Formatting Style: Markdown`"
msgstr ""

#: ../../conversion.rst:697
# 84c65195258d40adb1dfc5c0fdd3df0b
msgid "|app| also supports running TXT input though a transformation preprocessor known as markdown. Markdown allows for basic formatting to be added to TXT documents, such as bold, italics, section headings, tables, lists, a Table of Contents, etc. Marking chapter headings with a leading # and setting the chapter XPath detection expression to \"//h:h1\" is the easiest way to have a proper table of contents generated from a TXT document. You can learn more about the markdown syntax at `daringfireball <http://daringfireball.net/projects/markdown/syntax>`_."
msgstr ""

#: ../../conversion.rst:704
# 7934b96d69814f13bcf2b6ae2a1b257b
msgid ":guilabel:`Formatting Style: None`"
msgstr ""

#: ../../conversion.rst:704
# 202700d9495643f5bfe8a1e1dd5ecc65
msgid "Applies no special formatting to the text, the document is converted to html with no other changes."
msgstr ""

#: ../../conversion.rst:709
# ed84a6b8759a4e10948976c0ae205058
msgid "Convert PDF documents"
msgstr ""

#: ../../conversion.rst:711
# bff8dcfa69dc43618b9dca208285e199
msgid "PDF documents are one of the worst formats to convert from. They are a fixed page size and text placement format. Meaning, it is very difficult to determine where one paragraph ends and another begins. |app| will try to unwrap paragraphs using a configurable, :guilabel:`Line Un-Wrapping Factor`. This is a scale used to determine the length at which a line should be unwrapped. Valid values are a decimal between 0 and 1. The default is 0.45, just under the median line length. Lower this value to include more text in the unwrapping. Increase to include less. You can adjust this value in the conversion settings under :guilabel:`PDF Input`."
msgstr ""

#: ../../conversion.rst:718
# 65e4e7aafcc4436c8f0cb6f0440d3398
msgid "Also, they often have headers and footers as part of the document that will become included with the text. Use the Search and Replace panel to remove headers and footers to mitigate this issue. If the headers and footers are not removed from the text it can throw off the paragraph unwrapping. To learn how to use the header and footer removal options, read :ref:`regexptutorial`."
msgstr ""

#: ../../conversion.rst:723
# ef73e7ca10d34190accbbfe69eebcd77
msgid "Some limitations of PDF input are:"
msgstr ""

#: ../../conversion.rst:725
# 2db7e715cfc74527869307ac656795d9
msgid "Complex, multi-column, and image based documents are not supported."
msgstr ""

#: ../../conversion.rst:726
# bca7f894c9bb463fb11ef51e23b64aad
msgid "Extraction of vector images and tables from within the document is also not supported."
msgstr ""

#: ../../conversion.rst:727
# 25ffdac52a1d4b26afaeb77c2bcc7fd7
msgid "Some PDFs use special glyphs to represent ll or ff or fi, etc. Conversion of these may or may not work depending on just how they are represented internally in the PDF."
msgstr ""

#: ../../conversion.rst:728
# 25c8f4e633294c6d9c3f03f49b7c8c5a
msgid "Links and Tables of Contents are not supported"
msgstr ""

#: ../../conversion.rst:729
# 115ff24caa9f46789f3cc13b07e33c13
msgid "PDFs that use embedded non-unicode fonts to represent non-English characters will result in garbled output for those characters"
msgstr ""

#: ../../conversion.rst:730
# 18e92f009863490ba38f487f2d2e6c01
msgid "Some PDFs are made up of photographs of the page with OCRed text behind them. In such cases |app| uses the OCRed text, which can be very different from what you see when you view the PDF file"
msgstr ""

#: ../../conversion.rst:731
# 846ff1f02ca34334b1c7c47c4ee792bb
msgid "PDFs that are used to display complex text, like right to left languages and math typesetting will not convert correctly"
msgstr ""

#: ../../conversion.rst:733
# fe6e36c3d8964deca75ea5d5ac48349e
msgid "To re-iterate **PDF is a really, really bad** format to use as input. If you absolutely must use PDF, then be prepared for an output ranging anywhere from decent to unusable, depending on the input PDF."
msgstr ""

#: ../../conversion.rst:737
# 2c3999d06c6c4061a940f790441761b5
msgid "Comic Book Collections"
msgstr ""

#: ../../conversion.rst:739
# d4d46a2fb27642b3b58907bfdfdf5e18
msgid "A comic book collection is a .cbc file. A .cbc file is a zip file that contains other CBZ/CBR files. In addition the .cbc file must contain a simple text file called comics.txt, encoded in UTF-8. The comics.txt file must contain a list of the comics files inside the .cbc file, in the form filename:title, as shown below::"
msgstr ""

#: ../../conversion.rst:747
# bc05df46fdd744098eecf7c8966e2934
msgid "The .cbc file will then contain::"
msgstr ""

#: ../../conversion.rst:754
# f18c1384b53e430895009f9d5147c313
msgid "|app| will automatically convert this .cbc file into a ebook with a Table of Contents pointing to each entry in comics.txt."
msgstr ""

#: ../../conversion.rst:758
# 8bf8cbd1285a4cfd89f1e34ad314725b
msgid "EPUB advanced formatting demo"
msgstr ""

#: ../../conversion.rst:760
# fd1bb8e35d40455dbed1d38df27dd07e
msgid "Various advanced formatting for EPUB files is demonstrated in this `demo file <http://calibre-ebook.com/downloads/demos/demo.epub>`_. The file was created from hand coded HTML using calibre and is meant to be used as a template for your own EPUB creation efforts."
msgstr ""

#: ../../conversion.rst:763
# d62fbcf26e3047aeb5a65ca30c6cb151
msgid "The source HTML it was created from is available `demo.zip <http://calibre-ebook.com/downloads/demos/demo.zip>`_. The settings used to create the EPUB from the ZIP file are::"
msgstr ""

#: ../../conversion.rst:768
# 8202fce1258c48238459edc113874dd2
msgid "Note that because this file explores the potential of EPUB, most of the advanced formatting is not going to work on readers less capable than |app|'s built-in EPUB viewer."
msgstr ""

#: ../../conversion.rst:772
# 62197ff64dcb42ffa3a16167cde6dfb8
msgid "Convert ODT documents"
msgstr ""

#: ../../conversion.rst:774
# 190eb6299e6d48969ddd8c7f3cb76e83
msgid "|app| can directly convert ODT (OpenDocument Text) files. You should use styles to format your document and minimize the use of direct formatting. When inserting images into your document you need to anchor them to the paragraph, images anchored to a page will all end up in the front of the conversion."
msgstr ""

#: ../../conversion.rst:777
# 139ae84a38d948e58b5b18a67b8fdb84
msgid "To enable automatic detection of chapters, you need to mark them with the build-in styles called 'Heading 1', 'Heading 2', ..., 'Heading 6' ('Heading 1' equates to the HTML tag <h1>, 'Heading 2' to <h2> etc). When you convert in |app| you can enter which style you used into the 'Detect chapters at' box. Example:"
msgstr ""

#: ../../conversion.rst:779
# 9338270a5ffa407e931d7f8f2380b1b5
msgid "If you mark Chapters with style 'Heading 2', you have to set the 'Detect chapters at' box to ``//h:h2``"
msgstr ""

#: ../../conversion.rst:780
# 556902833aa44faf930853e65fa90b8d
msgid "For a nested TOC with Sections marked with 'Heading 2' and the Chapters marked with 'Heading 3' you need to enter ``//h:h2|//h:h3``. On the Convert - TOC page set the 'Level 1 TOC' box to ``//h:h2`` and the 'Level 2 TOC' box to ``//h:h3``."
msgstr ""

#: ../../conversion.rst:782
# f3dce66270ea44648b26dc2498d17729
msgid "Well-known document properties (Title, Keywords, Description, Creator) are recognized and |app| will use the first image (not to small, and with good aspect-ratio) as the cover image."
msgstr ""

#: ../../conversion.rst:784
# 8c5bb324e8a84cf599ef7512ff1db2c3
msgid "There is also an advanced property conversion mode, which is activated by setting the custom property ``opf.metadata`` ('Yes or No' type) to Yes in your ODT document (File->Properties->Custom Properties). If this property is detected by |app|, the following custom properties are recognized (``opf.authors`` overrides document creator)::"
msgstr ""

#: ../../conversion.rst:797
# db723249903c4706877c6f84da36b0b1
msgid "In addition to this, you can specify the picture to use as the cover by naming it ``opf.cover`` (right click, Picture->Options->Name) in the ODT. If no picture with this name is found, the 'smart' method is used.  As the cover detection might result in double covers in certain output formats, the process will remove the paragraph (only if the only content is the cover!) from the document. But this works only with the named picture!"
msgstr ""

#: ../../conversion.rst:804
# 2da806bbd4474ee1a74e87327383ea9d
msgid "To disable cover detection you can set the custom property ``opf.nocover`` ('Yes or No' type) to Yes in advanced mode."
msgstr ""

#: ../../conversion.rst:807
# c689352f4c374cf98b019ba4329ed444
msgid "Converting to PDF"
msgstr ""

#: ../../conversion.rst:809
# e71286f75ea942a6a69d1fc447b03b31
msgid "The first, most important, setting to decide on when converting to PDF is the page size. By default, |app| uses a page size defined by the current :guilabel:`Output profile`. So if your output profile is set to Kindle, |app| will create a PDF with page size suitable for viewing on the small kindle screen. However, if you view this PDF file on a computer screen, then it will appear to have too large fonts. To create \"normal\" sized PDFs, use the :guilabel:`Override page size` option under :guilabel:`PDF Output` in the conversion dialog."
msgstr ""

#: ../../conversion.rst:818
# 70d0ce71a6b8420db6af5a3ff0ab51e8
msgid "Headers and Footers"
msgstr ""

#: ../../conversion.rst:819
# 3085c7e0f71e4326b419cb9f48be6286
msgid "You can insert arbitrary headers and footers on each page of the PDF by specifying header and footer templates. Templates are just snippets of HTML code that get rendered in the header and footer locations. For example, to display page numbers centered at the bottom of every page, in green, use the following footer template::"
msgstr ""

#: ../../conversion.rst:827
# 6bcfd35eb79a4009a1bfa304b29f1a6b
msgid "|app| will automatically replace _PAGENUM_ with the current page number. You can even put different content on even and odd pages, for example the following header template will show the title on odd pages and the author on even pages::"
msgstr ""

#: ../../conversion.rst:833
# 63f18a6a64884c85989000ff6d4524a0
msgid "|app| will automatically replace _TITLE_ and _AUTHOR_ with the title and author of the document being converted.  You can also display text at the left and right edges and change the font size, as demonstrated with this header template::"
msgstr ""

#: ../../conversion.rst:840
# a2720aadca184100954ca32592fa47a7
msgid "This will display the title at the left and the author at the right, in a font size smaller than the main text."
msgstr ""

#: ../../conversion.rst:843
# d6eef2bf5eaf49b88bf3950c3e2e3e9c
msgid "You can also use the current section in templates, as shown below::"
msgstr ""

#: ../../conversion.rst:847
# 7ec8d825f0de4579ae5aa1df1e72e7a5
msgid "_SECTION_ is replaced by whatever the name of the current section is. These names are taken from the metadata Table of Contents in the document (the PDF Outline). If the document has no table of contents then it will be replaced by empty text. If a single PDF page has multiple sections, the first section on the page will be used."
msgstr ""

#: ../../conversion.rst:853
# cccc17ede2dd4e5f93709269ca641958
msgid "You can even use javascript inside the header and footer templates, for example, the following template will cause page numbers to start at 4 instead of 1::"
msgstr ""

#: ../../conversion.rst:859
# c39adb8f447a492eaca39ce49a2a1b2d
msgid "When adding headers and footers make sure you set the page top and bottom margins to large enough values, under the Page Setup section of the conversion dialog."
msgstr ""

#: ../../conversion.rst:864
# 3a81ac798fe24be5918ffb6c4b0ff228
msgid "Printable Table of Contents"
msgstr ""

#: ../../conversion.rst:866
# b7a92057541d42c98e0d6cb61b914b42
msgid "You can also insert a printable Table of Contents at the end of the PDF that lists the page numbers for every section. This is very useful if you intend to print out the PDF to paper. If you wish to use the PDF on an electronic device, then the PDF Outline provides this functionality and is generated by default."
msgstr ""

#: ../../conversion.rst:871
# 2d45ad695d594bddb28a9fc886bbf755
msgid "You can customize the look of the the generated Table of contents by using the Extra CSS conversion setting under the Look & Feel part of the conversion dialog. The default css used is listed below, simply copy it and make whatever changes you like."
msgstr ""

