# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.27.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-01 09:17+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/regexp.rst:4
# 7e73d5db70104b07be062694feb9b3bf
msgid "All about using regular expressions in calibre"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:6
# 0eec86a237dc41f4b089c9d6f1597c01
msgid "Regular expressions are features used in many places in calibre to perform sophisticated manipulation of ebook content and metadata. This tutorial is a gentle introduction to getting you started with using regular expressions in calibre."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:0
# d62a5591aaf845fbbb989d57fe04eafe
msgid "Contents"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:14
# 0255f33173d94255b194b2e3e2d54ac8
msgid "First, a word of warning and a word of courage"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:16
# 48af969a3516433e87dea087ab6a7e38
msgid "This is, inevitably, going to be somewhat technical- after all, regular expressions are a technical tool for doing technical stuff. I'm going to have to use some jargon and concepts that may seem complicated or convoluted. I'm going to try to explain those concepts as clearly as I can, but really can't do without using them at all. That being said, don't be discouraged by any jargon, as I've tried to explain everything new. And while regular expressions themselves may seem like an arcane, black magic (or, to be more prosaic, a random string of mumbo-jumbo letters and signs), I promise that they are not all that complicated. Even those who understand regular expressions really well have trouble reading the more complex ones, but writing them isn't as difficult- you construct the expression step by step. So, take a step and follow me into the rabbit hole."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:19
# 5043edfececb42dc8d3cff20adb1beb2
msgid "Where in calibre can you use regular expressions?"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:21
# 48c6a79cea384dee94421319812549c0
msgid "There are a few places calibre uses regular expressions. There's the Search & Replace in conversion options, metadata detection from filenames in the import settings and Search & Replace when editing the metadata of books in bulk. The calibre book editor can also use regular expressions in its search and replace feature."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:28
# 457e8ba3e3514b81bdfcd0e26eee5b16
msgid "What on earth *is* a regular expression?"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:30
# aaea5c9861d443eea0446123a6f69be8
msgid "A regular expression is a way to describe sets of strings. A single regular expression can *match* a number of different strings. This is what makes regular expression so powerful -- they are a concise way of describing a potentially large number of variations."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:32
# 539e63911f684826aae3a93354c63d1c
msgid "I'm using string here in the sense it is used in programming languages: a string of one or more characters, characters including actual characters, numbers, punctuation and so-called whitespace (linebreaks, tabulators etc.). Please note that generally, uppercase and lowercase characters are not considered the same, thus \"a\" being a different character from \"A\" and so forth. In calibre, regular expressions are case insensitive in the search bar, but not in the conversion options. There's a way to make every regular expression case insensitive, but we'll discuss that later. It gets complicated because regular expressions allow for variations in the strings it matches, so one expression can match multiple strings, which is why people bother using them at all. More on that in a bit."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:35
# cadd19e38e684714879774a555cd2918
msgid "Care to explain?"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:37
# f728ee3b52a34d23b1dd52c8a6cd3c55
msgid "Well, that's why we're here. First, this is the most important concept in regular expressions: *A string by itself is a regular expression that matches itself*. That is to say, if I wanted to match the string ``\"Hello, World!\"`` using a regular expression, the regular expression to use would be ``Hello, World!``. And yes, it really is that simple. You'll notice, though, that this *only* matches the exact string ``\"Hello, World!\"``, not e.g. ``\"Hello, wOrld!\"`` or ``\"hello, world!\"`` or any other such variation."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:40
# 21e58f3e76fe4ac6a1da6944c595cde2
msgid "That doesn't sound too bad. What's next?"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:42
# d9ffa26cd6884fe09915efd0013c723d
msgid "Next is the beginning of the really good stuff. Remember where I said that regular expressions can match multiple strings? This is were it gets a little more complicated. Say, as a somewhat more practical exercise, the ebook you wanted to convert had a nasty footer counting the pages, like \"Page 5 of 423\". Obviously the page number would rise from 1 to 423, thus you'd have to match 423 different strings, right? Wrong, actually: regular expressions allow you to define sets of characters that are matched: To define a set, you put all the characters you want to be in the set into square brackets. So, for example, the set ``[abc]`` would match either the character \"a\", \"b\" or \"c\". *Sets will always only match one of the characters in the set*. They \"understand\" character ranges, that is, if you wanted to match all the lower case characters, you'd use the set ``[a-z]`` for lower- and uppercase characters you'd use ``[a-zA-Z]`` and so on. Got the idea? So, obviously, using the expression ``Page [0-9] of 423`` you'd be able to match the first 9 pages, thus reducing the expressions needed to three: The second expression ``Page [0-9][0-9] of 423`` would match all two-digit page numbers, and I'm sure you can guess what the third expression would look like. Yes, go ahead. Write it down."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:45
# e36d8e7d94334b1c8e05f5f699bb1407
msgid "Hey, neat! This is starting to make sense!"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:47
# ac7205d33aef4849b71e910f4c809c20
msgid "I was hoping you'd say that. But brace yourself, now it gets even better! We just saw that using sets, we could match one of several characters at once. But you can even repeat a character or set, reducing the number of expressions needed to handle the above page number example to one. Yes, ONE! Excited? You should be! It works like this: Some so-called special characters, \"+\", \"?\" and \"*\", *repeat the single element preceding them*. (Element means either a single character, a character set, an escape sequence or a group (we'll learn about those last two later)- in short, any single entity in a regular expression.) These characters are called wildcards or quantifiers. To be more precise, \"?\" matches *0 or 1* of the preceding element, \"*\" matches *0 or more* of the preceding element and \"+\" matches *1 or more* of the preceding element. A few examples: The expression ``a?`` would match either \"\" (which is the empty string, not strictly useful in this case) or \"a\", the expression ``a*`` would match \"\", \"a\", \"aa\" or any number of a's in a row, and, finally, the expression ``a+`` would match \"a\", \"aa\" or any number of a's in a row (Note: it wouldn't match the empty string!). Same deal for sets: The expression ``[0-9]+`` would match *every integer number there is*! I know what you're thinking, and you're right: If you use that in the above case of matching page numbers, wouldn't that be the single one expression to match all the page numbers? Yes, the expression ``Page [0-9]+ of 423`` would match every page number in that book!"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:50
# 742fb07ee5964b69aa4b0318908b6a80
msgid "A note on these quantifiers: They generally try to match as much text as possible, so be careful when using them. This is called \"greedy behaviour\"- I'm sure you get why. It gets problematic when you, say, try to match a tag. Consider, for example, the string ``\"<p class=\"calibre2\">Title here</p>\"`` and let's say you'd want to match the opening tag (the part between the first pair of angle brackets, a little more on tags later). You'd think that the expression ``<p.*>`` would match that tag, but actually, it matches the whole string! (The character \".\" is another special character. It matches anything *except* linebreaks, so, basically, the expression ``.*`` would match any single line you can think of.) Instead, try using ``<p.*?>`` which makes the quantifier ``\"*\"`` non-greedy. That expression would only match the first opening tag, as intended. There's actually another way to accomplish this: The expression ``<p[^>]*>`` will match that same opening tag- you'll see why after the next section. Just note that there quite frequently is more than one way to write a regular expression."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:54
# ab930116fe6b410d836fc9d232cd4d1d
msgid "Well, these special characters are very neat and all, but what if I wanted to match a dot or a question mark?"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:56
# 03db1a377052403b9ec691b65971cb50
msgid "You can of course do that: Just put a backslash in front of any special character and it is interpreted as the literal character, without any special meaning. This pair of a backslash followed by a single character is called an escape sequence, and the act of putting a backslash in front of a special character is called escaping that character. An escape sequence is interpreted as a single element. There are of course escape sequences that do more than just escaping special characters, for example ``\"\\t\"`` means a tabulator. We'll get to some of the escape sequences later. Oh, and by the way, concerning those special characters: Consider any character we discuss in this introduction as having some function to be special and thus needing to be escaped if you want the literal character."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:59
# e79abb0030854742bf5f36267430f71d
msgid "So, what are the most useful sets?"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:61
# 066de2993c704a28802af66414f6e9ab
msgid "Knew you'd ask. Some useful sets are ``[0-9]`` matching a single number, ``[a-z]`` matching a single lowercase letter, ``[A-Z]`` matching a single uppercase letter, ``[a-zA-Z]`` matching a single letter and ``[a-zA-Z0-9]`` matching a single letter or number. You can also use an escape sequence as shorthand::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:68
# 1b83bd34d22a41e7b4e8bdd8f5d03241
msgid "\"Whitespace\" is a term for anything that won't be printed. These characters include space, tabulator, line feed, form feed and carriage return."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:70
# f0d1aec655104702afa40712b538e282
msgid "As a last note on sets, you can also define a set as any character *but* those in the set. You do that by including the character ``\"^\"`` as the *very first character in the set*. Thus, ``[^a]`` would match any character excluding \"a\". That's called complementing the set. Those escape sequence shorthands we saw earlier can also be complemented: ``\"\\D\"`` means any non-number character, thus being equivalent to ``[^0-9]``. The other shorthands can be complemented by, you guessed it, using the respective uppercase letter instead of the lowercase one. So, going back to the example ``<p[^>]*>`` from the previous section, now you can see that the character set it's using tries to match any character except for a closing angle bracket."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:73
# f32dfd57978d43d5b1f2da8353c59184
msgid "But if I had a few varying strings I wanted to match, things get complicated?"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:75
# 8eeb1b8ae8c246908dee75c8f23fa076
msgid "Fear not, life still is good and easy. Consider this example: The book you're converting has \"Title\" written on every odd page and \"Author\" written on every even page. Looks great in print, right? But in ebooks, it's annoying. You can group whole expressions in normal parentheses, and the character ``\"|\"`` will let you match *either* the expression to its right *or* the one to its left. Combine those and you're done. Too fast for you? Okay, first off, we group the expressions for odd and even pages, thus getting ``(Title)(Author)`` as our two needed expressions. Now we make things simpler by using the vertical bar (``\"|\"`` is called the vertical bar character): If you use the expression ``(Title|Author)`` you'll either get a match for \"Title\" (on the odd pages) or you'd match \"Author\" (on the even pages). Well, wasn't that easy?"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:77
# 1f081c0caa7449228ca77692a3d27a0b
msgid "You can, of course, use the vertical bar without using grouping parentheses, as well. Remember when I said that quantifiers repeat the element preceding them? Well, the vertical bar works a little differently: The expression \"Title|Author\" will also match either the string \"Title\" or the string \"Author\", just as the above example using grouping. *The vertical bar selects between the entire expression preceding and following it*. So, if you wanted to match the strings \"Calibre\" and \"calibre\" and wanted to select only between the upper- and lowercase \"c\", you'd have to use the expression ``(c|C)alibre``, where the grouping ensures that only the \"c\" will be selected. If you were to use ``c|Calibre``, you'd get a match on the string \"c\" or on the string \"Calibre\", which isn't what we wanted. In short: If in doubt, use grouping together with the vertical bar."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:80
# 95c8fa0ece8d4203a2a3402cae124949
msgid "You missed..."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:82
# a54ed875ce8f40b5b061e1ce0efaa1ad
msgid "... wait just a minute, there's one last, really neat thing you can do with groups. If you have a group that you previously matched, you can use references to that group later in the expression: Groups are numbered starting with 1, and you reference them by escaping the number of the group you want to reference, thus, the fifth group would be referenced as ``\\5``. So, if you searched for ``([^ ]+) \\1`` in the string \"Test Test\", you'd match the whole string!"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:86
# b7d2be47961042e0859699732b27627e
msgid "In the beginning, you said there was a way to make a regular expression case insensitive?"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:88
# 16b374b9e9574483af72858b8941cb1b
msgid "Yes, I did, thanks for paying attention and reminding me. You can tell calibre how you want certain things handled by using something called flags. You include flags in your expression by using the special construct ``(?flags go here)`` where, obviously, you'd replace \"flags go here\" with the specific flags you want. For ignoring case, the flag is ``i``, thus you include ``(?i)`` in your expression. Thus, ``test(?i)`` would match \"Test\", \"tEst\", \"TEst\" and any case variation you could think of."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:90
# b8fe67b13b9f4fa8af1a16cd9959c195
msgid "Another useful flag lets the dot match any character at all, *including* the newline, the flag ``s``. If you want to use multiple flags in an expression, just put them in the same statement: ``(?is)`` would ignore case and make the dot match all. It doesn't matter which flag you state first, ``(?si)`` would be equivalent to the above. By the way, good places for putting flags in your expression would be either the very beginning or the very end. That way, they don't get mixed up with anything else."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:93
# 27c4356747774ac1be9e881bf515f8df
msgid "I think I'm beginning to understand these regular expressions now... how do I use them in calibre?"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:96
# 01a6066559934d14a118478d255ccf4f
msgid "Conversions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:98
# f5fd1085ce32445babdd93ddb5c6c49b
msgid "Let's begin with the conversion settings, which is really neat. In the Search and Replace part, you can input a regexp (short for regular expression) that describes the string that will be replaced during the conversion. The neat part is the wizard. Click on the wizard staff and you get a preview of what calibre \"sees\" during the conversion process. Scroll down to the string you want to remove, select and copy it, paste it into the regexp field on top of the window. If there are variable parts, like page numbers or so, use sets and quantifiers to cover those, and while you're at it, remember to escape special characters, if there are some. Hit the button labeled :guilabel:`Test` and calibre highlights the parts it would replace were you to use the regexp. Once you're satisfied, hit OK and convert. Be careful if your conversion source has tags like this example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:108
# 384af8d521c7423b82c8768c86b541c6
msgid "(shamelessly ripped out of `this thread <http://www.mobileread.com/forums/showthread.php?t=75594\">`_). You'd have to remove some of the tags as well. In this example, I'd recommend beginning with the tag ``<b class=\"calibre2\">``, now you have to end with the corresponding closing tag (opening tags are ``<tag>``, closing tags are ``</tag>``), which is simply the next ``</b>`` in this case. (Refer to a good HTML manual or ask in the forum if you are unclear on this point.) The opening tag can be described using ``<b.*?>``, the closing tag using ``</b>``, thus we could remove everything between those tags using ``<b.*?>.*?</b>``. But using this expression would be a bad idea, because it removes everything enclosed by <b>- tags (which, by the way, render the enclosed text in bold print), and it's a fair bet that we'll remove portions of the book in this way. Instead, include the beginning of the enclosed string as well, making the regular expression ``<b.*?>\\s*Generated\\s+by\\s+ABC\\s+Amber\\s+LIT.*?</b>`` The ``\\s`` with quantifiers are included here instead of explicitly using the spaces as seen in the string to catch any variations of the string that might occur. Remember to check what calibre will remove to make sure you don't remove any portions you want to keep if you test a new expression. If you only check one occurrence, you might miss a mismatch somewhere else in the text. Also note that should you accidentally remove more or fewer tags than you actually wanted to, calibre tries to repair the damaged code after doing the removal."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:111
# 9ecd0bbe091e4beaa85e1d6bf2a59177
msgid "Adding books"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:113
# cd8e6df7468c4837aa08aa293b153b5a
msgid "Another thing you can use regular expressions for is to extract metadata from filenames. You can find this feature in the \"Adding books\" part of the settings. There's a special feature here: You can use field names for metadata fields, for example ``(?P<title>)`` would indicate that calibre uses this part of the string as book title. The allowed field names are listed in the windows, together with another nice test field. An example: Say you want to import a whole bunch of files named like ``Classical Texts: The Divine Comedy by Dante Alighieri.mobi``. (Obviously, this is already in your library, since we all love classical italian poetry) or ``Science Fiction epics: The Foundation Trilogy by Isaac Asimov.epub``. This is obviously a naming scheme that calibre won't extract any meaningful data out of - its standard expression for extracting metadata is ``(?P<title>.+) - (?P<author>[^_]+)``. A regular expression that works here would be ``[a-zA-Z]+: (?P<title>.+) by (?P<author>.+)``. Please note that, inside the group for the metadata field, you need to use expressions to describe what the field actually matches. And also note that, when using the test field calibre provides, you need to add the file extension to your testing filename, otherwise you won't get any matches at all, despite using a working expression."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:117
# d7a4829d802b492cbe6c771eec79e1c6
msgid "Bulk editing metadata"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:119
# ed9291d0fb464875a1a98f979625065d
msgid "The last part is regular expression search and replace in metadata fields. You can access this by selecting multiple books in the library and using bulk metadata edit. Be very careful when using this last feature, as it can do **Very Bad Things** to your library! Doublecheck that your expressions do what you want them to using the test fields, and only mark the books you really want to change! In the regular expression search mode, you can search in one field, replace the text with something and even write the result into another field. A practical example: Say your library contained the books of Frank Herbert's Dune series, named after the fashion ``Dune 1 - Dune``, ``Dune 2 - Dune Messiah`` and so on. Now you want to get ``Dune`` into the series field. You can do that by searching for ``(.*?) \\d+ - .*`` in the title field and replacing it with ``\\1`` in the series field. See what I did there? That's a reference to the first group you're replacing the series field with. Now that you have the series all set, you only need to do another search for ``.*? -`` in the title field and replace it with ``\"\"`` (an empty string), again in the title field, and your metadata is all neat and tidy. Isn't that great? By the way, instead of replacing the entire field, you can also append or prepend to the field, so, if you *wanted* the book title to be prepended with series info, you could do that as well. As you by now have undoubtedly noticed, there's a checkbox labeled :guilabel:`Case sensitive`, so you won't have to use flags to select behaviour here."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:121
# 2f4a667411b144888a8753f484b6096f
msgid "Well, that just about concludes the very short introduction to regular expressions. Hopefully I'll have shown you enough to at least get you started and to enable you to continue learning by yourself- a good starting point would be the `Python documentation for regexps <https://docs.python.org/2/library/re.html>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:123
# 5042fd82289246d985466895c0bc33f3
msgid "One last word of warning, though: Regexps are powerful, but also really easy to get wrong. calibre provides really great testing possibilities to see if your expressions behave as you expect them to. Use them. Try not to shoot yourself in the foot. (God, I love that expression...) But should you, despite the warning, injure your foot (or any other body parts), try to learn from it."
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:126
# 74eeb3f958b14aa086f29527685ca982
msgid "Credits"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:128
# 1f84967747b9425091d7944737e3f2ae
msgid "Thanks for helping with tips, corrections and such:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:130
# 715adaab2e134b77aea58e13967e4907
msgid "ldolse"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:131
# 998f56a3359540219ce3b2febe6345b5
msgid "kovidgoyal"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:132
# 1ced6b94a4794187930e1d008f8bf881
msgid "chaley"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:133
# d2c7685164d844ca9b72b53611d67214
msgid "dwanthny"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:134
# f25de1305519446abb08cf1d419492df
msgid "kacir"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:135
# bff036e0f87a4c56841140cbbfbafe40
msgid "Starson17"
msgstr ""

#: ../../home/kovid/work/calibre/manual/regexp.rst:137
# 64d41a811f524d2e9d523b1071587dc2
msgid "For more about regexps see `The Python User Manual <https://docs.python.org/2/library/re.html>`_."
msgstr ""

