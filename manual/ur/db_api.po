# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-25 15:57+0530\n"
"PO-Revision-Date: 2014-10-25 10:19+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Urdu (http://www.transifex.com/projects/p/calibre/language/ur/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ur\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 77dc8d4f41f941828b68f58c23d79b61
#: ../../home/kovid/work/calibre/manual/db_api.rst:4
msgid "API Documentation for the database interface"
msgstr ""

# d2958b97c5514ee984ad8d5f13430d85
#: ../../home/kovid/work/calibre/manual/db_api.rst:9
msgid ""
"This API is thread safe (it uses a multiple reader, single writer locking "
"scheme).  You can access this API like this::"
msgstr ""

# 1afcb5330a27432c8615c34ec52b8b9a
#: ../../home/kovid/work/calibre/manual/db_api.rst:14
msgid ""
"If you are in a calibre plugin that is part of the main calibre GUI, you get"
" access to it like this instead::"
msgstr ""

# bf7a4d4bc13b4bc2b0d8840ccc112ac2
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache:1
msgid ""
"An in-memory cache of the metadata.db file from a calibre library. This "
"class also serves as a threadsafe API for accessing the database. The in-"
"memory cache is maintained in normal form for maximum performance."
msgstr ""

# 9a7cedca54504e4aa0bd4380647963e2
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache:5
msgid ""
"SQLITE is simply used as a way to read and write from metadata.db robustly. "
"All table reading/sorting/searching/caching logic is re-implemented. This "
"was necessary for maximum performance and flexibility."
msgstr ""

# 269796ee58c74c8786e72e05090b72f5
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.add_books:1
msgid ""
"Add the specified books to the library. Books should be an iterable of "
"2-tuples, each 2-tuple of the form :code:`(mi, format_map)` where mi is a "
"Metadata object and format_map is a dictionary of the form :code:`{fmt: "
"path_or_stream}`, for example: :code:`{'EPUB': '/path/to/file.epub'}`."
msgstr ""

# 2c064af5a5c140679e3d0582c718dd5c
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.add_books:6
msgid ""
"Returns a pair of lists: :code:`ids, duplicates`. ``ids`` contains the book "
"ids for all newly created books in the database. ``duplicates`` contains the"
" :code:`(mi, format_map)` for all books that already exist in the database "
"as per the simple duplicate detection heuristic used by :meth:`has_book`."
msgstr ""

# dffc00806bf7410f9e1baa2b4f1bd5e1
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.add_custom_book_data:1
msgid ""
"Add data for name where val_map is a map of book_ids to values. If "
"delete_first is True, all previously stored data for name will be removed."
msgstr ""

# 25f4991f709e4f9aa15b7fbcb722e602
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.add_format:1
msgid ""
"Add a format to the specified book. Return True of the format was added "
"successfully."
msgstr ""

# 3c4aac329bca47c280489cc2cf396b70
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.add_format:3
msgid ""
"If True replace existing format, otherwise if the format already exists, "
"return False."
msgstr ""

# ac1cc685c1084df4a14c6f715c46e269
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.add_format:4
msgid ""
"If True, file type plugins are run on the format before and after being "
"added."
msgstr ""

# e0670b47a2724bcba474910b1ee2ecaf
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.add_format:5
msgid "Internal use only."
msgstr ""

# 49da7c3457394942932c725ebd7e75a2
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.all_book_ids:1
msgid "Frozen set of all known book ids."
msgstr ""

# cfcf0022164247549feaf21fe814d68c
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.all_field_for:1
msgid "Same as field_for, except that it operates on multiple books at once"
msgstr ""

# 3fa0859f017c4a33b179cc2ba18176cf
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.all_field_ids:1
msgid "Frozen set of ids for all values in the field ``name``."
msgstr ""

# 04fbee69790b49088694918b3236b7b0
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.all_field_names:1
msgid ""
"Frozen set of all fields names (should only be used for many-one and many-"
"many fields)"
msgstr ""

# e923129bbfcd4671a8a44355bcb2758c
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.author_data:1
msgid "Return author data as a dictionary with keys: name, sort, link"
msgstr ""

# a445954afbf24bb493f7921dbf99ac02
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.author_data:3
msgid ""
"If no authors with the specified ids are found an empty dictionary is "
"returned. If author_ids is None, data for all authors is returned."
msgstr ""

# a53ac1c71f504939b28393db08a32f3d
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.author_sort_from_authors:1
msgid ""
"Given a list of authors, return the author_sort string for the authors, "
"preferring the author sort associated with the author over the computed "
"string."
msgstr ""

# ecc7628df2934c3f8523cc4dee4b9382
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.books_for_field:1
msgid ""
"Return all the books associated with the item identified by ``item_id``, "
"where the item belongs to the field ``name``."
msgstr ""

# 2cb27985c9f04d4a9da53a2020392723
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.books_for_field:4
msgid ""
"Returned value is a set of book ids, or the empty set if the item or the "
"field does not exist."
msgstr ""

# e96597afbaa2465dab1b976f49974ade
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.copy_cover_to:1
msgid ""
"Copy the cover to the file like object ``dest``. Returns False if no cover "
"exists or dest is the same file as the current cover. dest can also be a "
"path in which case the cover is copied to it if and only if the path is "
"different from the current path (taking case sensitivity into account)."
msgstr ""

# 400bf350fb0240e2b8753e98688f5452
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.copy_format_to:1
msgid ""
"Copy the format ``fmt`` to the file like object ``dest``. If the specified "
"format does not exist, raises :class:`NoSuchFormat` error. dest can also be "
"a path, in which case the format is copied to it, iff the path is different "
"from the current path (taking case sensitivity into account)."
msgstr ""

# 31cf23000c7141ea8691ed5e9705cc46
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.cover:1
msgid ""
"Return the cover image or None. By default, returns the cover as a "
"bytestring."
msgstr ""

# 20c3cd41933148e19a43634d0661c7f3
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.cover:4
msgid ""
"WARNING: Using as_path will copy the cover to a temp file and return the "
"path to the temp file. You should delete the temp file when you are done "
"with it."
msgstr ""

# 59f679d6e9bb40f08ca1a03f91d69549
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.cover:8
msgid ""
"If True return the image as an open file object (a SpooledTemporaryFile)"
msgstr ""

# 12ce578da94b401a88fb14f5dd90e330
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.cover:9
msgid "If True return the image as a QImage object"
msgstr ""

# 2c0906b297064e96896245bd86934cce
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.cover:10
msgid "If True return the image as a path pointing to a temporary file"
msgstr ""

# 8a30eac9018b4d4da1a58acaf68bef3a
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.delete_custom_book_data:1
msgid ""
"Delete data for name. By default deletes all data, if you only want to "
"delete data for some book ids, pass in a list of book ids."
msgstr ""

# 5b71531a93f64530859dd60f0e1692d9
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.embed_metadata:1
msgid ""
"Update metadata in all formats of the specified book_ids to current metadata"
" in the database."
msgstr ""

# acad8ffc77cc4674ae199e94c6e5eb5e
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.fast_field_for:1
msgid ""
"Same as field_for, except that it avoids the extra lookup to get the field "
"object"
msgstr ""

# 36928c9326e7429aa55b3cb5f6422320
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.field_for:1
msgid ""
"Return the value of the field ``name`` for the book identified by "
"``book_id``. If no such book exists or it has no defined value for the field"
" ``name` or no such field exists, then ``default_value`` is returned."
msgstr ""

# 567d7a789771432e9ef1c41ceda043c1
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.field_for:6
msgid ""
"``default_value`` is not used for title, title_sort, authors, author_sort "
"and series_index. This is because these always have values in the db. "
"``default_value`` is used for all custom columns."
msgstr ""

# fc4873a11c7d4f70b4afbced11c73168
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.field_for:10
msgid ""
"The returned value for is_multiple fields are always tuples, even when no "
"values are found (in other words, default_value is ignored). The exception "
"is identifiers for which the returned value is always a dict. The returned "
"tuples are always in link order, that is, the order in which they were "
"created."
msgstr ""

# f691e8965d564c5a94c1b162415789e3
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.field_ids_for:1
msgid ""
"Return the ids (as a tuple) for the values that the field ``name`` has on "
"the book identified by ``book_id``. If there are no values, or no such book,"
" or no such field, an empty tuple is returned."
msgstr ""

# b55b6236f39e46728c914262c408cecd
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.find_identical_books:1
msgid ""
"Finds books that have a superset of the authors in mi and the same title "
"(title is fuzzy matched)"
msgstr ""

# 2c299d5ff9584904a27ee7b2077516f8
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format:1
msgid ""
"Return the ebook format as a bytestring or `None` if the format doesn't "
"exist, or we don't have permission to write to the ebook file."
msgstr ""

# 31d182888f7a4a85b3bdf6d5bd9ea5d2
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format:4
msgid ""
"If True the ebook format is returned as a file object. Note that the file "
"object is a SpooledTemporaryFile, so if what you want to do is copy the "
"format to another file, use :meth:`copy_format_to` instead for performance."
msgstr ""

# 6e669690ca5e4ca49c084abe7ab126b4
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format:8
msgid ""
"Copies the format file to a temp file and returns the path to the temp file"
msgstr ""

# fa6fdc5eab834c83bf0a455adff874e0
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format:10
msgid ""
"If True and returning a path the filename is the same as that used in the "
"library. Note that using this means that repeated calls yield the same temp "
"file (which is re-created each time)"
msgstr ""

# e7c0902713ef43f3a1858340e0b988cc
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format_abspath:1
msgid ""
"Return absolute path to the ebook file of format `format`. You should almost"
" never use this, as it breaks the threadsafe promise of this API. Instead "
"use, :meth:`copy_format_to`."
msgstr ""

# ba0769b528c34739b2eac5dd0637a993
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format_abspath:5
msgid ""
"Currently used only in calibredb list, the viewer, edit book, compare_format"
" to original format and the catalogs (via get_data_as_dict())."
msgstr ""

# a4c6a5ef9e794a61bd8450ab8f9b3b1d
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format_abspath:9
msgid ""
"Apart from the viewer and edit book, I don't believe any of the others do "
"any file write I/O with the results of this call."
msgstr ""

# 0ed19842e89c4e64bf8e6e9029a109f8
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format_hash:1
msgid ""
"Return the hash of the specified format for the specified book. The kind of "
"hash is backend dependent, but is usually SHA-256."
msgstr ""

# 924f7239ed254b1582b655255eb4ccf1
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format_metadata:1
msgid ""
"Return the path, size and mtime for the specified format for the specified "
"book. You should not use path unless you absolutely have to, since accessing"
" it directly breaks the threadsafe guarantees of this API. Instead use the "
":meth:`copy_format_to` method."
msgstr ""

# 3d3ce75c6a354d86b9405404ea38f292
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format_metadata:6
msgid ""
"If ``True`` cached values are used, otherwise a slow filesystem access is "
"done. The cache values could be out of date if access was performed to the "
"filesystem outside of this API."
msgstr ""

# 6592b27d55324adaab64d3476678d96b
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.format_metadata:10
msgid ""
"If ``True`` The max_size field of the database is updates for this book."
msgstr ""

# a30bfa6562124132a8d28f05c57ae306
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.formats:1
msgid ""
"Return tuple of all formats for the specified book. If verify_formats is "
"True, verifies that the files exist on disk."
msgstr ""

# aa289688efbf45a0a0e3e8f9e1ec41cc
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_categories:1
msgid "Used internally to implement the Tag Browser"
msgstr ""

# 90153a17f5af46908dc601d9ad85ef96
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_custom_book_data:1
msgid ""
"Get data for name. By default returns data for all book_ids, pass in a list "
"of book ids if you only want some data. Returns a map of book_id to values. "
"If a particular value could not be decoded, uses default for it."
msgstr ""

# 385c14d77b6a4ee58ec1b9fe32c2f415
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_id_map:1
msgid ""
"Return a mapping of id numbers to values for the specified field. The field "
"must be a many-one or many-many field, otherwise a ValueError is raised."
msgstr ""

# 795d6bd5635f4a88bcd83c8812c686b3
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_ids_for_custom_book_data:1
msgid "Return the set of book ids for which name has data."
msgstr ""

# 5ca1c5f0771443918f8aa36ff9a11a46
# 7a1cf2f7eda24db5ad83debda6ddb77f
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_item_id:1
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_item_ids:1
msgid "Return the item id for item_name (case-insensitive)"
msgstr ""

# 0a7d3e7926ab48b8b0138303139f445b
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_item_name:1
msgid ""
"Return the item name for the item specified by item_id in the specified "
"field. See also :meth:`get_id_map`."
msgstr ""

# 5e6d1f504d6d4639a273eb7813295b3d
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_metadata:1
msgid ""
"Return metadata for the book identified by book_id as a :class:`Metadata` "
"object. Note that the list of formats is not verified. If get_cover is True,"
" the cover is returned, either a path to temp file as mi.cover or if "
"cover_as_data is True then as mi.cover_data."
msgstr ""

# a939d7fbe5aa4495bf5b650c0a4507e7
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_next_series_num_for:1
msgid ""
"Return the next series index for the specified series, taking into account "
"the various preferences that control next series number generation."
msgstr ""

# ff1c310b661b449db30c1e1d53ec5a38
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_next_series_num_for:4
msgid "The series-like field (defaults to the builtin series column)"
msgstr ""

# 383ed6e9b9e74feb8ca659fa43c4504c
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_next_series_num_for:5
msgid ""
"If True, returns a mapping of book_id to current series_index value instead."
msgstr ""

# d2f982c0fb2b40a8b506225a1d22cd74
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_proxy_metadata:1
msgid ""
"Like :meth:`get_metadata` except that it returns a ProxyMetadata object that"
" only reads values from the database on demand. This is much faster than "
"get_metadata when only a small number of fields need to be accessed from the"
" returned metadata object."
msgstr ""

# 977f7155f76744c88d312b54af83ed47
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.get_usage_count_by_id:1
msgid ""
"Return a mapping of id to usage count for all values of the specified field,"
" which must be a many-one or many-many field."
msgstr ""

# 9175958b95ae4bae8b359a9281676e1a
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.has_book:1
msgid ""
"Return True iff the database contains an entry with the same title as the "
"passed in Metadata object. The comparison is case-insensitive."
msgstr ""

# d4f1a815e66c4ccc9b11d7cb6ea31c1a
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.has_format:1
msgid "Return True iff the format exists on disk"
msgstr ""

# 7ebd0ac98a59451480888cfac6374e99
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.has_id:1
msgid "Return True iff the specified book_id exists in the db"
msgstr ""

# 159b96d6c9c94952a509463296d32aa3
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.init:1
msgid "Initialize this cache with data from the backend."
msgstr ""

# 2685a1b5cdf34c6c851656dce7573b64
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.multisort:1
msgid ""
"Return a list of sorted book ids. If ids_to_sort is None, all book ids are "
"returned."
msgstr ""

# dfe5f93d453a448c95945620faa17240
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.multisort:4
msgid ""
"fields must be a list of 2-tuples of the form (field_name, ascending=True or"
" False). The most significant field is the first 2-tuple."
msgstr ""

# 5b35e64897d34382abcdb6e7a9edf696
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.pref:1
msgid ""
"Return the value for the specified preference or the value specified as "
"``default`` if the preference is not set."
msgstr ""

# f7f7bfebf01442aeb941ff2cdb2180f8
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.read_backup:1
msgid ""
"Return the OPF metadata backup for the book as a bytestring or None if no "
"such backup exists."
msgstr ""

# 607cf5105efe4ccd838e6db13bb0a459
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.remove_books:1
msgid ""
"Remove the books specified by the book_ids from the database and delete "
"their format files. If ``permanent`` is False, then the format files are not"
" deleted."
msgstr ""

# ff0f1fb94f8745488e6c57a1f8ef39c3
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.remove_formats:1
msgid "Remove the specified formats from the specified books."
msgstr ""

# 26ec4d20ddc241cb911ee371c8b695ac
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.remove_formats:3
msgid "A mapping of book_id to a list of formats to be removed from the book."
msgstr ""

# 630cc7fd72b94a8f9c75ca2134b1bcd5
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.remove_formats:4
msgid ""
"If True, only remove the record for the format from the db, do not delete "
"the actual format file from the filesystem."
msgstr ""

# ea31dd13ff16450db0150599f531ea97
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.remove_items:1
msgid ""
"Delete all items in the specified field with the specified ids. Returns the "
"set of affected book ids."
msgstr ""

# bca9ad219024482c9510395437ee813a
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.rename_items:1
msgid ""
"Rename items from a many-one or many-many field such as tags or series."
msgstr ""

# 69dbb721e03c4586af7c7bb604b816a9
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.rename_items:3
msgid ""
"When renaming in a series-like field also change the series_index values."
msgstr ""

# 6c6f7d4b2ded471faea792109e03b62c
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.restore_book:1
msgid ""
"Restore the book entry in the database for a book that already exists on the"
" filesystem"
msgstr ""

# 3302090ca9d94f0c85e02368f7a386f3
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.restore_original_format:1
msgid ""
"Restore the specified format from the previously saved ORIGINAL_FORMAT, if "
"any. Return True on success. The ORIGINAL_FORMAT is deleted after a "
"successful restore."
msgstr ""

# fc1d8bd58c2c4eb1b94ce1af0b93790e
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.safe_read_lock:1
msgid ""
"A safe read lock is a lock that does nothing if the thread already has a "
"write lock, otherwise it acquires a read lock. This is necessary to prevent "
"DowngradeLockErrors, which can happen when updating the search cache in the "
"presence of composite columns. Updating the search cache holds an exclusive "
"lock, but searching a composite column involves reading field values via "
"ProxyMetadata which tries to get a shared lock. There may be other scenarios"
" that trigger this as well."
msgstr ""

# 6b98a787e8a741f083ca5945494d42eb
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.safe_read_lock:9
msgid ""
"This property returns a new lock object on every access. This lock object is"
" not recursive (for performance) and must only be used in a with statement "
"as ``with cache.safe_read_lock:`` otherwise bad things will happen."
msgstr ""

# 6de0f27545c044119b01fef319497464
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.save_original_format:1
msgid ""
"Save a copy of the specified format as ORIGINAL_FORMAT, overwriting any "
"existing ORIGINAL_FORMAT."
msgstr ""

# c0e64f495481409b82d51147c41b5150
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.search:1
msgid ""
"Search the database for the specified query, returning a set of matched book"
" ids."
msgstr ""

# 2023ba443ee14d85993427c70081fdff
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.search:3
msgid ""
"A restriction that is ANDed to the specified query. Note that restrictions "
"are cached, therefore the search for a AND b will be slower than a with "
"restriction b."
msgstr ""

# bde633517102463e8cbcddef29926a05
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.search:6
msgid "Used internally (virtual fields such as on_device to search over)."
msgstr ""

# c0ed1efe7869459aa97f37d89ebe687e
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.search:8
msgid ""
"If not None, a set of book ids for which books will be searched instead of "
"searching all books."
msgstr ""

# 15572c44700a45259397c53f2a97ca6f
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.set_conversion_options:1
msgid "options must be a map of the form {book_id:conversion_options}"
msgstr ""

# ab479b9c10cf4f6ca2b6f095f4e3e4b1
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.set_cover:1
msgid ""
"Set the cover for this book.  data can be either a QImage, QPixmap, file "
"object or bytestring. It can also be None, in which case any existing cover "
"is removed."
msgstr ""

# 772cd101b621482180409a4798045e86
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.set_field:1
msgid ""
"Set the values of the field specified by ``name``. Returns the set of all "
"book ids that were affected by the change."
msgstr ""

# 9a9c064905fd4d7bbf9dce744d4a140b
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.set_field:3
msgid "Mapping of book_ids to values that should be applied."
msgstr ""

# e8f95c74837a4824aa2b5aacb3b257ba
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.set_field:4
msgid ""
"If True, the case of many-one or many-many fields will be changed. For "
"example, if a  book has the tag ``tag1`` and you set the tag for another "
"book to ``Tag1`` then the both books will have the tag ``Tag1`` if "
"allow_case_change is True, otherwise they will both have the tag ``tag1``."
msgstr ""

# 4478e9a576e5464fa3c640f48dd1188c
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.set_field:8
msgid "Used internally, you should never change it."
msgstr ""

# e46c5231e2234a21b8a1ddcab7fe02d2
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.set_metadata:1
msgid "Set metadata for the book `id` from the `Metadata` object `mi`"
msgstr ""

# 9dc7a1bf93fe4eb18ac82d4c238bd0f5
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.set_metadata:3
msgid ""
"Setting force_changes=True will force set_metadata to update fields even if "
"mi contains empty values. In this case, 'None' is distinguished from "
"'empty'. If mi.XXX is None, the XXX is not replaced, otherwise it is. The "
"tags, identifiers, and cover attributes are special cases. Tags and "
"identifiers cannot be set to None so then will always be replaced if "
"force_changes is true. You must ensure that mi contains the values you want "
"the book to have. Covers are always changed if a new cover is provided, but "
"are never deleted. Also note that force_changes has no effect on setting "
"title or authors."
msgstr ""

# 136a004442a242bfa73a49531e0018de
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.set_pref:1
msgid ""
"Set the specified preference to the specified value. See also :meth:`pref`."
msgstr ""

# 33656a59bb484fdc97f4318017fc7c3e
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.tags_older_than:1
msgid ""
"Return the ids of all books having the tag ``tag`` that are older than than "
"the specified time. tag comparison is case insensitive."
msgstr ""

# a9b2c97de4b14183993138ae9d763690
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.tags_older_than:4
msgid ""
"A timedelta object or None. If None, then all ids with the tag are returned."
msgstr ""

# 2d48decced3f4b539308b8417d597c11
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.tags_older_than:7
msgid ""
"If not None the list of matches will be restricted to books that have this "
"tag"
msgstr ""

# 4372dd30c59c4734b6e0f7a43913b905
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.tags_older_than:10
msgid ""
"A list of authors. If not None the list of matches will be restricted to "
"books that have these authors (case insensitive)."
msgstr ""

# 9a2e96cee9ad45e3a8fc3d2bbf47f5a6
#: ../../home/kovid/work/calibre/src/calibre/db/cache.pydocstring of
#: calibre.db.cache.Cache.user_categories_for_books:1
msgid ""
"Return the user categories for the specified books. proxy_metadata_map is "
"optional and is useful for a performance boost, in contexts where a "
"ProxyMetadata object for the books already exists. It should be a mapping of"
" book_ids to their corresponding ProxyMetadata objects."
msgstr ""
