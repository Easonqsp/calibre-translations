# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-25 15:57+0530\n"
"PO-Revision-Date: 2014-10-25 10:20+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Marathi (http://www.transifex.com/projects/p/calibre/language/mr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: mr\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 33a913278db345daa31cdbb81bf2568b
#: ../../home/kovid/work/calibre/manual/develop.rst:4
msgid "Setting up a calibre development environment"
msgstr ""

# 5943a415a45f408ab128dbdd9886739f
#: ../../home/kovid/work/calibre/manual/develop.rst:6
msgid ""
"calibre is completely open source, licensed under the `GNU GPL v3 "
"<http://www.gnu.org/copyleft/gpl.html>`_. This means that you are free to "
"download and modify the program to your heart's content. In this section, "
"you will learn how to get a calibre development environment set up on the "
"operating system of your choice. calibre is written primarily in `Python "
"<http://www.python.org>`_ with some C/C++ code for speed and system "
"interfacing. Note that calibre is not compatible with Python 3 and requires "
"at least Python 2.7."
msgstr ""

# 2df8a9fead0b46f6bdf1b6c62c5cb86c
#: ../../home/kovid/work/calibre/manual/develop.rst:0
msgid "Contents"
msgstr ""

# db2a04201b8c482f900128c74cd05b46
#: ../../home/kovid/work/calibre/manual/develop.rst:17
msgid "Design philosophy"
msgstr ""

# b33bd23b48ee4404815c2d49324db28f
#: ../../home/kovid/work/calibre/manual/develop.rst:19
msgid ""
"calibre has its roots in the Unix world, which means that its design is "
"highly modular. The modules interact with each other via well defined "
"interfaces. This makes adding new features and fixing bugs in calibre very "
"easy, resulting in a frenetic pace of development. Because of its roots, "
"calibre has a comprehensive command line interface for all its functions, "
"documented in :doc:`generated/en/cli-index`."
msgstr ""

# 3154d26ff0a84c9aa0a044432cdd0567
#: ../../home/kovid/work/calibre/manual/develop.rst:24
msgid ""
"The modular design of calibre is expressed via ``Plugins``. There is a "
":ref:`tutorial <customize>` on writing calibre plugins. For example, adding "
"support for a new device to calibre typically involves writing less than a "
"100 lines of code in the form of a device driver plugin. You can browse the "
"`built-in drivers "
"<http://bazaar.launchpad.net/%7Ekovid/calibre/trunk/files/head%3A/src/calibre/devices/>`_."
" Similarly, adding support for new conversion formats involves writing "
"input/output format plugins. Another example of the modular design is the "
":ref:`recipe system <news>` for fetching news. For more examples of plugins "
"designed to add features to calibre, see the `plugin index "
"<http://www.mobileread.com/forums/showthread.php?p=1362767#post1362767>`_."
msgstr ""

# 882abde3850843bc99dd3b70839e2de4
#: ../../home/kovid/work/calibre/manual/develop.rst:34
msgid "Code layout"
msgstr ""

# 8ac79f9e2cc64f6aaf126cf5db7c6efb
#: ../../home/kovid/work/calibre/manual/develop.rst:36
msgid ""
"All the calibre python code is in the ``calibre`` package. This package "
"contains the following main sub-packages"
msgstr ""

# f55042cdd55c4f9b92a1ac017f6d2e4c
#: ../../home/kovid/work/calibre/manual/develop.rst:38
msgid ""
"devices - All the device drivers. Just look through some of the built-in "
"drivers to get an idea for how they work."
msgstr ""

# 117e63d39dc34e1fb186a2403d603579
#: ../../home/kovid/work/calibre/manual/develop.rst:40
msgid ""
"For details, see: ``devices.interface`` which defines the interface "
"supported by device drivers and ``devices.usbms`` which defines a generic "
"driver that connects to a USBMS device. All USBMS based drivers in calibre "
"inherit from it."
msgstr ""

# 5c8858d3674f46a0bb1d5f45431f36e4
#: ../../home/kovid/work/calibre/manual/develop.rst:43
msgid ""
"ebooks  - All the ebook conversion/metadata code. A good starting point is "
"``calibre.ebooks.conversion.cli`` which is the module powering the :command"
":`ebook-convert` command. The conversion process is controlled via "
"``conversion.plumber``. The format independent code is all in ``ebooks.oeb``"
" and the format dependent code is in ``ebooks.format_name``."
msgstr ""

# 16ba2657c64e487b927f307c2e7f446c
#: ../../home/kovid/work/calibre/manual/develop.rst:47
msgid ""
"Metadata reading, writing, and downloading is all in ``ebooks.metadata``"
msgstr ""

# 7f23100df1fa40fb934d7578d44d6418
#: ../../home/kovid/work/calibre/manual/develop.rst:48
msgid ""
"Conversion happens in a pipeline, for the structure of the pipeline, see "
":ref:`conversion-introduction`. The pipeline consists of an input plugin, "
"various transforms and an output plugin. The code that constructs and drives"
" the pipeline is in :file:`plumber.py`. The pipeline works on a "
"representation of an ebook that is like an unzipped epub, with manifest, "
"spine, toc, guide, html content, etc. The class that manages this "
"representation is OEBBook in ``ebooks.oeb.base``. The various "
"transformations that are applied to the book during conversions live in "
":file:`oeb/transforms/*.py`. And the input and output plugins live in "
":file:`conversion/plugins/*.py`."
msgstr ""

# 1a00d435006342b8a3b69eedc69a0af0
#: ../../home/kovid/work/calibre/manual/develop.rst:58
msgid ""
"Ebook editing happens using a different container object. It is documented "
"in :ref:`polish_api`."
msgstr ""

# 1286daa03e25406f9d58544b812e9860
#: ../../home/kovid/work/calibre/manual/develop.rst:61
msgid ""
"db - The database back-end. See :ref:`db_api` for the interface to the "
"calibre library."
msgstr ""

# e68560596512480084b85dba047b42fb
#: ../../home/kovid/work/calibre/manual/develop.rst:63
msgid "content server: ``library.server`` is the calibre Content Server."
msgstr ""

# ac23512583d14ca7a0c088a8bbc5e74a
#: ../../home/kovid/work/calibre/manual/develop.rst:65
msgid ""
"gui2 - The Graphical User Interface. GUI initialization happens in "
"``gui2.main`` and ``gui2.ui``. The ebook-viewer is in ``gui2.viewer``. The "
"ebook editor is in ``gui2.tweak_book``."
msgstr ""

# 599dddd818444d1f95f8e2d69afc6cf4
#: ../../home/kovid/work/calibre/manual/develop.rst:67
msgid ""
"If you want to locate the entry points for all the various calibre "
"executables, look at the ``entry_points`` structure in `linux.py "
"<https://github.com/kovidgoyal/calibre/blob/master/src/calibre/linux.py>`_."
msgstr ""

# f9641e6efd6f4f15b5ce7e0970e31150
#: ../../home/kovid/work/calibre/manual/develop.rst:71
msgid ""
"If you need help understanding the code, post in the `development forum "
"<http://www.mobileread.com/forums/forumdisplay.php?f=240>`_ and you will "
"most likely get help from one of calibre's many developers."
msgstr ""

# 5458e9148e594c2190656f5d248b0570
#: ../../home/kovid/work/calibre/manual/develop.rst:75
msgid "Getting the code"
msgstr ""

# 42f87b7161184da584a3e5a4821ff12d
#: ../../home/kovid/work/calibre/manual/develop.rst:77
msgid ""
"You can get the calibre source code in two ways, using a version control "
"system or directly downloading a `tarball <http://status.calibre-"
"ebook.com/dist/src>`_."
msgstr ""

# 01c4caab758f45e5be0420230d1498fc
#: ../../home/kovid/work/calibre/manual/develop.rst:80
msgid ""
"calibre uses `Git <http://www.git-scm.com/>`_, a distributed version control"
" system. Git is available on all the platforms calibre supports.  After "
"installing Git, you can get the calibre source code with the command::"
msgstr ""

# f88b8872b78c4a219c88974573f8cd6c
#: ../../home/kovid/work/calibre/manual/develop.rst:86
msgid ""
"On Windows you will need the complete path name, that will be something like"
" :file:`C:\\\\Program Files\\\\Git\\\\git.exe`."
msgstr ""

# 2037372fcc3c488f88fe155e2cbb47e0
#: ../../home/kovid/work/calibre/manual/develop.rst:88
msgid ""
"calibre is a very large project with a very long source control history, so "
"the above can take a while (10 mins to an hour depending on your internet "
"speed)."
msgstr ""

# 464c6aae2602474cb4a5ab99324148a7
#: ../../home/kovid/work/calibre/manual/develop.rst:91
msgid ""
"If you want to get the code faster, the source code for the latest release "
"is always available as an `archive <http://status.calibre-"
"ebook.com/dist/src>`_."
msgstr ""

# dc7395dda38449de96ef5dc5b44eeee0
#: ../../home/kovid/work/calibre/manual/develop.rst:94
msgid "To update a branch to the latest code, use the command::"
msgstr ""

# ceda5861fb1c4b619a16fdfb9acf0756
#: ../../home/kovid/work/calibre/manual/develop.rst:99
msgid "Submitting your changes to be included"
msgstr ""

# 196bc8066b314386b00659edc4b7f73c
#: ../../home/kovid/work/calibre/manual/develop.rst:101
msgid ""
"If you only plan to make a few small changes, you can make your changes and "
"create a \"merge directive\" which you can then attach to a ticket in the "
"calibre `bug tracker <https://bugs.launchpad.net/calibre>`_. To do this, "
"make your changes, then run::"
msgstr ""

# a254f25b49d749879f6ceae527b42c98
#: ../../home/kovid/work/calibre/manual/develop.rst:109
msgid ""
"This will create a :file:`my-changes` file in the current directory, simply "
"attach that to a ticket on the calibre `bug tracker "
"<https://bugs.launchpad.net/calibre>`_. Note that this will include *all* "
"the commits you have made. If you only want to send some commits, you have "
"to change ``origin/master`` above. To send only the last commit, use::"
msgstr ""

# c7e793bee3df4ee4b9e61239f5f88378
#: ../../home/kovid/work/calibre/manual/develop.rst:117
msgid ""
"To send the last *n* commits, replace *1* with *n*, for example, for the "
"last 3 commits::"
msgstr ""

# ad7021945daf4470b78f9fb31a1865e5
#: ../../home/kovid/work/calibre/manual/develop.rst:122
msgid "Be careful to not include merges when using ``HEAD~n``."
msgstr ""

# 69c10216a58c49478972eb29e4864f2f
#: ../../home/kovid/work/calibre/manual/develop.rst:124
msgid ""
"If you plan to do a lot of development on calibre, then the best method is "
"to create a `GitHub <http://github.com>`_ account. Below is a basic guide to"
" setting up your own fork of calibre in a way that will allow you to submit "
"pull requests for inclusion into the main calibre repository:"
msgstr ""

# 520179b3438d4a31b9f6388370fb728b
#: ../../home/kovid/work/calibre/manual/develop.rst:129
msgid ""
"Setup git on your machine as described in this article: `Setup Git "
"<https://help.github.com/articles/set-up-git>`_"
msgstr ""

# a671aa5fbbbf4683a03226c11f831271
#: ../../home/kovid/work/calibre/manual/develop.rst:130
msgid ""
"Setup ssh keys for authentication to GitHub, as described here: `Generating "
"SSH keys <https://help.github.com/articles/generating-ssh-keys>`_"
msgstr ""

# 0cd86f8892e74c229c638ebbf86e7ccd
#: ../../home/kovid/work/calibre/manual/develop.rst:131
msgid ""
"Go to https://github.com/kovidgoyal/calibre and click the :guilabel:`Fork` "
"button."
msgstr ""

# 90c723aa61b1402d84cbe929cb39daa2
#: ../../home/kovid/work/calibre/manual/develop.rst:132
msgid "In a Terminal do::"
msgstr ""

# 314bcbd19fd74b5e8b8e3b2ef296bb27
#: ../../home/kovid/work/calibre/manual/develop.rst:137
msgid ""
"Replace <username> above with your github username. That will get your fork "
"checked out locally."
msgstr ""

# fa4f9ed9e84b4fcf89313fa0ccfdc12b
#: ../../home/kovid/work/calibre/manual/develop.rst:138
msgid ""
"You can make changes and commit them whenever you like. When you are ready "
"to have your work merged, do a::"
msgstr ""

# db2e386753b847238271945163298984
#: ../../home/kovid/work/calibre/manual/develop.rst:142
msgid ""
"and go to ``https://github.com/<username>/calibre`` and click the "
":guilabel:`Pull Request` button to generate a pull request that can be "
"merged."
msgstr ""

# 62a7b60a037247988ad72738c5b9fc82
#: ../../home/kovid/work/calibre/manual/develop.rst:143
msgid ""
"You can update your local copy with code from the main repo at any time by "
"doing::"
msgstr ""

# f06f312a50eb4bcbbcb46213e02185c4
#: ../../home/kovid/work/calibre/manual/develop.rst:148
msgid ""
"You should also keep an eye on the calibre `development forum "
"<http://www.mobileread.com/forums/forumdisplay.php?f=240>`_. Before making "
"major changes, you should discuss them in the forum or contact Kovid "
"directly (his email address is all over the source code)."
msgstr ""

# 3e2dd179fe0849b590a54e78f84b0636
#: ../../home/kovid/work/calibre/manual/develop.rst:154
msgid "Windows development environment"
msgstr ""

# 9b13c73e063443b99a6d858391548b49
# 47e493c95dae4c119c6affc7f384996a
# 0c12e52421714fb0b6c1caf1fa85ab70
#: ../../home/kovid/work/calibre/manual/develop.rst:156
#: ../../home/kovid/work/calibre/manual/develop.rst:187
#: ../../home/kovid/work/calibre/manual/develop.rst:219
msgid ""
"You must also get the calibre source code separately as described above."
msgstr ""

# d73963653b3f43c0a7a91bc8359abad1
#: ../../home/kovid/work/calibre/manual/develop.rst:158
msgid ""
"Install calibre normally, using the Windows installer. Then open a Command "
"Prompt and change to the previously checked out calibre code directory. For "
"example::"
msgstr ""

# b245a0609d62454db50cb4b5c3a34e2d
# b56a6288af2e4f479acd7e6040020dd2
#: ../../home/kovid/work/calibre/manual/develop.rst:163
#: ../../home/kovid/work/calibre/manual/develop.rst:231
msgid ""
"calibre is the directory that contains the src and resources sub-"
"directories."
msgstr ""

# 2f8fb5a67ee541d080ac8c8cec5d1c1a
#: ../../home/kovid/work/calibre/manual/develop.rst:165
msgid ""
"The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to"
" the absolute path of the src directory. So, following the example above, it"
" would be ``C:\\Users\\kovid\\work\\calibre\\src``. `Here is a short guide "
"<http://docs.python.org/using/windows.html#excursus-setting-environment-"
"variables>`_ to setting environment variables on Windows."
msgstr ""

# ff58888028ee4f868445bf5edb142807
#: ../../home/kovid/work/calibre/manual/develop.rst:170
msgid ""
"Once you have set the environment variable, open a new command prompt and "
"check that it was correctly set by using the command::"
msgstr ""

# 7d5b135d5fea43e0affa355841b7635a
# 963f9d659160491183b80b22f340f312
#: ../../home/kovid/work/calibre/manual/develop.rst:175
#: ../../home/kovid/work/calibre/manual/develop.rst:242
msgid ""
"Setting this environment variable means that calibre will now load all its "
"Python code from the specified location."
msgstr ""

# 5981f18bcedb4a229146c307890b1ed0
#: ../../home/kovid/work/calibre/manual/develop.rst:177
msgid ""
"That's it! You are now ready to start hacking on the calibre code. For "
"example, open the file :file:`src\\\\calibre\\\\__init__.py` in your "
"favorite editor and add the line::"
msgstr ""

# a2641705c90241ce99d031ca17dc9ca4
# 14171b500a2548b5829275abe483823e
#: ../../home/kovid/work/calibre/manual/develop.rst:182
#: ../../home/kovid/work/calibre/manual/develop.rst:249
msgid ""
"near the top of the file. Now run the command :command:`calibredb`. The very"
" first line of output should be ``Hello, world!``."
msgstr ""

# 6f9b5c147f4a472393dbdb8ab8540047
#: ../../home/kovid/work/calibre/manual/develop.rst:185
msgid "OS X development environment"
msgstr ""

# 01f7ad0a446e454c92c5c8d5ac569f98
#: ../../home/kovid/work/calibre/manual/develop.rst:189
msgid ""
"Install calibre normally using the provided .dmg. Then open a Terminal and "
"change to the previously checked out calibre code directory, for example::"
msgstr ""

# e256726f3360460ca5c3019bac49b953
#: ../../home/kovid/work/calibre/manual/develop.rst:194
msgid ""
"calibre is the directory that contains the src and resources sub-"
"directories. Ensure you have installed the calibre commandline tools via "
":guilabel:`Preferences->Advanced->Miscellaneous` in the calibre GUI."
msgstr ""

# 9ba44639eeba4315816f9c0eef180a76
#: ../../home/kovid/work/calibre/manual/develop.rst:196
msgid ""
"The next step is to create a bash script that will set the environment "
"variable ``CALIBRE_DEVELOP_FROM`` to the absolute path of the src directory "
"when running calibre in debug mode."
msgstr ""

# f63a27ffe7a541c1a9f8bde16508e34f
#: ../../home/kovid/work/calibre/manual/develop.rst:198
msgid "Create a plain text file::"
msgstr ""

# 5f0801bcfcf24aef9576767c69dccfb0
#: ../../home/kovid/work/calibre/manual/develop.rst:204
msgid ""
"Save this file as ``/usr/bin/calibre-develop``, then set its permissions so "
"that it can be executed::"
msgstr ""

# b907ed8a0fbe4995b400bace9d3cbf53
#: ../../home/kovid/work/calibre/manual/develop.rst:208
msgid "Once you have done this, run::"
msgstr ""

# 1ac2fbf0e0fc457095b0457ebac419bf
#: ../../home/kovid/work/calibre/manual/develop.rst:212
msgid ""
"You should see some diagnostic information in the Terminal window as calibre"
" starts up, and you should see an asterisk after the version number in the "
"GUI window, indicating that you are running from source."
msgstr ""

# a2dfecc1879b4f05ad316927684b35e2
#: ../../home/kovid/work/calibre/manual/develop.rst:217
msgid "Linux development environment"
msgstr ""

# 9131dc26e4514b85bfce4e232d2eec5e
#: ../../home/kovid/work/calibre/manual/develop.rst:221
msgid ""
"calibre is primarily developed on Linux. You have two choices in setting up "
"the development environment. You can install the calibre binary as normal "
"and use that as a runtime environment to do your development. This approach "
"is similar to that used in Windows and OS X. Alternatively, you can install "
"calibre from source. Instructions for setting up a development environment "
"from source are in the INSTALL file in the source tree. Here we will address"
" using the binary at runtime, which is the recommended method."
msgstr ""

# 1aa4cb644f9148b0bf6e2ea3e0ebd1e1
#: ../../home/kovid/work/calibre/manual/develop.rst:227
msgid ""
"Install calibre using the binary installer. Then open a terminal and change "
"to the previously checked out calibre code directory, for example::"
msgstr ""

# eec7f0af1d2a40c9bc9748214b53f3dd
#: ../../home/kovid/work/calibre/manual/develop.rst:233
msgid ""
"The next step is to set the environment variable ``CALIBRE_DEVELOP_FROM`` to"
" the absolute path of the src directory. So, following the example above, it"
" would be ``/home/kovid/work/calibre/src``. How to set environment variables"
" depends on your Linux distribution and what shell you are using."
msgstr ""

# b2cd2413d5cb45f89dadbf5f915c0982
#: ../../home/kovid/work/calibre/manual/develop.rst:237
msgid ""
"Once you have set the environment variable, open a new terminal and check "
"that it was correctly set by using the command::"
msgstr ""

# e6e8d88005f9401d8eddbbbbc7613d88
#: ../../home/kovid/work/calibre/manual/develop.rst:244
msgid ""
"That's it! You are now ready to start hacking on the calibre code. For "
"example, open the file :file:`src/calibre/__init__.py` in your favorite "
"editor and add the line::"
msgstr ""

# 5896dd4cf9154648aa5ddfb7f8b9c58a
#: ../../home/kovid/work/calibre/manual/develop.rst:252
msgid ""
"Having separate \"normal\" and \"development\" calibre installs on the same "
"computer"
msgstr ""

# d4a8206959094612843ffdaf62ba45a9
#: ../../home/kovid/work/calibre/manual/develop.rst:254
msgid ""
"The calibre source tree is very stable and rarely breaks, but if you feel "
"the need to run from source on a separate test library and run the released "
"calibre version with your everyday library, you can achieve this easily "
"using .bat files or shell scripts to launch calibre. The example below shows"
" how to do this on Windows using .bat files (the instructions for other "
"platforms are the same, just use a shell script instead of a .bat file)"
msgstr ""

# 90bac11a5a984e5e86f36ab85b9532f7
#: ../../home/kovid/work/calibre/manual/develop.rst:259
msgid "To launch the release version of calibre with your everyday library:"
msgstr ""

# efac7a3728ce49f29d0846973541053b
#: ../../home/kovid/work/calibre/manual/develop.rst:261
msgid "calibre-normal.bat::"
msgstr ""

# aa8004022db74def8c3da2edee48eba5
#: ../../home/kovid/work/calibre/manual/develop.rst:265
msgid "calibre-dev.bat::"
msgstr ""

# 708c147a02cc40b0a2edb5ba04c51642
#: ../../home/kovid/work/calibre/manual/develop.rst:272
msgid "Debugging tips"
msgstr ""

# 44619f37fb2f456ea7e093ac0954b86d
#: ../../home/kovid/work/calibre/manual/develop.rst:274
msgid ""
"Python is a dynamically typed language with excellent facilities for "
"introspection. Kovid wrote the core calibre code without once using a "
"debugger. There are many strategies to debug calibre code:"
msgstr ""

# 7ea070dbca6f4ea58c9aaf4c19d43eb2
#: ../../home/kovid/work/calibre/manual/develop.rst:279
msgid "Using print statements"
msgstr ""

# b75b0caac2904cfda0edd318e77e1540
#: ../../home/kovid/work/calibre/manual/develop.rst:281
msgid ""
"This is Kovid's favorite way to debug. Simply insert print statements at "
"points of interest and run your program in the terminal. For example, you "
"can start the GUI from the terminal as::"
msgstr ""

# 4a8b7907a868439e9ae667a23cacd169
#: ../../home/kovid/work/calibre/manual/develop.rst:286
msgid "Similarly, you can start the ebook-viewer as::"
msgstr ""

# 94fcd02e986d4ad0b1592d84510db90d
#: ../../home/kovid/work/calibre/manual/develop.rst:290
msgid "The ebook-editor can be started as::"
msgstr ""

# e0a99f25b8984cd3ba50ba8ababb6b42
#: ../../home/kovid/work/calibre/manual/develop.rst:295
msgid "Using an interactive python interpreter"
msgstr ""

# 14b39a9860474651b483d4643c64740a
#: ../../home/kovid/work/calibre/manual/develop.rst:297
msgid ""
"You can insert the following two lines of code to start an interactive "
"python session at that point::"
msgstr ""

# 889c0c45a2134f6b814f068150c480ef
#: ../../home/kovid/work/calibre/manual/develop.rst:302
msgid ""
"When running from the command line, this will start an interactive Python "
"interpreter with access to all locally defined variables (variables in the "
"local scope). The interactive prompt even has TAB completion for object "
"properties and you can use the various Python facilities for introspection, "
"such as :func:`dir`, :func:`type`, :func:`repr`, etc."
msgstr ""

# 368dcc227fc24dd38dc53746c8852832
#: ../../home/kovid/work/calibre/manual/develop.rst:308
msgid "Using the python debugger as a remote debugger"
msgstr ""

# 582efdffb6244beca7845a3c39228fba
#: ../../home/kovid/work/calibre/manual/develop.rst:310
msgid ""
"You can use the builtin python debugger (pdb) as a remote debugger from the "
"command line. First, start the remote debugger at the point in the calibre "
"code you are interested in, like this::"
msgstr ""

# cfc0c79ae5c34e258839cdca2194e41e
#: ../../home/kovid/work/calibre/manual/develop.rst:317
msgid ""
"Then run calibre, either as normal, or using one of the calibre-debug "
"commands described in the previous section. Once the above point in the code"
" is reached, calibre will freeze, waiting for the debugger to connect."
msgstr ""

# c27eb1bc3166496b9c72f15b2519111f
#: ../../home/kovid/work/calibre/manual/develop.rst:321
msgid ""
"Now open a terminal or command prompt and use the following command to start"
" the debugging session::"
msgstr ""

# 671122dc5bdf4f4890a5e73844defc2b
#: ../../home/kovid/work/calibre/manual/develop.rst:326
msgid ""
"You can read about how to use the python debugger in the `python stdlib docs"
" for the pdb module <https://docs.python.org/2/library/pdb.html#debugger-"
"commands>`_."
msgstr ""

# be9bbc192be14cf981894e0507fdb910
#: ../../home/kovid/work/calibre/manual/develop.rst:330
msgid ""
"By default, the remote debugger will try to connect on port 4444. You can "
"change it, by passing the port parameter to both the set_trace() and the "
"cli() functions above, like this: ``set_trace(port=1234)`` and "
"``cli(port=1234)``."
msgstr ""

# 4a6015db3df64e578223d33ee7a5afc6
#: ../../home/kovid/work/calibre/manual/develop.rst:336
msgid ""
"The python debugger cannot handle multiple threads, so you have to call "
"set_trace once per thread, each time with a different port number."
msgstr ""

# 71b61e271eeb43dc81460c57d0b2b7e3
#: ../../home/kovid/work/calibre/manual/develop.rst:340
msgid "Using the debugger in your favorite python IDE"
msgstr ""

# 006743de648f48e885716c277b77c392
#: ../../home/kovid/work/calibre/manual/develop.rst:342
msgid ""
"It is possible to use the builtin debugger in your favorite python IDE, if "
"it supports remote debugging. The first step is to add the calibre src "
"checkout to the ``PYTHONPATH`` in your IDE. In other words, the directory "
"you set as ``CALIBRE_DEVELOP_FROM`` above, must also be in the "
"``PYTHONPATH`` of your IDE."
msgstr ""

# bf7b24afcba2471b9212f7d7a03bfa91
#: ../../home/kovid/work/calibre/manual/develop.rst:347
msgid ""
"Then place the IDE's remote debugger module into the :file:`src` "
"subdirectory of the calibre source code checkout. Add whatever code is "
"needed to launch the remote debugger to calibre at the point of interest, "
"for example in the main function. Then run calibre as normal. Your IDE "
"should now be able to connect to the remote debugger running inside calibre."
msgstr ""

# 67d72b6d25d0455a85149d001f2c5164
#: ../../home/kovid/work/calibre/manual/develop.rst:354
msgid "Executing arbitrary scripts in the calibre python environment"
msgstr ""

# c6b1e509dc844f2eabf90c528893ad5a
#: ../../home/kovid/work/calibre/manual/develop.rst:356
msgid ""
"The :command:`calibre-debug` command provides a couple of handy switches to "
"execute your own code, with access to the calibre modules::"
msgstr ""

# 79d1d86d3aea42bea90ee91134a875c8
#: ../../home/kovid/work/calibre/manual/develop.rst:361
msgid ""
"is great for testing a little snippet of code on the command line. It works "
"in the same way as the -c switch to the python interpreter::"
msgstr ""

# c3a14136f69e4f9a9cd274bd189395f8
#: ../../home/kovid/work/calibre/manual/develop.rst:365
msgid ""
"can be used to execute your own Python script. It works in the same way as "
"passing the script to the Python interpreter, except that the calibre "
"environment is fully initialized, so you can use all the calibre code in "
"your script. To use command line arguments with your script, use the form::"
msgstr ""

# 17736a38782a4c998de01d6f659b813b
#: ../../home/kovid/work/calibre/manual/develop.rst:370
msgid ""
"The ``--`` causes all subsequent arguments to be passed to your script."
msgstr ""

# 53d28879ec9a4d47aea2ccd115641f4e
#: ../../home/kovid/work/calibre/manual/develop.rst:374
msgid "Using calibre in your projects"
msgstr ""

# 052043b5138d4f0098f286b17851bb07
#: ../../home/kovid/work/calibre/manual/develop.rst:376
msgid ""
"It is possible to directly use calibre functions/code in your Python "
"project. Two ways exist to do this:"
msgstr ""

# 3b1e19c5a2eb4e569f617cfed02a2949
#: ../../home/kovid/work/calibre/manual/develop.rst:379
msgid "Binary install of calibre"
msgstr ""

# 1cf021c693b8411bb2b3d0c5ab7cafc4
#: ../../home/kovid/work/calibre/manual/develop.rst:381
msgid ""
"If you have a binary install of calibre, you can use the Python interpreter "
"bundled with calibre, like this::"
msgstr ""

# 2574d3b952884b06a86ed8f5536127f2
#: ../../home/kovid/work/calibre/manual/develop.rst:386
msgid "Source install on Linux"
msgstr ""

# c3a31ec899384c26986d603350b4b6c6
#: ../../home/kovid/work/calibre/manual/develop.rst:388
msgid ""
"In addition to using the above technique, if you do a source install on "
"Linux, you can also directly import calibre, as follows::"
msgstr ""

# 16a4d6c77ca645079033a55159f5905b
#: ../../home/kovid/work/calibre/manual/develop.rst:396
msgid ""
"It is essential that you import the init_calibre module before any other "
"calibre modules/packages as it sets up the interpreter to run calibre code."
msgstr ""

# e24b3235a4de4eccac2f6156fdb9caa3
#: ../../home/kovid/work/calibre/manual/develop.rst:400
msgid "API documentation for various parts of calibre"
msgstr ""
