# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-11 07:55+0530\n"
"PO-Revision-Date: 2014-07-13 23:30+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Greek (http://www.transifex.com/projects/p/calibre/language/el/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: el\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 43580a55a5aa4a6aaaa37f4bfa730af7
#: ../../creating_plugins.rst:7
msgid "Writing your own plugins to extend |app|'s functionality"
msgstr ""

# 62d677db8fa4457b907cc03e99f73605
#: ../../creating_plugins.rst:9
msgid ""
"|app| has a very modular design. Almost all functionality in |app| comes in "
"the form of plugins. Plugins are used for conversion, for downloading news "
"(though these are called recipes), for various components of the user "
"interface, to connect to different devices, to process files when adding "
"them to |app| and so on. You can get a complete list of all the built-in "
"plugins in |app| by going to :guilabel:`Preferences->Plugins`."
msgstr ""

# ded6578637114a36a71e6bfc3537321e
#: ../../creating_plugins.rst:11
msgid ""
"Here, we will teach you how to create your own plugins to add new features "
"to |app|."
msgstr ""

# 9cfb7a3f3be6445babb619b610d4e4d4
#: ../../creating_plugins.rst:0
msgid "Contents"
msgstr "Περιεχόμενα"

# cff1dc5af50d4211975493d5cdbd95e2
#: ../../creating_plugins.rst:18
msgid "This only applies to calibre releases >= 0.8.60"
msgstr ""

# 9fbed8c716914869b13ec7159004b5e8
#: ../../creating_plugins.rst:21
msgid "Anatomy of a |app| plugin"
msgstr ""

# f94b22953bb743c08769e0d7d1a4025f
#: ../../creating_plugins.rst:23
msgid ""
"A |app| plugin is very simple, it's just a zip file that contains some "
"python code and any other resources like image files needed by the plugin. "
"Without further ado, let's see a basic example."
msgstr ""

# ea29d42904254c42bb641013de72b843
#: ../../creating_plugins.rst:27
msgid ""
"Suppose you have an installation of |app| that you are using to self publish"
" various e-documents in EPUB and MOBI formats. You would like all files "
"generated by |app| to have their publisher set as \"Hello world\", here's "
"how to do it. Create a file named :file:`__init__.py` (this is a special "
"name and must always be used for the main file of your plugin) and enter the"
" following Python code into it:"
msgstr ""

# 593afb5b1790416aada9c8a47a1f5e75
#: ../../creating_plugins.rst:35
msgid ""
"That's all. To add this code to |app| as a plugin, simply run the following "
"in the directory in which you created :file:`__init__.py`::"
msgstr ""

# e6f747befb374b2eb2362f6ce7c2d6cc
#: ../../creating_plugins.rst:41
msgid ""
"On OS X you have to first install the |app| command line tools, by going to "
":guilabel:`Preferences->Miscellaneous` and clicking the :guilabel:`Install "
"command line tools` button."
msgstr ""

# 87d4d04daa6142dca0e84ff97ac38f8e
#: ../../creating_plugins.rst:45
msgid ""
"You can download the Hello World plugin from `helloworld_plugin.zip  <http"
"://calibre-ebook.com/downloads/helloworld_plugin.zip>`_."
msgstr ""

# d1c11ca4ed2c40ff854ebbe4b89e1bdd
#: ../../creating_plugins.rst:48
msgid ""
"Every time you use calibre to convert a book, the plugin's :meth:`run` "
"method will be called and the converted book will have its publisher set to "
"\"Hello World\". This is a trivial plugin, lets move on to a more complex "
"example that actually adds a component to the user interface."
msgstr ""

# 2ec306da9db843fdbc772b6b01b8e957
#: ../../creating_plugins.rst:53
msgid "A User Interface plugin"
msgstr ""

# e48e1dbeee964992850bc58a3714b683
#: ../../creating_plugins.rst:55
msgid ""
"This plugin will be spread over a few files (to keep the code clean). It "
"will show you how to get resources (images or data files) from the plugin "
"zip file, allow users to configure your plugin, how to create elements in "
"the |app| user interface and how to access and query the books database in "
"|app|."
msgstr ""

# ff7219fcf286406e93ac285bc6294026
#: ../../creating_plugins.rst:60
msgid ""
"You can download this plugin from `interface_demo_plugin.zip <http"
"://calibre-ebook.com/downloads/interface_demo_plugin.zip>`_"
msgstr ""

# 2d506a5db4de4f5d89157956f8a28034
#: ../../creating_plugins.rst:62
msgid ""
"The first thing to note is that this zip file has a lot more files in it, "
"explained below, pay particular attention to ``plugin-import-name-"
"interface_demo.txt``."
msgstr ""

# 63a65a0adee24af497087dcd936730e4
#: ../../creating_plugins.rst:78
msgid "**plugin-import-name-interface_demo.txt**"
msgstr ""

# 437fd7d4bc024ad7babe402ceea66111
#: ../../creating_plugins.rst:66
msgid ""
"An empty text file used to enable the multi-file plugin magic. This file "
"must be present in all plugins that use more than one .py file. It should be"
" empty and its filename must be of the form: plugin-import-"
"name-**some_name**.txt The presence of this file allows you to import code "
"from the .py files present inside the zip file, using a statement like::"
msgstr ""

# 7aba5e96947c4c8f9ea05f2bee10ee94
#: ../../creating_plugins.rst:72
msgid ""
"The prefix ``calibre_plugins`` must always be present. ``some_name`` comes "
"from the filename of the empty text file. ``some_module`` refers to  "
":file:`some_module.py` file inside the zip file. Note that this importing is"
" just as powerful as regular python imports. You can create packages and "
"subpackages of .py modules inside the zip file, just like you would normally"
" (by defining __init__.py in each sub directory), and everything should Just"
" Work."
msgstr ""

# cc0bd737f2244ae0b93d730507501c9e
#: ../../creating_plugins.rst:77
msgid ""
"The name you use for ``some_name`` enters a global namespace shared by all "
"plugins, **so make it as unique as possible**. But remember that it must be "
"a valid python identifier (only alphabets, numbers and the underscore)."
msgstr ""

# be513b7fe9f9422abaca26b6df164ba3
#: ../../creating_plugins.rst:81
msgid "**__init__.py**"
msgstr ""

# 0e37b1ff4f6d4f0786b9a16b97a22c1c
#: ../../creating_plugins.rst:81
msgid "As before, the file that defines the plugin class"
msgstr ""

# dea34a6d6f994e80bc8181ede63cc22c
#: ../../creating_plugins.rst:84
msgid "**main.py**"
msgstr ""

# feed5ca02076472e9f04870213147488
#: ../../creating_plugins.rst:84
msgid "This file contains the actual code that does something useful"
msgstr ""

# 77b26c18e95146c593807177a8629028
#: ../../creating_plugins.rst:87
msgid "**ui.py**"
msgstr ""

# be36785030c44be480dd718bfba0ad7c
#: ../../creating_plugins.rst:87
msgid "This file defines the interface part of the plugin"
msgstr ""

# f53a5382ac2d42ba81faea91a1b2b662
#: ../../creating_plugins.rst:90
msgid "**images/icon.png**"
msgstr ""

# c35ac94777d7455b80ad79fb206d434b
#: ../../creating_plugins.rst:90
msgid "The icon for this plugin"
msgstr ""

# a6042601cbb24d69ac9f0e433ffd9c30
#: ../../creating_plugins.rst:93
msgid "**about.txt**"
msgstr ""

# 1a282aad0b68495595e3a88cdb6029bc
#: ../../creating_plugins.rst:93
msgid "A text file with information about the plugin"
msgstr ""

# f1f8534a3bde45a7ba283da9f33c8c12
#: ../../creating_plugins.rst:98
msgid "**translations**"
msgstr ""

# b860e444d60f406fa2835ccb69867eed
#: ../../creating_plugins.rst:96
msgid ""
"A folder containing .mo files with the translations of the user interface of"
" your plugin into different languages. See below for details."
msgstr ""

# aa01f77b5e8b4c488f644c5518c6980d
#: ../../creating_plugins.rst:100
msgid "Now let's look at the code."
msgstr ""

# 63c0f19fbf1e4ba6a85290dce35a87e1
#: ../../creating_plugins.rst:103
msgid "__init__.py"
msgstr ""

# 87e0fb9f7ef947e898e5e927b572cd14
#: ../../creating_plugins.rst:105
msgid "First, the obligatory ``__init__.py`` to define the plugin metadata:"
msgstr ""

# 6585129965854aef8baae753d5a8ac82
#: ../../creating_plugins.rst:110
msgid ""
"The only noteworthy feature is the field :attr:`actual_plugin`. Since |app| "
"has both command line and GUI interfaces, GUI plugins like this one should "
"not load any GUI libraries in __init__.py. The actual_plugin field does this"
" for you, by telling |app| that the actual plugin is to be found in another "
"file inside your zip archive, which will only be loaded in a GUI context."
msgstr ""

# 739a451baf5147c79b67a4609a91f828
#: ../../creating_plugins.rst:115
msgid ""
"Remember that for this to work, you must have a plugin-import-name-"
"some_name.txt file in your plugin zip file, as discussed above."
msgstr ""

# 08f1ea808938406a8b0398afd112beb1
#: ../../creating_plugins.rst:118
msgid ""
"Also there are a couple of methods for enabling user configuration of the "
"plugin. These are discussed below."
msgstr ""

# ea0c4455bd894ddb8387310dfdd2e3c9
#: ../../creating_plugins.rst:121
msgid "ui.py"
msgstr ""

# a8b91e28fc914c3e8dab9dfc7ac19f30
#: ../../creating_plugins.rst:123
msgid ""
"Now let's look at ui.py which defines the actual GUI plugin. The source code"
" is heavily commented and should be self explanatory:"
msgstr ""

# 960992638e6d4be0b8d38710b6f941b5
#: ../../creating_plugins.rst:129
msgid "main.py"
msgstr ""

# 670393373b624308a04c38965ecef4c6
#: ../../creating_plugins.rst:131
msgid "The actual logic to implement the Interface Plugin Demo dialog."
msgstr ""

# e59b80124bf24d23b8f549dbdb60c8f7
#: ../../creating_plugins.rst:137
msgid "Getting resources from the plugin zip file"
msgstr ""

# eb3bba1c0a0d4714afc16dae20e8fcaa
#: ../../creating_plugins.rst:139
msgid ""
"|app|'s plugin loading system defines a couple of built-in functions that "
"allow you to conveniently get files from the plugin zip file."
msgstr ""

# d39863da9dbd4357808d4c0486369227
#: ../../creating_plugins.rst:146
msgid "**get_resources(name_or_list_of_names)**"
msgstr ""

# 30480a5285d74d0fbde027417c61639a
#: ../../creating_plugins.rst:142
msgid ""
"This function should be called with a list of paths to files inside the zip "
"file. For example to access the file icon.png in the directory images in the"
" zip file, you would use: ``images/icon.png``. Always use a forward slash as"
" the path separator, even on windows. When you pass in a single name, the "
"function will return the raw bytes of that file or None if the name was not "
"found in the zip file. If you pass in more than one name then it returns a "
"dict mapping the names to bytes. If a name is not found, it will not be "
"present in the returned dict."
msgstr ""

# cd901ea154ff4345b70338ccec0dc247
#: ../../creating_plugins.rst:150
msgid "**get_icons(name_or_list_of_names)**"
msgstr ""

# da8d6d8bbdc84f07adf2cd4d7a34e647
#: ../../creating_plugins.rst:149
msgid ""
"A convenience wrapper for get_resources() that creates QIcon objects from "
"the raw bytes returned by get_resources. If a name is not found in the zip "
"file the corresponding QIcon will be null."
msgstr ""

# d4f8fd9a4053468982bd4112cef203eb
#: ../../creating_plugins.rst:153
msgid "Enabling user configuration of your plugin"
msgstr ""

# 5e8624cf7a0040898bde3d3d289d369a
#: ../../creating_plugins.rst:155
msgid ""
"To allow users to configure your plugin, you must define three methods in "
"your base plugin class, '**is_customizable**, **config_widget** and "
"**save_settings** as shown below:"
msgstr ""

# 3d64e92e8e524b059c0ea3c60a990231
#: ../../creating_plugins.rst:166
msgid ""
"|app| has many different ways to store configuration data (a legacy of its "
"long history). The recommended way is to use the **JSONConfig** class, which"
" stores your configuration information in a .json file."
msgstr ""

# 9d7608df536549509337399fce0e12c8
#: ../../creating_plugins.rst:168
msgid ""
"The code to manage configuration data in the demo plugin is in config.py:"
msgstr ""

# 5b3602928a7843628e08566e18f30067
#: ../../creating_plugins.rst:173
msgid ""
"The ``prefs`` object is now available throughout the plugin code by a "
"simple::"
msgstr ""

# cfecf658672840329c296b05c9091e87
#: ../../creating_plugins.rst:178
msgid "You can see the ``prefs`` object being used in main.py:"
msgstr ""

# 54c7c83b6cc249129677053cee77cabc
#: ../../creating_plugins.rst:184
msgid "Adding translations to your plugin"
msgstr ""

# ca2b2d7156d74af69e1ee08802832bdb
#: ../../creating_plugins.rst:186
msgid ""
"You can have all the user interface strings in your plugin translated and "
"displayed in whatever language is set for the main calibre user interface."
msgstr ""

# 1cc97c423c6446fcb9aacb33b8793db9
#: ../../creating_plugins.rst:189
msgid ""
"The first step is to go through your plugin's source code and mark all user "
"visible strings as translatable, by surrounding them in _(). For example::"
msgstr ""

# 285ad198086c4203ba764419c46d7857
#: ../../creating_plugins.rst:194
msgid ""
"Then use some program to generate .po files from your plugin source code. "
"There should be one .po file for every language you want to translate into. "
"For example: de.po for German, fr.po for French and so on. You can use the "
"`poedit <http://www.poedit.net/>`_ program for this."
msgstr ""

# f36aff09b6eb4f979847cf653b4c1722
#: ../../creating_plugins.rst:199
msgid ""
"Send these .po files to your translators. Once you get them back, compile "
"them into .mo files. You can again use poedit for that, or just do::"
msgstr ""

# 596d0a59eacd4a15b0d4cb574b1416a9
#: ../../creating_plugins.rst:204
msgid "Put the .mo files into the ``translations`` folder in your plugin."
msgstr ""

# 0ecd9c1ef7cc48a9a4a05743ee2a4b13
#: ../../creating_plugins.rst:206
msgid ""
"The last step is to simply call the function `load_translations()` at the "
"top of your plugin's .py files. For performance reasons you should only call"
" this function in those .py files that actually have translatable strings. "
"So in a typical User Interface plugin you would call it at the top of "
"``ui.py`` but not ``__init__.py``."
msgstr ""

# c918e22c4efb4b2789fd09bf66367cc6
#: ../../creating_plugins.rst:212
msgid ""
"You can test the translations of your plugins by changing the user interface"
" language in calibre under Preferences->Look & Feel or by running calibre "
"like this::"
msgstr ""

# b46011f5a24a47958654b2a826c88f1b
#: ../../creating_plugins.rst:218
msgid ""
"Replace ``de`` with the language code of the language you want to test."
msgstr ""

# 11e5c69b3d05446b9767a44fb25949c0
#: ../../creating_plugins.rst:221
msgid "The plugin API"
msgstr ""

# b3c0a52e72c44f04b2c63970281b8bfd
#: ../../creating_plugins.rst:223
msgid ""
"As you may have noticed above, a plugin in |app| is a class. There are "
"different classes for the different types of plugins in |app|. Details on "
"each class, including the base class of all plugins can be found in "
":ref:`plugins`."
msgstr ""

# ef8a231825d348d4afeea06cc28123cd
#: ../../creating_plugins.rst:226
msgid ""
"Your plugin is almost certainly going to use code from |app|. To learn how "
"to find various bits of functionality in the |app| code base, read the "
"section on the |app| :ref:`code_layout`."
msgstr ""

# 99b4cd29764040549d9bba7532e9528b
#: ../../creating_plugins.rst:231
msgid "Debugging plugins"
msgstr ""

# f0cf2bd166a741a9976dc170f22c64df
#: ../../creating_plugins.rst:233
msgid ""
"The first, most important step is to run |app| in debug mode. You can do "
"this from the command line with::"
msgstr ""

# 08efb1b0ca3e4e23a5259ee7c739848a
#: ../../creating_plugins.rst:237
msgid ""
"Or from within calibre by right-clicking the preferences button or using the"
" `Ctrl+Shift+R` keyboard shortcut."
msgstr ""

# a5a64a90fccd44efbb069b63c8fb88ec
#: ../../creating_plugins.rst:239
msgid ""
"When running from the command line, debug output will be printed to the "
"console, when running from within |app| the output will go to a txt file."
msgstr ""

# 71fd44563c004dc3a89baab4ce80c55d
#: ../../creating_plugins.rst:241
msgid ""
"You can insert print statements anywhere in your plugin code, they will be "
"output in debug mode. Remember, this is python, you really shouldn't need "
"anything more than print statements to debug ;) I developed all of |app| "
"using just this debugging technique."
msgstr ""

# 04a4d2c05537435595c2140658f8aa84
#: ../../creating_plugins.rst:243
msgid ""
"You can quickly test changes to your plugin by using the following command "
"line::"
msgstr ""

# 5b03d38187694bfb8797864a24dd1c77
#: ../../creating_plugins.rst:248
msgid ""
"This will shutdown a running calibre, wait for the shutdown to complete, "
"then update your plugin in |app| and relaunch |app|."
msgstr ""

# dc2a66a074c444f9985e4c6f20915b81
#: ../../creating_plugins.rst:251
msgid "More plugin examples"
msgstr ""

# 7c48bf54007947799f38e411fbebd7df
#: ../../creating_plugins.rst:253
msgid ""
"You can find a list of many, sophisticated |app| plugins `here "
"<http://www.mobileread.com/forums/showthread.php?t=118764>`_."
msgstr ""

# b35a071729264256aededa13f9f33aa6
#: ../../creating_plugins.rst:256
msgid "Sharing your plugins with others"
msgstr ""

# da4f499e1a5c4a0e86d52ee8410a80da
#: ../../creating_plugins.rst:258
msgid ""
"If you would like to share the plugins you have created with other users of "
"|app|, post your plugin in a new thread in the `calibre plugins forum "
"<http://www.mobileread.com/forums/forumdisplay.php?f=237>`_."
msgstr ""
