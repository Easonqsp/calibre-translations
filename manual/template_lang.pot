# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-26 10:21+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/template_lang.rst:5
# 676ac1cc898f4661ad00840054d289c1
msgid "The |app| template language"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:7
# 7206492f307e433c81925f532c4e5753
msgid "The |app| template language is used in various places. It is used to control the folder structure and file name when saving files from the |app| library to the disk or eBook reader. It is also used to define \"virtual\" columns that contain data from other columns and so on."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:10
# 85bb90ec8e5a4933868c04e3ba3567fb
msgid "The basic template language is very simple, but has very powerful advanced features. The basic idea is that a template consists of text and names in curly brackets that are then replaced by the corresponding metadata from the book being processed. So, for example, the default template used for saving books to device in |app| is::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:14
#: ../../home/kovid/work/calibre/manual/template_lang.rst:22
# d9f516080a9944dfad325577f89aa772
# dac142357b9c426c9d4d28c30b1ded4c
msgid "For the book \"The Foundation\" by \"Isaac Asimov\" it will become::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:18
# 68abf0f7aa4a41a1a438ec648744357d
msgid "The slashes are text, which is put into the template where it appears. For example, if your template is::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:26
# 8c72de315fc2457ea2031c4a8ee6b20c
msgid "You can use all the various metadata fields available in calibre in a template, including any custom columns you have created yourself. To find out the template name for a column simply hover your mouse over the column header. Names for custom fields (columns you have created yourself) always have a # as the first character. For series type custom fields, there is always an additional field named ``#seriesname_index`` that becomes the series index for that series. So if you have a custom series field named ``#myseries``, there will also be a field named ``#myseries_index``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:28
# f436dd4c3f1a4076a8a0ea424b3cf79c
msgid "In addition to the column based fields, you also can use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:33
# 075e81e508b1401d960fe2b3de49cbab
msgid "If a particular book does not have a particular piece of metadata, the field in the template is automatically removed for that book. Consider, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:37
# 115b7318191840f5a1c1adb486bcce3b
msgid "If a book has a series, the template will produce::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:41
# 10b077f60c1147208ab84040fd1c27c5
msgid "and if a book does not have a series::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:45
# c25d71f69f364874bbd9137a86b95052
msgid "(|app| automatically removes multiple slashes and leading or trailing spaces)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:48
# 3e2de5c27675475785b0495125c0e43e
msgid "Advanced formatting"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:50
# cf96e58204784701a9666ed5120e64a7
msgid "You can do more than just simple substitution with the templates. You can also conditionally include text and control how the substituted data is formatted."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:52
# 746ee26682e7417987cf838f6491ed67
msgid "First, conditionally including text. There are cases where you might want to have text appear in the output only if a field is not empty. A common case is ``series`` and ``series_index``, where you want either nothing or the two values with a hyphen between them. Calibre handles this case using a special field syntax."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:54
# 5abd9aa396324942a45442b251eb94a4
msgid "For example, assume you want to use the template::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:58
# bbd2d5d18cee4157bda10a9ca17c892c
msgid "If the book has no series, the answer will be ``- - title``. Many people would rather the result be simply ``title``, without the hyphens. To do this, use the extended syntax ``{field:|prefix_text|suffix_text}``. When you use this syntax, if field has the value SERIES then the result will be ``prefix_textSERIESsuffix_text``. If field has no value, then the result will be the empty string (nothing); the prefix and suffix are ignored. The prefix and suffix can contain blanks. **Do not use subtemplates (`{ ... }`) or functions (see below) as the prefix or the suffix.**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:60
# 736f673b1c724a078483cf73fc1208c9
msgid "Using this syntax, we can solve the above series problem with the template::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:64
# 068ef315663e4931806bb5b9ecf71fab
msgid "The hyphens will be included only if the book has a series index, which it will have only if it has a series."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:66
# b9939329412d433aa9a13676441f4aa9
msgid "Notes: you must include the : character if you want to use a prefix or a suffix. You must either use no \\| characters or both of them; using one, as in ``{field:| - }``, is not allowed. It is OK not to provide any text for one side or the other, such as in ``{series:|| - }``. Using ``{title:||}`` is the same as using ``{title}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:68
# a429effc0798425cbf58b9e09adca34c
msgid "Second: formatting. Suppose you wanted to ensure that the series_index is always formatted as three digits with leading zeros. This would do the trick::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:72
# 5e40c9ff35a6493e83b434e63cf8deb7
msgid "If instead of leading zeros you want leading spaces, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:76
# dea357e7324a42c98f6be7fbbb59b3a2
msgid "For trailing zeros, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:80
# d07a6778a6c041a7b9af952af874a286
msgid "If you use series indices with sub values (e.g., 1.1), you might want to ensure that the decimal points line up. For example, you might want the indices 1 and 2.5 to appear as 01.00 and 02.50 so that they will sort correctly. To do this, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:84
# 5dacef4cc2df436c9814877f9547821d
msgid "If you want only the first two letters of the data, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:88
# 2e106c54ab98475096e1afd0d3986bf5
msgid "The |app| template language comes from python and for more details on the syntax of these advanced formatting operations, look at the `Python documentation <http://docs.python.org/library/string.html#format-string-syntax>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:91
# e0b779caa0804deaac966b78642600e3
msgid "Advanced features"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:94
# ae7efb5804524376994d8a3a5eff4375
msgid "Using templates in custom columns"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:96
# 4f37bb3d1df244a8b2e7d3ffe20ca4a7
msgid "There are sometimes cases where you want to display metadata that |app| does not normally display, or to display data in a way different from how |app| normally does. For example, you might want to display the ISBN, a field that |app| does not display. You can use custom columns for this by creating a column with the type 'column built from other columns' (hereafter called composite columns), and entering a template. Result: |app| will display a column showing the result of evaluating that template. To display the ISBN, create the column and enter ``{identifiers:select(isbn)}`` into the template box. To display a column containing the values of two series custom columns separated by a comma, use ``{#series1:||,}{#series2}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:98
# c64bf948df47494189f59d79fa0ea726
msgid "Composite columns can use any template option, including formatting."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:100
# 9b2075d9b1c94516b4e0bee183b1434a
msgid "You cannot change the data contained in a composite column. If you edit a composite column by double-clicking on any item, you will open the template for editing, not the underlying data. Editing the template on the GUI is a quick way of testing and changing composite columns."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:103
# 95071aceffd041a79085a3e1fa33fc14
msgid "Using functions in templates - single-function mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:105
# 051001407f9f4ef2bfab34471aa8f344
msgid "Suppose you want to display the value of a field in upper case, when that field is normally in title case. You can do this (and many more things) using the functions available for templates. For example, to display the title in upper case, use ``{title:uppercase()}``. To display it in title case, use ``{title:titlecase()}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:107
# 7473bc62002c409db245d6c6db4e5a95
msgid "Function references appear in the format part, going after the ``:`` and before the first ``|`` or the closing ``}``. If you have both a format and a function reference, the function comes after another ``:``. Functions must always end with ``()``. Some functions take extra values (arguments), and these go inside the ``()``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:109
# 941d7eff9e5546429bd802bf91df8ca9
msgid "Functions are always applied before format specifications. See further down for an example of using both a format and a function, where this order is demonstrated."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:111
# acc27de11d014e7b8e3f8f9d73ff7964
msgid "The syntax for using functions is ``{field:function(arguments)}``, or ``{field:function(arguments)|prefix|suffix}``. Arguments are separated by commas. Commas inside arguments must be preceeded by a backslash ( '\\\\' ). The last (or only) argument cannot contain a closing parenthesis ( ')' ). Functions return the value of the field used in the template, suitably modified."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:113
# 4832ad3d28654e3faf414d03a8749858
msgid "Important: If you have programming experience, please note that the syntax in this mode (single function) is not what you might expect. Strings are not quoted. Spaces are significant. All arguments must be constants; there is no sub-evaluation. **Do not use subtemplates (`{ ... }`) as function arguments.** Instead, use :ref:`template program mode <template_mode>` and :ref:`general program mode <general_mode>`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:115
# b6d2b2384bcc46a7b3a40ceb0d9e0b69
msgid "Many functions use regular expressions. In all cases, regular expression matching is case-insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:117
# 5ce4b657d83240a8a5fd881c179de250
msgid "The functions available are listed below. Note that the definitive documentation for functions is available in the section :ref:`Function classification <template_functions_reference>`:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:119
# ff7bbfabd5d0456da0bf0439bfbbc0b3
msgid "``lowercase()``   -- return value of the field in lower case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:120
# 14cbbc3a3abf4aa0a50268e46f294a9c
msgid "``uppercase()``   -- return the value of the field in upper case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:121
# 8f41a52c5e514f84896eebf5257b94f5
msgid "``titlecase()``   -- return the value of the field in title case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:122
# 481c64231a264b25a3345b7168ca4cfb
msgid "``capitalize()``  -- return the value with the first letter upper case and the rest lower case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:123
# f18e1a26f0bc4b48a3ee45794ecc5f7a
msgid "``contains(pattern, text if match, text if not match)`` -- checks if field contains matches for the regular expression `pattern`. Returns `text if match` if matches are found, otherwise it returns `text if no match`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:124
# c5a49d055d324c5a8b71570c750a903b
msgid "``count(separator)`` -- interprets the value as a list of items separated by `separator`, returning the number of items in the list. Most lists use a comma as the separator, but authors uses an ampersand. Examples: `{tags:count(,)}`, `{authors:count(&)}`"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:125
# 5e82d7763bd542baafb99110875b1554
msgid "``format_number(template)`` -- interprets the value as a number and format that number using a python formatting template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The field_name part of the template must be a 0 (zero) (the \"{0:\" in the above examples). See the template language and python documentation for more examples. Returns the empty string if formatting fails."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:126
# b685126311cf4209ba7e4ce709e5c888
msgid "``human_readable()`` -- expects the value to be a number and returns a string representing that number in KB, MB, GB, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:127
# f429dc026e834c9d97751e07b88373b2
msgid "``ifempty(text)`` -- if the field is not empty, return the value of the field. Otherwise return `text`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:128
# a4de8916e01843db97b33c10dcbf292b
msgid "``in_list(separator, pattern, found_val, not_found_val)`` -- interpret the field as a list of items separated by `separator`, comparing the `pattern` against each value in the list. If the pattern matches a value, return `found_val`, otherwise return `not_found_val`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:129
# c8c2549cc5444071826a23b99c7e5263
msgid "``language_codes(lang_strings)`` -- return the language codes for the strings passed in `lang_strings`. The strings must be in the language of the current locale. `Lang_strings` is a comma-separated list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:130
# adc92c43c8d140379f1bfbbaacc353b8
msgid "``language_strings(lang_codes, localize)`` -- return the strings for the language codes passed in `lang_codes`. If `localize` is zero, return the strings in English. If localize is not zero, return the strings in the language of the current locale. `Lang_codes` is a comma-separated list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:131
# 035019ff63d44f06a4672b7fe5578a99
msgid "``list_item(index, separator)`` -- interpret the field as a list of items separated by `separator`, returning the `index`th item. The first item is number zero. The last item can be returned using `list_item(-1,separator)`. If the item is not in the list, then the empty value is returned. The separator has the same meaning as in the `count` function."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:132
# e9531b88257d464fab18745781934438
msgid "``lookup(pattern, field, pattern, field, ..., else_field)`` -- like switch, except the arguments are field (metadata) names, not text. The value of the appropriate field will be fetched and used. Note that because composite columns are fields, you can use this function in one composite field to use the value of some other composite field. This is extremely useful when constructing variable save paths (more later)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:133
# 8d6cdb215e5847b6ae56b3b34340e7e9
msgid "``re(pattern, replacement)`` -- return the field after applying the regular expression. All instances of `pattern` are replaced with `replacement`. As in all of |app|, these are python-compatible regular expressions."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:134
# 054d4b0dbb1742eeb1259a8520456c56
msgid "``select(key)`` -- interpret the field as a comma-separated list of items, with the items being of the form \"id:value\". Find the pair with the id equal to key, and return the corresponding value. This function is particularly useful for extracting a value such as an isbn from the set of identifiers for a book."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:135
# 2945b4903f0e4b73a1b98089e42f2dad
msgid "``shorten(left chars, middle text, right chars)`` -- Return a shortened version of the field, consisting of `left chars` characters from the beginning of the field, followed by `middle text`, followed by `right chars` characters from the end of the string. `Left chars` and `right chars` must be integers. For example, assume the title of the book is `Ancient English Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most 15 characters. If you use ``{title:shorten(9,-,5)}``, the result will be `Ancient E-nhoe`. If the field's length is less than ``left chars`` + ``right chars`` + the length of ``middle text``, then the field will be used intact. For example, the title `The Dome` would not be changed."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:136
# cd88bfadbc024034b6841efc66ef8cf1
msgid "``str_in_list(val, separator, string, found_val, not_found_val)`` -- treat val as a list of items separated by separator, comparing the string against each value in the list. If the string matches a value, return found_val, otherwise return not_found_val. If the string contains separators, then it is also treated as a list and each value is checked."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:137
# 813238af257441f58a71a7dbf7fafb5b
msgid "``subitems(val, start_index, end_index)`` -- This function is used to break apart lists of tag-like hierarchical items such as genres. It interprets the value as a comma-separated list of tag-like items, where each item is a period-separated list. Returns a new list made by first finding all the period-separated tag-like items, then for each such item extracting the components from `start_index` to `end_index`, then combining the results back together. The first component in a period-separated list has an index of zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:147
# 2aa3d7a14a75497e9decc62b37aa6239
msgid "``sublist(val, start_index, end_index, separator)`` -- interpret the value as a list of items separated by `separator`, returning a new list made from the items from `start_index`to `end_index`. The first item is number zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples assuming that the tags column (which is comma-separated) contains \"A, B ,C\"::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:153
# 308510b5de0e45928886c42364f56193
msgid "``swap_around_comma(val) `` -- given a value of the form ``B, A``, return ``A B``. This is most useful for converting names in LN, FN format to FN LN. If there is no comma, the function returns val unchanged."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:154
# 73349526000143ada4de1c1961051127
msgid "``switch(pattern, value, pattern, value, ..., else_value)`` -- for each ``pattern, value`` pair, checks if the field matches the regular expression ``pattern`` and if so, returns that ``value``. If no ``pattern`` matches, then ``else_value`` is returned. You can have as many ``pattern, value`` pairs as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:155
# 6be7d1c91b0b4c87958b52065b6ab9ef
msgid "``test(text if not empty, text if empty)`` -- return `text if not empty` if the field is not empty, otherwise return `text if empty`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:156
# ca4228275b6348b5b6b1e575fe7e3b68
msgid "``transliterate()`` -- Returns a string in a latin alphabet formed by approximating the sound of the words in the source field. For example, if the source field is ``Фёдор Миха́йлович Достоевский`` the function returns ``Fiodor Mikhailovich Dostoievskii``.'"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:158
# 372da9f2fd444217b01f1356618833c4
msgid "Now, what about using functions and formatting in the same field. Suppose you have an integer custom column called ``#myint`` that you want to see with leading zeros, as in ``003``. To do this, you would use a format of ``0>3s``. However, by default, if a number (integer or float) equals zero then the field produces the empty value, so zero values will produce nothing, not ``000``. If you really want to see ``000`` values, then you use both the format string and the ``ifempty`` function to change the empty value back to a zero. The field reference would be::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:162
# 03e48273141d48ee9eea8bbd14e7e9cb
msgid "Note that you can use the prefix and suffix as well. If you want the number to appear as ``[003]`` or ``[000]``, then use the field::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:169
# 448b51f5ca894f4dba1c25b09b4109f0
msgid "Using functions in templates - template program mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:171
# 72fc48610d984994a0e83edcdd801840
msgid "The template language program mode differs from single-function mode in that it permits you to write template expressions that refer to other metadata fields, modify values, and do arithmetic. It is a reasonably complete programming language."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:173
# c31b548064b641008ee6264c4154f73f
msgid "You can use the functions documented above in template program mode. See below for details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:175
# f47867b5f83e4639bc4832b943035953
msgid "Beginning with an example, assume that you want your template to show the series for a book if it has one, otherwise show the value of a custom field #genre. You cannot do this in the basic language because you cannot make reference to another metadata field within a template expression. In program mode, you can. The following expression works::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:179
# 4f9379b9af7944cebf9a899301375a95
msgid "The example shows several things:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:181
# bd905def81ef4a9c8b71043b144d0fb3
msgid "program mode is used if the expression begins with ``:'`` and ends with ``'``. Anything else is assumed to be single-function."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:182
# 8d7ff99f2e00421bb3a3030fdeb34cf2
msgid "the variable ``$`` stands for the field the expression is operating upon, ``#series`` in this case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:183
# aecb670f54c8437b875bf9e30d87236c
msgid "functions must be given all their arguments. There is no default value. For example, the standard built-in functions must be given an additional initial parameter indicating the source field, which is a significant difference from single-function mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:184
# bdb5dc44345b4ccc839ad50e3fadde61
msgid "white space is ignored and can be used anywhere within the expression."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:185
# 4a9777e998b04daaa8e14abc19215ff6
msgid "constant strings are enclosed in matching quotes, either ``'`` or ``\"``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:187
# 824cac9560bb4046ba4a909b7f42577f
msgid "The language is similar to ``functional`` languages in that it is built almost entirely from functions. A statement is a function. An expression is a function. Constants and identifiers can be thought of as functions returning the value indicated by the constant or stored in the identifier."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:189
# 98fbb1e6030943f19ed23810ac2654ab
msgid "The syntax of the language is shown by the following grammar::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:199
# d0282aa21f4b4857b6589ec20aac5ab9
msgid "Comments are lines with a '#' character at the beginning of the line."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:201
# eacca36a17e149ad89f64c7ab474f2ff
msgid "An ``expression`` always has a value, either the value of the constant, the value contained in the identifier, or the value returned by a function. The value of a ``statement`` is the value of the last expression in the sequence of statements. As such, the value of the program (statement)::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:205
# ad843060d3ed48748c085848d88aca2c
msgid "is 3."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:207
# 8c227b8896904ffd844473d12304e43c
msgid "Another example of a complex but rather silly program might help make things clearer::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:218
# fa264a79458d478ab911ae622c320abe
msgid "This program does the following:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:220
# 6ff18c6c0c26478ca2418efa46305401
msgid "specify that the field being looked at is series_index. This sets the value of the variable ``$``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:221
# fca42331773b420694392a8f9404c620
msgid "calls the ``substr`` function, which takes 3 parameters ``(str, start, end)``. It returns a string formed by extracting the start through end characters from string, zero-based (the first character is character zero). In this case the string will be computed by the ``strcat`` function, the start is 0, and the end is 6. In this case it will return the first 6 characters of the string returned by ``strcat``, which must be evaluated before substr can return."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:222
# 51198f56ab404d2bb3ea82fe25bbab95
msgid "calls the ``strcat`` (string concatenation) function. Strcat accepts 1 or more arguments, and returns a string formed by concatenating all the values. In this case there are three arguments. The first parameter is the value in ``$``, which here is the value of ``series_index``. The second paremeter is the constant string ``'->'``. The third parameter is the value returned by the ``cmp`` function, which must be fully evaluated before ``strcat`` can return."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:223
# 8e60d6d47f154b5eb01a6f67c92a15b6
msgid "The ``cmp`` function takes 5 arguments ``(x, y, lt, eq, gt)``. It compares x and y and returns the third argument ``lt`` if x < y, the fourth argument ``eq`` if x == y, and the fifth argument ``gt`` if x > y. As with all functions, all of the parameters can be statements. In this case the first parameter (the value for ``x``) is the result of dividing the series_index by 2. The second parameter ``y`` is the constant ``1``. The third parameter ``lt`` is a statement (more later). The fourth parameter ``eq`` is the constant string ``'eq'``. The fifth parameter is the constant string ``'gt'``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:224
# 23cc56c037b74dea8a91a2cc4d5591a4
msgid "The third parameter (the one for ``lt``) is a statement, or a sequence of expressions. Remember that a statement (a sequence of semicolon-separated expressions) is also an expression, returning the value of the last expression in the list. In this case, the program first assigns the value ``1`` to a local variable ``c``, then returns a substring made by extracting the c'th character to the end. Since c always contains the constant ``1``, the substring will return the second through end'th characters, or ``'t123'``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:225
# 7c4575e450b1423a9af74a768629e85f
msgid "Once the statement providing the value to the third parameter is executed, ``cmp`` can return a value. At that point, ``strcat` can return a value, then ``substr`` can return a value. The program then terminates."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:227
# 94f7781a389243aa9b4d4b75efe97be1
msgid "For various values of series_index, the program returns:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:229
# 065e9b7135d9427b85dac30efc29a1ee
msgid "series_index == undefined, result = ``prefix ->t123 suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:230
# a4274269c3ad4e849a445b77ed7487d9
msgid "series_index == 0.5, result = ``prefix 0.50-> suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:231
# 3cca938b06ce4d56b781b51d26bf7564
msgid "series_index == 1, result = ``prefix 1->t12 suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:232
# 748bdacb512143cdb490638e1330b66f
msgid "series_index == 2, result = ``prefix 2->eq suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:233
# 1a0f5819f76f43afb01f7baf0e7d55d7
msgid "series_index == 3, result = ``prefix 3->gt suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:235
# 6854ddd460ba4396aaa661b5942be084
msgid "**All the functions listed under single-function mode can be used in program mode**. To do so, you must supply the value that the function is to act upon as the first parameter, in addition to the parameters documented above. For example, in program mode the parameters of the `test` function are ``test(x, text_if_not_empty, text_if_empty)``. The `x` parameter, which is the value to be tested, will almost always be a variable or a function call, often `field()`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:237
# 71f8ec819b37409dae0799b7b10d8444
msgid "The following functions are available in addition to those described in single-function mode. Remember from the example above that the single-function mode functions require an additional first parameter specifying the field to operate on. With the exception of the ``id`` parameter of assign, all parameters can be statements (sequences of expressions). Note that the definitive documentation for functions is available in the section :ref:`Function classification <template_functions_reference>`:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:239
# 6d3f7d536ca1473d84e176b65c84f571
msgid "``and(value, value, ...)`` -- returns the string \"1\" if all values are not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:240
# ccca7258a3144325aba0457e8431f621
msgid "``add(x, y)`` -- returns x + y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:241
# a6eb12b447864e048e2c951b4998c07c
msgid "``assign(id, val)`` -- assigns val to id, then returns val. id must be an identifier, not an expression"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:243
# a85adaded64d47078369335f7964defb
msgid "``approximate_formats()`` -- return a comma-separated list of formats that at one point were associated with the book. There is no guarantee that the list is correct, although it probably is. This function can be called in template program mode using the template ``{:'approximate_formats()'}``. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:243
# 0ad6c0f117194a2f87f44be7252f8387
msgid "``author_links(val_separator, pair_separator)`` -- returns a string containing a list of authors and that author's link values in the form ``author1 val_separator author1link pair_separator author2 val_separator author2link`` etc. An author is separated from its link value by the ``val_separator`` string with no added spaces. ``author:linkvalue`` pairs are separated by the ``pair_separator`` string argument with no added spaces. It is up to you to choose separator strings that do not occur in author names or links. An author is included even if the author link is empty."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:244
# 1b5260df584b4378b722787a70c722b7
msgid "``author_sorts(val_separator)`` -- returns a string containing a list of author's sort values for the authors of the book. The sort is the one in the author metadata (different from the author_sort in books). The returned list has the form author sort 1 ``val_separator`` author sort 2 etc. The author sort values in this list are in the same order as the authors of the book. If you want spaces around ``val_separator`` then include them in the separator string"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:245
# 7f778581e34d4a8c915ef750f65d6a74
msgid "``booksize()`` -- returns the value of the |app| 'size' field. Returns '' if there are no formats."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:246
# 955ddc5285eb44d89d978bec218eb30b
msgid "``cmp(x, y, lt, eq, gt)`` -- compares x and y after converting both to numbers. Returns ``lt`` if x < y. Returns ``eq`` if x == y. Otherwise returns ``gt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:247
# 2907f7ceebe74f6cbf889afcd6521331
msgid "``current_library_name() -- `` return the last name on the path to the current calibre library. This function can be called in template program mode using the template ``{:'current_library_name()'}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:248
# adb8e218b4c0447bbe7541cb8a7bb424
msgid "``current_library_path() -- `` return the path to the current calibre library. This function can be called in template program mode using the template ``{:'current_library_path()'}``.."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:249
# 133109ac925b493ebe211d9c3d14f468
msgid "``days_between(date1, date2)`` -- return the number of days between ``date1`` and ``date2``. The number is positive if ``date1`` is greater than ``date2``, otherwise negative. If either ``date1`` or ``date2`` are not dates, the function returns the empty string."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:250
# 7665275751ea4019b2e05184d2a51ed1
msgid "``divide(x, y)`` -- returns x / y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:251
# ec4db482adff42e88351c249415273e6
msgid "``eval(string)`` -- evaluates the string as a program, passing the local variables (those ``assign`` ed to). This permits using the template processor to construct complex results from local variables. Because the `{` and `}` characters are special, you must use `[[` for the `{` character and `]]` for the '}' character; they are converted automatically. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:252
# 316922a8971f402db28bfd8415acd711
msgid "``field(name)`` -- returns the metadata field named by ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:253
# 48aa1441d53e421aa1e535c4beea9ab4
msgid "``first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)`` -- compares \"val < cmpN\" in sequence, returning resultN for the first comparison that succeeds. Returns else_result if no comparison succeeds. Example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:257
# 0ed1a190147449d8ada8a23128d867d5
msgid "returns \"large\". The same example with a first value of 16 returns \"giant\". * ``first_non_empty(value, value, ...)`` -- returns the first value that is not empty. If all values are empty, then the empty value is returned. You can have as many values as you want. * ``format_date(x, date_format)`` -- format_date(val, format_string) -- format the value, which must be a date field, using the format_string, returning a string. The formatting codes are::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:281
# 7ffc7872519a49d8b8708259facad092
msgid "You might get unexpected results if the date you are formatting contains localized month names, which can happen if you changed the format tweaks to contain MMMM. In this case, instead of using something like ``{pubdate:format_date(yyyy)}``, write the template using template program mode as in ``{:'format_date(raw_field('pubdate'),'yyyy')'}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:283
# 4c27f5e8b5cc42a8a21fb01efd629704
msgid "finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and suffix to a value in the same way as done in a template like ``{series_index:05.2f| - |- }``. This function is provided to ease conversion of complex single-function- or template-program-mode templates to :ref:`general program mode <general_mode>` (see below) to take advantage of GPM template compilation. For example, the following program produces the same output as the above template::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:287
# d9e1ee7aa56f4936a365d1708109deb9
msgid "Another example: for the template ``{series:re(([^\\s])[^\\s]+(\\s|$),\\1)}{series_index:0>2s| - | - }{title}`` use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:296
# df0a0f67b32d427e8fa9eb10ef92e76b
msgid "``formats_modtimes(date_format)`` -- return a comma-separated list of colon_separated items representing modification times for the formats of a book. The date_format parameter specifies how the date is to be formatted. See the date_format function for details. You can use the select function to get the mod time for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:297
# 7dda74bc37264b598d23231ca0b92bf5
msgid "``formats_paths()`` -- return a comma-separated list of colon_separated items representing full path to the formats of a book. You can use the select function to get the path for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:298
# bfa007ff6a3b476dae84eff9a123f999
msgid "``formats_sizes()`` -- return a comma-separated list of colon_separated items representing sizes in bytes of the formats of a book. You can use the select function to get the size for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:299
# 30500e7708f6414c9246c31108761465
msgid "``has_cover()`` -- return ``Yes`` if the book has a cover, otherwise return the empty string"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:300
# d511ac7f4f40475ea01fbac9716345bc
msgid "``not(value)`` -- returns the string \"1\" if the value is empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:301
# 44651b964f4f478b820c0d6accb4bb9c
msgid "``list_difference(list1, list2, separator)`` -- return a list made by removing from `list1` any item found in `list2`, using a case-insensitive compare. The items in `list1` and `list2` are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:302
# 6d509e8dc79046af8224211b482c5aca
msgid "``list_equals(list1, sep1, list2, sep2, yes_val, no_val)`` -- return `yes_val` if `list1` and `list2` contain the same items, otherwise return `no_val`. The items are determined by splitting each list using the appropriate separator character (`sep1` or `sep2`). The order of items in the lists is not relevant. The compare is case insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:303
# 559a40c844314420bbbad371b479c323
msgid "``list_intersection(list1, list2, separator)`` -- return a list made by removing from `list1` any item not found in `list2`, using a case-insensitive compare. The items in `list1` and `list2` are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:304
# 6285499554e24c7fb62c23328bda55b3
msgid "``list_re(src_list, separator, include_re, opt_replace)`` -- Construct a list by first separating `src_list` into items using the `separator` character. For each item in the list, check if it matches `include_re`. If it does, then add it to the list to be returned. If `opt_replace` is not the empty string, then apply the replacement before adding the item to the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:305
# 4d2de4cd92ab45fc8ad76dd79d9c17d0
msgid "``list_re_group(src_list, separator, include_re, search_re, template_for_group_1, for_group_2, ...)`` -- Like list_re except replacements are not optional. It uses re_group(item, search_re, template ...) when doing the replacements."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:306
# f22444e4d0654b01871b4e3f1cd4cfa7
msgid "``list_sort(list, direction, separator)`` -- return list sorted using a case-insensitive sort. If `direction` is zero, the list is sorted ascending, otherwise descending. The list items are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:307
# 59f7ab3d0da94d229b50b0b16593ec72
msgid "``list_union(list1, list2, separator)`` -- return a list made by merging the items in list1 and list2, removing duplicate items using a case-insensitive compare. If items differ in case, the one in list1 is used. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:308
# 9b8a39d367474843ab3fce8f7c8e6e00
msgid "``multiply(x, y)`` -- returns x * y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:309
# 23997a42cee94e319ddf4f151eb3aabb
msgid "``ondevice()`` -- return the string \"Yes\" if ondevice is set, otherwise return the empty string"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:310
# 80897ece3797468cbd56b69d589da602
msgid "``or(value, value, ...)`` -- returns the string \"1\" if any value is not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:311
# 99463e218010402a8e7e707acf37fac5
msgid "``print(a, b, ...)`` -- prints the arguments to standard output. Unless you start calibre from the command line (``calibre-debug -g``), the output will go to a black hole."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:312
# ef3bf41e70164b4b843ebb6e7d6bf845
msgid "``raw_field(name)`` -- returns the metadata field named by name without applying any formatting."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:313
# bf9daa3b2402497a8a93c1eda2133c09
msgid "``raw_list(name, separator)`` -- returns the metadata list named by name without applying any formatting or sorting and with items separated by separator."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:314
# 082614d09c1c4ad08d998388818528ff
msgid "``re_group(val, pattern, template_for_group_1, for_group_2, ...)`` --  return a string made by applying the reqular expression pattern to the val and replacing each matched instance with the string computed by replacing each matched group by the value returned by the corresponding template. The original matched value for the group is available as $. In template program mode, like for the template and the eval functions, you use [[ for { and ]] for }. The following example in template program mode looks for series with more than one word and uppercases the first word::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:318
# 83dae4e1e67e4ae9afa024278f036867
msgid "``series_sort()`` -- returns the series sort value."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:319
# eef096bc1b714db8928fb36cf00358c8
msgid "``strcat(a, b, ...)`` -- can take any number of arguments. Returns a string formed by concatenating all the arguments."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:320
# d9cd7e8953734559aeb3cf3cf2efb780
msgid "``strcat_max(max, string1, prefix2, string2, ...)`` -- Returns a string formed by concatenating the arguments. The returned value is initialized to string1. `Prefix, string` pairs are added to the end of the value as long as the resulting string length is less than `max`. String1 is returned even if string1 is longer than max. You can pass as many `prefix, string` pairs as you wish."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:321
# 60e5a3fe406448028878f9991e3ef43e
msgid "``strcmp(x, y, lt, eq, gt)`` -- does a case-insensitive comparison x and y as strings. Returns ``lt`` if x < y. Returns ``eq`` if x == y. Otherwise returns ``gt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:322
# 47cb6b807c644a80879c959ed15dd200
msgid "``strlen(a)`` -- Returns the length of the string passed as the argument."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:323
# f1169ee7828d472f96a328bce5479c19
msgid "``substr(str, start, end)`` -- returns the ``start``'th through the ``end``'th characters of ``str``. The first character in ``str`` is the zero'th character. If end is negative, then it indicates that many characters counting from the right. If end is zero, then it indicates the last character. For example, ``substr('12345', 1, 0)`` returns ``'2345'``, and ``substr('12345', 1, -1)`` returns ``'234'``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:324
# 22338d9b8d3146ee90e6faea50799a0b
msgid "``subtract(x, y)`` -- returns x - y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:325
# 826d9d4a3cc441ed839cf09a7b2e0b67
msgid "``today()`` -- return a date string for today. This value is designed for use in format_date or days_between, but can be manipulated like any other string. The date is in ISO format."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:326
# c103a299a0a04ab48973b63c83ef86da
msgid "``template(x)`` -- evaluates x as a template. The evaluation is done in its own context, meaning that variables are not shared between the caller and the template evaluation. Because the `{` and `}` characters are special, you must use `[[` for the `{` character and `]]` for the '}' character; they are converted automatically. For example, ``template('[[title_sort]]') will evaluate the template ``{title_sort}`` and return its value. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:331
# f5178a4e28f4420ab44865d214b6dd00
msgid "Function classification"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:342
# 483d1753f44049b29dae786c4e031a54
msgid "Using general program mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:344
# 0cfbae1c46644fe08ceaa605d4fae280
msgid "For more complicated template programs, it is sometimes easier to avoid template syntax (all the `{` and `}` characters), instead writing a more classical-looking program. You can do this in |app| by beginning the template with `program:`. In this case, no template processing is done. The special variable `$` is not set. It is up to your program to produce the correct results."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:346
# 89bc6585a2c24a578c679de72f20a870
msgid "One advantage of `program:` mode is that the brackets are no longer special. For example, it is not necessary to use `[[` and `]]` when using the `template()` function. Another advantage is that program mode templates are compiled to Python and can run much faster than  templates in the other two modes. Speed improvement depends on the complexity of the templates; the more complicated the template the more the improvement. Compilation is turned off or on using the tweak ``compile_gpm_templates`` (Compile General Program Mode templates to Python). The main reason to turn off compilation is if a compiled template does not work, in which case please file a bug report."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:348
# 4df6abddcde740338c2a36561de439b4
msgid "The following example is a `program:` mode implementation of a recipe on the MobileRead forum: \"Put series into the title, using either initials or a shortened form. Strip leading articles from the series name (any).\" For example, for the book The Two Towers in the Lord of the Rings series, the recipe gives `LotR [02] The Two Towers`. Using standard templates, the recipe requires three custom columns and a plugboard, as explained in the following:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:350
# c4a96151799b4a0f8f74d2b463b94925
msgid "The solution requires creating three composite columns. The first column is used to remove the leading articles. The second is used to compute the 'shorten' form. The third is to compute the 'initials' form. Once you have these columns, the plugboard selects between them. You can hide any or all of the three columns on the library view."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:352
# a3a5cf48305647a998fa2f5a5d6875ed
msgid "First column: Name: #stripped_series. Template: {series:re(^(A|The|An)\\s+,)||}"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:356
# dfdd9a99fd00459bbf2e0ad5a5fb747c
msgid "Second column (the shortened form): Name: #shortened. Template: {#stripped_series:shorten(4,-,4)}"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:360
# f3274094ce9d4d0a97354557943bd60c
msgid "Third column (the initials form): Name: #initials. Template: {#stripped_series:re(([^\\s])[^\\s]+(\\s|$),\\1)}"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:364
# 91d46c68bd4f41b290f3392f97aac084
msgid "Plugboard expression: Template:{#stripped_series:lookup(.\\s,#initials,.,#shortened,series)}{series_index:0>2.0f| [|] }{title} Destination field: title"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:368
# 948ee422945049bbbbf38e26f3196621
msgid "This set of fields and plugboard produces: Series: The Lord of the Rings Series index: 2 Title: The Two Towers Output: LotR [02] The Two Towers"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:374
# f67e82cfa4c04c90b2b4773a9577fd74
msgid "Series: Dahak Series index: 1 Title: Mutineers Moon Output: Dahak [01] Mutineers Moon"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:379
# 3c3157c2c4b84164a614ee729fe19a85
msgid "Series: Berserkers Series Index: 4 Title: Berserker Throne Output: Bers-kers [04] Berserker Throne"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:384
# 2142278b2c3a4a38a73a18685f6d2e38
msgid "Series: Meg Langslow Mysteries Series Index: 3 Title: Revenge of the Wrought-Iron Flamingos Output: MLM [03] Revenge of the Wrought-Iron Flamingos"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:389
# aa04a559b03d4f58a240a9a625f8273e
msgid "The following program produces the same results as the original recipe, using only one custom column to hold the results of a program that computes the special title value::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:426
# 18c165174c0e48248c2f0963e10375e0
msgid "It would be possible to do the above with no custom columns by putting the program into the template box of the plugboard. However, to do so, all comments must be removed because the plugboard text box does not support multi-line editing. It is debatable whether the gain of not having the custom column is worth the vast increase in difficulty caused by the program being one giant line."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:430
# 13a9b8de2eda48e289a2712a9fcdd7e6
msgid "User-defined Template Functions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:432
# 3f314375305841ee934a16545871664f
msgid "You can add your own functions to the template processor. Such functions are written in python, and can be used in any of the three template programming modes. The functions are added by going to Preferences -> Advanced -> Template Functions. Instructions are shown in that dialog."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:435
# 244c3dae0bf24a3db17695f324392ee1
msgid "Special notes for save/send templates"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:437
# 2a6926fe1b2947a48a7f22a4d8bb16c2
msgid "Special processing is applied when a template is used in a `save to disk` or `send to device` template. The values of the fields are cleaned, replacing characters that are special to file systems with underscores, including slashes. This means that field text cannot be used to create folders. However, slashes are not changed in prefix or suffix strings, so slashes in these strings will cause folders to be created. Because of this, you can create variable-depth folder structure."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:439
# 54a91197d39d45e29253cf9123614829
msgid "For example, assume we want the folder structure `series/series_index - title`, with the caveat that if series does not exist, then the title should be in the top folder. The template to do this is::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:443
# d07a4c872dff47f7a14a1db6ab7bbaf4
msgid "The slash and the hyphen appear only if series is not empty."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:445
# b7bc6e7a44c04576ba3433f5b89c9e8e
msgid "The lookup function lets us do even fancier processing. For example, assume that if a book has a series, then we want the folder structure `series/series index - title.fmt`. If the book does not have a series, then we want the folder structure `genre/author_sort/title.fmt`. If the book has no genre, we want to use 'Unknown'. We want two completely different paths, depending on the value of series."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:450
# 9a25d1cb677f44d596937c53ca652a23
msgid "To accomplish this, we:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:448
# b54ff734652f4e72a744318fc3d82622
msgid "Create a composite field (call it AA) containing ``{series}/{series_index} - {title'}``. If the series is not empty, then this template will produce `series/series_index - title`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:449
# d0d2c50856f44545a4700919a5a117da
msgid "Create a composite field (call it BB) containing ``{#genre:ifempty(Unknown)}/{author_sort}/{title}``. This template produces `genre/author_sort/title`, where an empty genre is replaced wuth `Unknown`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:450
# fd886fa8d8c14e3caeabd88ca0b6338b
msgid "Set the save template to ``{series:lookup(.,AA,BB)}``. This template chooses composite field AA if series is not empty, and composite field BB if series is empty. We therefore have two completely different save paths, depending on whether or not `series` is empty."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:453
# d3e3b44b9e1d4820b026f9cb4a6639c2
msgid "Templates and Plugboards"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:455
# 47ce7653fc27463b95249be3a86653bf
msgid "Plugboards are used for changing the metadata written into books during send-to-device and save-to-disk operations. A plugboard permits you to specify a template to provide the data to write into the book's metadata. You can use plugboards to modify the following fields: authors, author_sort, language, publisher, tags, title, title_sort. This feature helps people who want to use different metadata in books on devices to solve sorting or display issues."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:457
# b24c6fc270b8447cac0a7bd34ca99dad
msgid "When you create a plugboard, you specify the format and device for which the plugboard is to be used. A special device is provided, save_to_disk, that is used when saving formats (as opposed to sending them to a device). Once you have chosen the format and device, you choose the metadata fields to change, providing templates to supply the new values. These templates are `connected` to their destination fields, hence the name `plugboards`. You can, of course, use composite columns in these templates."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:459
# 98a3b4f6a993470fb57f5dc4f19e2b2d
msgid "When a plugboard might apply (content server, save to disk, or send to device), |app| searches the defined plugboards to choose the correct one for the given format and device. For example, to find the appropriate plugboard for an EPUB book being sent to an ANDROID device, |app| searches the plugboards using the following search order:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:461
# 91eca869c60142768604f0e3852056e3
msgid "a plugboard with an exact match on format and device, e.g., ``EPUB`` and ``ANDROID``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:462
# 08349d86719b42628dfe399da8ab34a9
msgid "a plugboard with an exact match on format and the special ``any device`` choice, e.g., ``EPUB`` and ``any device``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:463
# 7aa617aaf27841ef940a338b4c453f49
msgid "a plugboard with the special ``any format`` choice and an exact match on device, e.g., ``any format`` and ``ANDROID``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:464
# 4b86768c84f848f0b5351f7b79917677
msgid "a plugboard with ``any format`` and ``any device``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:466
# f877817525e74bc8843ab2ed58c0056c
msgid "The tags and authors fields have special treatment, because both of these fields can hold more than one item. A book can have many tags and many authors. When you specify that one of these two fields is to be changed, the template's result is examined to see if more than one item is there. For tags, the result is cut apart wherever |app| finds a comma. For example, if the template produces the value ``Thriller, Horror``, then the result will be two tags, ``Thriller`` and ``Horror``. There is no way to put a comma in the middle of a tag."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:468
# 191af1335df549c784d29f2458cb9512
msgid "The same thing happens for authors, but using a different character for the cut, a `&` (ampersand) instead of a comma. For example, if the template produces the value ``Blogs, Joe&Posts, Susan``, then the book will end up with two authors, ``Blogs, Joe`` and ``Posts, Susan``. If the template produces the value ``Blogs, Joe;Posts, Susan``, then the book will have one author with a rather strange name."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:470
# 24b259a3183d41efa4b7e9eb04840f54
msgid "Plugboards affect the metadata written into the book when it is saved to disk or written to the device. Plugboards do not affect the metadata used by ``save to disk`` and ``send to device`` to create the file names. Instead, file names are constructed using the templates entered on the appropriate preferences window."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:473
# 7df5bb49f8ca44c29124ea6a9613a374
msgid "Helpful Tips"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:475
# f74e544dd6d74d5eb272c91fdd60fac4
msgid "You might find the following tips useful."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:477
# 988f1e28bd754751969b8a8642ea048e
msgid "Create a custom composite column to test templates. Once you have the column, you can change its template simply by double-clicking on the column. Hide the column when you are not testing."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:478
# a274e08733664207aa75ed42f88a97cf
msgid "Templates can use other templates by referencing a composite custom column."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:479
# 29aba5a647b64bf98c62e2f8387ae23c
msgid "In a plugboard, you can set a field to empty (or whatever is equivalent to empty) by using the special template ``{}``. This template will always evaluate to an empty string."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:480
# bc4d9cd969a5414ca6d3a17337f85eb7
msgid "The technique described above to show numbers even if they have a zero value works with the standard field series_index."
msgstr ""

