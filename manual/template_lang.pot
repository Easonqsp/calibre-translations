# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.42.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-27 09:25+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../template_lang.rst:7
# 5ff234b9499a4145a819cdc0ef54fd41
msgid "The |app| template language"
msgstr ""

#: ../../template_lang.rst:9
# 109e851f1fd542158e2e0174a92e45b3
msgid "The |app| template language is used in various places. It is used to control the folder structure and file name when saving files from the |app| library to the disk or eBook reader. It is also used to define \"virtual\" columns that contain data from other columns and so on."
msgstr ""

#: ../../template_lang.rst:12
# 1da6d63315a64f6c8d228acf2487cf0e
msgid "The basic template language is very simple, but has very powerful advanced features. The basic idea is that a template consists of text and names in curly brackets that are then replaced by the corresponding metadata from the book being processed. So, for example, the default template used for saving books to device in |app| is::"
msgstr ""

#: ../../template_lang.rst:16
#: ../../template_lang.rst:24
# 78a9fee94fde48428cb882919bf35e4d
# b1cca28de713496186b167504670fa4b
msgid "For the book \"The Foundation\" by \"Isaac Asimov\" it will become::"
msgstr ""

#: ../../template_lang.rst:20
# 15d307f81ef84dbd9128797980e1b839
msgid "The slashes are text, which is put into the template where it appears. For example, if your template is::"
msgstr ""

#: ../../template_lang.rst:28
# 4fde4f80f78f41f38bf205da445b307b
msgid "You can use all the various metadata fields available in calibre in a template, including any custom columns you have created yourself. To find out the template name for a column simply hover your mouse over the column header. Names for custom fields (columns you have created yourself) always have a # as the first character. For series type custom fields, there is always an additional field named ``#seriesname_index`` that becomes the series index for that series. So if you have a custom series field named ``#myseries``, there will also be a field named ``#myseries_index``."
msgstr ""

#: ../../template_lang.rst:30
# 11c8ae8544d74f989c518dfefa63ec7f
msgid "In addition to the column based fields, you also can use::"
msgstr ""

#: ../../template_lang.rst:35
# b6e99bb6022f484f816a217baf1bf24e
msgid "If a particular book does not have a particular piece of metadata, the field in the template is automatically removed for that book. Consider, for example::"
msgstr ""

#: ../../template_lang.rst:39
# e7f7569fa10842cfa0e824f1ccc1bcbe
msgid "If a book has a series, the template will produce::"
msgstr ""

#: ../../template_lang.rst:43
# f68c43f35a344e52ad61af712c0c0684
msgid "and if a book does not have a series::"
msgstr ""

#: ../../template_lang.rst:47
# abe731cfa57d4d08b7de5770893cce04
msgid "(|app| automatically removes multiple slashes and leading or trailing spaces)."
msgstr ""

#: ../../template_lang.rst:50
# adb30e868ee541bbb78cc1ddc9a8065e
msgid "Advanced formatting"
msgstr ""

#: ../../template_lang.rst:52
# b9b29e52ca3941859230703425e24fa2
msgid "You can do more than just simple substitution with the templates. You can also conditionally include text and control how the substituted data is formatted."
msgstr ""

#: ../../template_lang.rst:54
# 9e25ba6516444bf7b8593a361a5d41c9
msgid "First, conditionally including text. There are cases where you might want to have text appear in the output only if a field is not empty. A common case is ``series`` and ``series_index``, where you want either nothing or the two values with a hyphen between them. Calibre handles this case using a special field syntax."
msgstr ""

#: ../../template_lang.rst:56
# 641f135a3beb4cc09b67d853a63f5905
msgid "For example, assume you want to use the template::"
msgstr ""

#: ../../template_lang.rst:60
# c8ae4c988dca4d90bf47c40b259a5078
msgid "If the book has no series, the answer will be ``- - title``. Many people would rather the result be simply ``title``, without the hyphens. To do this, use the extended syntax ``{field:|prefix_text|suffix_text}``. When you use this syntax, if field has the value SERIES then the result will be ``prefix_textSERIESsuffix_text``. If field has no value, then the result will be the empty string (nothing); the prefix and suffix are ignored. The prefix and suffix can contain blanks. **Do not use subtemplates (`{ ... }`) or functions (see below) as the prefix or the suffix.**"
msgstr ""

#: ../../template_lang.rst:62
# a8fcc9a037df47abad29f69e9ec3b0b2
msgid "Using this syntax, we can solve the above series problem with the template::"
msgstr ""

#: ../../template_lang.rst:66
# c8b8a7337e0846488f7ea4ad77c23a63
msgid "The hyphens will be included only if the book has a series index, which it will have only if it has a series."
msgstr ""

#: ../../template_lang.rst:68
# fb716ea5486b4d5aa07421fad03c3693
msgid "Notes: you must include the : character if you want to use a prefix or a suffix. You must either use no \\| characters or both of them; using one, as in ``{field:| - }``, is not allowed. It is OK not to provide any text for one side or the other, such as in ``{series:|| - }``. Using ``{title:||}`` is the same as using ``{title}``."
msgstr ""

#: ../../template_lang.rst:70
# 0a96e79280df44358611ba5cbbd84cd3
msgid "Second: formatting. Suppose you wanted to ensure that the series_index is always formatted as three digits with leading zeros. This would do the trick::"
msgstr ""

#: ../../template_lang.rst:74
# 08a2745dde9946989a69b311d4e94c21
msgid "If instead of leading zeros you want leading spaces, use::"
msgstr ""

#: ../../template_lang.rst:78
# c0c92c2570744d0080bbab59ac5618de
msgid "For trailing zeros, use::"
msgstr ""

#: ../../template_lang.rst:82
# 4d7f76c4926b449ab6fd3f480740bf78
msgid "If you use series indices with sub values (e.g., 1.1), you might want to ensure that the decimal points line up. For example, you might want the indices 1 and 2.5 to appear as 01.00 and 02.50 so that they will sort correctly. To do this, use::"
msgstr ""

#: ../../template_lang.rst:86
# 0507322c6ef44c549ced513ebf200333
msgid "If you want only the first two letters of the data, use::"
msgstr ""

#: ../../template_lang.rst:90
# 9a5434782e20499981ee037fb1cccd6c
msgid "The |app| template language comes from python and for more details on the syntax of these advanced formatting operations, look at the `Python documentation <http://docs.python.org/library/string.html#format-string-syntax>`_."
msgstr ""

#: ../../template_lang.rst:93
# 191503708ad04870b6b99b91ed9af46a
msgid "Advanced features"
msgstr ""

#: ../../template_lang.rst:96
# 782d12c6d3534471a4e0f1cdeb134b8e
msgid "Using templates in custom columns"
msgstr ""

#: ../../template_lang.rst:98
# f36c187f86074ac8962dd53fa89237af
msgid "There are sometimes cases where you want to display metadata that |app| does not normally display, or to display data in a way different from how |app| normally does. For example, you might want to display the ISBN, a field that |app| does not display. You can use custom columns for this by creating a column with the type 'column built from other columns' (hereafter called composite columns), and entering a template. Result: |app| will display a column showing the result of evaluating that template. To display the ISBN, create the column and enter ``{identifiers:select(isbn)}`` into the template box. To display a column containing the values of two series custom columns separated by a comma, use ``{#series1:||,}{#series2}``."
msgstr ""

#: ../../template_lang.rst:100
# bd59ee13d2e34dbc9b668589e2f45392
msgid "Composite columns can use any template option, including formatting."
msgstr ""

#: ../../template_lang.rst:102
# b520ae21ef8f4d1894ebd7e8b39e1a8e
msgid "You cannot change the data contained in a composite column. If you edit a composite column by double-clicking on any item, you will open the template for editing, not the underlying data. Editing the template on the GUI is a quick way of testing and changing composite columns."
msgstr ""

#: ../../template_lang.rst:105
# 42340837e9ab432891726a4d7cf57cbf
msgid "Using functions in templates - single-function mode"
msgstr ""

#: ../../template_lang.rst:107
# ab263007d9854941a1fcfda9793cdcc1
msgid "Suppose you want to display the value of a field in upper case, when that field is normally in title case. You can do this (and many more things) using the functions available for templates. For example, to display the title in upper case, use ``{title:uppercase()}``. To display it in title case, use ``{title:titlecase()}``."
msgstr ""

#: ../../template_lang.rst:109
# 09c2d7bdacbf44649cc4dddb3fdc6c97
msgid "Function references appear in the format part, going after the ``:`` and before the first ``|`` or the closing ``}``. If you have both a format and a function reference, the function comes after another ``:``. Functions must always end with ``()``. Some functions take extra values (arguments), and these go inside the ``()``."
msgstr ""

#: ../../template_lang.rst:111
# 7f5adaa3c75c4095989fc2e94db9382f
msgid "Functions are always applied before format specifications. See further down for an example of using both a format and a function, where this order is demonstrated."
msgstr ""

#: ../../template_lang.rst:113
# 033097fc746d4ecba2dce12c0c77499c
msgid "The syntax for using functions is ``{field:function(arguments)}``, or ``{field:function(arguments)|prefix|suffix}``. Arguments are separated by commas. Commas inside arguments must be preceeded by a backslash ( '\\\\' ). The last (or only) argument cannot contain a closing parenthesis ( ')' ). Functions return the value of the field used in the template, suitably modified."
msgstr ""

#: ../../template_lang.rst:115
# b057cea4e0804f5da7351ab1b2409995
msgid "Important: If you have programming experience, please note that the syntax in this mode (single function) is not what you might expect. Strings are not quoted. Spaces are significant. All arguments must be constants; there is no sub-evaluation. **Do not use subtemplates (`{ ... }`) as function arguments.** Instead, use :ref:`template program mode <template_mode>` and :ref:`general program mode <general_mode>`."
msgstr ""

#: ../../template_lang.rst:117
# 1497d99e37cd44c4a7bcba463bd2ba02
msgid "Many functions use regular expressions. In all cases, regular expression matching is case-insensitive."
msgstr ""

#: ../../template_lang.rst:119
# 0db407ad15764d6fbb914ebb4eb5f4ac
msgid "The functions available are listed below. Note that the definitive documentation for functions is available in the section :ref:`Function classification <template_functions_reference>`:"
msgstr ""

#: ../../template_lang.rst:121
# 1b159b2b45a04f639520534f9c2c29e9
msgid "``lowercase()``   -- return value of the field in lower case."
msgstr ""

#: ../../template_lang.rst:122
# 09edae61621447ecad6eb9939476ef47
msgid "``uppercase()``   -- return the value of the field in upper case."
msgstr ""

#: ../../template_lang.rst:123
# 9f049d85ed674e3faa5f08274918524e
msgid "``titlecase()``   -- return the value of the field in title case."
msgstr ""

#: ../../template_lang.rst:124
# 0752fc2b45a341f6823744bbc3bb7651
msgid "``capitalize()``  -- return the value with the first letter upper case and the rest lower case."
msgstr ""

#: ../../template_lang.rst:125
# 2173a20f556e4a0cb075236399c995c5
msgid "``contains(pattern, text if match, text if not match)`` -- checks if field contains matches for the regular expression `pattern`. Returns `text if match` if matches are found, otherwise it returns `text if no match`."
msgstr ""

#: ../../template_lang.rst:126
# b540165b4bc046f0bc4771f6adb55bc0
msgid "``count(separator)`` -- interprets the value as a list of items separated by `separator`, returning the number of items in the list. Most lists use a comma as the separator, but authors uses an ampersand. Examples: `{tags:count(,)}`, `{authors:count(&)}`"
msgstr ""

#: ../../template_lang.rst:127
# 73ebaad9f1a147bd8a11bde1ae362f14
msgid "``format_number(template)`` -- interprets the value as a number and format that number using a python formatting template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The field_name part of the template must be a 0 (zero) (the \"{0:\" in the above examples). See the template language and python documentation for more examples. Returns the empty string if formatting fails."
msgstr ""

#: ../../template_lang.rst:128
# 64b73047b3034680b50d45e6f3664b19
msgid "``human_readable()`` -- expects the value to be a number and returns a string representing that number in KB, MB, GB, etc."
msgstr ""

#: ../../template_lang.rst:129
# 99ae079774694250be80d709e1cdd3ed
msgid "``ifempty(text)`` -- if the field is not empty, return the value of the field. Otherwise return `text`."
msgstr ""

#: ../../template_lang.rst:130
# 6a140a2a48d0483b833e91b3b0f4c8ae
msgid "``in_list(separator, pattern, found_val, not_found_val)`` -- interpret the field as a list of items separated by `separator`, comparing the `pattern` against each value in the list. If the pattern matches a value, return `found_val`, otherwise return `not_found_val`."
msgstr ""

#: ../../template_lang.rst:131
# 234dbb90132743aa95d6a55491f74bb3
msgid "``language_codes(lang_strings)`` -- return the language codes for the strings passed in `lang_strings`. The strings must be in the language of the current locale. `Lang_strings` is a comma-separated list."
msgstr ""

#: ../../template_lang.rst:132
# 0d3d39beb5cf45c78350bd0a46ba71b1
msgid "``language_strings(lang_codes, localize)`` -- return the strings for the language codes passed in `lang_codes`. If `localize` is zero, return the strings in English. If localize is not zero, return the strings in the language of the current locale. `Lang_codes` is a comma-separated list."
msgstr ""

#: ../../template_lang.rst:133
# b69dc0150075444296b62a32f797570f
msgid "``list_item(index, separator)`` -- interpret the field as a list of items separated by `separator`, returning the `index`th item. The first item is number zero. The last item can be returned using `list_item(-1,separator)`. If the item is not in the list, then the empty value is returned. The separator has the same meaning as in the `count` function."
msgstr ""

#: ../../template_lang.rst:134
# f68b25f517164034aec0684c486809e2
msgid "``lookup(pattern, field, pattern, field, ..., else_field)`` -- like switch, except the arguments are field (metadata) names, not text. The value of the appropriate field will be fetched and used. Note that because composite columns are fields, you can use this function in one composite field to use the value of some other composite field. This is extremely useful when constructing variable save paths (more later)."
msgstr ""

#: ../../template_lang.rst:135
# 7824b7ebea174a2aa07863bff02b6e02
msgid "``re(pattern, replacement)`` -- return the field after applying the regular expression. All instances of `pattern` are replaced with `replacement`. As in all of |app|, these are python-compatible regular expressions."
msgstr ""

#: ../../template_lang.rst:136
# 1e07063d86734dc580dfafc578d85460
msgid "``select(key)`` -- interpret the field as a comma-separated list of items, with the items being of the form \"id:value\". Find the pair with the id equal to key, and return the corresponding value. This function is particularly useful for extracting a value such as an isbn from the set of identifiers for a book."
msgstr ""

#: ../../template_lang.rst:137
# 2a32fcc616a84840b8c30f78c1fad2ba
msgid "``shorten(left chars, middle text, right chars)`` -- Return a shortened version of the field, consisting of `left chars` characters from the beginning of the field, followed by `middle text`, followed by `right chars` characters from the end of the string. `Left chars` and `right chars` must be integers. For example, assume the title of the book is `Ancient English Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most 15 characters. If you use ``{title:shorten(9,-,5)}``, the result will be `Ancient E-nhoe`. If the field's length is less than ``left chars`` + ``right chars`` + the length of ``middle text``, then the field will be used intact. For example, the title `The Dome` would not be changed."
msgstr ""

#: ../../template_lang.rst:138
# d52b307708db4da09d7aa4e580c090e7
msgid "``str_in_list(val, separator, string, found_val, not_found_val)`` -- treat val as a list of items separated by separator, comparing the string against each value in the list. If the string matches a value, return found_val, otherwise return not_found_val. If the string contains separators, then it is also treated as a list and each value is checked."
msgstr ""

#: ../../template_lang.rst:139
# 22b40631db3348c6b2ce4fe8fa2ff69a
msgid "``subitems(val, start_index, end_index)`` -- This function is used to break apart lists of tag-like hierarchical items such as genres. It interprets the value as a comma-separated list of tag-like items, where each item is a period-separated list. Returns a new list made by first finding all the period-separated tag-like items, then for each such item extracting the components from `start_index` to `end_index`, then combining the results back together. The first component in a period-separated list has an index of zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples::"
msgstr ""

#: ../../template_lang.rst:149
# 9d770730e0e742d1b7455723354255db
msgid "``sublist(val, start_index, end_index, separator)`` -- interpret the value as a list of items separated by `separator`, returning a new list made from the items from `start_index`to `end_index`. The first item is number zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples assuming that the tags column (which is comma-separated) contains \"A, B ,C\"::"
msgstr ""

#: ../../template_lang.rst:155
# 229f8ef6b3204e949399af6d19d8142b
msgid "``swap_around_comma(val) `` -- given a value of the form ``B, A``, return ``A B``. This is most useful for converting names in LN, FN format to FN LN. If there is no comma, the function returns val unchanged."
msgstr ""

#: ../../template_lang.rst:156
# d9d56fbf84ab488981ae4b27e4dadcc2
msgid "``switch(pattern, value, pattern, value, ..., else_value)`` -- for each ``pattern, value`` pair, checks if the field matches the regular expression ``pattern`` and if so, returns that ``value``. If no ``pattern`` matches, then ``else_value`` is returned. You can have as many ``pattern, value`` pairs as you want."
msgstr ""

#: ../../template_lang.rst:158
# fe27b01a4b07460bb136c52dc4718fe0
msgid "``test(text if not empty, text if empty)`` -- return `text if not empty` if the field is not empty, otherwise return `text if empty`."
msgstr ""

#: ../../template_lang.rst:158
# 643034b6e20e4250af42d964c30df4cf
msgid "``transliterate()`` -- Returns a string in a latin alphabet formed by approximating the sound of the words in the source field. For example, if the source field is ``Фёдор Миха́йлович Достоевский`` the function returns ``Fiodor Mikhailovich Dostoievskii``.'"
msgstr ""

#: ../../template_lang.rst:160
# cd4f468d0ef5412191433557dba05a2f
msgid "Now, what about using functions and formatting in the same field. Suppose you have an integer custom column called ``#myint`` that you want to see with leading zeros, as in ``003``. To do this, you would use a format of ``0>3s``. However, by default, if a number (integer or float) equals zero then the field produces the empty value, so zero values will produce nothing, not ``000``. If you really want to see ``000`` values, then you use both the format string and the ``ifempty`` function to change the empty value back to a zero. The field reference would be::"
msgstr ""

#: ../../template_lang.rst:164
# 5b2b4e0cb07a45aeb61a9146fd69ae63
msgid "Note that you can use the prefix and suffix as well. If you want the number to appear as ``[003]`` or ``[000]``, then use the field::"
msgstr ""

#: ../../template_lang.rst:171
# b2f24445bd954207a4a8bd2121c43163
msgid "Using functions in templates - template program mode"
msgstr ""

#: ../../template_lang.rst:173
# 3d3c3352e5a3453c8da61a18559bd22b
msgid "The template language program mode differs from single-function mode in that it permits you to write template expressions that refer to other metadata fields, modify values, and do arithmetic. It is a reasonably complete programming language."
msgstr ""

#: ../../template_lang.rst:175
# faf9cd2201e74ea2be6fffeba495aa9e
msgid "You can use the functions documented above in template program mode. See below for details."
msgstr ""

#: ../../template_lang.rst:177
# b16837111a934c54acdc944823214717
msgid "Beginning with an example, assume that you want your template to show the series for a book if it has one, otherwise show the value of a custom field #genre. You cannot do this in the basic language because you cannot make reference to another metadata field within a template expression. In program mode, you can. The following expression works::"
msgstr ""

#: ../../template_lang.rst:181
# f3a47d5688c6459ca122580df17af4fd
msgid "The example shows several things:"
msgstr ""

#: ../../template_lang.rst:183
# 3b0103e391b34223856d8f076982a7d2
msgid "program mode is used if the expression begins with ``:'`` and ends with ``'``. Anything else is assumed to be single-function."
msgstr ""

#: ../../template_lang.rst:184
# f66f553a062044719b67e0fc41ee2943
msgid "the variable ``$`` stands for the field the expression is operating upon, ``#series`` in this case."
msgstr ""

#: ../../template_lang.rst:185
# a4d297a7078149c8b951eca76d04ec16
msgid "functions must be given all their arguments. There is no default value. For example, the standard built-in functions must be given an additional initial parameter indicating the source field, which is a significant difference from single-function mode."
msgstr ""

#: ../../template_lang.rst:186
# ef8789baacdc41ca9a891621d5aea4fa
msgid "white space is ignored and can be used anywhere within the expression."
msgstr ""

#: ../../template_lang.rst:187
# 17236e8953374082a01c8ed0ef135c21
msgid "constant strings are enclosed in matching quotes, either ``'`` or ``\"``."
msgstr ""

#: ../../template_lang.rst:189
# 18abc39e55234aefad68f3a637927180
msgid "The language is similar to ``functional`` languages in that it is built almost entirely from functions. A statement is a function. An expression is a function. Constants and identifiers can be thought of as functions returning the value indicated by the constant or stored in the identifier."
msgstr ""

#: ../../template_lang.rst:191
# 4b5b2b8704984377aa4303408539c3b8
msgid "The syntax of the language is shown by the following grammar::"
msgstr ""

#: ../../template_lang.rst:201
# 719444a6d2104415bc5acbf8e98cce45
msgid "Comments are lines with a '#' character at the beginning of the line."
msgstr ""

#: ../../template_lang.rst:203
# 04f3bf5339614791a13e846dfeeb223a
msgid "An ``expression`` always has a value, either the value of the constant, the value contained in the identifier, or the value returned by a function. The value of a ``statement`` is the value of the last expression in the sequence of statements. As such, the value of the program (statement)::"
msgstr ""

#: ../../template_lang.rst:207
# 2f827f1165c84d7e924dc8464f004b60
msgid "is 3."
msgstr ""

#: ../../template_lang.rst:209
# ffb7469de4bd4b2fac7579413b8b309f
msgid "Another example of a complex but rather silly program might help make things clearer::"
msgstr ""

#: ../../template_lang.rst:220
# 00a7f2749df34d10a34c4f01b97d731b
msgid "This program does the following:"
msgstr ""

#: ../../template_lang.rst:222
# 8eaa505c737a4a5486566757aeff8c10
msgid "specify that the field being looked at is series_index. This sets the value of the variable ``$``."
msgstr ""

#: ../../template_lang.rst:223
# d1064fa3b2034e7598b80ef33a253e14
msgid "calls the ``substr`` function, which takes 3 parameters ``(str, start, end)``. It returns a string formed by extracting the start through end characters from string, zero-based (the first character is character zero). In this case the string will be computed by the ``strcat`` function, the start is 0, and the end is 6. In this case it will return the first 6 characters of the string returned by ``strcat``, which must be evaluated before substr can return."
msgstr ""

#: ../../template_lang.rst:224
# 7155f436c912446ea6f52fec268ab48e
msgid "calls the ``strcat`` (string concatenation) function. Strcat accepts 1 or more arguments, and returns a string formed by concatenating all the values. In this case there are three arguments. The first parameter is the value in ``$``, which here is the value of ``series_index``. The second paremeter is the constant string ``'->'``. The third parameter is the value returned by the ``cmp`` function, which must be fully evaluated before ``strcat`` can return."
msgstr ""

#: ../../template_lang.rst:225
# 673f3b11cd14446d845079bf80db568d
msgid "The ``cmp`` function takes 5 arguments ``(x, y, lt, eq, gt)``. It compares x and y and returns the third argument ``lt`` if x < y, the fourth argument ``eq`` if x == y, and the fifth argument ``gt`` if x > y. As with all functions, all of the parameters can be statements. In this case the first parameter (the value for ``x``) is the result of dividing the series_index by 2. The second parameter ``y`` is the constant ``1``. The third parameter ``lt`` is a statement (more later). The fourth parameter ``eq`` is the constant string ``'eq'``. The fifth parameter is the constant string ``'gt'``."
msgstr ""

#: ../../template_lang.rst:226
# 92381a21682d457da9836ca3d47a0df7
msgid "The third parameter (the one for ``lt``) is a statement, or a sequence of expressions. Remember that a statement (a sequence of semicolon-separated expressions) is also an expression, returning the value of the last expression in the list. In this case, the program first assigns the value ``1`` to a local variable ``c``, then returns a substring made by extracting the c'th character to the end. Since c always contains the constant ``1``, the substring will return the second through end'th characters, or ``'t123'``."
msgstr ""

#: ../../template_lang.rst:227
# 27282ca75070434a83993bbd32e54a3a
msgid "Once the statement providing the value to the third parameter is executed, ``cmp`` can return a value. At that point, ``strcat` can return a value, then ``substr`` can return a value. The program then terminates."
msgstr ""

#: ../../template_lang.rst:229
# 3920d30e969344b1abd0d2e031819efd
msgid "For various values of series_index, the program returns:"
msgstr ""

#: ../../template_lang.rst:231
# 32643246d76745adb5a2c6a83a101f60
msgid "series_index == undefined, result = ``prefix ->t123 suffix``"
msgstr ""

#: ../../template_lang.rst:232
# 442ee76f10934b5ab6a7fef6aac8e088
msgid "series_index == 0.5, result = ``prefix 0.50-> suffix``"
msgstr ""

#: ../../template_lang.rst:233
# 82c00aadedaf49dfa7459b58a345edf2
msgid "series_index == 1, result = ``prefix 1->t12 suffix``"
msgstr ""

#: ../../template_lang.rst:234
# 71375e4f42da4ea4817516d316b99a2f
msgid "series_index == 2, result = ``prefix 2->eq suffix``"
msgstr ""

#: ../../template_lang.rst:235
# 627fc258f4d54be3815b5b86ee93609a
msgid "series_index == 3, result = ``prefix 3->gt suffix``"
msgstr ""

#: ../../template_lang.rst:237
# 0b0fd06bd9f345bc82a56c4592bcbb7f
msgid "**All the functions listed under single-function mode can be used in program mode**. To do so, you must supply the value that the function is to act upon as the first parameter, in addition to the parameters documented above. For example, in program mode the parameters of the `test` function are ``test(x, text_if_not_empty, text_if_empty)``. The `x` parameter, which is the value to be tested, will almost always be a variable or a function call, often `field()`."
msgstr ""

#: ../../template_lang.rst:239
# 8a21bdc9fa70400ba795a0cd9f9858d1
msgid "The following functions are available in addition to those described in single-function mode. Remember from the example above that the single-function mode functions require an additional first parameter specifying the field to operate on. With the exception of the ``id`` parameter of assign, all parameters can be statements (sequences of expressions). Note that the definitive documentation for functions is available in the section :ref:`Function classification <template_functions_reference>`:"
msgstr ""

#: ../../template_lang.rst:241
# b5de149655fa46ff97fda56fff1f7c58
msgid "``and(value, value, ...)`` -- returns the string \"1\" if all values are not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_lang.rst:242
# eefe9ab7166f43d5a2c32635acdca2f8
msgid "``add(x, y)`` -- returns x + y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_lang.rst:243
# 63a5018e191c4a06b60348a9b9320f33
msgid "``assign(id, val)`` -- assigns val to id, then returns val. id must be an identifier, not an expression"
msgstr ""

#: ../../template_lang.rst:244
# 3a6e81eb84a24080a39325885b1c15a6
msgid "``approximate_formats()`` -- return a comma-separated list of formats that at one point were associated with the book. There is no guarantee that the list is correct, although it probably is. This function can be called in template program mode using the template ``{:'approximate_formats()'}``. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_lang.rst:245
# af43d99a08914737b7fd9a8117c402cf
msgid "``booksize()`` -- returns the value of the |app| 'size' field. Returns '' if there are no formats."
msgstr ""

#: ../../template_lang.rst:246
# b225d68efe254c2b84a6c2972a90344a
msgid "``cmp(x, y, lt, eq, gt)`` -- compares x and y after converting both to numbers. Returns ``lt`` if x < y. Returns ``eq`` if x == y. Otherwise returns ``gt``."
msgstr ""

#: ../../template_lang.rst:247
# b8046671582c4ea7b13bc12e407c6dc6
msgid "``current_library_name() -- `` return the last name on the path to the current calibre library. This function can be called in template program mode using the template ``{:'current_library_name()'}``."
msgstr ""

#: ../../template_lang.rst:248
# cf8ef2b57e7341ff858e8aa560bd3c17
msgid "``current_library_path() -- `` eturn the path to the current calibre library. This function can be called in template program mode using the template ``{:'current_library_path()'}``.."
msgstr ""

#: ../../template_lang.rst:249
# bb1dd0039dcb45d9b4b51dfe2d664f55
msgid "``days_between(date1, date2)`` -- return the number of days between ``date1`` and ``date2``. The number is positive if ``date1`` is greater than ``date2``, otherwise negative. If either ``date1`` or ``date2`` are not dates, the function returns the empty string."
msgstr ""

#: ../../template_lang.rst:250
# 1afdfea4063840afbecae50994605eae
msgid "``divide(x, y)`` -- returns x / y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_lang.rst:251
# 46b8e5a253ad44c7a3d388860cb9580c
msgid "``eval(string)`` -- evaluates the string as a program, passing the local variables (those ``assign`` ed to). This permits using the template processor to construct complex results from local variables. Because the `{` and `}` characters are special, you must use `[[` for the `{` character and `]]` for the '}' character; they are converted automatically. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../template_lang.rst:256
# 4eec1b2d25a747d596e2420425842761
msgid "``field(name)`` -- returns the metadata field named by ``name``."
msgstr ""

#: ../../template_lang.rst:253
# c7f0f28959f24841863aaf43b1eb4d8a
msgid "``first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)`` -- compares \"val < cmpN\" in sequence, returning resultN for the first comparison that succeeds. Returns else_result if no comparison succeeds. Example::"
msgstr ""

#: ../../template_lang.rst:257
# b2ceeeea481746528ffe912f067d8acf
msgid "returns \"large\". The same example with a first value of 16 returns \"giant\"."
msgstr ""

#: ../../template_lang.rst:258
# 77424f1f48e4412594ea05c4ec9df222
msgid "``first_non_empty(value, value, ...)`` -- returns the first value that is not empty. If all values are empty, then the empty value is returned. You can have as many values as you want."
msgstr ""

#: ../../template_lang.rst:259
# 0730ceb61d71489e97930af31e800824
msgid "``format_date(x, date_format)`` -- format_date(val, format_string) -- format the value, which must be a date field, using the format_string, returning a string. The formatting codes are::"
msgstr ""

#: ../../template_lang.rst:281
# 3920f4d069a849878b089db44302727f
msgid "You might get unexpected results if the date you are formatting contains localized month names, which can happen if you changed the format tweaks to contain MMMM. In this case, instead of using something like ``{pubdate:format_date(yyyy)}``, write the template using template program mode as in ``{:'format_date(raw_field('pubdate'),'yyyy')'}``."
msgstr ""

#: ../../template_lang.rst:283
# b78491afcd744b789c2b9559aacec78b
msgid "finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and suffix to a value in the same way as done in a template like ``{series_index:05.2f| - |- }``. This function is provided to ease conversion of complex single-function- or template-program-mode templates to :ref:`general program mode <general_mode>` (see below) to take advantage of GPM template compilation. For example, the following program produces the same output as the above template::"
msgstr ""

#: ../../template_lang.rst:287
# e5e72d225b9d4633b6750d9ada676d75
msgid "Another example: for the template ``{series:re(([^\\s])[^\\s]+(\\s|$),\\1)}{series_index:0>2s| - | - }{title}`` use::"
msgstr ""

#: ../../template_lang.rst:296
# 3772139f3ed74ba28e53a6785f9cf9cd
msgid "``formats_modtimes(date_format)`` -- return a comma-separated list of colon_separated items representing modification times for the formats of a book. The date_format parameter specifies how the date is to be formatted. See the date_format function for details. You can use the select function to get the mod time for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_lang.rst:297
# 6a33522663264628b33c6bc197e9fc6b
msgid "``formats_paths()`` -- return a comma-separated list of colon_separated items representing full path to the formats of a book. You can use the select function to get the path for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_lang.rst:298
# 36ffb4bb73264e4296e3268c1ebc32b0
msgid "``formats_sizes()`` -- return a comma-separated list of colon_separated items representing sizes in bytes of the formats of a book. You can use the select function to get the size for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_lang.rst:299
# 6657531c77de4fe099168d7ae58a976a
msgid "``has_cover()`` -- return ``Yes`` if the book has a cover, otherwise return the empty string"
msgstr ""

#: ../../template_lang.rst:300
# 26551dc79e0b4e8db7543372ca9315b6
msgid "``not(value)`` -- returns the string \"1\" if the value is empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_lang.rst:301
# 16e09d094ddd458ca1b5100f208d79c7
msgid "``list_difference(list1, list2, separator)`` -- return a list made by removing from `list1` any item found in `list2`, using a case-insensitive compare. The items in `list1` and `list2` are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_lang.rst:302
# 0d1d391bf62346859787757d05d29d93
msgid "``list_equals(list1, sep1, list2, sep2, yes_val, no_val)`` -- return `yes_val` if `list1` and `list2` contain the same items, otherwise return `no_val`. The items are determined by splitting each list using the appropriate separator character (`sep1` or `sep2`). The order of items in the lists is not relevant. The compare is case insensitive."
msgstr ""

#: ../../template_lang.rst:303
# 157d0031773349cd9e1164d33af3088b
msgid "``list_intersection(list1, list2, separator)`` -- return a list made by removing from `list1` any item not found in `list2`, using a case-insensitive compare. The items in `list1` and `list2` are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_lang.rst:304
# b59efabafca04093b3efa5804b7f33e9
msgid "``list_re(src_list, separator, include_re, opt_replace)`` -- Construct a list by first separating `src_list` into items using the `separator` character. For each item in the list, check if it matches `include_re`. If it does, then add it to the list to be returned. If `opt_replace` is not the empty string, then apply the replacement before adding the item to the returned list."
msgstr ""

#: ../../template_lang.rst:305
# aac63a6ea4bb462aa2b98b30a4363ac6
msgid "``list_re_group(src_list, separator, include_re, search_re, template_for_group_1, for_group_2, ...)`` -- Like list_re except replacements are not optional. It uses re_group(item, search_re, template ...) when doing the replacements."
msgstr ""

#: ../../template_lang.rst:306
# 0595a72dcadf41ed9866a6aa6dafc1f2
msgid "``list_sort(list, direction, separator)`` -- return list sorted using a case-insensitive sort. If `direction` is zero, the list is sorted ascending, otherwise descending. The list items are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_lang.rst:307
# 819f65d0618e4dcfb77363877f47da9f
msgid "``list_union(list1, list2, separator)`` -- return a list made by merging the items in list1 and list2, removing duplicate items using a case-insensitive compare. If items differ in case, the one in list1 is used. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_lang.rst:308
# 4874174ff29f4f889bc3cf2136295805
msgid "``multiply(x, y)`` -- returns x * y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_lang.rst:309
# a271b7179f0047369f5422f2574fba7e
msgid "``ondevice()`` -- return the string \"Yes\" if ondevice is set, otherwise return the empty string"
msgstr ""

#: ../../template_lang.rst:310
# 86bae5e0a5cf4d21a227ac0a8fbf760d
msgid "``or(value, value, ...)`` -- returns the string \"1\" if any value is not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_lang.rst:311
# 2980d76643964095a365f965905d6c64
msgid "``print(a, b, ...)`` -- prints the arguments to standard output. Unless you start calibre from the command line (``calibre-debug -g``), the output will go to a black hole."
msgstr ""

#: ../../template_lang.rst:315
# 65af11d389234e1ba972481ae461eace
msgid "``raw_field(name)`` -- returns the metadata field named by name without applying any formatting."
msgstr ""

#: ../../template_lang.rst:313
# 00bd5af3949b4c6ea75a0503fe72d6bb
msgid "``re_group(val, pattern, template_for_group_1, for_group_2, ...)`` --  return a string made by applying the reqular expression pattern to the val and replacing each matched instance with the string computed by replacing each matched group by the value returned by the corresponding template. The original matched value for the group is available as $. In template program mode, like for the template and the eval functions, you use [[ for { and ]] for }. The following example in template program mode looks for series with more than one word and uppercases the first word::"
msgstr ""

#: ../../template_lang.rst:317
# fb11ebadb57a46e4bf14a49de425aced
msgid "``series_sort()`` -- returns the series sort value."
msgstr ""

#: ../../template_lang.rst:318
# 29b34bb210414049a3f57166c8afd867
msgid "``strcat(a, b, ...)`` -- can take any number of arguments. Returns a string formed by concatenating all the arguments."
msgstr ""

#: ../../template_lang.rst:319
# bd7d3bc13c8b4434b83654404c98211f
msgid "``strcat_max(max, string1, prefix2, string2, ...)`` -- Returns a string formed by concatenating the arguments. The returned value is initialized to string1. `Prefix, string` pairs are added to the end of the value as long as the resulting string length is less than `max`. String1 is returned even if string1 is longer than max. You can pass as many `prefix, string` pairs as you wish."
msgstr ""

#: ../../template_lang.rst:320
# 2eafc8204fa14deaa9c1e01c8314d901
msgid "``strcmp(x, y, lt, eq, gt)`` -- does a case-insensitive comparison x and y as strings. Returns ``lt`` if x < y. Returns ``eq`` if x == y. Otherwise returns ``gt``."
msgstr ""

#: ../../template_lang.rst:321
# 0177d293110545c8bd0a7b86a0a663b7
msgid "``strlen(a)`` -- Returns the length of the string passed as the argument."
msgstr ""

#: ../../template_lang.rst:322
# b3da9b03910845cf98c43e92930b9be4
msgid "``substr(str, start, end)`` -- returns the ``start``'th through the ``end``'th characters of ``str``. The first character in ``str`` is the zero'th character. If end is negative, then it indicates that many characters counting from the right. If end is zero, then it indicates the last character. For example, ``substr('12345', 1, 0)`` returns ``'2345'``, and ``substr('12345', 1, -1)`` returns ``'234'``."
msgstr ""

#: ../../template_lang.rst:323
# 841acbe0ec7b40bfbb4789571c0b0bbe
msgid "``subtract(x, y)`` -- returns x - y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_lang.rst:324
# a70cae5a00384f85876309f3c1d7cc80
msgid "``today()`` -- return a date string for today. This value is designed for use in format_date or days_between, but can be manipulated like any other string. The date is in ISO format."
msgstr ""

#: ../../template_lang.rst:325
# 0a7442ee658d42a8af5364e6db7d3e6e
msgid "``template(x)`` -- evaluates x as a template. The evaluation is done in its own context, meaning that variables are not shared between the caller and the template evaluation. Because the `{` and `}` characters are special, you must use `[[` for the `{` character and `]]` for the '}' character; they are converted automatically. For example, ``template('[[title_sort]]') will evaluate the template ``{title_sort}`` and return its value. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../template_lang.rst:330
# c370a1eefee04b4e9ae847bf29d6045f
msgid "Function classification"
msgstr ""

#: ../../template_lang.rst:341
# 5b3e2b54e0aa4ed7acf886c3a71831b7
msgid "Using general program mode"
msgstr ""

#: ../../template_lang.rst:343
# 62a8f98375494b8d9aeb9fab9819e0a0
msgid "For more complicated template programs, it is sometimes easier to avoid template syntax (all the `{` and `}` characters), instead writing a more classical-looking program. You can do this in |app| by beginning the template with `program:`. In this case, no template processing is done. The special variable `$` is not set. It is up to your program to produce the correct results."
msgstr ""

#: ../../template_lang.rst:345
# ea84be1b30b64911b77851bdb12f3741
msgid "One advantage of `program:` mode is that the brackets are no longer special. For example, it is not necessary to use `[[` and `]]` when using the `template()` function. Another advantage is that program mode templates are compiled to Python and can run much faster than  templates in the other two modes. Speed improvement depends on the complexity of the templates; the more complicated the template the more the improvement. Compilation is turned off or on using the tweak ``compile_gpm_templates`` (Compile General Program Mode templates to Python). The main reason to turn off compilation is if a compiled template does not work, in which case please file a bug report."
msgstr ""

#: ../../template_lang.rst:347
# 49763d4957e94c2bb210ae5120dc1190
msgid "The following example is a `program:` mode implementation of a recipe on the MobileRead forum: \"Put series into the title, using either initials or a shortened form. Strip leading articles from the series name (any).\" For example, for the book The Two Towers in the Lord of the Rings series, the recipe gives `LotR [02] The Two Towers`. Using standard templates, the recipe requires three custom columns and a plugboard, as explained in the following:"
msgstr ""

#: ../../template_lang.rst:349
# 5e5bf212316546a3af0c9d987fc3b9e7
msgid "The solution requires creating three composite columns. The first column is used to remove the leading articles. The second is used to compute the 'shorten' form. The third is to compute the 'initials' form. Once you have these columns, the plugboard selects between them. You can hide any or all of the three columns on the library view."
msgstr ""

#: ../../template_lang.rst:351
# 226b9da14c6548919da0aaa74442ef04
msgid "First column: Name: #stripped_series. Template: {series:re(^(A|The|An)\\s+,)||}"
msgstr ""

#: ../../template_lang.rst:355
# bbebc335e78a4323b031aa551be22115
msgid "Second column (the shortened form): Name: #shortened. Template: {#stripped_series:shorten(4,-,4)}"
msgstr ""

#: ../../template_lang.rst:359
# c6d971adc8fb4d4eba780096740400f3
msgid "Third column (the initials form): Name: #initials. Template: {#stripped_series:re(([^\\s])[^\\s]+(\\s|$),\\1)}"
msgstr ""

#: ../../template_lang.rst:363
# 3072136bd340441387f9dadee16c6aa8
msgid "Plugboard expression: Template:{#stripped_series:lookup(.\\s,#initials,.,#shortened,series)}{series_index:0>2.0f| [|] }{title} Destination field: title"
msgstr ""

#: ../../template_lang.rst:367
# 7fba865f74e545e2b00b9b469ea456df
msgid "This set of fields and plugboard produces: Series: The Lord of the Rings Series index: 2 Title: The Two Towers Output: LotR [02] The Two Towers"
msgstr ""

#: ../../template_lang.rst:373
# eae91d35a9344cb99e2ee167955d15d4
msgid "Series: Dahak Series index: 1 Title: Mutineers Moon Output: Dahak [01] Mutineers Moon"
msgstr ""

#: ../../template_lang.rst:378
# 3fa372bb2cd44f8f9042a0b6fff42164
msgid "Series: Berserkers Series Index: 4 Title: Berserker Throne Output: Bers-kers [04] Berserker Throne"
msgstr ""

#: ../../template_lang.rst:383
# e72b644ff7dd4cd981f7d737d4e62061
msgid "Series: Meg Langslow Mysteries Series Index: 3 Title: Revenge of the Wrought-Iron Flamingos Output: MLM [03] Revenge of the Wrought-Iron Flamingos"
msgstr ""

#: ../../template_lang.rst:388
# 6550faaad1894be58067648a65482ac1
msgid "The following program produces the same results as the original recipe, using only one custom column to hold the results of a program that computes the special title value::"
msgstr ""

#: ../../template_lang.rst:425
# 566b13c45d42483885edc69b3882d5b6
msgid "It would be possible to do the above with no custom columns by putting the program into the template box of the plugboard. However, to do so, all comments must be removed because the plugboard text box does not support multi-line editing. It is debatable whether the gain of not having the custom column is worth the vast increase in difficulty caused by the program being one giant line."
msgstr ""

#: ../../template_lang.rst:429
# b4633b622e8544e4abe5c511e4910032
msgid "User-defined Template Functions"
msgstr ""

#: ../../template_lang.rst:431
# c2d5912fd11049118a4b5489ed8e4019
msgid "You can add your own functions to the template processor. Such functions are written in python, and can be used in any of the three template programming modes. The functions are added by going to Preferences -> Advanced -> Template Functions. Instructions are shown in that dialog."
msgstr ""

#: ../../template_lang.rst:434
# 9619e26c1a6b4d8e96026f297b2bb523
msgid "Special notes for save/send templates"
msgstr ""

#: ../../template_lang.rst:436
# 6563c8f1b35043948730e079b6c81ff7
msgid "Special processing is applied when a template is used in a `save to disk` or `send to device` template. The values of the fields are cleaned, replacing characters that are special to file systems with underscores, including slashes. This means that field text cannot be used to create folders. However, slashes are not changed in prefix or suffix strings, so slashes in these strings will cause folders to be created. Because of this, you can create variable-depth folder structure."
msgstr ""

#: ../../template_lang.rst:438
# 16786cf4b3274233a7a5480116f59847
msgid "For example, assume we want the folder structure `series/series_index - title`, with the caveat that if series does not exist, then the title should be in the top folder. The template to do this is::"
msgstr ""

#: ../../template_lang.rst:442
# 8991740e04d342c682f3d5127f696357
msgid "The slash and the hyphen appear only if series is not empty."
msgstr ""

#: ../../template_lang.rst:444
# b4a52784b42341a696e9c1d86b31f665
msgid "The lookup function lets us do even fancier processing. For example, assume that if a book has a series, then we want the folder structure `series/series index - title.fmt`. If the book does not have a series, then we want the folder structure `genre/author_sort/title.fmt`. If the book has no genre, we want to use 'Unknown'. We want two completely different paths, depending on the value of series."
msgstr ""

#: ../../template_lang.rst:449
# 0203dd816ef1461581afd16f09af1ad4
msgid "To accomplish this, we:"
msgstr ""

#: ../../template_lang.rst:447
# 38c87dcc8c214f94b9b367df21a75752
msgid "Create a composite field (call it AA) containing ``{series}/{series_index} - {title'}``. If the series is not empty, then this template will produce `series/series_index - title`."
msgstr ""

#: ../../template_lang.rst:448
# c7713bd81cad4de897445d774af4f907
msgid "Create a composite field (call it BB) containing ``{#genre:ifempty(Unknown)}/{author_sort}/{title}``. This template produces `genre/author_sort/title`, where an empty genre is replaced wuth `Unknown`."
msgstr ""

#: ../../template_lang.rst:449
# d0d9a57b9a5a4537acb616e6b1622c6d
msgid "Set the save template to ``{series:lookup(.,AA,BB)}``. This template chooses composite field AA if series is not empty, and composite field BB if series is empty. We therefore have two completely different save paths, depending on whether or not `series` is empty."
msgstr ""

#: ../../template_lang.rst:452
# 9a79789f70b6475daa9576bf17288cb5
msgid "Templates and Plugboards"
msgstr ""

#: ../../template_lang.rst:454
# 9a22e9e71b6d4087b2632b2eecf4b79d
msgid "Plugboards are used for changing the metadata written into books during send-to-device and save-to-disk operations. A plugboard permits you to specify a template to provide the data to write into the book's metadata. You can use plugboards to modify the following fields: authors, author_sort, language, publisher, tags, title, title_sort. This feature helps people who want to use different metadata in books on devices to solve sorting or display issues."
msgstr ""

#: ../../template_lang.rst:456
# 11ee5ab59511452c8f3edb575ed30d7e
msgid "When you create a plugboard, you specify the format and device for which the plugboard is to be used. A special device is provided, save_to_disk, that is used when saving formats (as opposed to sending them to a device). Once you have chosen the format and device, you choose the metadata fields to change, providing templates to supply the new values. These templates are `connected` to their destination fields, hence the name `plugboards`. You can, of course, use composite columns in these templates."
msgstr ""

#: ../../template_lang.rst:458
# 59c5705290f240b2b8c3e2570a133dba
msgid "When a plugboard might apply (content server, save to disk, or send to device), |app| searches the defined plugboards to choose the correct one for the given format and device. For example, to find the appropriate plugboard for an EPUB book being sent to an ANDROID device, |app| searches the plugboards using the following search order:"
msgstr ""

#: ../../template_lang.rst:460
# 1cb5bb56c46e42899ab7ef4dfa826d75
msgid "a plugboard with an exact match on format and device, e.g., ``EPUB`` and ``ANDROID``"
msgstr ""

#: ../../template_lang.rst:461
# f78bddd9446b43b592af7f7bac4581ee
msgid "a plugboard with an exact match on format and the special ``any device`` choice, e.g., ``EPUB`` and ``any device``"
msgstr ""

#: ../../template_lang.rst:462
# 96833549d9044750871135581ef4530c
msgid "a plugboard with the special ``any format`` choice and an exact match on device, e.g., ``any format`` and ``ANDROID``"
msgstr ""

#: ../../template_lang.rst:463
# bd390d6a2cae4ede8e483650189ac7be
msgid "a plugboard with ``any format`` and ``any device``"
msgstr ""

#: ../../template_lang.rst:465
# 67dcc828193847f6a7abcc586be6e2b3
msgid "The tags and authors fields have special treatment, because both of these fields can hold more than one item. A book can have many tags and many authors. When you specify that one of these two fields is to be changed, the template's result is examined to see if more than one item is there. For tags, the result is cut apart wherever |app| finds a comma. For example, if the template produces the value ``Thriller, Horror``, then the result will be two tags, ``Thriller`` and ``Horror``. There is no way to put a comma in the middle of a tag."
msgstr ""

#: ../../template_lang.rst:467
# 58c68689384144d9b754e02ad832b4d1
msgid "The same thing happens for authors, but using a different character for the cut, a `&` (ampersand) instead of a comma. For example, if the template produces the value ``Blogs, Joe&Posts, Susan``, then the book will end up with two authors, ``Blogs, Joe`` and ``Posts, Susan``. If the template produces the value ``Blogs, Joe;Posts, Susan``, then the book will have one author with a rather strange name."
msgstr ""

#: ../../template_lang.rst:469
# 16ddcdba3f474fad9df1de09cd753ae6
msgid "Plugboards affect the metadata written into the book when it is saved to disk or written to the device. Plugboards do not affect the metadata used by ``save to disk`` and ``send to device`` to create the file names. Instead, file names are constructed using the templates entered on the appropriate preferences window."
msgstr ""

#: ../../template_lang.rst:472
# 4b208ae8f8424192a00dd3e798d00b2e
msgid "Helpful Tips"
msgstr ""

#: ../../template_lang.rst:474
# fa73637e3ecf40d0a0aa4bf46af0a94f
msgid "You might find the following tips useful."
msgstr ""

#: ../../template_lang.rst:476
# f069e837dbc940a6a2ed14b948c95abf
msgid "Create a custom composite column to test templates. Once you have the column, you can change its template simply by double-clicking on the column. Hide the column when you are not testing."
msgstr ""

#: ../../template_lang.rst:477
# b74062a513f14cf3a95d2f35a719728e
msgid "Templates can use other templates by referencing a composite custom column."
msgstr ""

#: ../../template_lang.rst:478
# 03b4a8e0189745689cbf0027e8398bcc
msgid "In a plugboard, you can set a field to empty (or whatever is equivalent to empty) by using the special template ``{}``. This template will always evaluate to an empty string."
msgstr ""

#: ../../template_lang.rst:479
# 3d113459876a459abb22d04933197c4f
msgid "The technique described above to show numbers even if they have a zero value works with the standard field series_index."
msgstr ""

