# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.46.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-25 09:34+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../template_lang.rst:7
# a33e8801df624d4298942c7819fa4714
msgid "The |app| template language"
msgstr ""

#: ../../template_lang.rst:9
# 7f498106c64a4a40912535677571b0bf
msgid "The |app| template language is used in various places. It is used to control the folder structure and file name when saving files from the |app| library to the disk or eBook reader. It is also used to define \"virtual\" columns that contain data from other columns and so on."
msgstr ""

#: ../../template_lang.rst:12
# ac1d29ae593341cc8e3ccdccd5a83c8b
msgid "The basic template language is very simple, but has very powerful advanced features. The basic idea is that a template consists of text and names in curly brackets that are then replaced by the corresponding metadata from the book being processed. So, for example, the default template used for saving books to device in |app| is::"
msgstr ""

#: ../../template_lang.rst:16
#: ../../template_lang.rst:24
# 5e9693501aa440f7bed81969ff9c4d67
# 4f7c1484ca4943d298606b8feda578e1
msgid "For the book \"The Foundation\" by \"Isaac Asimov\" it will become::"
msgstr ""

#: ../../template_lang.rst:20
# 672135d008d54dc7956514bd8b0cf74d
msgid "The slashes are text, which is put into the template where it appears. For example, if your template is::"
msgstr ""

#: ../../template_lang.rst:28
# f30bd7f15591441cabfc470acdc1fb30
msgid "You can use all the various metadata fields available in calibre in a template, including any custom columns you have created yourself. To find out the template name for a column simply hover your mouse over the column header. Names for custom fields (columns you have created yourself) always have a # as the first character. For series type custom fields, there is always an additional field named ``#seriesname_index`` that becomes the series index for that series. So if you have a custom series field named ``#myseries``, there will also be a field named ``#myseries_index``."
msgstr ""

#: ../../template_lang.rst:30
# bb3293aa69cf444f9334a0a17c5b1c1c
msgid "In addition to the column based fields, you also can use::"
msgstr ""

#: ../../template_lang.rst:35
# 574bdf5a1870467da51263b49e4676be
msgid "If a particular book does not have a particular piece of metadata, the field in the template is automatically removed for that book. Consider, for example::"
msgstr ""

#: ../../template_lang.rst:39
# a87c1ded8c3c42f5af195b5c66c56398
msgid "If a book has a series, the template will produce::"
msgstr ""

#: ../../template_lang.rst:43
# 96560df6dfd7419591198bd49494e572
msgid "and if a book does not have a series::"
msgstr ""

#: ../../template_lang.rst:47
# 9cf8bed0827a402db22d43a00ebbeb32
msgid "(|app| automatically removes multiple slashes and leading or trailing spaces)."
msgstr ""

#: ../../template_lang.rst:50
# 810e6935ee6f4448b54168e8a36daba1
msgid "Advanced formatting"
msgstr ""

#: ../../template_lang.rst:52
# 4c22eeee6aee47b39fdee9cfa55a0b1b
msgid "You can do more than just simple substitution with the templates. You can also conditionally include text and control how the substituted data is formatted."
msgstr ""

#: ../../template_lang.rst:54
# ae2e9df129ee4111a4bc1a44373a854b
msgid "First, conditionally including text. There are cases where you might want to have text appear in the output only if a field is not empty. A common case is ``series`` and ``series_index``, where you want either nothing or the two values with a hyphen between them. Calibre handles this case using a special field syntax."
msgstr ""

#: ../../template_lang.rst:56
# 6423e3a330d5409f9892b175133f0790
msgid "For example, assume you want to use the template::"
msgstr ""

#: ../../template_lang.rst:60
# a2d2601c93ab4088abf7016e3c64b8d0
msgid "If the book has no series, the answer will be ``- - title``. Many people would rather the result be simply ``title``, without the hyphens. To do this, use the extended syntax ``{field:|prefix_text|suffix_text}``. When you use this syntax, if field has the value SERIES then the result will be ``prefix_textSERIESsuffix_text``. If field has no value, then the result will be the empty string (nothing); the prefix and suffix are ignored. The prefix and suffix can contain blanks. **Do not use subtemplates (`{ ... }`) or functions (see below) as the prefix or the suffix.**"
msgstr ""

#: ../../template_lang.rst:62
# ac1ee616bda24b21ab4ca8711d9a5bf7
msgid "Using this syntax, we can solve the above series problem with the template::"
msgstr ""

#: ../../template_lang.rst:66
# 2619872120fe47cfac4913689b8a7a81
msgid "The hyphens will be included only if the book has a series index, which it will have only if it has a series."
msgstr ""

#: ../../template_lang.rst:68
# 509bf1e0321e4b7f9fc774359dfd628a
msgid "Notes: you must include the : character if you want to use a prefix or a suffix. You must either use no \\| characters or both of them; using one, as in ``{field:| - }``, is not allowed. It is OK not to provide any text for one side or the other, such as in ``{series:|| - }``. Using ``{title:||}`` is the same as using ``{title}``."
msgstr ""

#: ../../template_lang.rst:70
# 9dcb8b55d86a469bbb9c7d8e4c3124ad
msgid "Second: formatting. Suppose you wanted to ensure that the series_index is always formatted as three digits with leading zeros. This would do the trick::"
msgstr ""

#: ../../template_lang.rst:74
# 91d104a7de1b41c6b4ff86c67281b6b1
msgid "If instead of leading zeros you want leading spaces, use::"
msgstr ""

#: ../../template_lang.rst:78
# 672eec918fb84da0bb55a36186703814
msgid "For trailing zeros, use::"
msgstr ""

#: ../../template_lang.rst:82
# 80c605110b344afdb96a797049c3ac47
msgid "If you use series indices with sub values (e.g., 1.1), you might want to ensure that the decimal points line up. For example, you might want the indices 1 and 2.5 to appear as 01.00 and 02.50 so that they will sort correctly. To do this, use::"
msgstr ""

#: ../../template_lang.rst:86
# 88c368772e874dd7add83c6e4e22901a
msgid "If you want only the first two letters of the data, use::"
msgstr ""

#: ../../template_lang.rst:90
# e682d550ae3a4136b2edb30995be9fe2
msgid "The |app| template language comes from python and for more details on the syntax of these advanced formatting operations, look at the `Python documentation <http://docs.python.org/library/string.html#format-string-syntax>`_."
msgstr ""

#: ../../template_lang.rst:93
# 4cea443f46994b9bbff4adf4d814055c
msgid "Advanced features"
msgstr ""

#: ../../template_lang.rst:96
# 629d3fc0bdd84f44b4cba9308e487520
msgid "Using templates in custom columns"
msgstr ""

#: ../../template_lang.rst:98
# c8d49e7085eb4f85859d73ea4d33268c
msgid "There are sometimes cases where you want to display metadata that |app| does not normally display, or to display data in a way different from how |app| normally does. For example, you might want to display the ISBN, a field that |app| does not display. You can use custom columns for this by creating a column with the type 'column built from other columns' (hereafter called composite columns), and entering a template. Result: |app| will display a column showing the result of evaluating that template. To display the ISBN, create the column and enter ``{identifiers:select(isbn)}`` into the template box. To display a column containing the values of two series custom columns separated by a comma, use ``{#series1:||,}{#series2}``."
msgstr ""

#: ../../template_lang.rst:100
# 0ef47e18a9b449f0bb8b3c896134d09d
msgid "Composite columns can use any template option, including formatting."
msgstr ""

#: ../../template_lang.rst:102
# 9f882b8858d543e0b7a59ab0320f7323
msgid "You cannot change the data contained in a composite column. If you edit a composite column by double-clicking on any item, you will open the template for editing, not the underlying data. Editing the template on the GUI is a quick way of testing and changing composite columns."
msgstr ""

#: ../../template_lang.rst:105
# c33f9d9344c14bae894f3df29cbec1d5
msgid "Using functions in templates - single-function mode"
msgstr ""

#: ../../template_lang.rst:107
# a63c567707df42e1903d9bb05a78f34c
msgid "Suppose you want to display the value of a field in upper case, when that field is normally in title case. You can do this (and many more things) using the functions available for templates. For example, to display the title in upper case, use ``{title:uppercase()}``. To display it in title case, use ``{title:titlecase()}``."
msgstr ""

#: ../../template_lang.rst:109
# f9cffd253c5a42dfa49fde7e926b2d74
msgid "Function references appear in the format part, going after the ``:`` and before the first ``|`` or the closing ``}``. If you have both a format and a function reference, the function comes after another ``:``. Functions must always end with ``()``. Some functions take extra values (arguments), and these go inside the ``()``."
msgstr ""

#: ../../template_lang.rst:111
# 5f9d8a1661a14c8698f701d02c5b824a
msgid "Functions are always applied before format specifications. See further down for an example of using both a format and a function, where this order is demonstrated."
msgstr ""

#: ../../template_lang.rst:113
# 02a6eeb96ba6480981e50996035d1ea4
msgid "The syntax for using functions is ``{field:function(arguments)}``, or ``{field:function(arguments)|prefix|suffix}``. Arguments are separated by commas. Commas inside arguments must be preceeded by a backslash ( '\\\\' ). The last (or only) argument cannot contain a closing parenthesis ( ')' ). Functions return the value of the field used in the template, suitably modified."
msgstr ""

#: ../../template_lang.rst:115
# 57d3b3fdff6741ba8a9fd09a1f154db3
msgid "Important: If you have programming experience, please note that the syntax in this mode (single function) is not what you might expect. Strings are not quoted. Spaces are significant. All arguments must be constants; there is no sub-evaluation. **Do not use subtemplates (`{ ... }`) as function arguments.** Instead, use :ref:`template program mode <template_mode>` and :ref:`general program mode <general_mode>`."
msgstr ""

#: ../../template_lang.rst:117
# 8e42dd0d4aa945cab6906a69e3925c1a
msgid "Many functions use regular expressions. In all cases, regular expression matching is case-insensitive."
msgstr ""

#: ../../template_lang.rst:119
# c584993baaa540e68fb0e83f506139c2
msgid "The functions available are listed below. Note that the definitive documentation for functions is available in the section :ref:`Function classification <template_functions_reference>`:"
msgstr ""

#: ../../template_lang.rst:121
# dfeaec6883374aa6ac35ad93a3dab46c
msgid "``lowercase()``   -- return value of the field in lower case."
msgstr ""

#: ../../template_lang.rst:122
# c76aa1a03eec4b77b6ef297d2f0828ec
msgid "``uppercase()``   -- return the value of the field in upper case."
msgstr ""

#: ../../template_lang.rst:123
# 598a6f806a78487c9ccdb1c1ee5a6a8f
msgid "``titlecase()``   -- return the value of the field in title case."
msgstr ""

#: ../../template_lang.rst:124
# bcd2dab80c2446c88994120bc260898d
msgid "``capitalize()``  -- return the value with the first letter upper case and the rest lower case."
msgstr ""

#: ../../template_lang.rst:125
# 80a08086e6fb4d698cf8e3985fdaa2ea
msgid "``contains(pattern, text if match, text if not match)`` -- checks if field contains matches for the regular expression `pattern`. Returns `text if match` if matches are found, otherwise it returns `text if no match`."
msgstr ""

#: ../../template_lang.rst:126
# 226e23707b4e43b388a8782030097bdc
msgid "``count(separator)`` -- interprets the value as a list of items separated by `separator`, returning the number of items in the list. Most lists use a comma as the separator, but authors uses an ampersand. Examples: `{tags:count(,)}`, `{authors:count(&)}`"
msgstr ""

#: ../../template_lang.rst:127
# 7c3bc14f53744377b51c989deb6a6bb6
msgid "``format_number(template)`` -- interprets the value as a number and format that number using a python formatting template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The field_name part of the template must be a 0 (zero) (the \"{0:\" in the above examples). See the template language and python documentation for more examples. Returns the empty string if formatting fails."
msgstr ""

#: ../../template_lang.rst:128
# 57b0ac4f8d074253bc5841b79a6ded7c
msgid "``human_readable()`` -- expects the value to be a number and returns a string representing that number in KB, MB, GB, etc."
msgstr ""

#: ../../template_lang.rst:129
# 07bd6949d14d4712b8e1b41a4b2aa94c
msgid "``ifempty(text)`` -- if the field is not empty, return the value of the field. Otherwise return `text`."
msgstr ""

#: ../../template_lang.rst:130
# 86ac069cb8c84c6197c8378e2288d731
msgid "``in_list(separator, pattern, found_val, not_found_val)`` -- interpret the field as a list of items separated by `separator`, comparing the `pattern` against each value in the list. If the pattern matches a value, return `found_val`, otherwise return `not_found_val`."
msgstr ""

#: ../../template_lang.rst:131
# bc8899a41e8a4135b0c1d77b471da3b6
msgid "``language_codes(lang_strings)`` -- return the language codes for the strings passed in `lang_strings`. The strings must be in the language of the current locale. `Lang_strings` is a comma-separated list."
msgstr ""

#: ../../template_lang.rst:132
# 4d79d502db224b579ae16cb5ccb1f374
msgid "``language_strings(lang_codes, localize)`` -- return the strings for the language codes passed in `lang_codes`. If `localize` is zero, return the strings in English. If localize is not zero, return the strings in the language of the current locale. `Lang_codes` is a comma-separated list."
msgstr ""

#: ../../template_lang.rst:133
# 6c61f7d8b71f4c7a93470d75a0cda3cc
msgid "``list_item(index, separator)`` -- interpret the field as a list of items separated by `separator`, returning the `index`th item. The first item is number zero. The last item can be returned using `list_item(-1,separator)`. If the item is not in the list, then the empty value is returned. The separator has the same meaning as in the `count` function."
msgstr ""

#: ../../template_lang.rst:134
# 280cfc45092548878d6613565c5d580b
msgid "``lookup(pattern, field, pattern, field, ..., else_field)`` -- like switch, except the arguments are field (metadata) names, not text. The value of the appropriate field will be fetched and used. Note that because composite columns are fields, you can use this function in one composite field to use the value of some other composite field. This is extremely useful when constructing variable save paths (more later)."
msgstr ""

#: ../../template_lang.rst:135
# 1c9e9afc4e044e5e9c45a6cf9b8091b4
msgid "``re(pattern, replacement)`` -- return the field after applying the regular expression. All instances of `pattern` are replaced with `replacement`. As in all of |app|, these are python-compatible regular expressions."
msgstr ""

#: ../../template_lang.rst:136
# 7f41e819f5784efc898f79e0f6d31fcf
msgid "``select(key)`` -- interpret the field as a comma-separated list of items, with the items being of the form \"id:value\". Find the pair with the id equal to key, and return the corresponding value. This function is particularly useful for extracting a value such as an isbn from the set of identifiers for a book."
msgstr ""

#: ../../template_lang.rst:137
# 920d750b941849ee83a4eb713a9060f9
msgid "``shorten(left chars, middle text, right chars)`` -- Return a shortened version of the field, consisting of `left chars` characters from the beginning of the field, followed by `middle text`, followed by `right chars` characters from the end of the string. `Left chars` and `right chars` must be integers. For example, assume the title of the book is `Ancient English Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most 15 characters. If you use ``{title:shorten(9,-,5)}``, the result will be `Ancient E-nhoe`. If the field's length is less than ``left chars`` + ``right chars`` + the length of ``middle text``, then the field will be used intact. For example, the title `The Dome` would not be changed."
msgstr ""

#: ../../template_lang.rst:138
# 165389cfeeb045369919576d2c9706dd
msgid "``str_in_list(val, separator, string, found_val, not_found_val)`` -- treat val as a list of items separated by separator, comparing the string against each value in the list. If the string matches a value, return found_val, otherwise return not_found_val. If the string contains separators, then it is also treated as a list and each value is checked."
msgstr ""

#: ../../template_lang.rst:139
# 6bedfe72d806448f926944c9b64f2773
msgid "``subitems(val, start_index, end_index)`` -- This function is used to break apart lists of tag-like hierarchical items such as genres. It interprets the value as a comma-separated list of tag-like items, where each item is a period-separated list. Returns a new list made by first finding all the period-separated tag-like items, then for each such item extracting the components from `start_index` to `end_index`, then combining the results back together. The first component in a period-separated list has an index of zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples::"
msgstr ""

#: ../../template_lang.rst:149
# b06c52c818d4447d98ff6717a71c0d00
msgid "``sublist(val, start_index, end_index, separator)`` -- interpret the value as a list of items separated by `separator`, returning a new list made from the items from `start_index`to `end_index`. The first item is number zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples assuming that the tags column (which is comma-separated) contains \"A, B ,C\"::"
msgstr ""

#: ../../template_lang.rst:155
# 6f154a306d6b43d1afb5a264dd129871
msgid "``swap_around_comma(val) `` -- given a value of the form ``B, A``, return ``A B``. This is most useful for converting names in LN, FN format to FN LN. If there is no comma, the function returns val unchanged."
msgstr ""

#: ../../template_lang.rst:156
# e6e1e842ab81406089aef812dafa7957
msgid "``switch(pattern, value, pattern, value, ..., else_value)`` -- for each ``pattern, value`` pair, checks if the field matches the regular expression ``pattern`` and if so, returns that ``value``. If no ``pattern`` matches, then ``else_value`` is returned. You can have as many ``pattern, value`` pairs as you want."
msgstr ""

#: ../../template_lang.rst:157
# d935c00d3ae04b20ac47d8361d295972
msgid "``test(text if not empty, text if empty)`` -- return `text if not empty` if the field is not empty, otherwise return `text if empty`."
msgstr ""

#: ../../template_lang.rst:158
# f6ef22892c114bf3b0a9bbfda47d38fb
msgid "``transliterate()`` -- Returns a string in a latin alphabet formed by approximating the sound of the words in the source field. For example, if the source field is ``Фёдор Миха́йлович Достоевский`` the function returns ``Fiodor Mikhailovich Dostoievskii``.'"
msgstr ""

#: ../../template_lang.rst:160
# 4400d7de54d94663ac3e011603d85572
msgid "Now, what about using functions and formatting in the same field. Suppose you have an integer custom column called ``#myint`` that you want to see with leading zeros, as in ``003``. To do this, you would use a format of ``0>3s``. However, by default, if a number (integer or float) equals zero then the field produces the empty value, so zero values will produce nothing, not ``000``. If you really want to see ``000`` values, then you use both the format string and the ``ifempty`` function to change the empty value back to a zero. The field reference would be::"
msgstr ""

#: ../../template_lang.rst:164
# 12ee84aee5e24f5083bf779ec8d04f48
msgid "Note that you can use the prefix and suffix as well. If you want the number to appear as ``[003]`` or ``[000]``, then use the field::"
msgstr ""

#: ../../template_lang.rst:171
# 89176016aaa84e0599649167da6b55e2
msgid "Using functions in templates - template program mode"
msgstr ""

#: ../../template_lang.rst:173
# cb6081fbe0714457a908503d5bbd84ed
msgid "The template language program mode differs from single-function mode in that it permits you to write template expressions that refer to other metadata fields, modify values, and do arithmetic. It is a reasonably complete programming language."
msgstr ""

#: ../../template_lang.rst:175
# d4b2b9af62e44d72a0bcdbbf7b92f847
msgid "You can use the functions documented above in template program mode. See below for details."
msgstr ""

#: ../../template_lang.rst:177
# 52c42fa63dcb40f8be5c7547380e38b7
msgid "Beginning with an example, assume that you want your template to show the series for a book if it has one, otherwise show the value of a custom field #genre. You cannot do this in the basic language because you cannot make reference to another metadata field within a template expression. In program mode, you can. The following expression works::"
msgstr ""

#: ../../template_lang.rst:181
# 17f5a3ea5d434b138f6e30f08d73b91f
msgid "The example shows several things:"
msgstr ""

#: ../../template_lang.rst:183
# 737f8e2ffd3e4aa8bfa320d057f85588
msgid "program mode is used if the expression begins with ``:'`` and ends with ``'``. Anything else is assumed to be single-function."
msgstr ""

#: ../../template_lang.rst:184
# b2a6113543104ddea769616c98fcd4a8
msgid "the variable ``$`` stands for the field the expression is operating upon, ``#series`` in this case."
msgstr ""

#: ../../template_lang.rst:185
# 07da771af350427d871676e6e7253291
msgid "functions must be given all their arguments. There is no default value. For example, the standard built-in functions must be given an additional initial parameter indicating the source field, which is a significant difference from single-function mode."
msgstr ""

#: ../../template_lang.rst:186
# c57ef52ea8124ca78902b4732cb8efa5
msgid "white space is ignored and can be used anywhere within the expression."
msgstr ""

#: ../../template_lang.rst:187
# d9b0f8f09a7e4f378c7679a35b8d5e84
msgid "constant strings are enclosed in matching quotes, either ``'`` or ``\"``."
msgstr ""

#: ../../template_lang.rst:189
# c4b5a1b02eda475cb0a8d3357959332a
msgid "The language is similar to ``functional`` languages in that it is built almost entirely from functions. A statement is a function. An expression is a function. Constants and identifiers can be thought of as functions returning the value indicated by the constant or stored in the identifier."
msgstr ""

#: ../../template_lang.rst:191
# 1ce732fb52004d789a28aa578cf99e47
msgid "The syntax of the language is shown by the following grammar::"
msgstr ""

#: ../../template_lang.rst:201
# 477d7533c055472fb5836f78a4a90d0c
msgid "Comments are lines with a '#' character at the beginning of the line."
msgstr ""

#: ../../template_lang.rst:203
# 11c43ffbf9244a0f8b363bb6dd1dae49
msgid "An ``expression`` always has a value, either the value of the constant, the value contained in the identifier, or the value returned by a function. The value of a ``statement`` is the value of the last expression in the sequence of statements. As such, the value of the program (statement)::"
msgstr ""

#: ../../template_lang.rst:207
# bc999bf68dbe43e1ba453808547c32e1
msgid "is 3."
msgstr ""

#: ../../template_lang.rst:209
# b03da772c53540f68a6b73dce5349ba5
msgid "Another example of a complex but rather silly program might help make things clearer::"
msgstr ""

#: ../../template_lang.rst:220
# fcd5c4d7dc864458bfaa9cce8f54f938
msgid "This program does the following:"
msgstr ""

#: ../../template_lang.rst:222
# b94dff54001b499195c09ea781bc57cc
msgid "specify that the field being looked at is series_index. This sets the value of the variable ``$``."
msgstr ""

#: ../../template_lang.rst:223
# 3e3db50f86d54ec788792b42a3f29cd1
msgid "calls the ``substr`` function, which takes 3 parameters ``(str, start, end)``. It returns a string formed by extracting the start through end characters from string, zero-based (the first character is character zero). In this case the string will be computed by the ``strcat`` function, the start is 0, and the end is 6. In this case it will return the first 6 characters of the string returned by ``strcat``, which must be evaluated before substr can return."
msgstr ""

#: ../../template_lang.rst:224
# 41c1c08f659a4e20b34e6797016fa368
msgid "calls the ``strcat`` (string concatenation) function. Strcat accepts 1 or more arguments, and returns a string formed by concatenating all the values. In this case there are three arguments. The first parameter is the value in ``$``, which here is the value of ``series_index``. The second paremeter is the constant string ``'->'``. The third parameter is the value returned by the ``cmp`` function, which must be fully evaluated before ``strcat`` can return."
msgstr ""

#: ../../template_lang.rst:225
# ff7f2efaa8d14837a04c37b35eedd947
msgid "The ``cmp`` function takes 5 arguments ``(x, y, lt, eq, gt)``. It compares x and y and returns the third argument ``lt`` if x < y, the fourth argument ``eq`` if x == y, and the fifth argument ``gt`` if x > y. As with all functions, all of the parameters can be statements. In this case the first parameter (the value for ``x``) is the result of dividing the series_index by 2. The second parameter ``y`` is the constant ``1``. The third parameter ``lt`` is a statement (more later). The fourth parameter ``eq`` is the constant string ``'eq'``. The fifth parameter is the constant string ``'gt'``."
msgstr ""

#: ../../template_lang.rst:226
# 517710f3105042bba77e408149c05948
msgid "The third parameter (the one for ``lt``) is a statement, or a sequence of expressions. Remember that a statement (a sequence of semicolon-separated expressions) is also an expression, returning the value of the last expression in the list. In this case, the program first assigns the value ``1`` to a local variable ``c``, then returns a substring made by extracting the c'th character to the end. Since c always contains the constant ``1``, the substring will return the second through end'th characters, or ``'t123'``."
msgstr ""

#: ../../template_lang.rst:227
# 5a74dbcbf50b4daf8c6e1001c17acb57
msgid "Once the statement providing the value to the third parameter is executed, ``cmp`` can return a value. At that point, ``strcat` can return a value, then ``substr`` can return a value. The program then terminates."
msgstr ""

#: ../../template_lang.rst:229
# 60ac3e8a8e9e4d5d941a324f42d014d7
msgid "For various values of series_index, the program returns:"
msgstr ""

#: ../../template_lang.rst:231
# cf0fedc0ebf84ae9b78c39e8ba735023
msgid "series_index == undefined, result = ``prefix ->t123 suffix``"
msgstr ""

#: ../../template_lang.rst:232
# 413cd3dfa771455dafc6cec1ad083bc4
msgid "series_index == 0.5, result = ``prefix 0.50-> suffix``"
msgstr ""

#: ../../template_lang.rst:233
# db59869e36f44ba78e2bd83529c87894
msgid "series_index == 1, result = ``prefix 1->t12 suffix``"
msgstr ""

#: ../../template_lang.rst:234
# c395fc149b214b58847922da90d6e4a7
msgid "series_index == 2, result = ``prefix 2->eq suffix``"
msgstr ""

#: ../../template_lang.rst:235
# b87e287b23a1476883041c731bb36cc0
msgid "series_index == 3, result = ``prefix 3->gt suffix``"
msgstr ""

#: ../../template_lang.rst:237
# ce08b0335a4b465c86d0b2c33f39d691
msgid "**All the functions listed under single-function mode can be used in program mode**. To do so, you must supply the value that the function is to act upon as the first parameter, in addition to the parameters documented above. For example, in program mode the parameters of the `test` function are ``test(x, text_if_not_empty, text_if_empty)``. The `x` parameter, which is the value to be tested, will almost always be a variable or a function call, often `field()`."
msgstr ""

#: ../../template_lang.rst:239
# 4d993703b0e94ca4942153528952b43c
msgid "The following functions are available in addition to those described in single-function mode. Remember from the example above that the single-function mode functions require an additional first parameter specifying the field to operate on. With the exception of the ``id`` parameter of assign, all parameters can be statements (sequences of expressions). Note that the definitive documentation for functions is available in the section :ref:`Function classification <template_functions_reference>`:"
msgstr ""

#: ../../template_lang.rst:241
# d12eb758d12c43a8a10b1a079f231afc
msgid "``and(value, value, ...)`` -- returns the string \"1\" if all values are not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_lang.rst:242
# 19b6c6b7f6614bfc8b3d0bdec2606e1e
msgid "``add(x, y)`` -- returns x + y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_lang.rst:243
# 08718dc7557a44ad9964e85aea062408
msgid "``assign(id, val)`` -- assigns val to id, then returns val. id must be an identifier, not an expression"
msgstr ""

#: ../../template_lang.rst:244
# 778092bd613444a2ac4a345d55d7b5cd
msgid "``approximate_formats()`` -- return a comma-separated list of formats that at one point were associated with the book. There is no guarantee that the list is correct, although it probably is. This function can be called in template program mode using the template ``{:'approximate_formats()'}``. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_lang.rst:245
# 462677da58f6462993ec8f0f88b6efe5
msgid "``booksize()`` -- returns the value of the |app| 'size' field. Returns '' if there are no formats."
msgstr ""

#: ../../template_lang.rst:246
# 7ea96a3760c448c685c28a84d7a1c19e
msgid "``cmp(x, y, lt, eq, gt)`` -- compares x and y after converting both to numbers. Returns ``lt`` if x < y. Returns ``eq`` if x == y. Otherwise returns ``gt``."
msgstr ""

#: ../../template_lang.rst:247
# 45de92e480ef47109e88f7d020ccd95f
msgid "``current_library_name() -- `` return the last name on the path to the current calibre library. This function can be called in template program mode using the template ``{:'current_library_name()'}``."
msgstr ""

#: ../../template_lang.rst:248
# 23c0afee1ca34f1c91a8ae0ea8988485
msgid "``current_library_path() -- `` eturn the path to the current calibre library. This function can be called in template program mode using the template ``{:'current_library_path()'}``.."
msgstr ""

#: ../../template_lang.rst:249
# 0a122f1bc77249ee86b106081e92825a
msgid "``days_between(date1, date2)`` -- return the number of days between ``date1`` and ``date2``. The number is positive if ``date1`` is greater than ``date2``, otherwise negative. If either ``date1`` or ``date2`` are not dates, the function returns the empty string."
msgstr ""

#: ../../template_lang.rst:250
# de1108b5f20e43fca8eafece770ba576
msgid "``divide(x, y)`` -- returns x / y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_lang.rst:251
# 4fd12db1381c4e25846b4de8c573ec3b
msgid "``eval(string)`` -- evaluates the string as a program, passing the local variables (those ``assign`` ed to). This permits using the template processor to construct complex results from local variables. Because the `{` and `}` characters are special, you must use `[[` for the `{` character and `]]` for the '}' character; they are converted automatically. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../template_lang.rst:252
# 1bc7663865a94e278073d0fc1a48eba6
msgid "``field(name)`` -- returns the metadata field named by ``name``."
msgstr ""

#: ../../template_lang.rst:253
# da37ba51bad24774a493c26385e2e2d1
msgid "``first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)`` -- compares \"val < cmpN\" in sequence, returning resultN for the first comparison that succeeds. Returns else_result if no comparison succeeds. Example::"
msgstr ""

#: ../../template_lang.rst:257
# 704e43ab122043dca19e127c70e660c7
msgid "returns \"large\". The same example with a first value of 16 returns \"giant\". * ``first_non_empty(value, value, ...)`` -- returns the first value that is not empty. If all values are empty, then the empty value is returned. You can have as many values as you want. * ``format_date(x, date_format)`` -- format_date(val, format_string) -- format the value, which must be a date field, using the format_string, returning a string. The formatting codes are::"
msgstr ""

#: ../../template_lang.rst:281
# 7fe682e57f1a49f9b45022f3dc6616d0
msgid "You might get unexpected results if the date you are formatting contains localized month names, which can happen if you changed the format tweaks to contain MMMM. In this case, instead of using something like ``{pubdate:format_date(yyyy)}``, write the template using template program mode as in ``{:'format_date(raw_field('pubdate'),'yyyy')'}``."
msgstr ""

#: ../../template_lang.rst:283
# d68d10d2ff58421b83dd093ac70de0ea
msgid "finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and suffix to a value in the same way as done in a template like ``{series_index:05.2f| - |- }``. This function is provided to ease conversion of complex single-function- or template-program-mode templates to :ref:`general program mode <general_mode>` (see below) to take advantage of GPM template compilation. For example, the following program produces the same output as the above template::"
msgstr ""

#: ../../template_lang.rst:287
# e7905c34b2e141bdaf7c8cf111695855
msgid "Another example: for the template ``{series:re(([^\\s])[^\\s]+(\\s|$),\\1)}{series_index:0>2s| - | - }{title}`` use::"
msgstr ""

#: ../../template_lang.rst:296
# e3edb9aa90e34ce1b26fd6ed245d0bd1
msgid "``formats_modtimes(date_format)`` -- return a comma-separated list of colon_separated items representing modification times for the formats of a book. The date_format parameter specifies how the date is to be formatted. See the date_format function for details. You can use the select function to get the mod time for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_lang.rst:297
# 09b6dafe0f614d1786016e074d8b396c
msgid "``formats_paths()`` -- return a comma-separated list of colon_separated items representing full path to the formats of a book. You can use the select function to get the path for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_lang.rst:298
# 10aa370abef7482d865a1c680183dab3
msgid "``formats_sizes()`` -- return a comma-separated list of colon_separated items representing sizes in bytes of the formats of a book. You can use the select function to get the size for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_lang.rst:299
# 961e389de5b2456fb9f24a6269f174f4
msgid "``has_cover()`` -- return ``Yes`` if the book has a cover, otherwise return the empty string"
msgstr ""

#: ../../template_lang.rst:300
# eb755f7ecf45489eb4aba66357845582
msgid "``not(value)`` -- returns the string \"1\" if the value is empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_lang.rst:301
# 975ca2de3382426eba072be6556f79e3
msgid "``list_difference(list1, list2, separator)`` -- return a list made by removing from `list1` any item found in `list2`, using a case-insensitive compare. The items in `list1` and `list2` are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_lang.rst:302
# d9e4ffd4c2ee4fa3aca243c8ac4568e2
msgid "``list_equals(list1, sep1, list2, sep2, yes_val, no_val)`` -- return `yes_val` if `list1` and `list2` contain the same items, otherwise return `no_val`. The items are determined by splitting each list using the appropriate separator character (`sep1` or `sep2`). The order of items in the lists is not relevant. The compare is case insensitive."
msgstr ""

#: ../../template_lang.rst:303
# a5d70b94582d49948e81c3671fcdbedc
msgid "``list_intersection(list1, list2, separator)`` -- return a list made by removing from `list1` any item not found in `list2`, using a case-insensitive compare. The items in `list1` and `list2` are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_lang.rst:304
# 8dddbf39391643dfbb1571743356e492
msgid "``list_re(src_list, separator, include_re, opt_replace)`` -- Construct a list by first separating `src_list` into items using the `separator` character. For each item in the list, check if it matches `include_re`. If it does, then add it to the list to be returned. If `opt_replace` is not the empty string, then apply the replacement before adding the item to the returned list."
msgstr ""

#: ../../template_lang.rst:305
# 47bf3f7d412b45df96100d22ac3034ff
msgid "``list_re_group(src_list, separator, include_re, search_re, template_for_group_1, for_group_2, ...)`` -- Like list_re except replacements are not optional. It uses re_group(item, search_re, template ...) when doing the replacements."
msgstr ""

#: ../../template_lang.rst:306
# b6cd5d87957e45c8871e1e83bcf096b8
msgid "``list_sort(list, direction, separator)`` -- return list sorted using a case-insensitive sort. If `direction` is zero, the list is sorted ascending, otherwise descending. The list items are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_lang.rst:307
# f80a3ba71f874315948eb6b80e3e9548
msgid "``list_union(list1, list2, separator)`` -- return a list made by merging the items in list1 and list2, removing duplicate items using a case-insensitive compare. If items differ in case, the one in list1 is used. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_lang.rst:308
# e84bf5a62c4a43c9a151f69ca6eec968
msgid "``multiply(x, y)`` -- returns x * y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_lang.rst:309
# cc80887cfe2f4fdaaad8a4c7e326ff78
msgid "``ondevice()`` -- return the string \"Yes\" if ondevice is set, otherwise return the empty string"
msgstr ""

#: ../../template_lang.rst:310
# 5c60a231c3eb4626802d998c0900c065
msgid "``or(value, value, ...)`` -- returns the string \"1\" if any value is not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_lang.rst:311
# 5fe3272519a24eb6b6f0361fc4a9e844
msgid "``print(a, b, ...)`` -- prints the arguments to standard output. Unless you start calibre from the command line (``calibre-debug -g``), the output will go to a black hole."
msgstr ""

#: ../../template_lang.rst:312
# f7da93bd84db4bbf80068949a5ae1385
msgid "``raw_field(name)`` -- returns the metadata field named by name without applying any formatting."
msgstr ""

#: ../../template_lang.rst:313
# c2045742e2264b2dabf981d4d3d5cb6b
msgid "``re_group(val, pattern, template_for_group_1, for_group_2, ...)`` --  return a string made by applying the reqular expression pattern to the val and replacing each matched instance with the string computed by replacing each matched group by the value returned by the corresponding template. The original matched value for the group is available as $. In template program mode, like for the template and the eval functions, you use [[ for { and ]] for }. The following example in template program mode looks for series with more than one word and uppercases the first word::"
msgstr ""

#: ../../template_lang.rst:317
# 66341656a45648d3a5edb3ebe58a4ff0
msgid "``series_sort()`` -- returns the series sort value."
msgstr ""

#: ../../template_lang.rst:318
# ba090a66b5a74ff792e83eecf2e3b904
msgid "``strcat(a, b, ...)`` -- can take any number of arguments. Returns a string formed by concatenating all the arguments."
msgstr ""

#: ../../template_lang.rst:319
# 716d341b363e40ff9de35f82f55fef0c
msgid "``strcat_max(max, string1, prefix2, string2, ...)`` -- Returns a string formed by concatenating the arguments. The returned value is initialized to string1. `Prefix, string` pairs are added to the end of the value as long as the resulting string length is less than `max`. String1 is returned even if string1 is longer than max. You can pass as many `prefix, string` pairs as you wish."
msgstr ""

#: ../../template_lang.rst:320
# c4244f3eaf82483e98e70cb9a9b53309
msgid "``strcmp(x, y, lt, eq, gt)`` -- does a case-insensitive comparison x and y as strings. Returns ``lt`` if x < y. Returns ``eq`` if x == y. Otherwise returns ``gt``."
msgstr ""

#: ../../template_lang.rst:321
# d3ec521116f84c12acb81739489ef259
msgid "``strlen(a)`` -- Returns the length of the string passed as the argument."
msgstr ""

#: ../../template_lang.rst:322
# 2b07175878e249d08d004b90be54b776
msgid "``substr(str, start, end)`` -- returns the ``start``'th through the ``end``'th characters of ``str``. The first character in ``str`` is the zero'th character. If end is negative, then it indicates that many characters counting from the right. If end is zero, then it indicates the last character. For example, ``substr('12345', 1, 0)`` returns ``'2345'``, and ``substr('12345', 1, -1)`` returns ``'234'``."
msgstr ""

#: ../../template_lang.rst:323
# 9a81da3d5de9423bbb36910297dc4106
msgid "``subtract(x, y)`` -- returns x - y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_lang.rst:324
# 4956246629ff4a419143d3c024fe4cfc
msgid "``today()`` -- return a date string for today. This value is designed for use in format_date or days_between, but can be manipulated like any other string. The date is in ISO format."
msgstr ""

#: ../../template_lang.rst:325
# 93efaa147a2d4f70a7bcdc5a12f51137
msgid "``template(x)`` -- evaluates x as a template. The evaluation is done in its own context, meaning that variables are not shared between the caller and the template evaluation. Because the `{` and `}` characters are special, you must use `[[` for the `{` character and `]]` for the '}' character; they are converted automatically. For example, ``template('[[title_sort]]') will evaluate the template ``{title_sort}`` and return its value. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../template_lang.rst:330
# b5e4953a2d264a1ba57d75008a4f99f5
msgid "Function classification"
msgstr ""

#: ../../template_lang.rst:341
# 487e8a7887da438ba6e5ce925f81ce4c
msgid "Using general program mode"
msgstr ""

#: ../../template_lang.rst:343
# 93c2b19959834a34b14c649fa88a53db
msgid "For more complicated template programs, it is sometimes easier to avoid template syntax (all the `{` and `}` characters), instead writing a more classical-looking program. You can do this in |app| by beginning the template with `program:`. In this case, no template processing is done. The special variable `$` is not set. It is up to your program to produce the correct results."
msgstr ""

#: ../../template_lang.rst:345
# 2f825bba41874baabd514a5f7fd9b371
msgid "One advantage of `program:` mode is that the brackets are no longer special. For example, it is not necessary to use `[[` and `]]` when using the `template()` function. Another advantage is that program mode templates are compiled to Python and can run much faster than  templates in the other two modes. Speed improvement depends on the complexity of the templates; the more complicated the template the more the improvement. Compilation is turned off or on using the tweak ``compile_gpm_templates`` (Compile General Program Mode templates to Python). The main reason to turn off compilation is if a compiled template does not work, in which case please file a bug report."
msgstr ""

#: ../../template_lang.rst:347
# d8e96137d73d41bfb58e06f22f626bf4
msgid "The following example is a `program:` mode implementation of a recipe on the MobileRead forum: \"Put series into the title, using either initials or a shortened form. Strip leading articles from the series name (any).\" For example, for the book The Two Towers in the Lord of the Rings series, the recipe gives `LotR [02] The Two Towers`. Using standard templates, the recipe requires three custom columns and a plugboard, as explained in the following:"
msgstr ""

#: ../../template_lang.rst:349
# be904e2f15164af4a8a613a5549e5399
msgid "The solution requires creating three composite columns. The first column is used to remove the leading articles. The second is used to compute the 'shorten' form. The third is to compute the 'initials' form. Once you have these columns, the plugboard selects between them. You can hide any or all of the three columns on the library view."
msgstr ""

#: ../../template_lang.rst:351
# 139abc3dd1cb4b4ab7c4be8d11fa3a07
msgid "First column: Name: #stripped_series. Template: {series:re(^(A|The|An)\\s+,)||}"
msgstr ""

#: ../../template_lang.rst:355
# 649660d02ed5445aa69a15dfffaeae0a
msgid "Second column (the shortened form): Name: #shortened. Template: {#stripped_series:shorten(4,-,4)}"
msgstr ""

#: ../../template_lang.rst:359
# 6256a5912e074532921d5b9777337d83
msgid "Third column (the initials form): Name: #initials. Template: {#stripped_series:re(([^\\s])[^\\s]+(\\s|$),\\1)}"
msgstr ""

#: ../../template_lang.rst:363
# fb8d354cee4449bf97490826e123d248
msgid "Plugboard expression: Template:{#stripped_series:lookup(.\\s,#initials,.,#shortened,series)}{series_index:0>2.0f| [|] }{title} Destination field: title"
msgstr ""

#: ../../template_lang.rst:367
# f0f2faaa414d45b5bfe66236b13610bc
msgid "This set of fields and plugboard produces: Series: The Lord of the Rings Series index: 2 Title: The Two Towers Output: LotR [02] The Two Towers"
msgstr ""

#: ../../template_lang.rst:373
# 9f3d2e6e73c34a0ba9f647460f3763c7
msgid "Series: Dahak Series index: 1 Title: Mutineers Moon Output: Dahak [01] Mutineers Moon"
msgstr ""

#: ../../template_lang.rst:378
# 36a007ee2bfe494686ca690e5cbfa14c
msgid "Series: Berserkers Series Index: 4 Title: Berserker Throne Output: Bers-kers [04] Berserker Throne"
msgstr ""

#: ../../template_lang.rst:383
# 22a8039481f14f3c9330f492aded2771
msgid "Series: Meg Langslow Mysteries Series Index: 3 Title: Revenge of the Wrought-Iron Flamingos Output: MLM [03] Revenge of the Wrought-Iron Flamingos"
msgstr ""

#: ../../template_lang.rst:388
# 44ae469828ca4724ac65b1982055ceec
msgid "The following program produces the same results as the original recipe, using only one custom column to hold the results of a program that computes the special title value::"
msgstr ""

#: ../../template_lang.rst:425
# 2a81715d669e44808981b15f42b4c88f
msgid "It would be possible to do the above with no custom columns by putting the program into the template box of the plugboard. However, to do so, all comments must be removed because the plugboard text box does not support multi-line editing. It is debatable whether the gain of not having the custom column is worth the vast increase in difficulty caused by the program being one giant line."
msgstr ""

#: ../../template_lang.rst:429
# 3e85f8c4f4054c8a8ebdec3b43025797
msgid "User-defined Template Functions"
msgstr ""

#: ../../template_lang.rst:431
# 6df24aba9ba341c2b66c805343dda3bd
msgid "You can add your own functions to the template processor. Such functions are written in python, and can be used in any of the three template programming modes. The functions are added by going to Preferences -> Advanced -> Template Functions. Instructions are shown in that dialog."
msgstr ""

#: ../../template_lang.rst:434
# 74a224b85eb7496abbc5d9af68a7da25
msgid "Special notes for save/send templates"
msgstr ""

#: ../../template_lang.rst:436
# 8114fdbef61d4b2f85851b1e22dbe2de
msgid "Special processing is applied when a template is used in a `save to disk` or `send to device` template. The values of the fields are cleaned, replacing characters that are special to file systems with underscores, including slashes. This means that field text cannot be used to create folders. However, slashes are not changed in prefix or suffix strings, so slashes in these strings will cause folders to be created. Because of this, you can create variable-depth folder structure."
msgstr ""

#: ../../template_lang.rst:438
# cfebee331b364d63ae26a1c236c930b9
msgid "For example, assume we want the folder structure `series/series_index - title`, with the caveat that if series does not exist, then the title should be in the top folder. The template to do this is::"
msgstr ""

#: ../../template_lang.rst:442
# 430ac02dd8b24b6da9dcfbb4d492c14d
msgid "The slash and the hyphen appear only if series is not empty."
msgstr ""

#: ../../template_lang.rst:444
# 8a5a2fcaf815439babd6f532534cb28b
msgid "The lookup function lets us do even fancier processing. For example, assume that if a book has a series, then we want the folder structure `series/series index - title.fmt`. If the book does not have a series, then we want the folder structure `genre/author_sort/title.fmt`. If the book has no genre, we want to use 'Unknown'. We want two completely different paths, depending on the value of series."
msgstr ""

#: ../../template_lang.rst:449
# 68d4f745c0be4cd4a7fe26dd871f3be0
msgid "To accomplish this, we:"
msgstr ""

#: ../../template_lang.rst:447
# f4e26187c1344ba494bc0ad8dda2eb6e
msgid "Create a composite field (call it AA) containing ``{series}/{series_index} - {title'}``. If the series is not empty, then this template will produce `series/series_index - title`."
msgstr ""

#: ../../template_lang.rst:448
# 8e359fd77f2044a0ae1d644d8d142aba
msgid "Create a composite field (call it BB) containing ``{#genre:ifempty(Unknown)}/{author_sort}/{title}``. This template produces `genre/author_sort/title`, where an empty genre is replaced wuth `Unknown`."
msgstr ""

#: ../../template_lang.rst:449
# c00825ffff3741b59ca8313f73efa865
msgid "Set the save template to ``{series:lookup(.,AA,BB)}``. This template chooses composite field AA if series is not empty, and composite field BB if series is empty. We therefore have two completely different save paths, depending on whether or not `series` is empty."
msgstr ""

#: ../../template_lang.rst:452
# b0e75cca3b824e21b04391a682e431e0
msgid "Templates and Plugboards"
msgstr ""

#: ../../template_lang.rst:454
# 0191f283643d4f6eb5a1929fc8e2eb14
msgid "Plugboards are used for changing the metadata written into books during send-to-device and save-to-disk operations. A plugboard permits you to specify a template to provide the data to write into the book's metadata. You can use plugboards to modify the following fields: authors, author_sort, language, publisher, tags, title, title_sort. This feature helps people who want to use different metadata in books on devices to solve sorting or display issues."
msgstr ""

#: ../../template_lang.rst:456
# 06050b205f284c07a77e04a7e03a28d5
msgid "When you create a plugboard, you specify the format and device for which the plugboard is to be used. A special device is provided, save_to_disk, that is used when saving formats (as opposed to sending them to a device). Once you have chosen the format and device, you choose the metadata fields to change, providing templates to supply the new values. These templates are `connected` to their destination fields, hence the name `plugboards`. You can, of course, use composite columns in these templates."
msgstr ""

#: ../../template_lang.rst:458
# bf06086b24594158b553b61ca5f47d0d
msgid "When a plugboard might apply (content server, save to disk, or send to device), |app| searches the defined plugboards to choose the correct one for the given format and device. For example, to find the appropriate plugboard for an EPUB book being sent to an ANDROID device, |app| searches the plugboards using the following search order:"
msgstr ""

#: ../../template_lang.rst:460
# 32a7955e1396495dba980db171d37c54
msgid "a plugboard with an exact match on format and device, e.g., ``EPUB`` and ``ANDROID``"
msgstr ""

#: ../../template_lang.rst:461
# ef634657e7c24f40bed17ced65e4fdeb
msgid "a plugboard with an exact match on format and the special ``any device`` choice, e.g., ``EPUB`` and ``any device``"
msgstr ""

#: ../../template_lang.rst:462
# 8e6ce36e54a84b608f5ccb25209cc872
msgid "a plugboard with the special ``any format`` choice and an exact match on device, e.g., ``any format`` and ``ANDROID``"
msgstr ""

#: ../../template_lang.rst:463
# 9163d039e17e4a02971887d9c0ee8bdc
msgid "a plugboard with ``any format`` and ``any device``"
msgstr ""

#: ../../template_lang.rst:465
# 4113b9d2fb9b4b149b97dd2bffc36796
msgid "The tags and authors fields have special treatment, because both of these fields can hold more than one item. A book can have many tags and many authors. When you specify that one of these two fields is to be changed, the template's result is examined to see if more than one item is there. For tags, the result is cut apart wherever |app| finds a comma. For example, if the template produces the value ``Thriller, Horror``, then the result will be two tags, ``Thriller`` and ``Horror``. There is no way to put a comma in the middle of a tag."
msgstr ""

#: ../../template_lang.rst:467
# 3ffe07fce824481eb1f0d42caccf02a4
msgid "The same thing happens for authors, but using a different character for the cut, a `&` (ampersand) instead of a comma. For example, if the template produces the value ``Blogs, Joe&Posts, Susan``, then the book will end up with two authors, ``Blogs, Joe`` and ``Posts, Susan``. If the template produces the value ``Blogs, Joe;Posts, Susan``, then the book will have one author with a rather strange name."
msgstr ""

#: ../../template_lang.rst:469
# ffcbc097855145d6bb32a6695eec40a4
msgid "Plugboards affect the metadata written into the book when it is saved to disk or written to the device. Plugboards do not affect the metadata used by ``save to disk`` and ``send to device`` to create the file names. Instead, file names are constructed using the templates entered on the appropriate preferences window."
msgstr ""

#: ../../template_lang.rst:472
# 2ede98b34b7e44c5b1aa531eeaf68fbe
msgid "Helpful Tips"
msgstr ""

#: ../../template_lang.rst:474
# b8da9ba638f84d5caa5caff2c0e3f1d0
msgid "You might find the following tips useful."
msgstr ""

#: ../../template_lang.rst:476
# da201ce8aa43485789cd2926126b8f38
msgid "Create a custom composite column to test templates. Once you have the column, you can change its template simply by double-clicking on the column. Hide the column when you are not testing."
msgstr ""

#: ../../template_lang.rst:477
# 30900baabd1f4d25a552e41faa5f85eb
msgid "Templates can use other templates by referencing a composite custom column."
msgstr ""

#: ../../template_lang.rst:478
# 85f2985586764ea28af1f960ea86bb8e
msgid "In a plugboard, you can set a field to empty (or whatever is equivalent to empty) by using the special template ``{}``. This template will always evaluate to an empty string."
msgstr ""

#: ../../template_lang.rst:479
# 4e4109e03f1548f6bba9fcb9b97e0921
msgid "The technique described above to show numbers even if they have a zero value works with the standard field series_index."
msgstr ""

