# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.20.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-20 09:11+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/template_lang.rst:4
# 5239fe385fa6452880a255c5acf766e8
msgid "The calibre template language"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:6
# 9fbcbc4f430f4527a853dced39b09d5e
msgid "The calibre template language is used in various places. It is used to control the folder structure and file name when saving files from the calibre library to the disk or eBook reader. It is also used to define \"virtual\" columns that contain data from other columns and so on."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:9
# 64bf69bf4c784992bba182032003c282
msgid "The basic template language is very simple, but has very powerful advanced features. The basic idea is that a template consists of text and names in curly brackets that are then replaced by the corresponding metadata from the book being processed. So, for example, the default template used for saving books to device in calibre is::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:13
#: ../../home/kovid/work/calibre/manual/template_lang.rst:21
# bf923da1df6040e4bf66e277f9c23f9c
# 432deeaad49548cc8d1ca329025803fc
msgid "For the book \"The Foundation\" by \"Isaac Asimov\" it will become::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:17
# c15f34cceb2941a9976e0a6a0f87ec9a
msgid "The slashes are text, which is put into the template where it appears. For example, if your template is::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:25
# d6c1de01a62c45a8b8838b2825715a8f
msgid "You can use all the various metadata fields available in calibre in a template, including any custom columns you have created yourself. To find out the template name for a column simply hover your mouse over the column header. Names for custom fields (columns you have created yourself) always have a # as the first character. For series type custom fields, there is always an additional field named ``#seriesname_index`` that becomes the series index for that series. So if you have a custom series field named ``#myseries``, there will also be a field named ``#myseries_index``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:27
# 507c44c21150497b8a45c0a45f906afb
msgid "In addition to the column based fields, you also can use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:32
# 7862352c3345459db13cd2a463c3535d
msgid "If a particular book does not have a particular piece of metadata, the field in the template is automatically removed for that book. Consider, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:36
# b3549518a9cc42c1a8f5f10aad781c90
msgid "If a book has a series, the template will produce::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:40
# 0120077ce1c24e24bc790d56fb75d1bd
msgid "and if a book does not have a series::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:44
# f358da38f2204ea3b9dc4ca7e6b30f64
msgid "(calibre automatically removes multiple slashes and leading or trailing spaces)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:47
# c2c66e6a076c40829f40b2de5709980b
msgid "Advanced formatting"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:49
# de34dbfb34ee4cd9b39d48f63f15819b
msgid "You can do more than just simple substitution with the templates. You can also conditionally include text and control how the substituted data is formatted."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:51
# c73c1957fb1145369d343e3c01656734
msgid "First, conditionally including text. There are cases where you might want to have text appear in the output only if a field is not empty. A common case is ``series`` and ``series_index``, where you want either nothing or the two values with a hyphen between them. Calibre handles this case using a special field syntax."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:53
# 1bfaf946c71341fb85d1e485a66f3e2e
msgid "For example, assume you want to use the template::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:57
# ba0d324d032d4db5bd5814aa3e4ccc85
msgid "If the book has no series, the answer will be ``- - title``. Many people would rather the result be simply ``title``, without the hyphens. To do this, use the extended syntax ``{field:|prefix_text|suffix_text}``. When you use this syntax, if field has the value SERIES then the result will be ``prefix_textSERIESsuffix_text``. If field has no value, then the result will be the empty string (nothing); the prefix and suffix are ignored. The prefix and suffix can contain blanks. **Do not use subtemplates (`{ ... }`) or functions (see below) as the prefix or the suffix.**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:59
# d7729aab19d341c1b12b6158d30347f0
msgid "Using this syntax, we can solve the above series problem with the template::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:63
# 5c70d51739714a439889d694ea0a7b6d
msgid "The hyphens will be included only if the book has a series index, which it will have only if it has a series."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:65
# 88e3a01bc1974d7f94dc2943cbb30ec2
msgid "Notes: you must include the : character if you want to use a prefix or a suffix. You must either use no \\| characters or both of them; using one, as in ``{field:| - }``, is not allowed. It is OK not to provide any text for one side or the other, such as in ``{series:|| - }``. Using ``{title:||}`` is the same as using ``{title}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:67
# 2c113edda8af4f7f97591ff81ef0548a
msgid "Second: formatting. Suppose you wanted to ensure that the series_index is always formatted as three digits with leading zeros. This would do the trick::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:71
# 5608d065b3b2401e9fb5d2eb5746936f
msgid "If instead of leading zeros you want leading spaces, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:75
# 60895daf764b4fcdb393fe7e863b4782
msgid "For trailing zeros, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:79
# 5ad53fa44bfa4ce9877dbf31f3573493
msgid "If you use series indices with sub values (e.g., 1.1), you might want to ensure that the decimal points line up. For example, you might want the indices 1 and 2.5 to appear as 01.00 and 02.50 so that they will sort correctly. To do this, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:83
# 0dfd3a732ed24975aab239cac2e7ceda
msgid "If you want only the first two letters of the data, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:87
# fbdd931e81b348f885c08b9254fab499
msgid "The calibre template language comes from python and for more details on the syntax of these advanced formatting operations, look at the `Python documentation <https://docs.python.org/2/library/string.html#format-string-syntax>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:90
# 02361eb07c094ce7ba44a647e4139e95
msgid "Advanced features"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:93
# 2975250ae62043508b1fe74141dcb79c
msgid "Using templates in custom columns"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:95
# 238c570e96ef4e8ba7d1762636e5bc1f
msgid "There are sometimes cases where you want to display metadata that calibre does not normally display, or to display data in a way different from how calibre normally does. For example, you might want to display the ISBN, a field that calibre does not display. You can use custom columns for this by creating a column with the type 'column built from other columns' (hereafter called composite columns), and entering a template. Result: calibre will display a column showing the result of evaluating that template. To display the ISBN, create the column and enter ``{identifiers:select(isbn)}`` into the template box. To display a column containing the values of two series custom columns separated by a comma, use ``{#series1:||,}{#series2}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:97
# 54401b3614fd424fa9493af1712a0f4b
msgid "Composite columns can use any template option, including formatting."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:99
# c33783c47e864d48a5c37abb2b53348e
msgid "You cannot change the data contained in a composite column. If you edit a composite column by double-clicking on any item, you will open the template for editing, not the underlying data. Editing the template on the GUI is a quick way of testing and changing composite columns."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:102
# 0c7e99022e874351acaec217efd1e052
msgid "Using functions in templates - single-function mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:104
# a2bca97ff43146b89fcb0db3e57c9de6
msgid "Suppose you want to display the value of a field in upper case, when that field is normally in title case. You can do this (and many more things) using the functions available for templates. For example, to display the title in upper case, use ``{title:uppercase()}``. To display it in title case, use ``{title:titlecase()}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:106
# 0639152adfdc4199ac32ea25c0082f73
msgid "Function references appear in the format part, going after the ``:`` and before the first ``|`` or the closing ``}``. If you have both a format and a function reference, the function comes after another ``:``. Functions must always end with ``()``. Some functions take extra values (arguments), and these go inside the ``()``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:108
# f5db29a2ebbe4424a7c4991c0fe662f1
msgid "Functions are always applied before format specifications. See further down for an example of using both a format and a function, where this order is demonstrated."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:110
# 7fbb8c121dd348b79c3916aaa8ce355d
msgid "The syntax for using functions is ``{field:function(arguments)}``, or ``{field:function(arguments)|prefix|suffix}``. Arguments are separated by commas. Commas inside arguments must be preceeded by a backslash ( '\\\\' ). The last (or only) argument cannot contain a closing parenthesis ( ')' ). Functions return the value of the field used in the template, suitably modified."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:112
# 8b66c1e84bab49e5a5e3c988e3ab031a
msgid "Important: If you have programming experience, please note that the syntax in this mode (single function) is not what you might expect. Strings are not quoted. Spaces are significant. All arguments must be constants; there is no sub-evaluation. **Do not use subtemplates (`{ ... }`) as function arguments.** Instead, use :ref:`template program mode <template_mode>` and :ref:`general program mode <general_mode>`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:114
# cacf15d76de34acb83223de5824dcb19
msgid "Many functions use regular expressions. In all cases, regular expression matching is case-insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:116
# 863a9c9f383246ddbed86cf121875172
msgid "The functions available are listed below. Note that the definitive documentation for functions is available in the section :ref:`Function classification <template_functions_reference>`:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:118
# b31f28ccd59c433aab711e23271c751b
msgid "``lowercase()``   -- return value of the field in lower case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:119
# f67a5d652a3f499bbd6b9c786340dd41
msgid "``uppercase()``   -- return the value of the field in upper case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:120
# e7ed84cd39e442a48c56f064455d88cc
msgid "``titlecase()``   -- return the value of the field in title case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:121
# 21facd31f9d74a14ae45c0e8e12c0ece
msgid "``capitalize()``  -- return the value with the first letter upper case and the rest lower case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:122
# 9934bb0c89a744219040d8249b7709fe
msgid "``contains(pattern, text if match, text if not match)`` -- checks if field contains matches for the regular expression `pattern`. Returns `text if match` if matches are found, otherwise it returns `text if no match`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:123
# dbb83bc6ae1c48168fa58ffe07135388
msgid "``count(separator)`` -- interprets the value as a list of items separated by `separator`, returning the number of items in the list. Most lists use a comma as the separator, but authors uses an ampersand. Examples: `{tags:count(,)}`, `{authors:count(&)}`"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:124
# cfe1f650dc5245478b0ecd8e8087db61
msgid "``format_number(template)`` -- interprets the value as a number and format that number using a python formatting template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The field_name part of the template must be a 0 (zero) (the \"{0:\" in the above examples). See the template language and python documentation for more examples. Returns the empty string if formatting fails."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:125
# ef12f583cc7649abb1eb6123e3c93d70
msgid "``human_readable()`` -- expects the value to be a number and returns a string representing that number in KB, MB, GB, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:126
# 0903d84b28274993b01198b555ffd8dc
msgid "``ifempty(text)`` -- if the field is not empty, return the value of the field. Otherwise return `text`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:127
# af99f2ee503143db93d6d7efc6538ab7
msgid "``in_list(separator, pattern, found_val, not_found_val)`` -- interpret the field as a list of items separated by `separator`, comparing the `pattern` against each value in the list. If the pattern matches a value, return `found_val`, otherwise return `not_found_val`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:128
# fbd298671ece4d7ab7464936e7e60813
msgid "``language_codes(lang_strings)`` -- return the language codes for the strings passed in `lang_strings`. The strings must be in the language of the current locale. `Lang_strings` is a comma-separated list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:129
# 0bd5102e11af44a0825211bab711f1ea
msgid "``language_strings(lang_codes, localize)`` -- return the strings for the language codes passed in `lang_codes`. If `localize` is zero, return the strings in English. If localize is not zero, return the strings in the language of the current locale. `Lang_codes` is a comma-separated list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:130
# 6e1708bdbc65492ca915e624545884bf
msgid "``list_item(index, separator)`` -- interpret the field as a list of items separated by `separator`, returning the `index`th item. The first item is number zero. The last item can be returned using `list_item(-1,separator)`. If the item is not in the list, then the empty value is returned. The separator has the same meaning as in the `count` function."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:131
# 89a10db293c94e8e9fda4fdf0f9ce189
msgid "``lookup(pattern, field, pattern, field, ..., else_field)`` -- like switch, except the arguments are field (metadata) names, not text. The value of the appropriate field will be fetched and used. Note that because composite columns are fields, you can use this function in one composite field to use the value of some other composite field. This is extremely useful when constructing variable save paths (more later)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:132
# 7254be1d668a492b920827273015bcea
msgid "``re(pattern, replacement)`` -- return the field after applying the regular expression. All instances of `pattern` are replaced with `replacement`. As in all of calibre, these are python-compatible regular expressions."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:133
# d098f921bbf042eca2ddb933a1f28aec
msgid "``select(key)`` -- interpret the field as a comma-separated list of items, with the items being of the form \"id:value\". Find the pair with the id equal to key, and return the corresponding value. This function is particularly useful for extracting a value such as an isbn from the set of identifiers for a book."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:134
# f94e3324009f46a8ac448fa62cab2659
msgid "``shorten(left chars, middle text, right chars)`` -- Return a shortened version of the field, consisting of `left chars` characters from the beginning of the field, followed by `middle text`, followed by `right chars` characters from the end of the string. `Left chars` and `right chars` must be integers. For example, assume the title of the book is `Ancient English Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most 15 characters. If you use ``{title:shorten(9,-,5)}``, the result will be `Ancient E-nhoe`. If the field's length is less than ``left chars`` + ``right chars`` + the length of ``middle text``, then the field will be used intact. For example, the title `The Dome` would not be changed."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:135
# 3fa55d375e3842968ece8545b1b1a3e3
msgid "``str_in_list(val, separator, string, found_val, not_found_val)`` -- treat val as a list of items separated by separator, comparing the string against each value in the list. If the string matches a value, return found_val, otherwise return not_found_val. If the string contains separators, then it is also treated as a list and each value is checked."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:136
# cf6a930b81b647e7aeabe3b6031680b6
msgid "``subitems(val, start_index, end_index)`` -- This function is used to break apart lists of tag-like hierarchical items such as genres. It interprets the value as a comma-separated list of tag-like items, where each item is a period-separated list. Returns a new list made by first finding all the period-separated tag-like items, then for each such item extracting the components from `start_index` to `end_index`, then combining the results back together. The first component in a period-separated list has an index of zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:146
# 04a932012ebc461a9e0ce40e13badf23
msgid "``sublist(val, start_index, end_index, separator)`` -- interpret the value as a list of items separated by `separator`, returning a new list made from the items from `start_index`to `end_index`. The first item is number zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples assuming that the tags column (which is comma-separated) contains \"A, B ,C\"::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:152
# 26b9cefd70ec4453aaf42ddf6f516047
msgid "``swap_around_comma(val) `` -- given a value of the form ``B, A``, return ``A B``. This is most useful for converting names in LN, FN format to FN LN. If there is no comma, the function returns val unchanged."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:153
# b049fd55d4fc4635997cfdee2f2acb2c
msgid "``switch(pattern, value, pattern, value, ..., else_value)`` -- for each ``pattern, value`` pair, checks if the field matches the regular expression ``pattern`` and if so, returns that ``value``. If no ``pattern`` matches, then ``else_value`` is returned. You can have as many ``pattern, value`` pairs as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:154
# 3141bc3e2d9f44a2863ca355cfb49776
msgid "``test(text if not empty, text if empty)`` -- return `text if not empty` if the field is not empty, otherwise return `text if empty`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:155
# 1ff0a14fa05447c2a2bf06eb569cea2d
msgid "``transliterate()`` -- Returns a string in a latin alphabet formed by approximating the sound of the words in the source field. For example, if the source field is ``Фёдор Миха́йлович Достоевский`` the function returns ``Fiodor Mikhailovich Dostoievskii``.'"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:157
# b2cedc03301c4ce680c06d9124355b0c
msgid "Now, what about using functions and formatting in the same field. Suppose you have an integer custom column called ``#myint`` that you want to see with leading zeros, as in ``003``. To do this, you would use a format of ``0>3s``. However, by default, if a number (integer or float) equals zero then the field produces the empty value, so zero values will produce nothing, not ``000``. If you really want to see ``000`` values, then you use both the format string and the ``ifempty`` function to change the empty value back to a zero. The field reference would be::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:161
# e62b7639b224453eba7f9026093da396
msgid "Note that you can use the prefix and suffix as well. If you want the number to appear as ``[003]`` or ``[000]``, then use the field::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:168
# 0e9b0f0d83634f44a576c89f0f659d20
msgid "Using functions in templates - template program mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:170
# ad61aebdc9934b68924e07947adfd4cd
msgid "The template language program mode differs from single-function mode in that it permits you to write template expressions that refer to other metadata fields, modify values, and do arithmetic. It is a reasonably complete programming language."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:172
# eea8304ee5bf4a769aff56119ff8873d
msgid "You can use the functions documented above in template program mode. See below for details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:174
# a36a7369799b428b8744e7de0859ad4c
msgid "Beginning with an example, assume that you want your template to show the series for a book if it has one, otherwise show the value of a custom field #genre. You cannot do this in the basic language because you cannot make reference to another metadata field within a template expression. In program mode, you can. The following expression works::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:178
# b810cccfbdaf4b51aba0be19802e56ff
msgid "The example shows several things:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:180
# bc8ac72bbfe148aea3f9c3267788577f
msgid "program mode is used if the expression begins with ``:'`` and ends with ``'``. Anything else is assumed to be single-function."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:181
# 9d7969866246404fa30d289f12352001
msgid "the variable ``$`` stands for the field the expression is operating upon, ``#series`` in this case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:182
# fb82ba14c6694f2897a0562a54d3dd50
msgid "functions must be given all their arguments. There is no default value. For example, the standard built-in functions must be given an additional initial parameter indicating the source field, which is a significant difference from single-function mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:183
# 2baaf343026f4c8c97791f728a3813cb
msgid "white space is ignored and can be used anywhere within the expression."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:184
# e0ed99eee6e74dcfad2e10615c012e33
msgid "constant strings are enclosed in matching quotes, either ``'`` or ``\"``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:186
# cf18ef319a394d4a9874545f34a30732
msgid "The language is similar to ``functional`` languages in that it is built almost entirely from functions. A statement is a function. An expression is a function. Constants and identifiers can be thought of as functions returning the value indicated by the constant or stored in the identifier."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:188
# 66bb1761a69d4f5e8ed37046e5717b80
msgid "The syntax of the language is shown by the following grammar::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:198
# 06fed47298084299bbe8ef87ac7c09eb
msgid "Comments are lines with a '#' character at the beginning of the line."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:200
# e2f16f336a144ae38b9122eac5330605
msgid "An ``expression`` always has a value, either the value of the constant, the value contained in the identifier, or the value returned by a function. The value of a ``statement`` is the value of the last expression in the sequence of statements. As such, the value of the program (statement)::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:204
# ecde58d4428541358ae7207199751077
msgid "is 3."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:206
# 9368a02acd7b41ba8bb4aec86020008c
msgid "Another example of a complex but rather silly program might help make things clearer::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:217
# 48a0291964c94a9b87f3da407aa7adf1
msgid "This program does the following:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:219
# 3a656fe827c948d8b41a4ce4782779ad
msgid "specify that the field being looked at is series_index. This sets the value of the variable ``$``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:220
# 9e3ae8b011d74bb69eb89ab4e1ec3f43
msgid "calls the ``substr`` function, which takes 3 parameters ``(str, start, end)``. It returns a string formed by extracting the start through end characters from string, zero-based (the first character is character zero). In this case the string will be computed by the ``strcat`` function, the start is 0, and the end is 6. In this case it will return the first 6 characters of the string returned by ``strcat``, which must be evaluated before substr can return."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:221
# 2694997938df4507a434b9dd44468b3d
msgid "calls the ``strcat`` (string concatenation) function. Strcat accepts 1 or more arguments, and returns a string formed by concatenating all the values. In this case there are three arguments. The first parameter is the value in ``$``, which here is the value of ``series_index``. The second paremeter is the constant string ``'->'``. The third parameter is the value returned by the ``cmp`` function, which must be fully evaluated before ``strcat`` can return."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:222
# fa1cdaabc12340c7994489a1a718c8f3
msgid "The ``cmp`` function takes 5 arguments ``(x, y, lt, eq, gt)``. It compares x and y and returns the third argument ``lt`` if x < y, the fourth argument ``eq`` if x == y, and the fifth argument ``gt`` if x > y. As with all functions, all of the parameters can be statements. In this case the first parameter (the value for ``x``) is the result of dividing the series_index by 2. The second parameter ``y`` is the constant ``1``. The third parameter ``lt`` is a statement (more later). The fourth parameter ``eq`` is the constant string ``'eq'``. The fifth parameter is the constant string ``'gt'``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:223
# 8d778a93159b4d0d96d14da6e73300bd
msgid "The third parameter (the one for ``lt``) is a statement, or a sequence of expressions. Remember that a statement (a sequence of semicolon-separated expressions) is also an expression, returning the value of the last expression in the list. In this case, the program first assigns the value ``1`` to a local variable ``c``, then returns a substring made by extracting the c'th character to the end. Since c always contains the constant ``1``, the substring will return the second through end'th characters, or ``'t123'``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:224
# af83b755fc864653a290bdbb48c7f280
msgid "Once the statement providing the value to the third parameter is executed, ``cmp`` can return a value. At that point, ``strcat` can return a value, then ``substr`` can return a value. The program then terminates."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:226
# e13b17e08ad14f3abfd1a379f9190e8e
msgid "For various values of series_index, the program returns:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:228
# f32c097b448c49ea8451ef8fa89274a0
msgid "series_index == undefined, result = ``prefix ->t123 suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:229
# dbb1888a702c40e59884190244a2ff34
msgid "series_index == 0.5, result = ``prefix 0.50-> suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:230
# 38385c9eaf5e44fda2e9f2d0303ef03e
msgid "series_index == 1, result = ``prefix 1->t12 suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:231
# 33f497b89c7f4415be8ec4330b704e57
msgid "series_index == 2, result = ``prefix 2->eq suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:232
# 32f76d8f0308477e92f7f1d604c71165
msgid "series_index == 3, result = ``prefix 3->gt suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:234
# 4493d5bc706a41ff949206e52e726561
msgid "**All the functions listed under single-function mode can be used in program mode**. To do so, you must supply the value that the function is to act upon as the first parameter, in addition to the parameters documented above. For example, in program mode the parameters of the `test` function are ``test(x, text_if_not_empty, text_if_empty)``. The `x` parameter, which is the value to be tested, will almost always be a variable or a function call, often `field()`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:236
# c5e25c32b786468c804dc5ab70a9e654
msgid "The following functions are available in addition to those described in single-function mode. Remember from the example above that the single-function mode functions require an additional first parameter specifying the field to operate on. With the exception of the ``id`` parameter of assign, all parameters can be statements (sequences of expressions). Note that the definitive documentation for functions is available in the section :ref:`Function classification <template_functions_reference>`:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:238
# 09e34acc79c9471ca3831c894b365321
msgid "``and(value, value, ...)`` -- returns the string \"1\" if all values are not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:239
# aa8f2107ec3f476fbc33276bad1c4419
msgid "``add(x, y)`` -- returns x + y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:240
# 914be60dbf29423e9bbbbed04b9df41e
msgid "``assign(id, val)`` -- assigns val to id, then returns val. id must be an identifier, not an expression"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:242
# b8d3ae56999f46b9be8e13bf13f60078
msgid "``approximate_formats()`` -- return a comma-separated list of formats that at one point were associated with the book. There is no guarantee that the list is correct, although it probably is. This function can be called in template program mode using the template ``{:'approximate_formats()'}``. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:242
# a24b319424414350b9be6eb84c64d71b
msgid "``author_links(val_separator, pair_separator)`` -- returns a string containing a list of authors and that author's link values in the form ``author1 val_separator author1link pair_separator author2 val_separator author2link`` etc. An author is separated from its link value by the ``val_separator`` string with no added spaces. ``author:linkvalue`` pairs are separated by the ``pair_separator`` string argument with no added spaces. It is up to you to choose separator strings that do not occur in author names or links. An author is included even if the author link is empty."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:243
# 2f41261a60aa4a698b6292309330a3e7
msgid "``author_sorts(val_separator)`` -- returns a string containing a list of author's sort values for the authors of the book. The sort is the one in the author metadata (different from the author_sort in books). The returned list has the form author sort 1 ``val_separator`` author sort 2 etc. The author sort values in this list are in the same order as the authors of the book. If you want spaces around ``val_separator`` then include them in the separator string"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:244
# 2b45c72f230e4d7e9b6b04cf4f2346e4
msgid "``booksize()`` -- returns the value of the calibre 'size' field. Returns '' if there are no formats."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:245
# 060a57a239604df3b3e10e0e0a855e91
msgid "``cmp(x, y, lt, eq, gt)`` -- compares x and y after converting both to numbers. Returns ``lt`` if x < y. Returns ``eq`` if x == y. Otherwise returns ``gt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:246
# 115cdb9ce2624611889937071d40dc95
msgid "``current_library_name() -- `` return the last name on the path to the current calibre library. This function can be called in template program mode using the template ``{:'current_library_name()'}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:247
# e6e90084bfa64f37877e192476984936
msgid "``current_library_path() -- `` return the path to the current calibre library. This function can be called in template program mode using the template ``{:'current_library_path()'}``.."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:248
# 45fafbb58f9f453e951d8bb88eabb1d3
msgid "``days_between(date1, date2)`` -- return the number of days between ``date1`` and ``date2``. The number is positive if ``date1`` is greater than ``date2``, otherwise negative. If either ``date1`` or ``date2`` are not dates, the function returns the empty string."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:249
# 613ceffa26f747dfb3e735b57c0891a6
msgid "``divide(x, y)`` -- returns x / y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:250
# d963d0582b95441191d057150a9e2057
msgid "``eval(string)`` -- evaluates the string as a program, passing the local variables (those ``assign`` ed to). This permits using the template processor to construct complex results from local variables. Because the `{` and `}` characters are special, you must use `[[` for the `{` character and `]]` for the '}' character; they are converted automatically. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:251
# 7915c185fb1e48878285a88b555360c5
msgid "``field(name)`` -- returns the metadata field named by ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:252
# f25c77ad154f4055923726113aba86f4
msgid "``first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)`` -- compares \"val < cmpN\" in sequence, returning resultN for the first comparison that succeeds. Returns else_result if no comparison succeeds. Example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:256
# 47ed330047eb4090adb3c1d6bde043cb
msgid "returns \"large\". The same example with a first value of 16 returns \"giant\". * ``first_non_empty(value, value, ...)`` -- returns the first value that is not empty. If all values are empty, then the empty value is returned. You can have as many values as you want. * ``format_date(x, date_format)`` -- format_date(val, format_string) -- format the value, which must be a date field, using the format_string, returning a string. The formatting codes are::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:280
# be0b7885c57c47dca42f3b63fadf63a5
msgid "You might get unexpected results if the date you are formatting contains localized month names, which can happen if you changed the format tweaks to contain MMMM. In this case, instead of using something like ``{pubdate:format_date(yyyy)}``, write the template using template program mode as in ``{:'format_date(raw_field('pubdate'),'yyyy')'}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:282
# 5a8020fdab6a4a839bf1294bbae6396f
msgid "finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and suffix to a value in the same way as done in a template like ``{series_index:05.2f| - |- }``. This function is provided to ease conversion of complex single-function- or template-program-mode templates to :ref:`general program mode <general_mode>` (see below) to take advantage of GPM template compilation. For example, the following program produces the same output as the above template::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:286
# 1a88bf8d807b4b73b875d9730728889d
msgid "Another example: for the template ``{series:re(([^\\s])[^\\s]+(\\s|$),\\1)}{series_index:0>2s| - | - }{title}`` use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:295
# 7e7181d599d74572b8e12990e62187db
msgid "``formats_modtimes(date_format)`` -- return a comma-separated list of colon_separated items representing modification times for the formats of a book. The date_format parameter specifies how the date is to be formatted. See the date_format function for details. You can use the select function to get the mod time for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:296
# df5741e0cb37412696db8aca0e83c6a9
msgid "``formats_paths()`` -- return a comma-separated list of colon_separated items representing full path to the formats of a book. You can use the select function to get the path for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:297
# 5a80a4d5e77c4cac820237c4af6bede4
msgid "``formats_sizes()`` -- return a comma-separated list of colon_separated items representing sizes in bytes of the formats of a book. You can use the select function to get the size for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:298
# c7aef30e1eb045ebb21335bca818d8e8
msgid "``has_cover()`` -- return ``Yes`` if the book has a cover, otherwise return the empty string"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:299
# c0c20e975e5041a492b605aa1364b163
msgid "``not(value)`` -- returns the string \"1\" if the value is empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:300
# d3fb3afe8f9f4fdd83bb781300cb42fc
msgid "``list_difference(list1, list2, separator)`` -- return a list made by removing from `list1` any item found in `list2`, using a case-insensitive compare. The items in `list1` and `list2` are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:301
# 39f7855f7d964a3da97e7c0edead9072
msgid "``list_equals(list1, sep1, list2, sep2, yes_val, no_val)`` -- return `yes_val` if `list1` and `list2` contain the same items, otherwise return `no_val`. The items are determined by splitting each list using the appropriate separator character (`sep1` or `sep2`). The order of items in the lists is not relevant. The compare is case insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:302
# 8cee8b90ce0a485bbe895915ee104428
msgid "``list_intersection(list1, list2, separator)`` -- return a list made by removing from `list1` any item not found in `list2`, using a case-insensitive compare. The items in `list1` and `list2` are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:303
# 7f057c3d8c074a8a827ad9366c5443c6
msgid "``list_re(src_list, separator, include_re, opt_replace)`` -- Construct a list by first separating `src_list` into items using the `separator` character. For each item in the list, check if it matches `include_re`. If it does, then add it to the list to be returned. If `opt_replace` is not the empty string, then apply the replacement before adding the item to the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:304
# 46e1fd9f42d3400db96fb82245651572
msgid "``list_re_group(src_list, separator, include_re, search_re, template_for_group_1, for_group_2, ...)`` -- Like list_re except replacements are not optional. It uses re_group(item, search_re, template ...) when doing the replacements."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:305
# a37989cffa424039b6369ede3c26c84f
msgid "``list_sort(list, direction, separator)`` -- return list sorted using a case-insensitive sort. If `direction` is zero, the list is sorted ascending, otherwise descending. The list items are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:306
# dc029d0d94d046f1b515c4db6d1cf7a0
msgid "``list_union(list1, list2, separator)`` -- return a list made by merging the items in list1 and list2, removing duplicate items using a case-insensitive compare. If items differ in case, the one in list1 is used. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:307
# 6ad9f5fa8ed5405cb03948fdb9159515
msgid "``multiply(x, y)`` -- returns x * y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:308
# f8c09a1cff094c89968f447c43ebdab8
msgid "``ondevice()`` -- return the string \"Yes\" if ondevice is set, otherwise return the empty string"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:309
# 1166cf8dc42540f597726beda9e48c3a
msgid "``or(value, value, ...)`` -- returns the string \"1\" if any value is not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:310
# 2184f92082ea49f2ab7a1e983bffab3a
msgid "``print(a, b, ...)`` -- prints the arguments to standard output. Unless you start calibre from the command line (``calibre-debug -g``), the output will go to a black hole."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:311
# 4bcb28c14613490598090ef32afee4f5
msgid "``raw_field(name)`` -- returns the metadata field named by name without applying any formatting."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:312
# 2b5b24d0cee24001bca52fe8c63356e4
msgid "``raw_list(name, separator)`` -- returns the metadata list named by name without applying any formatting or sorting and with items separated by separator."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:313
# db778004ea0c4da7b665e74cb9c3e366
msgid "``re_group(val, pattern, template_for_group_1, for_group_2, ...)`` --  return a string made by applying the reqular expression pattern to the val and replacing each matched instance with the string computed by replacing each matched group by the value returned by the corresponding template. The original matched value for the group is available as $. In template program mode, like for the template and the eval functions, you use [[ for { and ]] for }. The following example in template program mode looks for series with more than one word and uppercases the first word::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:317
# d504c2c4ee924dcda653c6bae79eb734
msgid "``series_sort()`` -- returns the series sort value."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:318
# 0ac143657a1948a28856350152cf41a2
msgid "``strcat(a, b, ...)`` -- can take any number of arguments. Returns a string formed by concatenating all the arguments."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:319
# 2b1f39f456f548a3b5b09d3a25ebade2
msgid "``strcat_max(max, string1, prefix2, string2, ...)`` -- Returns a string formed by concatenating the arguments. The returned value is initialized to string1. `Prefix, string` pairs are added to the end of the value as long as the resulting string length is less than `max`. String1 is returned even if string1 is longer than max. You can pass as many `prefix, string` pairs as you wish."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:320
# 09345343d66e41f794bfe1cff3b87e0e
msgid "``strcmp(x, y, lt, eq, gt)`` -- does a case-insensitive comparison x and y as strings. Returns ``lt`` if x < y. Returns ``eq`` if x == y. Otherwise returns ``gt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:321
# 2df69b90eff14711895157ceddcca195
msgid "``strlen(a)`` -- Returns the length of the string passed as the argument."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:322
# 5048bd38166b431a9e358dd37862bbe1
msgid "``substr(str, start, end)`` -- returns the ``start``'th through the ``end``'th characters of ``str``. The first character in ``str`` is the zero'th character. If end is negative, then it indicates that many characters counting from the right. If end is zero, then it indicates the last character. For example, ``substr('12345', 1, 0)`` returns ``'2345'``, and ``substr('12345', 1, -1)`` returns ``'234'``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:323
# c166b15a11654ff8b47ed7a76a5674c2
msgid "``subtract(x, y)`` -- returns x - y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:324
# 8c30d2b297e9479498ed6dd67ef587ec
msgid "``today()`` -- return a date string for today. This value is designed for use in format_date or days_between, but can be manipulated like any other string. The date is in ISO format."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:325
# 56c863798d8f4d26a1a91e380cb54f26
msgid "``template(x)`` -- evaluates x as a template. The evaluation is done in its own context, meaning that variables are not shared between the caller and the template evaluation. Because the `{` and `}` characters are special, you must use `[[` for the `{` character and `]]` for the '}' character; they are converted automatically. For example, ``template('[[title_sort]]') will evaluate the template ``{title_sort}`` and return its value. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:330
# c9049d22d22b44a4a581a1a7f64ed490
msgid "Function classification"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:341
# 8325d3fcbfad4997ac064f0a835a4661
msgid "Using general program mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:343
# 8799caf09488487d968b3e04f68aad1f
msgid "For more complicated template programs, it is sometimes easier to avoid template syntax (all the `{` and `}` characters), instead writing a more classical-looking program. You can do this in calibre by beginning the template with `program:`. In this case, no template processing is done. The special variable `$` is not set. It is up to your program to produce the correct results."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:345
# 448027c0aed54978a1896e052c4783f6
msgid "One advantage of `program:` mode is that the brackets are no longer special. For example, it is not necessary to use `[[` and `]]` when using the `template()` function. Another advantage is that program mode templates are compiled to Python and can run much faster than  templates in the other two modes. Speed improvement depends on the complexity of the templates; the more complicated the template the more the improvement. Compilation is turned off or on using the tweak ``compile_gpm_templates`` (Compile General Program Mode templates to Python). The main reason to turn off compilation is if a compiled template does not work, in which case please file a bug report."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:347
# 6a3adfffac9346d695698e7d44baea98
msgid "The following example is a `program:` mode implementation of a recipe on the MobileRead forum: \"Put series into the title, using either initials or a shortened form. Strip leading articles from the series name (any).\" For example, for the book The Two Towers in the Lord of the Rings series, the recipe gives `LotR [02] The Two Towers`. Using standard templates, the recipe requires three custom columns and a plugboard, as explained in the following:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:349
# 57dfebede33b4826aafbdc7560f4e767
msgid "The solution requires creating three composite columns. The first column is used to remove the leading articles. The second is used to compute the 'shorten' form. The third is to compute the 'initials' form. Once you have these columns, the plugboard selects between them. You can hide any or all of the three columns on the library view."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:351
# 0b476d32bb26447d8ad5f68b21ebaa38
msgid "First column: Name: #stripped_series. Template: {series:re(^(A|The|An)\\s+,)||}"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:355
# 8bec3faedc974c44bbd0319a9dd25a71
msgid "Second column (the shortened form): Name: #shortened. Template: {#stripped_series:shorten(4,-,4)}"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:359
# ad4bd0f2233e4c75ada18d44748521da
msgid "Third column (the initials form): Name: #initials. Template: {#stripped_series:re(([^\\s])[^\\s]+(\\s|$),\\1)}"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:363
# 50e0cd0c175440b78be5a33aa0a8f005
msgid "Plugboard expression: Template:{#stripped_series:lookup(.\\s,#initials,.,#shortened,series)}{series_index:0>2.0f| [|] }{title} Destination field: title"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:367
# bc43aad96d164c19a2cc76c8eef72239
msgid "This set of fields and plugboard produces: Series: The Lord of the Rings Series index: 2 Title: The Two Towers Output: LotR [02] The Two Towers"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:373
# 5e9869f021e24a809b03272781efa140
msgid "Series: Dahak Series index: 1 Title: Mutineers Moon Output: Dahak [01] Mutineers Moon"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:378
# 5331a23ae9e04e5da0587ed0c1822c8b
msgid "Series: Berserkers Series Index: 4 Title: Berserker Throne Output: Bers-kers [04] Berserker Throne"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:383
# 12fe8c479cf046179845488b5f858c6b
msgid "Series: Meg Langslow Mysteries Series Index: 3 Title: Revenge of the Wrought-Iron Flamingos Output: MLM [03] Revenge of the Wrought-Iron Flamingos"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:388
# 2080295b7c734ce49f9abf595b3376e0
msgid "The following program produces the same results as the original recipe, using only one custom column to hold the results of a program that computes the special title value::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:425
# 099b55b23767456eb397131fad70fbc0
msgid "It would be possible to do the above with no custom columns by putting the program into the template box of the plugboard. However, to do so, all comments must be removed because the plugboard text box does not support multi-line editing. It is debatable whether the gain of not having the custom column is worth the vast increase in difficulty caused by the program being one giant line."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:429
# 6bdbf9d82ccf48e1851ee530c1014cb7
msgid "User-defined Template Functions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:431
# cd3ff2e239c2400aa6a4f6b57d19e619
msgid "You can add your own functions to the template processor. Such functions are written in python, and can be used in any of the three template programming modes. The functions are added by going to Preferences -> Advanced -> Template Functions. Instructions are shown in that dialog."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:434
# 26ed92f70ffa400795d7119a72b62799
msgid "Special notes for save/send templates"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:436
# 608e5c39f9c444b6b9703d1a6db2e6da
msgid "Special processing is applied when a template is used in a `save to disk` or `send to device` template. The values of the fields are cleaned, replacing characters that are special to file systems with underscores, including slashes. This means that field text cannot be used to create folders. However, slashes are not changed in prefix or suffix strings, so slashes in these strings will cause folders to be created. Because of this, you can create variable-depth folder structure."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:438
# a18206f737fb46faa4e10e79f9381267
msgid "For example, assume we want the folder structure `series/series_index - title`, with the caveat that if series does not exist, then the title should be in the top folder. The template to do this is::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:442
# b6e9f114e0294ac3b03622eb924db8d5
msgid "The slash and the hyphen appear only if series is not empty."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:444
# b4f320955e86488cb716271e57e4037a
msgid "The lookup function lets us do even fancier processing. For example, assume that if a book has a series, then we want the folder structure `series/series index - title.fmt`. If the book does not have a series, then we want the folder structure `genre/author_sort/title.fmt`. If the book has no genre, we want to use 'Unknown'. We want two completely different paths, depending on the value of series."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:449
# 0b381a3f59c44babaf888fee121dcee1
msgid "To accomplish this, we:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:447
# d0702d46bb004e1997c53cc152f9269d
msgid "Create a composite field (call it AA) containing ``{series}/{series_index} - {title'}``. If the series is not empty, then this template will produce `series/series_index - title`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:448
# 703e86dfeea6427c9d02638d71c5f6a7
msgid "Create a composite field (call it BB) containing ``{#genre:ifempty(Unknown)}/{author_sort}/{title}``. This template produces `genre/author_sort/title`, where an empty genre is replaced wuth `Unknown`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:449
# f74683f1a4dd44e4bc195d5bb483fba6
msgid "Set the save template to ``{series:lookup(.,AA,BB)}``. This template chooses composite field AA if series is not empty, and composite field BB if series is empty. We therefore have two completely different save paths, depending on whether or not `series` is empty."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:452
# 9aacc8e6f6a849bd9016ec38d38f9f79
msgid "Templates and Plugboards"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:454
# 396afebb748946d296f4ad435bf08710
msgid "Plugboards are used for changing the metadata written into books during send-to-device and save-to-disk operations. A plugboard permits you to specify a template to provide the data to write into the book's metadata. You can use plugboards to modify the following fields: authors, author_sort, language, publisher, tags, title, title_sort. This feature helps people who want to use different metadata in books on devices to solve sorting or display issues."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:456
# e90ab96866b542c0a2c80226864866d7
msgid "When you create a plugboard, you specify the format and device for which the plugboard is to be used. A special device is provided, save_to_disk, that is used when saving formats (as opposed to sending them to a device). Once you have chosen the format and device, you choose the metadata fields to change, providing templates to supply the new values. These templates are `connected` to their destination fields, hence the name `plugboards`. You can, of course, use composite columns in these templates."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:458
# 8d3dd80b438c498bb411da7bfd716794
msgid "When a plugboard might apply (content server, save to disk, or send to device), calibre searches the defined plugboards to choose the correct one for the given format and device. For example, to find the appropriate plugboard for an EPUB book being sent to an ANDROID device, calibre searches the plugboards using the following search order:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:460
# 9599386fbdb14f7dae76a40818265559
msgid "a plugboard with an exact match on format and device, e.g., ``EPUB`` and ``ANDROID``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:461
# cc1f6bc3a4ab4de8b507a61f033c0941
msgid "a plugboard with an exact match on format and the special ``any device`` choice, e.g., ``EPUB`` and ``any device``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:462
# 7fb76ac5465e480096f33b4526cfdc09
msgid "a plugboard with the special ``any format`` choice and an exact match on device, e.g., ``any format`` and ``ANDROID``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:463
# 930dbb4cb382434191331f7d2d919329
msgid "a plugboard with ``any format`` and ``any device``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:465
# ae6dfb41406d43d4952dbe3ac094116f
msgid "The tags and authors fields have special treatment, because both of these fields can hold more than one item. A book can have many tags and many authors. When you specify that one of these two fields is to be changed, the template's result is examined to see if more than one item is there. For tags, the result is cut apart wherever calibre finds a comma. For example, if the template produces the value ``Thriller, Horror``, then the result will be two tags, ``Thriller`` and ``Horror``. There is no way to put a comma in the middle of a tag."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:467
# efc828cfdbb144ca81f9e306c71aa47a
msgid "The same thing happens for authors, but using a different character for the cut, a `&` (ampersand) instead of a comma. For example, if the template produces the value ``Blogs, Joe&Posts, Susan``, then the book will end up with two authors, ``Blogs, Joe`` and ``Posts, Susan``. If the template produces the value ``Blogs, Joe;Posts, Susan``, then the book will have one author with a rather strange name."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:469
# 06ca8590e0aa4ff0914a29f8d0b32d2e
msgid "Plugboards affect the metadata written into the book when it is saved to disk or written to the device. Plugboards do not affect the metadata used by ``save to disk`` and ``send to device`` to create the file names. Instead, file names are constructed using the templates entered on the appropriate preferences window."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:472
# ec9fd30d5604409c849415fda8212b97
msgid "Helpful Tips"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:474
# 8bb183ad62564239ad354d29caf243c4
msgid "You might find the following tips useful."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:476
# 50a4402f12084bf2a3f393b30a2d6ee2
msgid "Create a custom composite column to test templates. Once you have the column, you can change its template simply by double-clicking on the column. Hide the column when you are not testing."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:477
# b9ba8dcfe4b54eadb39db9899aabf11d
msgid "Templates can use other templates by referencing a composite custom column."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:478
# 293cd67047564724a458257b49a73230
msgid "In a plugboard, you can set a field to empty (or whatever is equivalent to empty) by using the special template ``{}``. This template will always evaluate to an empty string."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:479
# dfb14c84ec114fa9b58ab684a24bf8b6
msgid "The technique described above to show numbers even if they have a zero value works with the standard field series_index."
msgstr ""

