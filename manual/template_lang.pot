# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.10.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-14 08:53+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/template_lang.rst:4
# d02ac4588da0424ab5fd203382224abf
msgid "The calibre template language"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:6
# 931c497fb137469abeb327a1fe5679e5
msgid "The calibre template language is used in various places. It is used to control the folder structure and file name when saving files from the calibre library to the disk or eBook reader. It is also used to define \"virtual\" columns that contain data from other columns and so on."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:9
# 4a76ad3b6e3842d4b6660090d2fa02e2
msgid "The basic template language is very simple, but has very powerful advanced features. The basic idea is that a template consists of text and names in curly brackets that are then replaced by the corresponding metadata from the book being processed. So, for example, the default template used for saving books to device in calibre is::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:13
#: ../../home/kovid/work/calibre/manual/template_lang.rst:21
# b0123b49bc6944b397cc848321b42d84
# 42f594f3a00e4d288cd4eb8789e63acd
msgid "For the book \"The Foundation\" by \"Isaac Asimov\" it will become::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:17
# 731df01ef85d462186d1d42779b590ce
msgid "The slashes are text, which is put into the template where it appears. For example, if your template is::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:25
# 3a0b9900304e43e68b8fc4c2e31def29
msgid "You can use all the various metadata fields available in calibre in a template, including any custom columns you have created yourself. To find out the template name for a column simply hover your mouse over the column header. Names for custom fields (columns you have created yourself) always have a # as the first character. For series type custom fields, there is always an additional field named ``#seriesname_index`` that becomes the series index for that series. So if you have a custom series field named ``#myseries``, there will also be a field named ``#myseries_index``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:27
# f348d88eca954ab1970dfc67428cdf68
msgid "In addition to the column based fields, you also can use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:32
# e4efbaaaf80e4721b70347704645281a
msgid "If a particular book does not have a particular piece of metadata, the field in the template is automatically removed for that book. Consider, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:36
# 706fa2c08173478c89a68c5956df8057
msgid "If a book has a series, the template will produce::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:40
# bd9fdecfdfe04eae9c359110ad800f22
msgid "and if a book does not have a series::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:44
# 56aaeb2390e64209af4cf42ff939274b
msgid "(calibre automatically removes multiple slashes and leading or trailing spaces)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:47
# 3f03c227804c4a7bad960fec5ed75f36
msgid "Advanced formatting"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:49
# 7304d3c5607e496abb9c3e60b59fc42f
msgid "You can do more than just simple substitution with the templates. You can also conditionally include text and control how the substituted data is formatted."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:51
# 084c4742656b4b91b9286d41674415f2
msgid "First, conditionally including text. There are cases where you might want to have text appear in the output only if a field is not empty. A common case is ``series`` and ``series_index``, where you want either nothing or the two values with a hyphen between them. Calibre handles this case using a special field syntax."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:53
# 3adaf7a2f21a4adb82ce3cabebcd7b72
msgid "For example, assume you want to use the template::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:57
# 8c7bf51a245642a1bd6b6c806ae30b17
msgid "If the book has no series, the answer will be ``- - title``. Many people would rather the result be simply ``title``, without the hyphens. To do this, use the extended syntax ``{field:|prefix_text|suffix_text}``. When you use this syntax, if field has the value SERIES then the result will be ``prefix_textSERIESsuffix_text``. If field has no value, then the result will be the empty string (nothing); the prefix and suffix are ignored. The prefix and suffix can contain blanks. **Do not use subtemplates (`{ ... }`) or functions (see below) as the prefix or the suffix.**"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:59
# f2dd63a7e340482fac1610a49093f226
msgid "Using this syntax, we can solve the above series problem with the template::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:63
# 2002af053b0f46ac87ae4cc6b1cfafc5
msgid "The hyphens will be included only if the book has a series index, which it will have only if it has a series."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:65
# 2f2c57308a3744a49f4860dfc5071875
msgid "Notes: you must include the : character if you want to use a prefix or a suffix. You must either use no \\| characters or both of them; using one, as in ``{field:| - }``, is not allowed. It is OK not to provide any text for one side or the other, such as in ``{series:|| - }``. Using ``{title:||}`` is the same as using ``{title}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:67
# eb2fd14f24a14037836b55b5b2db7ed9
msgid "Second: formatting. Suppose you wanted to ensure that the series_index is always formatted as three digits with leading zeros. This would do the trick::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:71
# 7537db234124426dbf930d11af6a1811
msgid "If instead of leading zeros you want leading spaces, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:75
# c6c46e66198f43e8a59398adc4db60d0
msgid "For trailing zeros, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:79
# 0b5b7d0a913b4f139cdf3883ebb43241
msgid "If you use series indices with sub values (e.g., 1.1), you might want to ensure that the decimal points line up. For example, you might want the indices 1 and 2.5 to appear as 01.00 and 02.50 so that they will sort correctly. To do this, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:83
# c1c9a184627a433aae016934d04f0a9e
msgid "If you want only the first two letters of the data, use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:87
# 2c78f32cdc644d7dbf23386c177f2b34
msgid "The calibre template language comes from python and for more details on the syntax of these advanced formatting operations, look at the `Python documentation <https://docs.python.org/2/library/string.html#format-string-syntax>`_."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:90
# a47609383e934fc28aac8e2241033653
msgid "Advanced features"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:93
# 5c42599577dd48c5a41bdaaec11d5aae
msgid "Using templates in custom columns"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:95
# 5c837e55f78a4c009e5dafcf456fc250
msgid "There are sometimes cases where you want to display metadata that calibre does not normally display, or to display data in a way different from how calibre normally does. For example, you might want to display the ISBN, a field that calibre does not display. You can use custom columns for this by creating a column with the type 'column built from other columns' (hereafter called composite columns), and entering a template. Result: calibre will display a column showing the result of evaluating that template. To display the ISBN, create the column and enter ``{identifiers:select(isbn)}`` into the template box. To display a column containing the values of two series custom columns separated by a comma, use ``{#series1:||,}{#series2}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:97
# 99e35ca8a5694000a1ab2d815088403f
msgid "Composite columns can use any template option, including formatting."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:99
# bfa155498b934a6a8240dbae7fb7e37d
msgid "You cannot change the data contained in a composite column. If you edit a composite column by double-clicking on any item, you will open the template for editing, not the underlying data. Editing the template on the GUI is a quick way of testing and changing composite columns."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:102
# 423ae6c7fbef46f59279f53fa667e255
msgid "Using functions in templates - single-function mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:104
# c8089c8e60124af88c585db6d0071ecc
msgid "Suppose you want to display the value of a field in upper case, when that field is normally in title case. You can do this (and many more things) using the functions available for templates. For example, to display the title in upper case, use ``{title:uppercase()}``. To display it in title case, use ``{title:titlecase()}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:106
# 8ff7efd4bab346238565123005a6f231
msgid "Function references appear in the format part, going after the ``:`` and before the first ``|`` or the closing ``}``. If you have both a format and a function reference, the function comes after another ``:``. Functions must always end with ``()``. Some functions take extra values (arguments), and these go inside the ``()``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:108
# ee4340fcdda347f59c1546e589f30e17
msgid "Functions are always applied before format specifications. See further down for an example of using both a format and a function, where this order is demonstrated."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:110
# 8950ee3e2d4d4363ab28c4d2d56fdd50
msgid "The syntax for using functions is ``{field:function(arguments)}``, or ``{field:function(arguments)|prefix|suffix}``. Arguments are separated by commas. Commas inside arguments must be preceeded by a backslash ( '\\\\' ). The last (or only) argument cannot contain a closing parenthesis ( ')' ). Functions return the value of the field used in the template, suitably modified."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:112
# 5e870b938a684dd98489227b5dff4a6a
msgid "Important: If you have programming experience, please note that the syntax in this mode (single function) is not what you might expect. Strings are not quoted. Spaces are significant. All arguments must be constants; there is no sub-evaluation. **Do not use subtemplates (`{ ... }`) as function arguments.** Instead, use :ref:`template program mode <template_mode>` and :ref:`general program mode <general_mode>`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:114
# 51e368e230e1474caf67e964312cd045
msgid "Many functions use regular expressions. In all cases, regular expression matching is case-insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:116
# 791acfc51650400ab5fb8102aea7bc5e
msgid "The functions available are listed below. Note that the definitive documentation for functions is available in the section :ref:`Function classification <template_functions_reference>`:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:118
# 62c943d0e1564aa094c1f7811277c8e7
msgid "``lowercase()``   -- return value of the field in lower case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:119
# 402406562afc44a4ac564150b118ae75
msgid "``uppercase()``   -- return the value of the field in upper case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:120
# f48f72570c31451596a13a17aef1309c
msgid "``titlecase()``   -- return the value of the field in title case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:121
# e08ed881b8e84fa88e06261ab4d5ad11
msgid "``capitalize()``  -- return the value with the first letter upper case and the rest lower case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:122
# 2f0c60bbbfec42108127921f66f8beda
msgid "``contains(pattern, text if match, text if not match)`` -- checks if field contains matches for the regular expression `pattern`. Returns `text if match` if matches are found, otherwise it returns `text if no match`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:123
# 2f0a671415b84c9abf3aa8bacd6510f2
msgid "``count(separator)`` -- interprets the value as a list of items separated by `separator`, returning the number of items in the list. Most lists use a comma as the separator, but authors uses an ampersand. Examples: `{tags:count(,)}`, `{authors:count(&)}`"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:124
# fdfeba40edde462ebb45a6e5cfbd3be0
msgid "``format_number(template)`` -- interprets the value as a number and format that number using a python formatting template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The field_name part of the template must be a 0 (zero) (the \"{0:\" in the above examples). See the template language and python documentation for more examples. Returns the empty string if formatting fails."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:125
# 4cb1d1e5cf2b4e3eb171baae1df9f8fe
msgid "``human_readable()`` -- expects the value to be a number and returns a string representing that number in KB, MB, GB, etc."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:126
# 29d54429b89c497b84db5a178dff2fd1
msgid "``ifempty(text)`` -- if the field is not empty, return the value of the field. Otherwise return `text`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:127
# 61874f03df2642f0a5005ec29f935471
msgid "``in_list(separator, pattern, found_val, not_found_val)`` -- interpret the field as a list of items separated by `separator`, comparing the `pattern` against each value in the list. If the pattern matches a value, return `found_val`, otherwise return `not_found_val`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:128
# ed3211e9a7b44a2d9ff6c3c10a96094f
msgid "``language_codes(lang_strings)`` -- return the language codes for the strings passed in `lang_strings`. The strings must be in the language of the current locale. `Lang_strings` is a comma-separated list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:129
# d93fac63a11e47709254f7464606cba9
msgid "``language_strings(lang_codes, localize)`` -- return the strings for the language codes passed in `lang_codes`. If `localize` is zero, return the strings in English. If localize is not zero, return the strings in the language of the current locale. `Lang_codes` is a comma-separated list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:130
# 82cc2664624b4a6e8b3a379a1a83eb76
msgid "``list_item(index, separator)`` -- interpret the field as a list of items separated by `separator`, returning the `index`th item. The first item is number zero. The last item can be returned using `list_item(-1,separator)`. If the item is not in the list, then the empty value is returned. The separator has the same meaning as in the `count` function."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:131
# 373bcc5f5d8e4d1e893db1af6e16676c
msgid "``lookup(pattern, field, pattern, field, ..., else_field)`` -- like switch, except the arguments are field (metadata) names, not text. The value of the appropriate field will be fetched and used. Note that because composite columns are fields, you can use this function in one composite field to use the value of some other composite field. This is extremely useful when constructing variable save paths (more later)."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:132
# 272b7f37d1874fa5a75cb21d00387c6c
msgid "``re(pattern, replacement)`` -- return the field after applying the regular expression. All instances of `pattern` are replaced with `replacement`. As in all of calibre, these are python-compatible regular expressions."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:133
# 789a5c6dc6c44f458c0a611dce2c5821
msgid "``select(key)`` -- interpret the field as a comma-separated list of items, with the items being of the form \"id:value\". Find the pair with the id equal to key, and return the corresponding value. This function is particularly useful for extracting a value such as an isbn from the set of identifiers for a book."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:134
# 55ac1b66f2364f4d874e5fd3c76caf01
msgid "``shorten(left chars, middle text, right chars)`` -- Return a shortened version of the field, consisting of `left chars` characters from the beginning of the field, followed by `middle text`, followed by `right chars` characters from the end of the string. `Left chars` and `right chars` must be integers. For example, assume the title of the book is `Ancient English Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most 15 characters. If you use ``{title:shorten(9,-,5)}``, the result will be `Ancient E-nhoe`. If the field's length is less than ``left chars`` + ``right chars`` + the length of ``middle text``, then the field will be used intact. For example, the title `The Dome` would not be changed."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:135
# db5e022f5c71493c97341ed81854909e
msgid "``str_in_list(val, separator, string, found_val, not_found_val)`` -- treat val as a list of items separated by separator, comparing the string against each value in the list. If the string matches a value, return found_val, otherwise return not_found_val. If the string contains separators, then it is also treated as a list and each value is checked."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:136
# f6d6e5377ff24eff8a8ca7ffca96c3fc
msgid "``subitems(val, start_index, end_index)`` -- This function is used to break apart lists of tag-like hierarchical items such as genres. It interprets the value as a comma-separated list of tag-like items, where each item is a period-separated list. Returns a new list made by first finding all the period-separated tag-like items, then for each such item extracting the components from `start_index` to `end_index`, then combining the results back together. The first component in a period-separated list has an index of zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:146
# 2de1bfa855c64aaeb8d46bc9474ac34a
msgid "``sublist(val, start_index, end_index, separator)`` -- interpret the value as a list of items separated by `separator`, returning a new list made from the items from `start_index`to `end_index`. The first item is number zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples assuming that the tags column (which is comma-separated) contains \"A, B ,C\"::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:152
# abcf4b2dd9994a078088546533ba88ca
msgid "``swap_around_comma(val) `` -- given a value of the form ``B, A``, return ``A B``. This is most useful for converting names in LN, FN format to FN LN. If there is no comma, the function returns val unchanged."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:153
# 1ccc6bf359664ff09c07eff67a957c2a
msgid "``switch(pattern, value, pattern, value, ..., else_value)`` -- for each ``pattern, value`` pair, checks if the field matches the regular expression ``pattern`` and if so, returns that ``value``. If no ``pattern`` matches, then ``else_value`` is returned. You can have as many ``pattern, value`` pairs as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:154
# 7f34b936581444a7874f17a13b7068c4
msgid "``test(text if not empty, text if empty)`` -- return `text if not empty` if the field is not empty, otherwise return `text if empty`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:155
# 58737884d4b048b288474d889a59e2c5
msgid "``transliterate()`` -- Returns a string in a latin alphabet formed by approximating the sound of the words in the source field. For example, if the source field is ``Фёдор Миха́йлович Достоевский`` the function returns ``Fiodor Mikhailovich Dostoievskii``.'"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:157
# 6f9e787d06464b8c9ed397d72473aa70
msgid "Now, what about using functions and formatting in the same field. Suppose you have an integer custom column called ``#myint`` that you want to see with leading zeros, as in ``003``. To do this, you would use a format of ``0>3s``. However, by default, if a number (integer or float) equals zero then the field produces the empty value, so zero values will produce nothing, not ``000``. If you really want to see ``000`` values, then you use both the format string and the ``ifempty`` function to change the empty value back to a zero. The field reference would be::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:161
# 68771e44e9db4cf4810de9b28e895535
msgid "Note that you can use the prefix and suffix as well. If you want the number to appear as ``[003]`` or ``[000]``, then use the field::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:168
# b5109641e40f4773ba769c414aa779e6
msgid "Using functions in templates - template program mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:170
# c8bd8fa805da4c779d2e407b33fa995c
msgid "The template language program mode differs from single-function mode in that it permits you to write template expressions that refer to other metadata fields, modify values, and do arithmetic. It is a reasonably complete programming language."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:172
# 7b25d39bfd2f422684da47323dfebade
msgid "You can use the functions documented above in template program mode. See below for details."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:174
# d1951282a90740a0a2fa6c72e4a70460
msgid "Beginning with an example, assume that you want your template to show the series for a book if it has one, otherwise show the value of a custom field #genre. You cannot do this in the basic language because you cannot make reference to another metadata field within a template expression. In program mode, you can. The following expression works::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:178
# 04d0cb099ca24233980916a5b609142e
msgid "The example shows several things:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:180
# a4626c5b7ac640b791f83b89a86ff7be
msgid "program mode is used if the expression begins with ``:'`` and ends with ``'``. Anything else is assumed to be single-function."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:181
# 3d99bfae134c427da1d4bdeb493d393b
msgid "the variable ``$`` stands for the field the expression is operating upon, ``#series`` in this case."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:182
# af42f4232a8b4b21ad927b79788cd664
msgid "functions must be given all their arguments. There is no default value. For example, the standard built-in functions must be given an additional initial parameter indicating the source field, which is a significant difference from single-function mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:183
# 832309ace5e44151986e7667ee03d5bc
msgid "white space is ignored and can be used anywhere within the expression."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:184
# 80676c720d1e45b1aaf08e84c1e28cf3
msgid "constant strings are enclosed in matching quotes, either ``'`` or ``\"``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:186
# 718fc64ecc1e45e68640311275678457
msgid "The language is similar to ``functional`` languages in that it is built almost entirely from functions. A statement is a function. An expression is a function. Constants and identifiers can be thought of as functions returning the value indicated by the constant or stored in the identifier."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:188
# 2a12ac6279494593b88b53d60bb95aee
msgid "The syntax of the language is shown by the following grammar::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:198
# 38261c1da0e84f25ba238eb14e2ea055
msgid "Comments are lines with a '#' character at the beginning of the line."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:200
# 757a8231af32497b9dde8da9653c4513
msgid "An ``expression`` always has a value, either the value of the constant, the value contained in the identifier, or the value returned by a function. The value of a ``statement`` is the value of the last expression in the sequence of statements. As such, the value of the program (statement)::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:204
# 8463c5d4dcc84d2bb744d71bb9ca2ca9
msgid "is 3."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:206
# dc4f8342a5bb4e34a4174d6e516751f1
msgid "Another example of a complex but rather silly program might help make things clearer::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:217
# 84420559b9a341109991576a966a9dba
msgid "This program does the following:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:219
# 049036e1d8a54cfaa2db9b6963b78f94
msgid "specify that the field being looked at is series_index. This sets the value of the variable ``$``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:220
# 73dddb57498941b3864eb8e7f62269df
msgid "calls the ``substr`` function, which takes 3 parameters ``(str, start, end)``. It returns a string formed by extracting the start through end characters from string, zero-based (the first character is character zero). In this case the string will be computed by the ``strcat`` function, the start is 0, and the end is 6. In this case it will return the first 6 characters of the string returned by ``strcat``, which must be evaluated before substr can return."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:221
# 1304a6540c5440138a80947fbacf2bcc
msgid "calls the ``strcat`` (string concatenation) function. Strcat accepts 1 or more arguments, and returns a string formed by concatenating all the values. In this case there are three arguments. The first parameter is the value in ``$``, which here is the value of ``series_index``. The second paremeter is the constant string ``'->'``. The third parameter is the value returned by the ``cmp`` function, which must be fully evaluated before ``strcat`` can return."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:222
# c78eb2b57185463f80b53030b435f4bf
msgid "The ``cmp`` function takes 5 arguments ``(x, y, lt, eq, gt)``. It compares x and y and returns the third argument ``lt`` if x < y, the fourth argument ``eq`` if x == y, and the fifth argument ``gt`` if x > y. As with all functions, all of the parameters can be statements. In this case the first parameter (the value for ``x``) is the result of dividing the series_index by 2. The second parameter ``y`` is the constant ``1``. The third parameter ``lt`` is a statement (more later). The fourth parameter ``eq`` is the constant string ``'eq'``. The fifth parameter is the constant string ``'gt'``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:223
# 50220310d0c8402cb79f53d3e199fef9
msgid "The third parameter (the one for ``lt``) is a statement, or a sequence of expressions. Remember that a statement (a sequence of semicolon-separated expressions) is also an expression, returning the value of the last expression in the list. In this case, the program first assigns the value ``1`` to a local variable ``c``, then returns a substring made by extracting the c'th character to the end. Since c always contains the constant ``1``, the substring will return the second through end'th characters, or ``'t123'``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:224
# e3d1a62d08ee4bfa91ce1c5c1b7a6835
msgid "Once the statement providing the value to the third parameter is executed, ``cmp`` can return a value. At that point, ``strcat` can return a value, then ``substr`` can return a value. The program then terminates."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:226
# e55b9c77716a4059afcbe2db170e2694
msgid "For various values of series_index, the program returns:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:228
# 3ac544828d414959a3d486dc20b7f65a
msgid "series_index == undefined, result = ``prefix ->t123 suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:229
# da4d29e16d0d4c55812eca8bc6dfb1d7
msgid "series_index == 0.5, result = ``prefix 0.50-> suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:230
# 8256149a92574bbeb952a2e161ea8f79
msgid "series_index == 1, result = ``prefix 1->t12 suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:231
# 1f8b05a3512748e2806ad7a2c6cdd430
msgid "series_index == 2, result = ``prefix 2->eq suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:232
# dfe0fbac3ad5465ab22ea06c8b6e0667
msgid "series_index == 3, result = ``prefix 3->gt suffix``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:234
# 9c46e2938a924fbe9040af95a8447283
msgid "**All the functions listed under single-function mode can be used in program mode**. To do so, you must supply the value that the function is to act upon as the first parameter, in addition to the parameters documented above. For example, in program mode the parameters of the `test` function are ``test(x, text_if_not_empty, text_if_empty)``. The `x` parameter, which is the value to be tested, will almost always be a variable or a function call, often `field()`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:236
# 19c84dbd74324ccdaefa4ec1d7eb4e70
msgid "The following functions are available in addition to those described in single-function mode. Remember from the example above that the single-function mode functions require an additional first parameter specifying the field to operate on. With the exception of the ``id`` parameter of assign, all parameters can be statements (sequences of expressions). Note that the definitive documentation for functions is available in the section :ref:`Function classification <template_functions_reference>`:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:238
# 238188c9b83a4221853e6cf767383c15
msgid "``and(value, value, ...)`` -- returns the string \"1\" if all values are not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:239
# 12710cfe98c54ac98254b9d7fb4f5b64
msgid "``add(x, y)`` -- returns x + y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:240
# bc1249d12dc942b3a53bd2299353173c
msgid "``assign(id, val)`` -- assigns val to id, then returns val. id must be an identifier, not an expression"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:242
# 25df0ef199214caab635c146dd215131
msgid "``approximate_formats()`` -- return a comma-separated list of formats that at one point were associated with the book. There is no guarantee that the list is correct, although it probably is. This function can be called in template program mode using the template ``{:'approximate_formats()'}``. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:242
# d440f1c4e7d9409bb1c8cd801fc8a1c8
msgid "``author_links(val_separator, pair_separator)`` -- returns a string containing a list of authors and that author's link values in the form ``author1 val_separator author1link pair_separator author2 val_separator author2link`` etc. An author is separated from its link value by the ``val_separator`` string with no added spaces. ``author:linkvalue`` pairs are separated by the ``pair_separator`` string argument with no added spaces. It is up to you to choose separator strings that do not occur in author names or links. An author is included even if the author link is empty."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:243
# 8c3ef1263810406d8ff11f568fb50b81
msgid "``author_sorts(val_separator)`` -- returns a string containing a list of author's sort values for the authors of the book. The sort is the one in the author metadata (different from the author_sort in books). The returned list has the form author sort 1 ``val_separator`` author sort 2 etc. The author sort values in this list are in the same order as the authors of the book. If you want spaces around ``val_separator`` then include them in the separator string"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:244
# f8e9d5ccecc9471581fd68e607f4eda4
msgid "``booksize()`` -- returns the value of the calibre 'size' field. Returns '' if there are no formats."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:245
# b02c796c1fc046b88a7dcc9339121a33
msgid "``cmp(x, y, lt, eq, gt)`` -- compares x and y after converting both to numbers. Returns ``lt`` if x < y. Returns ``eq`` if x == y. Otherwise returns ``gt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:246
# a298ffd8ba564d16899d31121fc78277
msgid "``current_library_name() -- `` return the last name on the path to the current calibre library. This function can be called in template program mode using the template ``{:'current_library_name()'}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:247
# 4dfea40855304a5b95fd1c58e8b17b20
msgid "``current_library_path() -- `` return the path to the current calibre library. This function can be called in template program mode using the template ``{:'current_library_path()'}``.."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:248
# d651f92c58d04889ad2fe2ec1196880f
msgid "``days_between(date1, date2)`` -- return the number of days between ``date1`` and ``date2``. The number is positive if ``date1`` is greater than ``date2``, otherwise negative. If either ``date1`` or ``date2`` are not dates, the function returns the empty string."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:249
# f3ba9726b6344d25ada482b8914bf843
msgid "``divide(x, y)`` -- returns x / y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:250
# d8044cc62ea642be923d4fc868874fb6
msgid "``eval(string)`` -- evaluates the string as a program, passing the local variables (those ``assign`` ed to). This permits using the template processor to construct complex results from local variables. Because the `{` and `}` characters are special, you must use `[[` for the `{` character and `]]` for the '}' character; they are converted automatically. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:251
# d718c48c849f4324bbcccc0cf2f74001
msgid "``field(name)`` -- returns the metadata field named by ``name``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:252
# 577603f7520648fda452b92725ef1d38
msgid "``first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)`` -- compares \"val < cmpN\" in sequence, returning resultN for the first comparison that succeeds. Returns else_result if no comparison succeeds. Example::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:256
# 026f554f55394e93a16b597a93f78a95
msgid "returns \"large\". The same example with a first value of 16 returns \"giant\". * ``first_non_empty(value, value, ...)`` -- returns the first value that is not empty. If all values are empty, then the empty value is returned. You can have as many values as you want. * ``format_date(x, date_format)`` -- format_date(val, format_string) -- format the value, which must be a date field, using the format_string, returning a string. The formatting codes are::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:280
# 7f93fbcd538b4274a0c9c2da16c0011a
msgid "You might get unexpected results if the date you are formatting contains localized month names, which can happen if you changed the format tweaks to contain MMMM. In this case, instead of using something like ``{pubdate:format_date(yyyy)}``, write the template using template program mode as in ``{:'format_date(raw_field('pubdate'),'yyyy')'}``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:282
# 7bc2b3618ee34393ac780b9af5f5cc07
msgid "finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and suffix to a value in the same way as done in a template like ``{series_index:05.2f| - |- }``. This function is provided to ease conversion of complex single-function- or template-program-mode templates to :ref:`general program mode <general_mode>` (see below) to take advantage of GPM template compilation. For example, the following program produces the same output as the above template::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:286
# ece163787d9e47888e0e7303caf38cb0
msgid "Another example: for the template ``{series:re(([^\\s])[^\\s]+(\\s|$),\\1)}{series_index:0>2s| - | - }{title}`` use::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:295
# 1e591ba9830d45ad8acc64e61e54156d
msgid "``formats_modtimes(date_format)`` -- return a comma-separated list of colon_separated items representing modification times for the formats of a book. The date_format parameter specifies how the date is to be formatted. See the date_format function for details. You can use the select function to get the mod time for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:296
# 06b1cb1fe743479da6d1df3c133b30c4
msgid "``formats_paths()`` -- return a comma-separated list of colon_separated items representing full path to the formats of a book. You can use the select function to get the path for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:297
# d6176638709d49c5b25f460215e74e3c
msgid "``formats_sizes()`` -- return a comma-separated list of colon_separated items representing sizes in bytes of the formats of a book. You can use the select function to get the size for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:298
# 160363cf9e3246da9553a948cbff2f58
msgid "``has_cover()`` -- return ``Yes`` if the book has a cover, otherwise return the empty string"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:299
# b3d6f87520054742a45b233d0b7b3c6e
msgid "``not(value)`` -- returns the string \"1\" if the value is empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:300
# 15b360a6a5634a159cee044dd612681d
msgid "``list_difference(list1, list2, separator)`` -- return a list made by removing from `list1` any item found in `list2`, using a case-insensitive compare. The items in `list1` and `list2` are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:301
# 8e17f8849d974386ad03c01f2ea9efd5
msgid "``list_equals(list1, sep1, list2, sep2, yes_val, no_val)`` -- return `yes_val` if `list1` and `list2` contain the same items, otherwise return `no_val`. The items are determined by splitting each list using the appropriate separator character (`sep1` or `sep2`). The order of items in the lists is not relevant. The compare is case insensitive."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:302
# 1720731cd1b8422fad4347c18e467231
msgid "``list_intersection(list1, list2, separator)`` -- return a list made by removing from `list1` any item not found in `list2`, using a case-insensitive compare. The items in `list1` and `list2` are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:303
# b84815b844b648798199fbea2feb0d46
msgid "``list_re(src_list, separator, include_re, opt_replace)`` -- Construct a list by first separating `src_list` into items using the `separator` character. For each item in the list, check if it matches `include_re`. If it does, then add it to the list to be returned. If `opt_replace` is not the empty string, then apply the replacement before adding the item to the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:304
# c5dd0142c0954d09af43168ea6996f92
msgid "``list_re_group(src_list, separator, include_re, search_re, template_for_group_1, for_group_2, ...)`` -- Like list_re except replacements are not optional. It uses re_group(item, search_re, template ...) when doing the replacements."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:305
# c84af51d8d504323a8af5c7067f94ba6
msgid "``list_sort(list, direction, separator)`` -- return list sorted using a case-insensitive sort. If `direction` is zero, the list is sorted ascending, otherwise descending. The list items are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:306
# 1ba345915f214f4492a1535621f74d69
msgid "``list_union(list1, list2, separator)`` -- return a list made by merging the items in list1 and list2, removing duplicate items using a case-insensitive compare. If items differ in case, the one in list1 is used. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:307
# 639522fae46643ed923b39dbc9b53926
msgid "``multiply(x, y)`` -- returns x * y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:308
# 0f608ba97bc4463fb4f7c474d91e3503
msgid "``ondevice()`` -- return the string \"Yes\" if ondevice is set, otherwise return the empty string"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:309
# 8db66812c0bd49239f5252c076e57fdd
msgid "``or(value, value, ...)`` -- returns the string \"1\" if any value is not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:310
# be7048dcf32f46579950dbec71544dfd
msgid "``print(a, b, ...)`` -- prints the arguments to standard output. Unless you start calibre from the command line (``calibre-debug -g``), the output will go to a black hole."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:311
# 7051b3f7b52746e1ba7f149eb1a26609
msgid "``raw_field(name)`` -- returns the metadata field named by name without applying any formatting."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:312
# f502b721d6ab4785afb23822c7941247
msgid "``raw_list(name, separator)`` -- returns the metadata list named by name without applying any formatting or sorting and with items separated by separator."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:313
# 84c667c19ea9488989eab30bed6408dd
msgid "``re_group(val, pattern, template_for_group_1, for_group_2, ...)`` --  return a string made by applying the reqular expression pattern to the val and replacing each matched instance with the string computed by replacing each matched group by the value returned by the corresponding template. The original matched value for the group is available as $. In template program mode, like for the template and the eval functions, you use [[ for { and ]] for }. The following example in template program mode looks for series with more than one word and uppercases the first word::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:317
# e96a5140a34546ffb35af7e895563d17
msgid "``series_sort()`` -- returns the series sort value."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:318
# 5771bcc43dcb4a82ae574f11d1adbe99
msgid "``strcat(a, b, ...)`` -- can take any number of arguments. Returns a string formed by concatenating all the arguments."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:319
# 9f0704ca29444a92b3dd9abdb1673191
msgid "``strcat_max(max, string1, prefix2, string2, ...)`` -- Returns a string formed by concatenating the arguments. The returned value is initialized to string1. `Prefix, string` pairs are added to the end of the value as long as the resulting string length is less than `max`. String1 is returned even if string1 is longer than max. You can pass as many `prefix, string` pairs as you wish."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:320
# bb7ba47bac1a4d92ab4d078b2b3fd527
msgid "``strcmp(x, y, lt, eq, gt)`` -- does a case-insensitive comparison x and y as strings. Returns ``lt`` if x < y. Returns ``eq`` if x == y. Otherwise returns ``gt``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:321
# 1c0f4d2ffaa14008a25e6dd1cfb7ecd7
msgid "``strlen(a)`` -- Returns the length of the string passed as the argument."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:322
# 10992441ab114fb0a9165fb60652f8f1
msgid "``substr(str, start, end)`` -- returns the ``start``'th through the ``end``'th characters of ``str``. The first character in ``str`` is the zero'th character. If end is negative, then it indicates that many characters counting from the right. If end is zero, then it indicates the last character. For example, ``substr('12345', 1, 0)`` returns ``'2345'``, and ``substr('12345', 1, -1)`` returns ``'234'``."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:323
# 4975349b51b94c41acd3af55e941fb92
msgid "``subtract(x, y)`` -- returns x - y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:324
# c63948ad0a18457d859b6db7fd4e673f
msgid "``today()`` -- return a date string for today. This value is designed for use in format_date or days_between, but can be manipulated like any other string. The date is in ISO format."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:325
# ab5b23439b6a4973ab116cb2cee81145
msgid "``template(x)`` -- evaluates x as a template. The evaluation is done in its own context, meaning that variables are not shared between the caller and the template evaluation. Because the `{` and `}` characters are special, you must use `[[` for the `{` character and `]]` for the '}' character; they are converted automatically. For example, ``template('[[title_sort]]') will evaluate the template ``{title_sort}`` and return its value. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:330
# 0e80762cab314ae699ec4d16266127b0
msgid "Function classification"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:341
# 03085ffbaa074f30bb6a43f055a28bb5
msgid "Using general program mode"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:343
# 85e8c22d7b8641dcb03d7f975480298b
msgid "For more complicated template programs, it is sometimes easier to avoid template syntax (all the `{` and `}` characters), instead writing a more classical-looking program. You can do this in calibre by beginning the template with `program:`. In this case, no template processing is done. The special variable `$` is not set. It is up to your program to produce the correct results."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:345
# 11a1f93842f94621ae2c1ea434262347
msgid "One advantage of `program:` mode is that the brackets are no longer special. For example, it is not necessary to use `[[` and `]]` when using the `template()` function. Another advantage is that program mode templates are compiled to Python and can run much faster than  templates in the other two modes. Speed improvement depends on the complexity of the templates; the more complicated the template the more the improvement. Compilation is turned off or on using the tweak ``compile_gpm_templates`` (Compile General Program Mode templates to Python). The main reason to turn off compilation is if a compiled template does not work, in which case please file a bug report."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:347
# 0089b68f453245ddaec2f78420300331
msgid "The following example is a `program:` mode implementation of a recipe on the MobileRead forum: \"Put series into the title, using either initials or a shortened form. Strip leading articles from the series name (any).\" For example, for the book The Two Towers in the Lord of the Rings series, the recipe gives `LotR [02] The Two Towers`. Using standard templates, the recipe requires three custom columns and a plugboard, as explained in the following:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:349
# 0108e3dc123549ac91ec78ca6fb1b45c
msgid "The solution requires creating three composite columns. The first column is used to remove the leading articles. The second is used to compute the 'shorten' form. The third is to compute the 'initials' form. Once you have these columns, the plugboard selects between them. You can hide any or all of the three columns on the library view."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:351
# 823114ad14404f649c8c7058bbfc4a6b
msgid "First column: Name: #stripped_series. Template: {series:re(^(A|The|An)\\s+,)||}"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:355
# dbdd6d98c3004dbcb03dd8b519168c7e
msgid "Second column (the shortened form): Name: #shortened. Template: {#stripped_series:shorten(4,-,4)}"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:359
# 0881904fd70c4200bfc35da29f344ffe
msgid "Third column (the initials form): Name: #initials. Template: {#stripped_series:re(([^\\s])[^\\s]+(\\s|$),\\1)}"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:363
# 3560f44d44bb47f680decd6a9495d7f6
msgid "Plugboard expression: Template:{#stripped_series:lookup(.\\s,#initials,.,#shortened,series)}{series_index:0>2.0f| [|] }{title} Destination field: title"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:367
# 1bcf34ab958b43eab406d411010a0b58
msgid "This set of fields and plugboard produces: Series: The Lord of the Rings Series index: 2 Title: The Two Towers Output: LotR [02] The Two Towers"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:373
# 0a67d55e5de24c34b71e785f4fe37f37
msgid "Series: Dahak Series index: 1 Title: Mutineers Moon Output: Dahak [01] Mutineers Moon"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:378
# fb00f557dd59434abae5a016fe0622a0
msgid "Series: Berserkers Series Index: 4 Title: Berserker Throne Output: Bers-kers [04] Berserker Throne"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:383
# 20fa74e6b35a46dcb644323f45ad0c72
msgid "Series: Meg Langslow Mysteries Series Index: 3 Title: Revenge of the Wrought-Iron Flamingos Output: MLM [03] Revenge of the Wrought-Iron Flamingos"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:388
# 4796d3057ea54bdc835fed8709071d14
msgid "The following program produces the same results as the original recipe, using only one custom column to hold the results of a program that computes the special title value::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:425
# 6d88bbce7ea24421a0037b44b1330f04
msgid "It would be possible to do the above with no custom columns by putting the program into the template box of the plugboard. However, to do so, all comments must be removed because the plugboard text box does not support multi-line editing. It is debatable whether the gain of not having the custom column is worth the vast increase in difficulty caused by the program being one giant line."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:429
# 95409ddac97d4601a541a1ef53a337a1
msgid "User-defined Template Functions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:431
# 0bcca09db3464ebe92b4aee216677396
msgid "You can add your own functions to the template processor. Such functions are written in python, and can be used in any of the three template programming modes. The functions are added by going to Preferences -> Advanced -> Template Functions. Instructions are shown in that dialog."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:434
# c522f4acb6bb46d887c8f7eed137a689
msgid "Special notes for save/send templates"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:436
# ab6c6d2fef0841a283b8f22b1771f8b7
msgid "Special processing is applied when a template is used in a `save to disk` or `send to device` template. The values of the fields are cleaned, replacing characters that are special to file systems with underscores, including slashes. This means that field text cannot be used to create folders. However, slashes are not changed in prefix or suffix strings, so slashes in these strings will cause folders to be created. Because of this, you can create variable-depth folder structure."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:438
# 9048e85cc9ca46c6870b18037ce9c323
msgid "For example, assume we want the folder structure `series/series_index - title`, with the caveat that if series does not exist, then the title should be in the top folder. The template to do this is::"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:442
# 95f349b465de4263ae75e1579792b625
msgid "The slash and the hyphen appear only if series is not empty."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:444
# ef1cbd67fdd54bb1a6a846f0cac9a701
msgid "The lookup function lets us do even fancier processing. For example, assume that if a book has a series, then we want the folder structure `series/series index - title.fmt`. If the book does not have a series, then we want the folder structure `genre/author_sort/title.fmt`. If the book has no genre, we want to use 'Unknown'. We want two completely different paths, depending on the value of series."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:449
# 075c2a2eb96145cc92911365134fb426
msgid "To accomplish this, we:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:447
# 7434ecee3b584617b621f8de14382c90
msgid "Create a composite field (call it AA) containing ``{series}/{series_index} - {title'}``. If the series is not empty, then this template will produce `series/series_index - title`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:448
# ca914520c0204329984d44163559e189
msgid "Create a composite field (call it BB) containing ``{#genre:ifempty(Unknown)}/{author_sort}/{title}``. This template produces `genre/author_sort/title`, where an empty genre is replaced wuth `Unknown`."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:449
# 0ed62cb1e0e64958837134d80a25026a
msgid "Set the save template to ``{series:lookup(.,AA,BB)}``. This template chooses composite field AA if series is not empty, and composite field BB if series is empty. We therefore have two completely different save paths, depending on whether or not `series` is empty."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:452
# f086538fc1d14c20b6403b2b02a5fb84
msgid "Templates and Plugboards"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:454
# a00426e385864c7baa7e53b95bfb5c7f
msgid "Plugboards are used for changing the metadata written into books during send-to-device and save-to-disk operations. A plugboard permits you to specify a template to provide the data to write into the book's metadata. You can use plugboards to modify the following fields: authors, author_sort, language, publisher, tags, title, title_sort. This feature helps people who want to use different metadata in books on devices to solve sorting or display issues."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:456
# 0019ae76684e4cafbab682195d9e193b
msgid "When you create a plugboard, you specify the format and device for which the plugboard is to be used. A special device is provided, save_to_disk, that is used when saving formats (as opposed to sending them to a device). Once you have chosen the format and device, you choose the metadata fields to change, providing templates to supply the new values. These templates are `connected` to their destination fields, hence the name `plugboards`. You can, of course, use composite columns in these templates."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:458
# 328dce6f87bf4dea938e88f218711f5f
msgid "When a plugboard might apply (content server, save to disk, or send to device), calibre searches the defined plugboards to choose the correct one for the given format and device. For example, to find the appropriate plugboard for an EPUB book being sent to an ANDROID device, calibre searches the plugboards using the following search order:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:460
# dc99513ddb4441faac6019db3b18763f
msgid "a plugboard with an exact match on format and device, e.g., ``EPUB`` and ``ANDROID``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:461
# 2e088e4ef1a54bf88a95ec3c29e90758
msgid "a plugboard with an exact match on format and the special ``any device`` choice, e.g., ``EPUB`` and ``any device``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:462
# 608762fa30cf4a8ea64d4a88b5bade4b
msgid "a plugboard with the special ``any format`` choice and an exact match on device, e.g., ``any format`` and ``ANDROID``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:463
# 58a5f834ea8e4d908f30bf03d8137ae0
msgid "a plugboard with ``any format`` and ``any device``"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:465
# 19397847aec248a490a2002ec14b7319
msgid "The tags and authors fields have special treatment, because both of these fields can hold more than one item. A book can have many tags and many authors. When you specify that one of these two fields is to be changed, the template's result is examined to see if more than one item is there. For tags, the result is cut apart wherever calibre finds a comma. For example, if the template produces the value ``Thriller, Horror``, then the result will be two tags, ``Thriller`` and ``Horror``. There is no way to put a comma in the middle of a tag."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:467
# b65fbd312eba41168e622a88d54f2147
msgid "The same thing happens for authors, but using a different character for the cut, a `&` (ampersand) instead of a comma. For example, if the template produces the value ``Blogs, Joe&Posts, Susan``, then the book will end up with two authors, ``Blogs, Joe`` and ``Posts, Susan``. If the template produces the value ``Blogs, Joe;Posts, Susan``, then the book will have one author with a rather strange name."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:469
# c08978573f524056b6bf04fce369120c
msgid "Plugboards affect the metadata written into the book when it is saved to disk or written to the device. Plugboards do not affect the metadata used by ``save to disk`` and ``send to device`` to create the file names. Instead, file names are constructed using the templates entered on the appropriate preferences window."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:472
# be2d4d9de9b1495899aa4129ff06f41c
msgid "Helpful Tips"
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:474
# 05639b175fd34fed826709afb444b396
msgid "You might find the following tips useful."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:476
# d3bd923f97fc48a8a10492e936bb4cf4
msgid "Create a custom composite column to test templates. Once you have the column, you can change its template simply by double-clicking on the column. Hide the column when you are not testing."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:477
# d982411ac67f4c44b9bc7509d12afa02
msgid "Templates can use other templates by referencing a composite custom column."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:478
# 453aec5616d8421581e4e995eff79ae2
msgid "In a plugboard, you can set a field to empty (or whatever is equivalent to empty) by using the special template ``{}``. This template will always evaluate to an empty string."
msgstr ""

#: ../../home/kovid/work/calibre/manual/template_lang.rst:479
# 8fc2dbda49834d00864892c3defc4229
msgid "The technique described above to show numbers even if they have a zero value works with the standard field series_index."
msgstr ""

