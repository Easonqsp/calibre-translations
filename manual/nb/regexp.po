# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-26 10:21+0530\n"
"PO-Revision-Date: 2014-09-28 09:21+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Norwegian Bokm√•l (http://www.transifex.com/projects/p/calibre/language/nb/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: nb\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 070d72942c824fc5a221b729949ee288
#: ../../home/kovid/work/calibre/manual/regexp.rst:5
msgid "All about using regular expressions in calibre"
msgstr ""

# 2104266906e04782ac22c0bd01e43aa6
#: ../../home/kovid/work/calibre/manual/regexp.rst:7
msgid ""
"Regular expressions are features used in many places in calibre to perform "
"sophisticated manipulation of ebook content and metadata. This tutorial is a"
" gentle introduction to getting you started with using regular expressions "
"in calibre."
msgstr ""

# 093dd5aa53074181aef0a45d6b8981f7
#: ../../home/kovid/work/calibre/manual/regexp.rst:0
msgid "Contents"
msgstr "Innhold"

# 3184de26f48e450fb46e6d3a10899eb4
#: ../../home/kovid/work/calibre/manual/regexp.rst:15
msgid "First, a word of warning and a word of courage"
msgstr ""

# f2e4e1092c0e490bbb499b0e88829b39
#: ../../home/kovid/work/calibre/manual/regexp.rst:17
msgid ""
"This is, inevitably, going to be somewhat technical- after all, regular "
"expressions are a technical tool for doing technical stuff. I'm going to "
"have to use some jargon and concepts that may seem complicated or "
"convoluted. I'm going to try to explain those concepts as clearly as I can, "
"but really can't do without using them at all. That being said, don't be "
"discouraged by any jargon, as I've tried to explain everything new. And "
"while regular expressions themselves may seem like an arcane, black magic "
"(or, to be more prosaic, a random string of mumbo-jumbo letters and signs), "
"I promise that they are not all that complicated. Even those who understand "
"regular expressions really well have trouble reading the more complex ones, "
"but writing them isn't as difficult- you construct the expression step by "
"step. So, take a step and follow me into the rabbit hole."
msgstr ""

# 91b34ab026054b3899a4b88f869ae4a0
#: ../../home/kovid/work/calibre/manual/regexp.rst:20
msgid "Where in calibre can you use regular expressions?"
msgstr ""

# c5ae6e38bef84afea6bedb85fa6f010f
#: ../../home/kovid/work/calibre/manual/regexp.rst:22
msgid ""
"There are a few places calibre uses regular expressions. There's the Search & "
"Replace in conversion options, metadata detection from filenames in the "
"import settings and Search & Replace when editing the metadata of books in "
"bulk."
msgstr ""

# f455c624d3564d3daabdd5b15f3d857f
#: ../../home/kovid/work/calibre/manual/regexp.rst:25
msgid "What on earth *is* a regular expression?"
msgstr ""

# 3d2e28c91e2e4aef84bd2b80c825d78e
#: ../../home/kovid/work/calibre/manual/regexp.rst:27
msgid ""
"A regular expression is a way to describe sets of strings. A single regular "
"expression can *match* a number of different strings. This is what makes "
"regular expression so powerful -- they are a concise way of describing a "
"potentially large number of variations."
msgstr ""

# 1e3384f145e8460d90f390eb31f67dec
#: ../../home/kovid/work/calibre/manual/regexp.rst:29
msgid ""
"I'm using string here in the sense it is used in programming languages: a "
"string of one or more characters, characters including actual characters, "
"numbers, punctuation and so-called whitespace (linebreaks, tabulators etc.)."
" Please note that generally, uppercase and lowercase characters are not "
"considered the same, thus \"a\" being a different character from \"A\" and "
"so forth. In calibre, regular expressions are case insensitive in the search "
"bar, but not in the conversion options. There's a way to make every regular "
"expression case insensitive, but we'll discuss that later. It gets "
"complicated because regular expressions allow for variations in the strings "
"it matches, so one expression can match multiple strings, which is why "
"people bother using them at all. More on that in a bit."
msgstr ""

# 6213c2e368d64705a92b87a9945f1700
#: ../../home/kovid/work/calibre/manual/regexp.rst:32
msgid "Care to explain?"
msgstr ""

# 769e98d3cf724d2e821133eddde7e94f
#: ../../home/kovid/work/calibre/manual/regexp.rst:34
msgid ""
"Well, that's why we're here. First, this is the most important concept in "
"regular expressions: *A string by itself is a regular expression that "
"matches itself*. That is to say, if I wanted to match the string ``\"Hello, "
"World!\"`` using a regular expression, the regular expression to use would "
"be ``Hello, World!``. And yes, it really is that simple. You'll notice, "
"though, that this *only* matches the exact string ``\"Hello, World!\"``, not"
" e.g. ``\"Hello, wOrld!\"`` or ``\"hello, world!\"`` or any other such "
"variation."
msgstr ""

# 4cbf42afa72940bd839e3f3eb0dda7d5
#: ../../home/kovid/work/calibre/manual/regexp.rst:37
msgid "That doesn't sound too bad. What's next?"
msgstr ""

# 2cc281b1dc364567ae79a440adcbb66f
#: ../../home/kovid/work/calibre/manual/regexp.rst:39
msgid ""
"Next is the beginning of the really good stuff. Remember where I said that "
"regular expressions can match multiple strings? This is were it gets a "
"little more complicated. Say, as a somewhat more practical exercise, the "
"ebook you wanted to convert had a nasty footer counting the pages, like "
"\"Page 5 of 423\". Obviously the page number would rise from 1 to 423, thus "
"you'd have to match 423 different strings, right? Wrong, actually: regular "
"expressions allow you to define sets of characters that are matched: To "
"define a set, you put all the characters you want to be in the set into "
"square brackets. So, for example, the set ``[abc]`` would match either the "
"character \"a\", \"b\" or \"c\". *Sets will always only match one of the "
"characters in the set*. They \"understand\" character ranges, that is, if "
"you wanted to match all the lower case characters, you'd use the set "
"``[a-z]`` for lower- and uppercase characters you'd use ``[a-zA-Z]`` and so "
"on. Got the idea? So, obviously, using the expression ``Page [0-9] of 423`` "
"you'd be able to match the first 9 pages, thus reducing the expressions "
"needed to three: The second expression ``Page [0-9][0-9] of 423`` would "
"match all two-digit page numbers, and I'm sure you can guess what the third "
"expression would look like. Yes, go ahead. Write it down."
msgstr ""

# 4a177d4fa8204870b4b09ec4e844fbb1
#: ../../home/kovid/work/calibre/manual/regexp.rst:42
msgid "Hey, neat! This is starting to make sense!"
msgstr ""

# 833ba68f98704c89866aa79f471d3f9d
#: ../../home/kovid/work/calibre/manual/regexp.rst:44
msgid ""
"I was hoping you'd say that. But brace yourself, now it gets even better! We"
" just saw that using sets, we could match one of several characters at once."
" But you can even repeat a character or set, reducing the number of "
"expressions needed to handle the above page number example to one. Yes, ONE!"
" Excited? You should be! It works like this: Some so-called special "
"characters, \"+\", \"?\" and \"*\", *repeat the single element preceding "
"them*. (Element means either a single character, a character set, an escape "
"sequence or a group (we'll learn about those last two later)- in short, any "
"single entity in a regular expression.) These characters are called "
"wildcards or quantifiers. To be more precise, \"?\" matches *0 or 1* of the "
"preceding element, \"*\" matches *0 or more* of the preceding element and "
"\"+\" matches *1 or more* of the preceding element. A few examples: The "
"expression ``a?`` would match either \"\" (which is the empty string, not "
"strictly useful in this case) or \"a\", the expression ``a*`` would match "
"\"\", \"a\", \"aa\" or any number of a's in a row, and, finally, the "
"expression ``a+`` would match \"a\", \"aa\" or any number of a's in a row "
"(Note: it wouldn't match the empty string!). Same deal for sets: The "
"expression ``[0-9]+`` would match *every integer number there is*! I know "
"what you're thinking, and you're right: If you use that in the above case of"
" matching page numbers, wouldn't that be the single one expression to match "
"all the page numbers? Yes, the expression ``Page [0-9]+ of 423`` would match"
" every page number in that book!"
msgstr ""

# 35d76095dcd7409bb5591f4b03dee52c
#: ../../home/kovid/work/calibre/manual/regexp.rst:47
msgid ""
"A note on these quantifiers: They generally try to match as much text as "
"possible, so be careful when using them. This is called \"greedy "
"behaviour\"- I'm sure you get why. It gets problematic when you, say, try to"
" match a tag. Consider, for example, the string ``\"<p "
"class=\"calibre2\">Title here</p>\"`` and let's say you'd want to match the "
"opening tag (the part between the first pair of angle brackets, a little "
"more on tags later). You'd think that the expression ``<p.*>`` would match "
"that tag, but actually, it matches the whole string! (The character \".\" is"
" another special character. It matches anything *except* linebreaks, so, "
"basically, the expression ``.*`` would match any single line you can think "
"of.) Instead, try using ``<p.*?>`` which makes the quantifier ``\"*\"`` non-"
"greedy. That expression would only match the first opening tag, as intended."
" There's actually another way to accomplish this: The expression "
"``<p[^>]*>`` will match that same opening tag- you'll see why after the next"
" section. Just note that there quite frequently is more than one way to "
"write a regular expression."
msgstr ""

# 6b2218cfc2864fedbef607378c3f2e7c
#: ../../home/kovid/work/calibre/manual/regexp.rst:51
msgid ""
"Well, these special characters are very neat and all, but what if I wanted "
"to match a dot or a question mark?"
msgstr ""

# 5f51eef849264642bb43343e64879d9a
#: ../../home/kovid/work/calibre/manual/regexp.rst:53
msgid ""
"You can of course do that: Just put a backslash in front of any special "
"character and it is interpreted as the literal character, without any "
"special meaning. This pair of a backslash followed by a single character is "
"called an escape sequence, and the act of putting a backslash in front of a "
"special character is called escaping that character. An escape sequence is "
"interpreted as a single element. There are of course escape sequences that "
"do more than just escaping special characters, for example ``\"\\t\"`` means"
" a tabulator. We'll get to some of the escape sequences later. Oh, and by "
"the way, concerning those special characters: Consider any character we "
"discuss in this introduction as having some function to be special and thus "
"needing to be escaped if you want the literal character."
msgstr ""

# 8b12d7b221154bb3b4cdb25cd2f9cdf6
#: ../../home/kovid/work/calibre/manual/regexp.rst:56
msgid "So, what are the most useful sets?"
msgstr ""

# 157616ac9530435c954167930f9bc252
#: ../../home/kovid/work/calibre/manual/regexp.rst:58
msgid ""
"Knew you'd ask. Some useful sets are ``[0-9]`` matching a single number, "
"``[a-z]`` matching a single lowercase letter, ``[A-Z]`` matching a single "
"uppercase letter, ``[a-zA-Z]`` matching a single letter and ``[a-zA-Z0-9]`` "
"matching a single letter or number. You can also use an escape sequence as "
"shorthand::"
msgstr ""

# e45ce007b6804c6ab13e43246b03572f
#: ../../home/kovid/work/calibre/manual/regexp.rst:65
msgid ""
"\"Whitespace\" is a term for anything that won't be printed. These "
"characters include space, tabulator, line feed, form feed and carriage "
"return."
msgstr ""

# 9045b3c05b174faba2ffcd50e31d8e01
#: ../../home/kovid/work/calibre/manual/regexp.rst:67
msgid ""
"As a last note on sets, you can also define a set as any character *but* "
"those in the set. You do that by including the character ``\"^\"`` as the "
"*very first character in the set*. Thus, ``[^a]`` would match any character "
"excluding \"a\". That's called complementing the set. Those escape sequence "
"shorthands we saw earlier can also be complemented: ``\"\\D\"`` means any "
"non-number character, thus being equivalent to ``[^0-9]``. The other "
"shorthands can be complemented by, you guessed it, using the respective "
"uppercase letter instead of the lowercase one. So, going back to the example"
" ``<p[^>]*>`` from the previous section, now you can see that the character "
"set it's using tries to match any character except for a closing angle "
"bracket."
msgstr ""

# 08345d757d144acdbf67d7b579990153
#: ../../home/kovid/work/calibre/manual/regexp.rst:70
msgid ""
"But if I had a few varying strings I wanted to match, things get "
"complicated?"
msgstr ""

# 5a39b489ef8c44f98092c7af1324af2b
#: ../../home/kovid/work/calibre/manual/regexp.rst:72
msgid ""
"Fear not, life still is good and easy. Consider this example: The book "
"you're converting has \"Title\" written on every odd page and \"Author\" "
"written on every even page. Looks great in print, right? But in ebooks, it's"
" annoying. You can group whole expressions in normal parentheses, and the "
"character ``\"|\"`` will let you match *either* the expression to its right "
"*or* the one to its left. Combine those and you're done. Too fast for you? "
"Okay, first off, we group the expressions for odd and even pages, thus "
"getting ``(Title)(Author)`` as our two needed expressions. Now we make "
"things simpler by using the vertical bar (``\"|\"`` is called the vertical "
"bar character): If you use the expression ``(Title|Author)`` you'll either "
"get a match for \"Title\" (on the odd pages) or you'd match \"Author\" (on "
"the even pages). Well, wasn't that easy?"
msgstr ""

# d0167a3c04e449ddbe1ce810ca4b115c
#: ../../home/kovid/work/calibre/manual/regexp.rst:74
msgid ""
"You can, of course, use the vertical bar without using grouping parentheses,"
" as well. Remember when I said that quantifiers repeat the element preceding"
" them? Well, the vertical bar works a little differently: The expression "
"\"Title|Author\" will also match either the string \"Title\" or the string "
"\"Author\", just as the above example using grouping. *The vertical bar "
"selects between the entire expression preceding and following it*. So, if "
"you wanted to match the strings \"Calibre\" and \"calibre\" and wanted to "
"select only between the upper- and lowercase \"c\", you'd have to use the "
"expression ``(c|C)alibre``, where the grouping ensures that only the \"c\" "
"will be selected. If you were to use ``c|Calibre``, you'd get a match on the"
" string \"c\" or on the string \"Calibre\", which isn't what we wanted. In "
"short: If in doubt, use grouping together with the vertical bar."
msgstr ""

# 2ea108160742444ba6abfeceaf695104
#: ../../home/kovid/work/calibre/manual/regexp.rst:77
msgid "You missed..."
msgstr ""

# 78c7fefa4d0e411582143fa9d73dede4
#: ../../home/kovid/work/calibre/manual/regexp.rst:79
msgid ""
"... wait just a minute, there's one last, really neat thing you can do with "
"groups. If you have a group that you previously matched, you can use "
"references to that group later in the expression: Groups are numbered "
"starting with 1, and you reference them by escaping the number of the group "
"you want to reference, thus, the fifth group would be referenced as ``\\5``."
" So, if you searched for ``([^ ]+) \\1`` in the string \"Test Test\", you'd "
"match the whole string!"
msgstr ""

# 8c445a3da5144096b710c415e75d4834
#: ../../home/kovid/work/calibre/manual/regexp.rst:83
msgid ""
"In the beginning, you said there was a way to make a regular expression case"
" insensitive?"
msgstr ""

# 29be1ec38f854132b1a10db9727a807d
#: ../../home/kovid/work/calibre/manual/regexp.rst:85
msgid ""
"Yes, I did, thanks for paying attention and reminding me. You can tell calibre"
" how you want certain things handled by using something called flags. You "
"include flags in your expression by using the special construct ``(?flags go"
" here)`` where, obviously, you'd replace \"flags go here\" with the specific"
" flags you want. For ignoring case, the flag is ``i``, thus you include "
"``(?i)`` in your expression. Thus, ``test(?i)`` would match \"Test\", "
"\"tEst\", \"TEst\" and any case variation you could think of."
msgstr ""

# 355b4f94b54346ef92d3c35d3a3ee75c
#: ../../home/kovid/work/calibre/manual/regexp.rst:87
msgid ""
"Another useful flag lets the dot match any character at all, *including* the"
" newline, the flag ``s``. If you want to use multiple flags in an "
"expression, just put them in the same statement: ``(?is)`` would ignore case"
" and make the dot match all. It doesn't matter which flag you state first, "
"``(?si)`` would be equivalent to the above. By the way, good places for "
"putting flags in your expression would be either the very beginning or the "
"very end. That way, they don't get mixed up with anything else."
msgstr ""

# 66896505346b497594ae83d4b5e4f3fa
#: ../../home/kovid/work/calibre/manual/regexp.rst:90
msgid ""
"I think I'm beginning to understand these regular expressions now... how do "
"I use them in calibre?"
msgstr ""

# c6d2768b90af47b7856ba7c83ac45a66
#: ../../home/kovid/work/calibre/manual/regexp.rst:93
msgid "Conversions"
msgstr ""

# 937c678611b14e51897c38c867e49d3e
#: ../../home/kovid/work/calibre/manual/regexp.rst:95
msgid ""
"Let's begin with the conversion settings, which is really neat. In the "
"Search and Replace part, you can input a regexp (short for regular "
"expression) that describes the string that will be replaced during the "
"conversion. The neat part is the wizard. Click on the wizard staff and you "
"get a preview of what calibre \"sees\" during the conversion process. Scroll "
"down to the string you want to remove, select and copy it, paste it into the"
" regexp field on top of the window. If there are variable parts, like page "
"numbers or so, use sets and quantifiers to cover those, and while you're at "
"it, remember to escape special characters, if there are some. Hit the button"
" labeled :guilabel:`Test` and calibre highlights the parts it would replace "
"were you to use the regexp. Once you're satisfied, hit OK and convert. Be "
"careful if your conversion source has tags like this example::"
msgstr ""

# a1ad640c84c246a48cc0d407eae47992
#: ../../home/kovid/work/calibre/manual/regexp.rst:105
msgid ""
"(shamelessly ripped out of `this thread "
"<http://www.mobileread.com/forums/showthread.php?t=75594\">`_). You'd have "
"to remove some of the tags as well. In this example, I'd recommend beginning"
" with the tag ``<b class=\"calibre2\">``, now you have to end with the "
"corresponding closing tag (opening tags are ``<tag>``, closing tags are "
"``</tag>``), which is simply the next ``</b>`` in this case. (Refer to a "
"good HTML manual or ask in the forum if you are unclear on this point.) The "
"opening tag can be described using ``<b.*?>``, the closing tag using "
"``</b>``, thus we could remove everything between those tags using "
"``<b.*?>.*?</b>``. But using this expression would be a bad idea, because it"
" removes everything enclosed by <b>- tags (which, by the way, render the "
"enclosed text in bold print), and it's a fair bet that we'll remove portions"
" of the book in this way. Instead, include the beginning of the enclosed "
"string as well, making the regular expression "
"``<b.*?>\\s*Generated\\s+by\\s+ABC\\s+Amber\\s+LIT.*?</b>`` The ``\\s`` with"
" quantifiers are included here instead of explicitly using the spaces as "
"seen in the string to catch any variations of the string that might occur. "
"Remember to check what calibre will remove to make sure you don't remove any "
"portions you want to keep if you test a new expression. If you only check "
"one occurrence, you might miss a mismatch somewhere else in the text. Also "
"note that should you accidentally remove more or fewer tags than you "
"actually wanted to, calibre tries to repair the damaged code after doing the "
"removal."
msgstr ""

# 1010ee85b826402c93a85f4e4d93ddb8
#: ../../home/kovid/work/calibre/manual/regexp.rst:108
msgid "Adding books"
msgstr "Legger til b√∏ker"

# 19a2516e5c3f46eba12c14c01a027381
#: ../../home/kovid/work/calibre/manual/regexp.rst:110
msgid ""
"Another thing you can use regular expressions for is to extract metadata "
"from filenames. You can find this feature in the \"Adding books\" part of "
"the settings. There's a special feature here: You can use field names for "
"metadata fields, for example ``(?P<title>)`` would indicate that calibre "
"uses this part of the string as book title. The allowed field names are "
"listed in the windows, together with another nice test field. An example: "
"Say you want to import a whole bunch of files named like ``Classical Texts: "
"The Divine Comedy by Dante Alighieri.mobi``. (Obviously, this is already in "
"your library, since we all love classical italian poetry) or ``Science "
"Fiction epics: The Foundation Trilogy by Isaac Asimov.epub``. This is "
"obviously a naming scheme that calibre won't extract any meaningful data out "
"of - its standard expression for extracting metadata is ``(?P<title>.+) - "
"(?P<author>[^_]+)``. A regular expression that works here would be "
"``[a-zA-Z]+: (?P<title>.+) by (?P<author>.+)``. Please note that, inside the"
" group for the metadata field, you need to use expressions to describe what "
"the field actually matches. And also note that, when using the test field "
"calibre provides, you need to add the file extension to your testing filename,"
" otherwise you won't get any matches at all, despite using a working "
"expression."
msgstr ""

# 45be26d8787a43b78e8921a55a4c7e97
#: ../../home/kovid/work/calibre/manual/regexp.rst:114
msgid "Bulk editing metadata"
msgstr ""

# e26d6971600c4b7a96b2438191c3398b
#: ../../home/kovid/work/calibre/manual/regexp.rst:116
msgid ""
"The last part is regular expression search and replace in metadata fields. "
"You can access this by selecting multiple books in the library and using "
"bulk metadata edit. Be very careful when using this last feature, as it can "
"do **Very Bad Things** to your library! Doublecheck that your expressions do"
" what you want them to using the test fields, and only mark the books you "
"really want to change! In the regular expression search mode, you can search"
" in one field, replace the text with something and even write the result "
"into another field. A practical example: Say your library contained the "
"books of Frank Herbert's Dune series, named after the fashion ``Dune 1 - "
"Dune``, ``Dune 2 - Dune Messiah`` and so on. Now you want to get ``Dune`` "
"into the series field. You can do that by searching for ``(.*?) \\d+ - .*`` "
"in the title field and replacing it with ``\\1`` in the series field. See "
"what I did there? That's a reference to the first group you're replacing the"
" series field with. Now that you have the series all set, you only need to "
"do another search for ``.*? -`` in the title field and replace it with "
"``\"\"`` (an empty string), again in the title field, and your metadata is "
"all neat and tidy. Isn't that great? By the way, instead of replacing the "
"entire field, you can also append or prepend to the field, so, if you "
"*wanted* the book title to be prepended with series info, you could do that "
"as well. As you by now have undoubtedly noticed, there's a checkbox labeled "
":guilabel:`Case sensitive`, so you won't have to use flags to select "
"behaviour here."
msgstr ""

# 9a3a42d3002a49acad03913d86bfbe12
#: ../../home/kovid/work/calibre/manual/regexp.rst:118
msgid ""
"Well, that just about concludes the very short introduction to regular "
"expressions. Hopefully I'll have shown you enough to at least get you "
"started and to enable you to continue learning by yourself- a good starting "
"point would be the `Python documentation for regexps "
"<http://docs.python.org/library/re.html>`_."
msgstr ""

# 02e166b4f67e4eca8637a8696d4a88bf
#: ../../home/kovid/work/calibre/manual/regexp.rst:120
msgid ""
"One last word of warning, though: Regexps are powerful, but also really easy"
" to get wrong. calibre provides really great testing possibilities to see if "
"your expressions behave as you expect them to. Use them. Try not to shoot "
"yourself in the foot. (God, I love that expression...) But should you, "
"despite the warning, injure your foot (or any other body parts), try to "
"learn from it."
msgstr ""

# 29ff76f14ed549a2863c8c1ce00be7ca
#: ../../home/kovid/work/calibre/manual/regexp.rst:123
msgid "Credits"
msgstr ""

# dddb9efdb1494d8db7b881cbcbd0715a
#: ../../home/kovid/work/calibre/manual/regexp.rst:125
msgid "Thanks for helping with tips, corrections and such:"
msgstr ""

# f2d40bfb844f448889ac5657000f31c5
#: ../../home/kovid/work/calibre/manual/regexp.rst:127
msgid "ldolse"
msgstr ""

# 09720d378b7143458739c135957d63ae
#: ../../home/kovid/work/calibre/manual/regexp.rst:128
msgid "kovidgoyal"
msgstr ""

# 485b6b734735430e81e38f86207548c2
#: ../../home/kovid/work/calibre/manual/regexp.rst:129
msgid "chaley"
msgstr ""

# fcf4dfa9e9414baea7bbca1b41b8ef76
#: ../../home/kovid/work/calibre/manual/regexp.rst:130
msgid "dwanthny"
msgstr ""

# c6eaac14b789492cb4bec776d0602808
#: ../../home/kovid/work/calibre/manual/regexp.rst:131
msgid "kacir"
msgstr ""

# e9415d5e765449e1a71f1418e2d53cf2
#: ../../home/kovid/work/calibre/manual/regexp.rst:132
msgid "Starson17"
msgstr ""

# bf46d2ccc40e4b9681f0031f965ed55d
#: ../../home/kovid/work/calibre/manual/regexp.rst:134
msgid ""
"For more about regexps see `The Python User Manual "
"<http://docs.python.org/library/re.html>`_."
msgstr ""
