# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.43.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-06 17:44+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../plugins.rst:6
# 76d6652450df47d092f6e217738d0365
msgid "API Documentation for plugins"
msgstr ""

#: ../../plugins.rst:11
# db2bacfce48f4f69930d101c5797713a
msgid "Defines various abstract base classes that can be subclassed to create powerful plugins. The useful classes are:"
msgstr ""

#: ../../plugins.rst:21
# 18dce223f9f94814aa4a307dbf5e74a3
msgid "Plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:1
# 08a4d9797b7f405f93eeb727f35bc554
msgid "A calibre plugin. Useful members include:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# bf5a5d7df7f54d128c21add82663ad55
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 7cef80d92c1f41db850aa645f301b2fa
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# 24556fcdb3b043dfb9d06deed7d46275
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# 933efbc512bd4d4ab47de0fa7bc2d84b
msgid "by the user."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:9
# bd556fba79424b65900c4324f3ac1b2b
msgid "Methods that should be overridden in sub classes:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:11
# 4d03eaed933f4c56959f766ee1d52495
msgid ":meth:`initialize`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:12
# 85aec4000f324a0cbc9b4a0dc383d279
msgid ":meth:`customization_help`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:14
# fcabf72f3f1e4d8194d4a08fb709d799
msgid "Useful methods:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:16
# 44b6a747390b4fa6bac480a7027adaef
msgid ":meth:`temporary_file`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.supported_platforms:1
# 979d3c83be1f47d1bec599ba69a92efc
msgid "List of platforms this plugin works on For example: ``['windows', 'osx', 'linux']``"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.name:1
# 00c6d392362a459588fe9c56a4c5c490
msgid "The name of this plugin. You must set it something other than Trivial Plugin for it to work."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.version:1
# 4ac84df7a24f4fe193c20f81fb03dd66
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.description:1
# a3e67f3a7ff1440b936ecc53944ef595
msgid "A short string describing what this plugin does"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.author:1
# cfaccb1dc38a4bbcb7cf4b42a539ced3
msgid "The author of this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.priority:1
# d1cc13c53ad34b99b3fbf2ef600e90c7
msgid "When more than one plugin exists for a filetype, the plugins are run in order of decreasing priority i.e. plugins with higher priority will be run first. The highest possible priority is ``sys.maxint``. Default priority is 1."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.minimum_calibre_version:1
# 859f668f6381479982c42dab24851ae0
msgid "The earliest version of calibre this plugin requires"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.can_be_disabled:1
# 84b3bc7f09cb4a53a2336490fc5cb957
msgid "If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.type:1
# a94e563cd56c4d52b438a5d320ae2a4e
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:1
# bb74ff749a5f48aa9dd005256f81b5cf
msgid "Called once when calibre plugins are initialized. Plugins are re-initialized every time a new plugin is added."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:4
# 2e17abcc56254d8d946b53c74a41728d
msgid "Perform any plugin specific initialization here, such as extracting resources from the plugin zip file. The path to the zip file is available as ``self.plugin_path``."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:8
# c0b7bc3b0a8e48af9a2b050d3568aee6
msgid "Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:1
# 90ed0f4af35d492386cb53bbc99f4da5
msgid "Implement this method and :meth:`save_settings` in your plugin to use a custom configuration dialog, rather then relying on the simple string based default customization."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:5
# 5d34f6e76b7840b0a2eda3f7d30d01aa
msgid "This method, if implemented, must return a QWidget. The widget can have an optional method validate() that takes no arguments and is called immediately after the user clicks OK. Changes are applied if and only if the method returns True."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:10
# ea046733b8564f8dbfbf53e48baaafde
msgid "If for some reason you cannot perform the configuration at this time, return a tuple of two strings (message, details), these will be displayed as a warning dialog to the user and the process will be aborted."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:1
# b5a3c9a7c51d485096e557b2609835a4
msgid "Save the settings specified by the user with config_widget."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:3
# 9c29687bba594f4888e876ef90daa1bc
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.do_user_config:1
# e2dfae717a5844668a445ba97556e823
msgid "This method shows a configuration dialog for this plugin. It returns True if the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:1
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:1
# 3ff9c827cfef49c38744a3877d4a1961
# 0b4824d67e2445d1896ba3ab422abba2
msgid "If this plugin comes in a ZIP file (user added plugin), this method will allow you to load resources from the ZIP file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:4
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:4
# 216805db928d4f3c855aca7237317faa
# 6129d0a144d349f5bdf9c78bf9389123
msgid "For example to load an image::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:10
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:10
# d78c9cb409584751a42de160faf65781
# 58341d98557540c0bf180078b07fc272
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:12
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:12
# 6c984a307fd84768b6f43096d1d4f2e9
# ba33ff9cf79048259d26fbdce7e5bd72
msgid "A dictionary of the form ``{name : file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:1
# 37e56b7ebb6b4e298a4a887567d97102
msgid "Return a string giving help on how to customize this plugin. By default raise a :class:`NotImplementedError`, which indicates that the plugin does not require customization."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:5
# fd3a962316f145fabfb3bb0333467426
msgid "If you re-implement this method in your subclass, the user will be asked to enter a string as customization for this plugin. The customization string will be available as ``self.site_customization``."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:10
# d618d51fb3a747d8b35bde8df228b90c
msgid "Site customization could be anything, for example, the path to a needed binary on the user's computer."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:13
# b657ebafe738448095ea732f7b34fe27
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:1
# de1f86a4bf184087be4af1c74f39f45c
msgid "Return a file-like object that is a temporary file on the file system. This file will remain available even after being closed and will only be removed on interpreter shutdown. Use the ``name`` member of the returned object to access the full path to the created temporary file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:6
# 055a5f5ac8454fccbb48d857f73e5ace
msgid "The suffix that the temporary file will have."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.cli_main:1
# 0677bb6954944b5798d0f8f45104d438
msgid "This method is the main entry point for your plugins command line interface. It is called when the user does: calibre-debug -r \"Plugin Name\". Any arguments passed are present in the args variable."
msgstr ""

#: ../../plugins.rst:30
# 71a1ad26cfdc41c49442abb71edcab8f
msgid "FileTypePlugin"
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
# b888ddb0913149dda355091d7f5fb219
# a2b2f9baea08453f98167bd47058914d
# ad77f15f2bbf489991d29261e3c017dd
# 4db1d452c4c64397a6fa5397fbab69a4
# 3353c5ac62474e79bf75e81ac39d396d
# fc1a98f8545e48f788796aa6bd01fa10
# a8cb9ccdd188445b8ad5fdc35073e223
# d413ecaf320645b28e252d64d219b8f3
# 972d7453bcc842c9a3b67a852d93804d
# 7d6449186c0d4e27838af08ac761f00d
# e0afe11325414ab3bae65f8c7682885d
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin:1
# a0a2973d9eef4949a01b9be851fbb735
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.file_types:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.file_types:1
# cbcabe2d38264911aca3ca68d80b5ee7
# 445e8d5b98534044a9ccf39e3d89edd7
# 3013cfc66f6c41c2981ad9e2d9a99c8e
msgid "Set of file types for which this plugin should be run For example: ``set(['lit', 'mobi', 'prc'])``"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_import:1
# fd49cbe573834771823b0a2d581a45ae
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postimport:1
# 594435318463439d83264a60927f04e2
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_preprocess:1
# d4c53cf0114e4014b5714f1d0fb40e59
msgid "If True, this plugin is run just before a conversion"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postprocess:1
# 3ed095bf77c14633b64e32dc26bf0291
msgid "If True, this plugin is run after conversion on the final file produced by the conversion output plugin."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:1
# 311cbdf56aba4ef2b4abce075644ee75
msgid "Run the plugin. Must be implemented in subclasses. It should perform whatever modifications are required on the ebook and return the absolute path to the modified ebook. If no modifications are needed, it should return the path to the original ebook. If an error is encountered it should raise an Exception. The default implementation simply return the path to the original ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:9
# 3b56d7b635294a3d95b6fa9f26b29651
msgid "The modified ebook file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:12
# 0202c9ae56b444e8b2fcc0c839534c29
msgid "Absolute path to the ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:14
# 4133703cfd98482aa8b00069e1670fe7
msgid "Absolute path to the modified ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:1
# c67741fd009a47cc91ff361d84f8f177
msgid "Called post import, i.e., after the book file has been added to the database."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:3
# b7b4b84d04a04d74aa42684464d7955f
msgid "Database id of the added book."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:4
# ed51f70b88204dae890d54fbec02552a
msgid "The file type of the book that was added. :param db: Library database."
msgstr ""

#: ../../plugins.rst:41
# 430d2ded1d0643018f3ff174796dfbff
msgid "Metadata plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin:1
# 160ec580bdff45da887bffdc32aeabe6
# 7ec81dc398744db7b4926eca49d105ff
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.get_metadata:1
# 777d9fa173af4a129896899e60b4aa33
msgid "Return metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :return: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.set_metadata:1
# b8b69a3a26124e30a7fd77fdbcee847a
msgid "Set metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :param mi: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../plugins.rst:56
# 990e8d834ce440ad8c9de849ee011e68
msgid "Catalog plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin:1
# dac15953b3254c8486ef0beee7a694ba
msgid "A plugin that implements a catalog generator."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.file_types:1
# e160dd78e2e2449da45d60226af16b30
msgid "Output file type for which this plugin should be run For example: 'epub' or 'xml'"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.cli_options:1
# 5e362b6c234a4752a1ca25584161af17
msgid "CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.initialize:1
# 9a1a6800a6044b52bcde3b20ea6f8509
msgid "If plugin is not a built-in, copy the plugin's .ui and .py files from the zip file to $TMPDIR. Tab will be dynamically generated and added to the Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:1
# 59ada1437c3448b1abb37e95551caabf
msgid "Run the plugin. Must be implemented in subclasses. It should generate the catalog in the format specified in file_types, returning the absolute path to the generated catalog file. If an error is encountered it should raise an Exception."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:7
# 6e768390ec6f45e7865261a3eb40fa35
msgid "The generated catalog file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:10
# a22c6f570a0742e5adb75d3fb80a01a0
msgid "Absolute path to the generated catalog file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:11
# b7f01db8e2844f76a966d769cbc9e485
msgid "A dictionary of keyword arguments"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:12
# e60766f223e4468dacde180924a74f67
msgid "A LibraryDatabase2 object"
msgstr ""

#: ../../plugins.rst:66
# dc12eb371c9042669f1b4145809c224a
msgid "Metadata download plugins"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.capabilities:1
# e79141a591c745cb8d923f46e57aea56
msgid "Set of capabilities supported by this plugin. Useful capabilities are: 'identify', 'cover'"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.touched_fields:1
# 086192c22cc9497dbd611f224e2a93a1
msgid "List of metadata fields that can potentially be download by this plugin during the identify phase"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
# bbbd4291aa5c4be8b9a6280b56132475
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
# 75ee5dfed6a54127848d3d6ae56e5a76
msgid "Setting this to True means that the browser object will add Accept-Encoding: gzip to all requests. This can speedup downloads but make sure that the source actually supports gzip transfer encoding correctly first"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
# 59e125ce97364b2b84ef18db96eabdc5
msgid "Cached cover URLs can sometimes be unreliable (i.e. the download could fail or the returned image could be bogus. If that is often the case with this source set to False"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.options:1
# bed7feb04da44f948fa3b5c2c7792ffa
msgid "A list of :class:`Option` objects. They will be used to automatically construct the configuration widget for this plugin"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.config_help_message:1
# 11eb7df1cab242a895733c2c997fe1a3
msgid "A string that is displayed at the top of the config widget for this plugin"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
# 5522240fcbfd45beb18a99920822ba01
msgid "If True this source can return multiple covers for a given query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
# 2b1c16e3ec0d4ef8ba5ade5b70e0f6d3
msgid "If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.is_configured:1
# 024870fb71214d8f86514a266d29b225
msgid "Return False if your plugin needs to be configured before it can be used. For example, it might need a username/password/API key."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
# 94c67240bad64641ba8656daca8a2c8a
msgid "Take a list of authors and return a list of tokens useful for an AND search query. This function tries to return tokens in first name middle names last name order, by assuming that if a comma is in the author name, the name is in lastname, other names form."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
# b2aa5ab33d384db5add7e8cde607f61b
msgid "Take a title and return a list of tokens useful for an AND search query. Excludes connectives(optionally) and punctuation."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
# 2ffd90c41aa94df3909772d93155cb0a
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.test_fields:1
# bb97f36bd980445da9d405ae9af77ad6
msgid "Return the first field from self.touched_fields that is null on the mi object"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
# 6aa7d64b40024cff8125ebd5cd7b5e5e
msgid "Call this method in your plugin's identify method to normalize metadata before putting the Metadata object into result_queue. You can of course, use a custom algorithm suited to your metadata source."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
# f602401bea5345cd8c90cfe638bafc8b
msgid "Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, identifier_value, URL). The URL is the URL for the book identified by identifiers at this source. identifier_type, identifier_value specify the identifier corresponding to the URL. This URL must be browseable to by a human using a browser. It is meant to provide a clickable link for the user to easily visit the books page at this source. If no URL is found, return None. This method must be quick, and consistent, so only implement it if it is possible to construct the URL from a known scheme given identifiers."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
# ecc200816784443286345baaede28941
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
# 827cf0f6feda4bb4b7ed497a957402be
msgid "Return cached cover URL for the book identified by the identifiers dict or None if no such URL exists."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
# 2ae2776b4d714bf591c49f9c2617b643
msgid "Note that this method must only return validated URLs, i.e. not URLS that could result in a generic cover image or a not found error."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
# 929d8b6162b34670aaa09fade35b1dac
msgid "Return a function that is used to generate a key that can sort Metadata objects by their relevance given a search query (title, authors, identifiers)."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
# 3f7b3622ce6a46c8b8b2838a71c65d02
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
# 17c1d4c008da43c69291d4b7d5eda981
msgid "For details on the default algorithm see :class:`InternalMetadataCompareKeyGen`. Re-implement this function in your plugin if the default algorithm is not suitable."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:1
# 1e9ca2f6197d4de08596e2ca9ab7c2eb
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:3
# d54ddccd72de43a1b95585dfccd525d2
msgid "If identifiers(s) are specified and no match is found and this metadata source does not store all related identifiers (for example, all ISBNs of a book), this method should retry with just the title and author (assuming they were specified)."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:8
# ffc71e6d972148bb97e2273a729a8afd
msgid "If this metadata source also provides covers, the URL to the cover should be cached so that a subsequent call to the get covers API with the same ISBN/special identifier does not need to get the cover URL again. Use the caching API for this."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:13
# 221f558c8fd2474e944265205a50e91e
msgid "Every Metadata object put into result_queue by this method must have a `source_relevance` attribute that is an integer indicating the order in which the results were returned by the metadata source for this query. This integer will be used by :meth:`compare_identify_results`. If the order is unimportant, set it to zero for every result."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:19
# 392c75d2c6034835830017290530eaf9
msgid "Make sure that any cover/isbn mapping information is cached before the Metadata object is put into result_queue."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:22
# cfb2defaf1524bc287944d481b8b6691
msgid "A log object, use it to output debugging information/errors"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:23
# bec35fc9f33c499db6578e64ced83ac1
msgid "A result Queue, results should be put into it. Each result is a Metadata object"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:25
# 4cc6c9f04c8848b9a48605c66a44dfa1
msgid "If abort.is_set() returns True, abort further processing and return as soon as possible"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:27
# 556c5a8b9cb246e2bc7cdee1c33f4944
msgid "The title of the book, can be None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:28
# ddac36a5706048409f75ab42c1be12e3
msgid "A list of authors of the book, can be None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:29
# 3d3ad8de8d914a03884ffc9347cdc3c9
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:31
# c218716f7bb64b2ea280f2e60e661d8c
msgid "Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:33
# bcc99598717b4d28b849a9b0aa892dd6
msgid "None if no errors occurred, otherwise a unicode representation of the error suitable for showing to the user"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:1
# c69ab929c7624b2d8e2cc85584af07b8
msgid "Download a cover and put it into result_queue. The parameters all have the same meaning as for :meth:`identify`. Put (self, cover_data) into result_queue."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:5
# a7f40462d5624499bfbc464f2eebb6e2
msgid "This method should use cached cover URLs for efficiency whenever possible. When cached data is not present, most plugins simply call identify and use its results."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:9
# 972147aadeda454491a5820f8b6819cf
msgid "If the parameter get_best_cover is True and this plugin can get multiple covers, it should only get the \"best\" one."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
# 81a489ef21a041d09fa839c2f3f5884e
msgid "Generate a sort key for comparison of the relevance of Metadata objects, given a search query. This is used only to compare results from the same metadata source, not across different sources."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
# c6e29839b1f449cfbda9a59efd6acbaa
msgid "The sort key ensures that an ascending order sort is a sort by order of decreasing relevance."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
# d6e53c1ab9ff4947899454974672be52
msgid "The algorithm is:"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
# d2cdc4658db745658c8dc5fb26c7bb1e
msgid "Prefer results that have the same ISBN as specified in the query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
# 2c70ff64d1a7400db2153e7eb181686f
msgid "Prefer results with a cached cover URL"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
# 10ca13e489f54504a7012e24ace2eeaf
msgid "Prefer results with all available fields filled in"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
# 2485f83c5911498882e1852ad0e1608f
msgid "Prefer results that are an exact title match to the query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
# 1d640d7ef64f4132a80120432b6c2d84
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
# e3862d1645a74ac6bb9a39f08a90748c
msgid "Use the relevance of the result as reported by the metadata source's search"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
# 34ccef7177e444bcb31fa1e13b689f3b
msgid "engine"
msgstr ""

#: ../../plugins.rst:78
# 578dd785abba41af981d137134663233
msgid "Conversion plugins"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin:1
# a924f430844547bc8fec8fb97f75a0c5
msgid "InputFormatPlugins are responsible for converting a document into HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.file_types:1
# d25fbb2df03e419593edf585e3b41bc1
msgid "Set of file types for which this plugin should be run For example: ``set(['azw', 'mobi', 'prc'])``"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
# f35da89cb287407280ca5361ee4a196c
msgid "If True, this input plugin generates a collection of images, one per HTML file. This can be set dynamically, in the convert method if the input files can be both image collections and non-image collections. If you set this to True, you must implement the get_images() method that returns a list of images."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.core_usage:1
# 61c40160d4654c1eb994d809fa761c45
msgid "Number of CPU cores used by this plugin A value of -1 means that it uses all available cores"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.for_viewer:1
# 9cc0678be65541e0ac488d6f07130fc8
msgid "If set to True, the input plugin will perform special processing to make its output suitable for viewing"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.output_encoding:1
# 227143094efc4724953cbbdf5d6fc647
msgid "The encoding that this input plugin creates files in. A value of None means that the encoding is undefined and must be detected individually"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.common_options:1
# 16ae703eabf549d09277306cee2db0db
# 4831c95cb8f841aa96890472117b6f15
msgid "Options shared by all Input format plugins. Do not override in sub-classes. Use :attr:`options` instead. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.options:1
# 181cfb87b480439f80a60ed67d30f3e0
# 7364112af6b0469690e2e8a9284a16e9
msgid "Options to customize the behavior of this plugin. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.recommendations:1
# ee884111e423467eb59ef362c05bda5b
# 4161e4c668764dd5825ea3b2f35a66f3
msgid "A set of 3-tuples of the form (option_name, recommended_value, recommendation_level)"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.get_images:1
# 8f8d406073974a349f9cc4fc91a6b284
msgid "Return a list of absolute paths to the images, if this input plugin represents an image collection. The list of images is in the same order as the spine and the TOC."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:1
# dbf386c099294865b23520153f7b0d25
msgid "This method must be implemented in sub-classes. It must return the path to the created OPF file or an :class:`OEBBook` instance. All output should be contained in the current directory. If this plugin creates files outside the current directory they must be deleted/marked for deletion before this method returns."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:8
# 85039abd2fef4554b47768c2d7f01b60
msgid "A file like object that contains the input file."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:9
# df4c3bbd45c54cc28b4b565a3ceb3b4e
msgid "Options to customize the conversion process. Guaranteed to have attributes corresponding to all the options declared by this plugin. In addition, it will have a verbose attribute that takes integral values from zero upwards. Higher numbers mean be more verbose. Another useful attribute is ``input_profile`` that is an instance of :class:`calibre.customize.profiles.InputProfile`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:17
# 106a77a00b5b48aba8fc5c68d83f8fcb
msgid "The extension (without the .) of the input file. It is guaranteed to be one of the `file_types` supported by this plugin."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:20
# 4621c9444b03422292ac2fed9487fc0c
msgid "A :class:`calibre.utils.logging.Log` object. All output should use this object."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:22
# 48ec00fb8c0741e1a68e9381562ae815
msgid "A dictionary of various information that the input plugin can get easily that would speed up the subsequent stages of the conversion."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
# 5f3a7c8fa58b43878e360a7c7bf77391
msgid "Called to allow the input plugin to perform postprocessing after the book has been parsed."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.specialize:1
# 83783be5bab945e29df78a79894aa9b3
msgid "Called to allow the input plugin to specialize the parsed book for a particular output format. Called after postprocess_book and before any transforms are performed on the parsed book."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
# f5f7d89a308445b090d97d29244455b1
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builting input plugins for examples."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:1
# fb3f229cdafc4d69bee45ef6dc7f4cbf
msgid "OutputFormatPlugins are responsible for converting an OEB document (OPF+HTML) into an output ebook."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:4
# 39f2572f3cb149778443d735715c8a19
msgid "The OEB document can be assumed to be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.file_type:1
# 5dca747dc4da4d2a8824edb15c7ffd76
msgid "The file type (extension without leading period) that this plugin outputs"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:1
# 2bc9be2b9705411a9b36d4cabe3873bc
msgid "Render the contents of `oeb_book` (which is an instance of :class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:4
# 67c01f8f386b4d66af6d33339b1f9560
msgid "Either a file like object or a string. If it is a string it is the path to a directory that may or may not exist. The output plugin should write its output into that directory. If it is a file like object, the output plugin should write its output into the file."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:8
# eb82484f8fac406da3cf85c9326ea2d1
msgid "The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:10
# 28d8e4a91a5b470ab328edc9e81730f4
msgid "Conversion options. Guaranteed to have attributes corresponding to the OptionRecommendations of this plugin."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:12
# fc4c048fd61949dcab9c866cd2940d20
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
# 49edba292583478d88cf88395970fca8
msgid "Can be used to make changes to the css during the CSS flattening process."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
# 2d776d39d13b47db90aa64ec1f980ea4
msgid "The item (HTML file) being processed"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
# 48dce682c58348cabc0e4f34d6fbe99c
msgid "A Stylizer object containing the flattened styles for item. You can get the style for any element by stylizer.style(element)."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
# ae5988bc504c44cdbe3a0c42fb75b6bb
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builtin output plugins for examples."
msgstr ""

#: ../../plugins.rst:93
# 4c77239e351545aa9636c1d4b9954aaf
msgid "Device Drivers"
msgstr ""

#: ../../plugins.rst:97
# 4df6b786dd894d958912141555e91063
msgid "The base class for all device drivers is :class:`DevicePlugin`. However, if your device exposes itself as a USBMS drive to the operating system, you should use the USBMS class instead as it implements all the logic needed to support these kinds of devices."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin:1
# e6fcac9d48df470aada727459d8950b8
msgid "Defines the interface that should be implemented by backends that communicate with an ebook reader."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.FORMATS:1
# a7784e6880fe4255833f4f5568b542e0
msgid "Ordered list of supported formats"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VENDOR_ID:1
# 91165e68489d44209e457d93292068cc
msgid "VENDOR_ID can be either an integer, a list of integers or a dictionary If it is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
# 1ce129fd7e2a41dab7854ed7ded0c13d
msgid "An integer or a list of integers"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.BCD:1
# 3df7ab670daa4dbab96cc94310e16d66
msgid "BCD can be either None to not distinguish between devices based on BCD, or it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
# de986a3fa92845b79e8875cf2e81a87a
msgid "Height for thumbnails on the device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
# bc7fb9a8e55645898001ac44ce394e4e
msgid "Width for thumbnails on the device. Setting this will force thumbnails to this size, not preserving aspect ratio. If it is not set, then the aspect ratio will be preserved and the thumbnail will be no higher than THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 to have better quality thumbnails with fewer compression artifacts. Of course, the thumbnails get larger as well."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
# 4527deb3590442a3b1946a893048350e
msgid "Set this to True if the device supports updating cover thumbnails during sync_booklists. Setting it to true will ask device.py to refresh the cover thumbnails during book matching"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
# 12bec89bfa61432289fc5686d7014e9f
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
# 3208ced707e84fd6a729cc10ae111aa5
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.path_sep:1
# cb64fb9f58c249ab8fc57c2fd347773f
msgid "Path separator for paths to books on device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.icon:1
# c5053597ce714593b142f6ab7e09c809
msgid "Icon for this device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
# bec1a2a61724475bafc21d13ec7574fd
msgid "GUI displays this as a message if not None. Useful if opening can take a long time"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
# 37605b0944474855a704631a3317537d
msgid "Set of extensions that are \"virtual books\" on the device and therefore cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
# cae8b3af90a34e198caa65cb1128deb9
msgid "Whether to nuke comments in the copy of the book sent to the device. If not None this should be short string that the comments will be replaced by."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
# 298ecce57a6a4770b3fb4dcde0c5d7e9
msgid "If True indicates that  this driver completely manages device detection, ejecting and so forth. If you set this to True, you *must* implement the detect_managed_devices and debug_managed_device_detection methods. A driver with this set to true is responsible for detection of devices, managing a blacklist of devices, a list of ejected devices and so forth. calibre will periodically call the detect_managed_devices() method and is it returns a detected device, calibre will call open(). open() will be called every time a device is returned even is previous calls to open() failed, therefore the driver must maintain its own blacklist of failed devices. Similarly, when ejecting, calibre will call eject() and then assuming the next call to detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
# 9600425dc0f7458a94f7f040f0f78623
msgid "If set the True, calibre will call the :meth:`get_driveinfo()` method after the books lists have been loaded to get the driveinfo."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
# 2b48c1dd45a44b91af17134d829cb2a7
msgid "If set to True, calibre will ask the user if they want to manage the device with calibre, the first time it is detected. If you set this to True you must implement :meth:`get_device_uid()` and :meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` and :meth:`set_user_blacklisted_devices`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
# 43b7527ab2f24db09fab40a534df2f0d
msgid "Set this to a dictionary of the form {'title':title, 'msg':msg, 'det_msg':detailed_msg} to have calibre popup a message to the user after some callbacks are run (currently only upload_books). Be careful to not spam the user with too many messages. This variable is checked after *every* callback, so only set it when you really need to."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:1
# ba7f22d82f7c4d56849eb19e68f22c28
msgid "Return True, device_info if a device handled by this plugin is currently connected."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:3
# 71ebf578e03d470eb088eb50965b86de
msgid "List of devices currently connected"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
# 541b34a4c8c04b5fba3f14812e415593
# ad9ef9be00b64fdbac5d03e0ef34faeb
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:3
# 0c33b3fe01d5488e9c2a6beaca1fc858
msgid "Scan for devices that this driver can handle. Should return a device object if a device is found. This object will be passed to the open() method as the connected_device. If no device is found, return None. The returned object can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:9
# c3d397e50aef4850beb1abe36cf828c9
msgid "This method is called periodically by the GUI, so make sure it is not too resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:13
# 19f0d29eb2a744fe899aba69eca6764d
msgid "Set of USB devices found on the system."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:15
# b45ed72843474e88bfe83a6c3a4f80e9
msgid "If True and the driver uses a cache to prevent repeated scanning, the cache must be flushed."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
# d40c67e48c8b4f629f714430bedee5ea
msgid "Should write information about the devices detected on the system to output, which is a file like object."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
# 6e9ba0f05dbd4d5cbe26802ffcb0b230
msgid "Should return True if a device was detected and successfully opened, otherwise False."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:1
# 1bee31ba36ea4772a394d733ee4594a0
msgid "The key to unlock the device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:2
# 122838ef3793446cae818263a416fbe3
msgid "If true the packet stream to/from the device is logged"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:3
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:3
# a2b3f99c3c9d4c9995993ebd65a87c13
# 94043d6d710a4bcd95ae1a78efdf1688
msgid "Function that is called with a % progress (number between 0 and 100) for various tasks If it is called with -1 that means that the task does not have any progress information"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:7
# 02ab1c4570c54935a9f4d194d34aa3e9
msgid "Device information from the device scanner"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:1
# e236a7bf0aa74b0985f438c375e0f376
msgid "Optional method to perform further checks on a device to see if this driver is capable of handling it. If it is not it should return False. This method is only called after the vendor, product ids and the bcd have matched, so it can do some relatively time intensive checks. The default implementation returns True. This method is called only on windows. See also :meth:`can_handle`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:8
# b2798c5ffd224e3dbbaaf1150479e8c7
msgid "On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, bcd)``."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:1
# bb8de35432334470b16141df96b38d73
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:3
# d95aa3f88cc24a59967f152558da3031
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:1
# a933bcadf7c74286853f67196dfb2630
msgid "Perform any device specific initialization. Called after the device is detected but before any other functions that communicate with the device. For example: For devices that present themselves as USB Mass storage devices, this method would be responsible for mounting the device or if the device has been automounted, for finding out where it has been mounted. The method :meth:`calibre.devices.usbms.device.Device.open` has an implementation of this function that should serve as a good example for USB Mass storage devices."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:11
# 316ae3834ad54d4e87d5aa34f05b8f32
msgid "This method can raise an OpenFeedback exception to display a message to the user."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:14
# e7169505883b43a5b8436515c58d919d
msgid "The device that we are trying to open. It is a tuple of (vendor id, product id, bcd, manufacturer name, product name, device serial number). However, some devices have no serial number and on windows only the first three fields are present, the rest are None."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:20
# bb6f05607a164b0fbb7ac5811f4b6e06
msgid "The UUID of the current calibre library. Can be None if there is no library (for example when used from the command line)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:1
# 81759419058d4f5ba34dccb782d87ff0
msgid "Un-mount / eject the device from the OS. This does not check if there are pending GUI jobs that need to communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:4
# 9785ae4718a649e58b40bf9bff471fa5
msgid "NOTE: That this method may not be called on the same thread as the rest of the device methods."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
# 02a94de970524438bfa9672c9dbe350b
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:1
# 02e93abb543f486baf6e47cdfd0b8767
msgid "Set a function to report progress information."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:1
# 6b05f2c7b3ad441a928838414c482d73
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:3
# cd52fffd2d6b4a5db9fe379e0b26117a
msgid "(device name, device version, software version on device, mime type) The tuple can optionally have a fifth element, which is a drive information dictionary. See usbms.driver for an example."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_driveinfo:1
# 1ae76897b8c04298999379cef26ac815
msgid "Return the driveinfo dictionary. Usually called from get_device_information(), but if loading the driveinfo is slow for this driver, then it should set SLOW_DRIVEINFO. In this case, this method will be called by calibre after the book lists have been loaded. Note that it is not called on the device thread, so the driver should cache the drive info in the books() method and this function should return the cached data."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.card_prefix:1
# 97f8f6df28ed42f088de6b0d3f171534
msgid "Return a 2 element list of the prefix to paths on the cards. If no card is present None is set for the card's prefix. E.G. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# ac80cf57d77f45f4b7457768a641909c
msgid "Get total space available on the mountpoints:"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:2
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:2
# a122233930da43acaefebdc4fb8c8b9a
# b550e2e4f5134f0d937ba9455b2928e9
msgid "Main memory"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:3
# 5467c743fa2c4e7495d089bba01cd3a5
msgid "Memory Card A"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 57085d58396a4f3db7c919e8dce35609
msgid "Memory Card B"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:6
# 85ffa87cd58e4fbc8de757b9920ae11f
msgid "A 3 element list with total space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return 0."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 00cdfd8173da4f38afc3a880fdfee0a1
msgid "Get free space available on the mountpoints:"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:3
# 8b32f1b02fe14890aa8d0f0541995c1a
msgid "Card A"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 26f60a55bd124864929ceec78ca079c5
msgid "Card B"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:6
# 78bdc96e067d4614acb99f0d192b890f
msgid "A 3 element list with free space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return -1."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:1
# 8c059a01dc8e4008b20be49d97226a6c
msgid "Return a list of ebooks on the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:3
# 22b9ee0bc30e46fcaa55def150696045
msgid "If 'carda' or 'cardb' return a list of ebooks on the specific storage card, otherwise return list of ebooks in main memory of device. If a card is specified and no books are on the card return empty list."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:8
# 835cf0ddcce74bd6bd34d5a4ce7b8d66
msgid "A BookList."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:1
# 15052f977a6d46fb8c7adec6389a9aaf
msgid "Upload a list of books to the device. If a file already exists on the device, it should be replaced. This method should raise a :class:`FreeSpaceError` if there is not enough free space on the device. The text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is not None otherwise it must contain the word \"memory\"."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:7
# 314ee6d1635145c08df9a09d208d9b88
msgid "A list of paths"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:8
# 2430279fcb984a81b2f36dd6920fa1bc
msgid "A list of file names that the books should have once uploaded to the device. len(names) == len(files)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:10
# 9d1874593070477a92816dece8694cc6
msgid "If not None, it is a list of :class:`Metadata` objects. The idea is to use the metadata to determine where on the device to put the book. len(metadata) == len(files). Apart from the regular cover (path to cover), there may also be a thumbnail attribute, which should be used in preference. The thumbnail attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:17
# d6fe54be358649f184296786d2efb370
msgid "A list of 3-element tuples. The list is meant to be passed to :meth:`add_books_to_metadata`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
# bf67b0f63b794ecabed4a9429fd3e686
msgid "Add locations to the booklists. This function must not communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
# 45c43d74e2404b4b97277be8ced2abac
msgid "Result of a call to L{upload_books}"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
# 25b599f8127d445da97640ee577251eb
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:3
# 03b2bb1a4c334bd5a14d40a93706a542
# 285c5bcf0aa84118b7d80bb09052f83f
# b86e6c585ce64b9fb0dfa8bf61f02f92
msgid "A tuple containing the result of calls to (:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.delete_books:1
# eb467bb3adb146d6a29f3a596f675258
msgid "Delete books at paths on device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
# fc23fb278e2b4728bd307dc767d01e8c
msgid "Remove books from the metadata list. This function must not communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
# e92166d8e8e847ba8ea9c43fcc6a4a94
msgid "paths to books on the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:1
# bf7cfbc7851a4da8bd86dfefcb413374
msgid "Update metadata on device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:1
# 4edee21e26a64a06a9b3082b3efdb908
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:3
# 461453914b3f49e891b0f2d0e23099db
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.config_widget:1
# 185117df52f841afaaf29a0a428a0170
msgid "Should return a QWidget. The QWidget contains the settings for the device interface"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.save_settings:1
# afcf40874d464ed69777b039252afb45
msgid "Should save settings to disk. Takes the widget created in :meth:`config_widget` and saves all settings to disk."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.settings:1
# 67c3124a666346c791137ce187f88a2a
msgid "Should return an opts object. The opts object should have at least one attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:1
# ebd5299875f74d91914c11591f8dae40
msgid "provide the driver the current set of plugboards and a function to select a specific plugboard. This method is called immediately before add_books and sync_booklists."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 4fe998d8c0d44be79acfc08136bc422b
msgid "pb_func is a callable with the following signature::"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# bd09ad5d039b42ada2f410ecf0480a22
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:8
# b14f021375ba4a6ca5e17c5e0dd85032
msgid "You give it the current device name (either the class name or DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or 'device_db'), and the plugboards (you were given those by set_plugboards, the same place you got this method)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:13
# 72bd41b6767f43bb9d72e9cb53541c52
msgid "None or a single plugboard instance."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
# cf348ece9b684f529873aac20db04f15
msgid "Set the device name in the driveinfo file to 'name'. This setting will persist until the file is re-created or the name is changed again."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
# 2bb19b124b064abc94c65afdc642a0bb
msgid "Non-disk devices should implement this method based on the location codes returned by the get_device_information() method."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:1
# e8ce9fbe87894774b7c8d20ead95411e
msgid "Given a list of paths, returns another list of paths. These paths point to addable versions of the books."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:4
# 69ed57ed3c5f4bb5a68f8895dd4e8366
msgid "If there is an error preparing a book, then instead of a path, the position in the returned list for that book should be a three tuple: (original_path, the exception instance, traceback)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.startup:1
# 735e148befa341f588e1150ad8b72ea6
msgid "Called when calibre is is starting the device. Do any initialization required. Note that multiple instances of the class can be instantiated, and thus __init__ can be called multiple times, but only one instance will have this method called. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.shutdown:1
# 83114168aa51436ebd7de1ea27f3c1c6
msgid "Called when calibre is shutting down, either for good or in preparation to restart. Do any cleanup required. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_uid:1
# a285826d88d141d4b6b388ee99c1eccc
msgid "Must return a unique id for the currently connected device (this is called immediately after a successful call to open()). You must implement this method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ignore_connected_device:1
# 0aeee990c7e04abbb369c062d3e39549
msgid "Should ignore the device identified by uid (the result of a call to get_device_uid()) in the future. You must implement this method if you set ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately after open(), so if open() caches some state, the driver should reset that state."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
# 56a4dfa5de8c4242a4a20fa43d02ed4a
msgid "Return map of device uid to friendly name for all devices that the user has asked to be ignored."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
# 3636710e922b48a2a81b48325ca4b7ca
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
# d20bee001d1e4011a2d04fe5f1143778
msgid "Implement this method if your device wants to override a particular preference. You must ensure that all call sites that want a preference that can be overridden use device_prefs['something'] instead of prefs['something']. Your method should call device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: metadata management (prefs['manage_device_metadata'])"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
# c0f608e204fa4aa8aba2a6fafd15960e
msgid "Called by the device manager when starting plugins. If this method returns a string, then a) it supports the device manager's dynamic control interface, and b) that name is to be used when talking to the plugin."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:4
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:3
# f5c7746b49ea4eaa9a261aab4592468f
# fa4018c8fdab4df89dbe97612c954221
# 11963f821bd84e098406a4d58e306c8a
# abcc94564081475487ae7cedb7aa7c18
# e7f1fb33c8204e999ec2cd2a7f1dc141
# e6a53ecb651e451b821b4221450a135a
msgid "This method can be called on the GUI thread. A driver that implements this method must be thread safe."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:1
# 944ea0b68b6942e78e6b1ac849b08fd7
msgid "This method is called to start the plugin. The plugin should begin to accept device connections however it does that. If the plugin is already accepting connections, then do nothing."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:1
# 29734481388b47448a1e832b26745261
msgid "This method is called to stop the plugin. The plugin should no longer accept connections, and should cleanup behind itself. It is likely that this method should call shutdown. If the plugin is already not accepting connections, then do nothing."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:1
# 8dff14bca9a24971899c3c1579018282
msgid "Return the value of the option indicated by opt_string. This method can be called when the plugin is not started. Return None if the option does not exist."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:1
# edbf733d479043f5a1d02a6a7f8b13b7
msgid "Set the value of the option indicated by opt_string. This method can be called when the plugin is not started."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:1
# db6bf70a4dcc42b293bb52ff26eb3b39
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:1
# 4325717fba8f472b8f1f6bf35a3d516c
msgid "Called during book matching when a book on the device is matched with a book in calibre's db. The method is responsible for syncronizing data from the device to calibre's db (if needed)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:5
# c6fddbad179044f79373f7f2b4632ae8
msgid "The method must return a set of calibre book ids changed if calibre's database was changed, None if the database was not changed. If the method returns an empty set then the metadata for the book on the device is updated with calibre's metadata and given back to the device, but no GUI refresh of that book is done. This is useful when the calire data is correct but must be sent to the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:12
# e225c005d1884e2b9f7dce452f247baf
msgid "Extremely important: this method is called on the GUI thread. It must be threadsafe with respect to the device manager's thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:15
# 43d05f937caf48eaa94cc134ecfe7e04
msgid "book_id: the calibre id for the book in the database. book_metadata: the Metadata object for the book coming from the device."
msgstr ""

#: ../../<autodoc>:1
# f3f4c52f48354944ae82b6b231475856
msgid "Bases: :class:`list`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:1
# 5f6a920c7c7d4d05a40c119a5e578a61
msgid "A list of books. Each Book object must have the fields"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:3
# 056dc2ac57b04ca084b5539a3a10cba5
msgid "title"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:4
# ea578c97ac564dcd829126d29aed4f31
msgid "authors"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:5
# fc5f1eb41e6a4d419896375cdd24cacd
msgid "size (file size of the book)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:6
# cdf65b929db240498bdac0344057cbf1
msgid "datetime (a UTC time tuple)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:7
# 337f1a823ae7455189e47240e77df83e
msgid "path (path on the device to the book)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:8
# a473cf02aaa34b849a2242fda6501e00
msgid "thumbnail (can be None) thumbnail is either a str/bytes object with the image data or it should have an attribute image_path that stores an absolute (platform native) path to the image"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:11
# 807b23f1bef24c41ac7096a8c40fd50b
msgid "tags (a list of strings, can be empty)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.supports_collections:1
# 9b8bd47cdc314c7eaaba86da909a2c7c
msgid "Return True if the device supports collections for this book list."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.add_book:1
# acc1d63589054534baed4fc8f0ccc01e
msgid "Add the book to the booklist. Intent is to maintain any device-internal metadata. Return True if booklists must be sync'ed"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.remove_book:1
# 0953e31f50df44a89ca8eb9a548c0e5b
msgid "Remove a book from the booklist. Correct any device metadata at the same time"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:1
# beb4f53ba111471287a41cfabc9989b3
msgid "Return a dictionary of collections created from collection_attributes. Each entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:5
# 86ca817638384651aff538c5f19b84e6
msgid "The list of books is sorted by book title, except for collections created from series, in which case series_index is used."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:8
# 5f05c42e16954c508646753982cca9c3
msgid "A list of attributes of the Book object"
msgstr ""

#: ../../plugins.rst:111
# aeb11dee24664e778ac94a84e25d466a
msgid "USB Mass Storage based devices"
msgstr ""

#: ../../plugins.rst:113
# f7269a44995e4c8aa07d79481291da5f
msgid "The base class for such devices is :class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits some of its functionality from its bases, documented below. A typical basic USBMS based driver looks like this:"
msgstr ""

#: ../../<autodoc>:1
# bc49d7b895474efebd9776cc79d27ce1
msgid "Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, :class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device:1
# 967b2de3dfb94b0ea4bcf2ba21dc9568
msgid "This class provides logic common to all drivers for devices that export themselves as USB Mass Storage devices. Provides implementations for mounting/ejecting of USBMS devices on all platforms."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
# d79e76c830c14648be98f9bf588d1763
msgid "String identifying the main memory of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
# c059eb0a54974df09275edd142919598
msgid "String identifying the first card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
# 156ef0d2267f4366a18a47f23f47c320
msgid "String identifying the second card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
# 22b1708626b4445dbbef0128e490d524
msgid "Used by the new driver detection to disambiguate main memory from storage cards. Should be a regular expression that matches the main memory mount point assigned by OS X"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
# b208f8057d7d49189a7622055ddd1eac
msgid "The maximum length of paths created on the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
# 83d4164f79964e7a84ac77c6cfdea842
msgid "Put news in its own folder"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.windows_sort_drives:1
# be8e36f4b8dc498e8f0bfc7c1d060df1
msgid "Called to disambiguate main memory and storage card for devices that do not distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The EB600"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_callback:1
# ef3823ce71394cd5a86ec674a7ca7345
msgid "Callback to allow individual device drivers to override the path sanitization used by :meth:`create_upload_path`."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.filename_callback:1
# 5abb02c37a3142ef8208cd3a0d937149
msgid "Callback to allow drivers to change the default file name set by :meth:`create_upload_path`."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_path_components:1
# a02d8fb96d934a8886a983b333ccc95e
msgid "Perform any device specific sanitization on the path components for files to be uploaded to the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.get_annotations:1
# 6d3918412d534b35b7992d7609937a05
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.add_annotation_to_library:1
# ebea8e8792b44840a59de0f76d8081da
msgid "Add an annotation to the calibre library"
msgstr ""

#: ../../<autodoc>:1
# 72558edced8a47c5a1d31e7db3c16ba6
msgid "Bases: :class:`calibre.devices.usbms.cli.CLI`, :class:`calibre.devices.usbms.device.Device`"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS:1
# 78b8bc7d123c4fe8bd5245908270391b
msgid "The base class for all USBMS devices. Implements the logic for sending/getting/updating metadata/caching metadata/etc."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:1
# f43e3225c64b4c629a3523071b85ff96
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:3
# a5501a5ffec3427d986e786e70e9fec2
msgid "The full path to the directory where the associated book is located."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:4
# dbdbd5f1240744a8a1d03734ac6691c1
msgid "The name of the book file without the extension."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:5
# 25737c8a1b144a9e85d724b13a54c849
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:7
# ae3d8c7fce864be79d1a8377a596ae15
msgid "The full path to the ebook file"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.normalize_path:1
# 2d0924d7b48640d98c237717d6e05f9d
msgid "Return path with platform native path separators"
msgstr ""

#: ../../plugins.rst:159
# b4887b453a71426b8e67aa5f2a7fff16
msgid "User Interface Actions"
msgstr ""

#: ../../plugins.rst:161
# 2aca11b0ab2c4659b65774d0fd4e62b8
msgid "If you are adding your own plugin in a zip file, you should subclass both InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` method of you InterfaceActionBase subclass must return an instantiated object of your InterfaceBase subclass."
msgstr ""

#: ../../<autodoc>:1
# b5c1e604ad5f4007b4b92c268ef81aeb
msgid "Bases: :class:`PyQt4.QtCore.QObject`"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:1
# 725834dcfa974a9bad25504d2c5d0b02
msgid "A plugin representing an \"action\" that can be taken in the graphical user interface. All the items in the toolbar and context menus are implemented by these plugins."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:5
# f6bd1a704c054545b66a14137b715d46
msgid "Note that this class is the base class for these plugins, however, to integrate the plugin with calibre's plugin system, you have to make a wrapper class that references the actual plugin. See the :mod:`calibre.customize.builtins` module for examples."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:10
# 15857e3ed8bc4e6b9d85cc9cca056c60
msgid "If two :class:`InterfaceAction` objects have the same name, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:13
# 6d2224320caf40cdb585e711348ea60b
msgid "Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected` :meth:`shutting_down` and :meth:`initialization_complete` methods."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:17
# 64ed71eed9b14acd92f3a223cf260064
msgid "Once initialized, this plugin has access to the main calibre GUI via the :attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:22
# 31dd0980f9e0427194e3c36072c2896f
msgid "To access the actual plugin, use the :attr:`interface_action_base_plugin` attribute, this attribute only becomes available after the plugin has been initialized. Useful if you want to use methods from the plugin class like do_user_config()."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:27
# 9cddb95e7f834d71bc87869381955abe
msgid "The QAction specified by :attr:`action_spec` is automatically create and made available as ``self.qaction``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.name:1
# 7a19628ad237466e84acaee653050756
msgid "The plugin name. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.priority:1
# fdf0ea43c4964b75a9ed4defa55cec0f
msgid "The plugin priority. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.popup_type:1
# ba051aa96a9a4270ad86d2caa70ed31a
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.auto_repeat:1
# 8d9faa6824c04606a46ac031bb997b58
msgid "Whether this action should be auto repeated when its shortcut key is held down."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_spec:1
# cc5d216514a943d198e2b354211a2c45
msgid "Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and keyboard shortcut can be None shortcut must be a string, None or tuple of shortcuts. If None, a keyboard shortcut corresponding to the action is not registered. If you pass an empty tuple, then the shortcut is registered with no default key binding."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_add_menu:1
# 913a94b853064a84ad48abc78ddf674c
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
# 424c33c4d50e403197d546bf6f076fbf
msgid "If True, a clone of self.qaction is added to the menu of self.qaction If you want the text of this action to be different from that of self.qaction, set this variable to the new text"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_add_to:1
# 5a94798f71eb41c497f33340d45c6b9a
msgid "Set of locations to which this action must not be added. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_remove_from:1
# e69dd1e875524876a7c918451a74cb68
msgid "Set of locations from which this action must not be removed. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_type:1
# 61e3da2090ca4d999305c871d5fb3608
msgid "Type of action 'current' means acts on the current view 'global' means an action that does not act on the current view, but rather on calibre as a whole"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accepts_drops:1
# fead098b215341109ef115132cc1800e
msgid "If True, then this InterfaceAction will have the opportunity to interact with drag and drop events. See the methods, :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
# d64bd90ca7a84d60989f88b4e57a3e78
# be5229e3a83541c3b0da34da8f6a992a
msgid "This method should return True iff this interface action is capable of handling the drag event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.drop_event:1
# 4ee441d8f0754e84a488804824a831d9
msgid "This method should perform some useful action and return True iff this interface action is capable of handling the drop event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI. You should not perform blocking/long operations in this function. Instead emit a signal or use QTimer.singleShot and return quickly. See the builtin actions for examples."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:1
# 904c4da8071a4c99aa04299870add209
msgid "Convenience method to easily add actions to a QMenu. Returns the created QAction, This action has one extra attribute calibre_shortcut_unique_name which if not None refers to the unique name under which this action is registered with the keyboard manager."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:6
# 1ba1641656fe4fa6ac21b263737a4e77
msgid "The QMenu the newly created action will be added to"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:7
# a4b0393c713b428fb4803b178ad69222
msgid "A unique name for this action, this must be globally unique, so make it as descriptive as possible. If in doubt add a uuid to it."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:10
# 6e816ae079ce40338cb3179be161e7a1
msgid "The text of the action."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:11
# 68f34e8c880a4aa5a8c0cb75ffe0bcb4
msgid "Either a QIcon or a file name. The file name is passed to the I() builtin, so you do not need to pass the full path to the images directory."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:14
# 57557321c70347a4a3d8ab8499a64ad5
msgid "A string, a list of strings, None or False. If False, no keyboard shortcut is registered for this action. If None, a keyboard shortcut with no default keybinding is registered. String and list of strings register a shortcut with default keybinding as specified."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:18
# 645fb70124c04884bb69399bfc2662f3
msgid "A description for this action. Used to set tooltips."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:20
# 3a8aa63fc5d64a20890c20f578fe1663
msgid "A callable which is connected to the triggered signal of the created action."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:22
# 74ec2dacbb8642b2a1c94ebb05107e04
msgid "The test displayed to the user when customizing the keyboard shortcuts for this action. By default it is set to the value of ``text``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.genesis:1
# 69bc757973494ee396225a693805a5ce
msgid "Setup this plugin. Only called once during initialization. self.gui is available. The action specified by :attr:`action_spec` is available as ``self.qaction``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:1
# 4efd6225f3e24fafad8f1edce39f438b
msgid "Called whenever the book list being displayed in calibre changes. Currently values for loc are: ``library, main, card and cardb``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:4
# 5892e4f449164a619f8845b4a61ecc1e
msgid "This method should enable/disable this action and its sub actions as appropriate for the location."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:1
# 35b1f283aecb4d1fbe449a8cd3a47bc5
msgid "Called whenever the current library is changed."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:3
# 1054fad47ed6464e9ef6f9e4afd05a8f
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
# 04db7d32bc0b493e8cb6d7771ee0b17d
msgid "Called once per action when the layout of the main GUI is completed. If your action needs to make changes to the layout, they should be done here, rather than in :meth:`initialization_complete`."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.initialization_complete:1
# 106287ef35fd4118b6c64871cf6e3fc2
msgid "Called once per action when the initialization of the main GUI is completed."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:1
# 3a840a4a737342e19e628dd481dd8928
msgid "Called once per plugin when the main GUI is in the process of shutting down. Release any used resources, but try not to block the shutdown for long periods of time."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:5
# 13a208f18e214dceb0a98ffc23bf1dc6
msgid "False to halt the shutdown. You are responsible for telling the user why the shutdown was halted."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.InterfaceActionBase.load_actual_plugin:1
# 6ead6e5c538e4c53b541a1b635b63bbe
msgid "This method must return the actual interface action plugin object."
msgstr ""

#: ../../plugins.rst:176
# 24b0eefc04104b4a961a05d6783d2a62
msgid "Preferences Plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:1
# dc090671b7d8466b95604592629f0640
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:3
# 282115fcb0464797b9066a8e058a87fe
msgid "This plugin has only one important method :meth:`create_widget`. The various fields of the plugin control how it is categorized in the UI."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.config_widget:1
# 74d9c8c5c2bb4ff4a2a88cb3f7af89f9
msgid "Import path to module that contains a class named ConfigWidget which implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category_order:1
# ea872c6c3cb846de968128fbf4097c39
msgid "Where in the list of categories the :attr:`category` of this plugin should be."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.name_order:1
# ce20a6e622e84c9882017e31de7ed2f0
msgid "Where in the list of names in a category, the :attr:`gui_name` of this plugin should be"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category:1
# 1d9ea365376a4be998ab5ea0c7e9fc10
msgid "The category this plugin should be in"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_category:1
# 6cb7f5d2ba754b0da845aa91d91827de
msgid "The category name displayed to the user for this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_name:1
# 3b57d7a87a1a4c1bbf88206b52ffcac3
msgid "The name displayed to the user for this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.icon:1
# f957f4fc62ea4732aec757d967541598
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.description:1
# f7c0447145534013b25b24a3265c3c77
msgid "The description used for tooltips and the like"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:1
# e13b8c9c320745a9b097e3e9f333e9c6
msgid "Create and return the actual Qt widget used for setting this group of preferences. The widget must implement the :class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:5
# 300db6fb35964ac88a88330d04ec570a
msgid "The default implementation uses :attr:`config_widget` to instantiate the widget."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface:1
# a817b489689049518dda1cbe4245d719
msgid "This class defines the interface that all widgets displayed in the Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base class that implements this interface and defines various convenience methods as well."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
# 5cc59227ff834781a6395dd504183ce9
msgid "This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
# 9d11f48a744b40c8b9a2f995aef28dc9
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
# 36bb84eddf584d84954564eeeccff221
msgid "The tooltip for the Restore to defaults button"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
# be0789389c91465a91c0a85c98d8158b
msgid "If True the Preferences dialog will not allow the user to set any more preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
# 80895cd1caea45c4b0be53214e52fe67
msgid "Called once before the widget is displayed, should perform any necessary setup."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
# 39971cd6d4fc4a38b1b1c360e4467408
msgid "The main calibre graphical user interface"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
# 635fe517c87d422a8294ad99b1ecff90
msgid "Should set all config values to their initial values (the values stored in the config files)."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
# 81ea7093e698490d84b2702f1b9b5c03
msgid "Should set all config values to their defaults."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
# 0ec5900e0aeb4e6caf2adf376bf84bbd
msgid "Save any changed settings. Return True if the changes require a restart, False otherwise. Raise an :class:`AbortCommit` exception to indicate that an error occurred. You are responsible for giving the user feedback about what the error is and how to correct it."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
# a3d3318492fb4be48af76a2264f0ef87
msgid "Called once after this widget is committed. Responsible for causing the gui to reread any changed settings. Note that by default the GUI re-initializes various elements anyway, so most widgets won't need to use this method."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:1
# a2821118e0c649ccb8917666d5b32155
msgid "Base class that contains code to easily add standard config widgets like checkboxes, combo boxes, text fields and so on. See the :meth:`register` method."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:5
# c140ece9c31541a0b59b3383be2d4991
msgid "This class automatically handles change notification, resetting to default, translation between gui objects and config objects, etc. for registered settings."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:9
# 70f722ed3a444365ae05089d9e361190
msgid "If your config widget inherits from this class but includes setting that are not registered, you should override the :class:`ConfigWidgetInterface` methods and call the base class methods inside the overrides."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:1
# 965d8b937099402795bf3c1625be7367
msgid "Register a setting."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:3
# 3a23bc1a326f4a5d9cc41ad13b3ccebf
msgid "The setting name"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:4
# 688aa9a69334444aa85af6b3cb452e7d
msgid "The config object that reads/writes the setting"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:5
# 8a3763b1d70e400eb1d8618bd9e81d5a
msgid "The name of the GUI object that presents an interface to change the setting. By default it is assumed to be ``'opt_' + name``."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:8
# ff5b2667b30b4139a81043fe5a084383
msgid "If this setting is a multiple choice (combobox) based setting, the list of choices. The list is a list of two element tuples of the form: ``[(gui name, value), ...]``"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:11
# 2e174a0615a84312bd2a298db627f1a1
msgid "The class responsible for managing this setting. The default class handles almost all cases, so this param is rarely used."
msgstr ""

#: ../../plugins.rst:192
# 5f65bf2181c24d1e9e1b3c5f37c75d82
msgid "Viewer plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin:1
# d9cb121385734eb19d06e691bd037cb1
msgid "These plugins are used to add functionality to the calibre viewer."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_fonts:1
# 4de4d3208bed4deaac9fb54d7e5b45cb
msgid "This method is called once at viewer startup. It should load any fonts it wants to make available. For example::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_javascript:1
# 03062916d08547d89b54928258793aa8
msgid "This method is called every time a new HTML document is loaded in the viewer. Use it to load javascript libraries into the viewer. For example::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.run_javascript:1
# 7560d9aab68d422983f54bdb29bfb47f
msgid "This method is called every time a document has finished loading. Use it in the same way as load_javascript()."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_ui:1
# d317437a910a4432ab616bd0dfdba4ec
msgid "This method is called once when the viewer is created. Use it to make any customizations you want to the viewer's user interface. For example, you can modify the toolbars via ui.tool_bar and ui.tool_bar2."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_context_menu:1
# 4f01f5756d314889829b6fa3a426cb10
msgid "This method is called every time the context (right-click) menu is shown. You can use it to customize the context menu. ``event`` is the context menu event and hit_test_result is the QWebHitTestResult for this event in the currently loaded document."
msgstr ""

