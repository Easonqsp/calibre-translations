# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.12.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-28 09:14+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/plugins.rst:4
# 1246144bac0844ffb912198db8f6a40a
msgid "API Documentation for plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:9
# 1e2c90190a4049f79f0db8510ca9e703
msgid "Defines various abstract base classes that can be subclassed to create powerful plugins. The useful classes are:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:19
# 06e6f59d64254dacabb5bca765c2ac5d
msgid "Plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:1
# f943290cad1c4f3a9377caabd79e3f50
msgid "A calibre plugin. Useful members include:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 43ba6eba14cd406e8c362d198b84f782
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 6d60424ac39f4c24966b8343857bbffa
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# 6098b13c61694bdaa9794a25cd71f3fb
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# 20905183968d47d582091d32a255315b
msgid "by the user."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:9
# 747e75025bc84bd7aa0bbe66022f9805
msgid "Methods that should be overridden in sub classes:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:11
# 3354ea7fab134919802b0f159f8d2163
msgid ":meth:`initialize`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:12
# dc6be7b457094e8db939cba720ad75a5
msgid ":meth:`customization_help`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:14
# 472652fb481e4604b43848dd5142131f
msgid "Useful methods:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:16
# ad733bf6caa54c94925da2bd64657d19
msgid ":meth:`temporary_file`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:17
# 974c5b9b508f402d91c20283bbbacba7
msgid ":meth:`__enter__`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:18
# 3e9f2e647bba45b0b46b4aebdab7c365
msgid ":meth:`load_resources`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.supported_platforms:1
# 7e00dff402784d8fb13c75c0072e5811
msgid "List of platforms this plugin works on. For example: ``['windows', 'osx', 'linux']``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.name:1
# d36f11b8ce924102875fccaf65e2e8e1
msgid "The name of this plugin. You must set it something other than Trivial Plugin for it to work."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.version:1
# c0fc2ffba0d74ceb9a79389d144d030a
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.description:1
# a0df662441f446238c963650f2a6d38d
msgid "A short string describing what this plugin does"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.author:1
# 6ee5e136a2204467a5267a1b97301b26
msgid "The author of this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.priority:1
# 788d87e87b5b47bdbf8f82b2f5e2d662
msgid "When more than one plugin exists for a filetype, the plugins are run in order of decreasing priority i.e. plugins with higher priority will be run first. The highest possible priority is ``sys.maxint``. Default priority is 1."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.minimum_calibre_version:1
# 23e60c791ee0432d8fe5c1a03c955f99
msgid "The earliest version of calibre this plugin requires"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.can_be_disabled:1
# d39cad18e4854b25b394af4d79fda960
msgid "If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.type:1
# b6a13002d30a40458d4f24643764485e
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:1
# 432a30466fa9473a85493d49d1f4ba54
msgid "Called once when calibre plugins are initialized. Plugins are re-initialized every time a new plugin is added."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:4
# be79c4ea94404b15a767bddf9800c741
msgid "Perform any plugin specific initialization here, such as extracting resources from the plugin zip file. The path to the zip file is available as ``self.plugin_path``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:8
# a84bff25c545488386882144e5cbb667
msgid "Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:1
# abed4f7835b44f4d8e66e40632d2023a
msgid "Implement this method and :meth:`save_settings` in your plugin to use a custom configuration dialog, rather then relying on the simple string based default customization."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:5
# 2ba38431279b40588efe5716573dcfdb
msgid "This method, if implemented, must return a QWidget. The widget can have an optional method validate() that takes no arguments and is called immediately after the user clicks OK. Changes are applied if and only if the method returns True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:10
# 11d413f15db4427186e82c37220d269e
msgid "If for some reason you cannot perform the configuration at this time, return a tuple of two strings (message, details), these will be displayed as a warning dialog to the user and the process will be aborted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:1
# c412a320afaf48f6a266b575a7d07b1c
msgid "Save the settings specified by the user with config_widget."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:3
# 8c892dc555354dac8f7d1c22ebe13b55
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.do_user_config:1
# 6b33d79c2a6b432ca829d0fe07cea78a
msgid "This method shows a configuration dialog for this plugin. It returns True if the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:1
# 67fd3561f4d345608e16b69c760974f7
# c468039bacdd46a183acd8589787c2c8
msgid "If this plugin comes in a ZIP file (user added plugin), this method will allow you to load resources from the ZIP file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:4
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:4
# b96a0aa28ed744c7888722048fd969a8
# 41972d039ab74ce781e894b480a3a75d
msgid "For example to load an image::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:10
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:10
# 9bf48db74f40433dbe56253de5e28066
# b524d83795c94336adbc5411b4e9b4bd
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:12
# cd0ebaf575fe4517955749af1e253cf4
msgid "A dictionary of the form ``{name: file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:1
# f6222815e70f437187f62cdb6f630ac1
msgid "Return a string giving help on how to customize this plugin. By default raise a :class:`NotImplementedError`, which indicates that the plugin does not require customization."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:5
# b6edee112e184f0b821b105fa9470875
msgid "If you re-implement this method in your subclass, the user will be asked to enter a string as customization for this plugin. The customization string will be available as ``self.site_customization``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:10
# 3eb4d9f2ca98412e839a5039b93d59de
msgid "Site customization could be anything, for example, the path to a needed binary on the user's computer."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:13
# 262cdbc59d6a4382804581c218f06f14
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:1
# 1660c6a887d5450988f75443cfe39333
msgid "Return a file-like object that is a temporary file on the file system. This file will remain available even after being closed and will only be removed on interpreter shutdown. Use the ``name`` member of the returned object to access the full path to the created temporary file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:6
# ac9b90892b8344aa9803c5464e6db662
msgid "The suffix that the temporary file will have."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.cli_main:1
# 3662673b7e4f4c8e8ce5b7a8ca98bf8e
msgid "This method is the main entry point for your plugins command line interface. It is called when the user does: calibre-debug -r \"Plugin Name\". Any arguments passed are present in the args variable."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:28
# 2c6aad3f2167437d90599ab8fa11e8a2
msgid "FileTypePlugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 54e792fea8384beb907c2b5a72a2dc6d
# 9c62bb38d5f7467296865eba638b617d
# 615c7aca392946fcbb4407d102267837
# cbde88d6a4384d24b38aa72f94fa8dbf
# 1cc20d7d9d3b453a9883051cc94394a5
# a187b352c2444d94a2142ee9c4f297e9
# e5e1651f5906488d959f87b240be09a1
# fe85516034da4918bf487b3c45cff814
# b77ec1baf463425ab48dbe5690695eb7
# 5e955f6ac7fb4d30bb764e3ef263875d
# baf97f1ecaae45e7965c04397f14f5ad
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin:1
# b43dde2f67d44a55b1dddb454fdbcea9
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.file_types:1
# 0ad02bb77de140ec836af97e94828e33
msgid "Set of file types for which this plugin should be run. For example: ``{'lit', 'mobi', 'prc'}``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_import:1
# c4410934f08d4075b4c2bf417c0b2001
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postimport:1
# 0e2991445b07445ba0cd07c3f36d27b2
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_preprocess:1
# eefb8d5e78c04849a7beb8e5ca7090c7
msgid "If True, this plugin is run just before a conversion"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postprocess:1
# 63f52718e75d4536b6107205c7714b66
msgid "If True, this plugin is run after conversion on the final file produced by the conversion output plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:1
# a6a737c58f80491293271ab7732a11f8
msgid "Run the plugin. Must be implemented in subclasses. It should perform whatever modifications are required on the ebook and return the absolute path to the modified ebook. If no modifications are needed, it should return the path to the original ebook. If an error is encountered it should raise an Exception. The default implementation simply return the path to the original ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:9
# 81e1a1c5f03246f9adde042d2602563d
msgid "The modified ebook file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:12
# 50e2a00656b84cdd82fecaf4769d852e
msgid "Absolute path to the ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:14
# 66271e6bcf9b41679147820318956c54
msgid "Absolute path to the modified ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:1
# a1b878673b5543e78a2e624c410510d2
msgid "Called post import, i.e., after the book file has been added to the database."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:3
# 74753ec488e34917baeec61d89d60d02
msgid "Database id of the added book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:4
# 9b30b62a1aae4eaca3fec602757862ed
msgid "The file type of the book that was added."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:5
# 4e197af067694ff79e6e3101d73bac0d
msgid "Library database."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:39
# 995a8a2ef6b9451faa6d008934e70081
msgid "Metadata plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin:1
# 8f7c1e93823f4aa2bf2c068475975407
# 75811381567e43d8ac17be8b3760eb60
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.file_types:1
# 87018d80b61a41e391e562e7c12024e1
# b5d697753b72477eb603da0eed350927
msgid "Set of file types for which this plugin should be run For example: ``set(['lit', 'mobi', 'prc'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.get_metadata:1
# be64d333f6ed4e2cb1e0680dc5c3995b
msgid "Return metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :return: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.set_metadata:1
# 4fad67c983e94e478051b44eed8916bd
msgid "Set metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :param mi: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:54
# 4f553c11edaa46e8972d5d2fe421e544
msgid "Catalog plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin:1
# 9ccfb4f617aa418d9bf945b6f9d7632d
msgid "A plugin that implements a catalog generator."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.file_types:1
# 905d8a81bc92482dae5c20fdc8d77a8b
msgid "Output file type for which this plugin should be run For example: 'epub' or 'xml'"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.cli_options:1
# 1b9f9017da5347a2a5e041ca037931c5
msgid "CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.initialize:1
# 1a272394a8cf4ce7977bd3086f4c5c03
msgid "If plugin is not a built-in, copy the plugin's .ui and .py files from the zip file to $TMPDIR. Tab will be dynamically generated and added to the Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:1
# 24e9929f2b344949b43db59c621f1184
msgid "Run the plugin. Must be implemented in subclasses. It should generate the catalog in the format specified in file_types, returning the absolute path to the generated catalog file. If an error is encountered it should raise an Exception."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:7
# 2cf1d23bcace4009abd3bd747211a891
msgid "The generated catalog file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:10
# 09281c5ff4cc44a0959291e2c5b17fff
msgid "Absolute path to the generated catalog file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:11
# 2547b49e2111401085f96e6112c28ce1
msgid "A dictionary of keyword arguments"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:12
# 02b74cad90e44c49a29a5c347e5137ef
msgid "A LibraryDatabase2 object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:64
# c4bca8919dec4618a07c008a024ccad7
msgid "Metadata download plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.capabilities:1
# c1ad24b98c4747f2900d6c38953d8951
msgid "Set of capabilities supported by this plugin. Useful capabilities are: 'identify', 'cover'"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.touched_fields:1
# 02f94cab655a4d8fa0248be70a1505dd
msgid "List of metadata fields that can potentially be download by this plugin during the identify phase"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
# e345e62330ea4163a3eb50fd84360497
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
# 4928cadd520e4cc3a98759a3077b17e0
msgid "Setting this to True means that the browser object will add Accept-Encoding: gzip to all requests. This can speedup downloads but make sure that the source actually supports gzip transfer encoding correctly first"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
# 5f1d0323373d479396be03c48c3d2e17
msgid "Cached cover URLs can sometimes be unreliable (i.e. the download could fail or the returned image could be bogus. If that is often the case with this source set to False"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.options:1
# a104f14314a14aa4825df2b85a8a4e03
msgid "A list of :class:`Option` objects. They will be used to automatically construct the configuration widget for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.config_help_message:1
# d13393c7830a49c18dd01a87ccbf772f
msgid "A string that is displayed at the top of the config widget for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
# 983811aa186444eb9f375873b48ca5ca
msgid "If True this source can return multiple covers for a given query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
# 9171d10412964a819b1a9ede4b468ca7
msgid "If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.prefer_results_with_isbn:1
# 0ad63beb56424a30bf38bfc07cbdd4b2
msgid "If set to True, and this source returns multiple results for a query, some of which have ISBNs and some of which do not, the results without ISBNs will be ignored"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.is_configured:1
# a6d97643c358408497b82258f6b2f716
msgid "Return False if your plugin needs to be configured before it can be used. For example, it might need a username/password/API key."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
# 80bcc3ebec314b49a654132465d6c7de
msgid "Take a list of authors and return a list of tokens useful for an AND search query. This function tries to return tokens in first name middle names last name order, by assuming that if a comma is in the author name, the name is in lastname, other names form."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
# 21ac11e60bff4587aab84d4558ad87db
msgid "Take a title and return a list of tokens useful for an AND search query. Excludes connectives(optionally) and punctuation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
# 7ae9df6c1a5043e292d7fd2eea3fe2ce
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.test_fields:1
# 144a37fc1a25432eb069d5411a98a106
msgid "Return the first field from self.touched_fields that is null on the mi object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
# 9b62a0445ade450daf0b414c43fc0174
msgid "Call this method in your plugin's identify method to normalize metadata before putting the Metadata object into result_queue. You can of course, use a custom algorithm suited to your metadata source."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
# 0787052427144a37ab2e81ef81d59fd1
msgid "Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, identifier_value, URL). The URL is the URL for the book identified by identifiers at this source. identifier_type, identifier_value specify the identifier corresponding to the URL. This URL must be browseable to by a human using a browser. It is meant to provide a clickable link for the user to easily visit the books page at this source. If no URL is found, return None. This method must be quick, and consistent, so only implement it if it is possible to construct the URL from a known scheme given identifiers."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
# eeaf2e4e35474dee9a02948038eb250b
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
# 16422cfcdad74048a123c35a8a704bf5
msgid "Return cached cover URL for the book identified by the identifiers dict or None if no such URL exists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
# 9d18d851c1b34018b8a17042aeb96591
msgid "Note that this method must only return validated URLs, i.e. not URLS that could result in a generic cover image or a not found error."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
# 6a1bc208d7694717a1b2da086c2826ae
msgid "Return a function that is used to generate a key that can sort Metadata objects by their relevance given a search query (title, authors, identifiers)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
# 27f82c5ad74f44adafb57d460f65f08f
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
# 7b5f87d40713427d8fa1bca3a5dfca06
msgid "For details on the default algorithm see :class:`InternalMetadataCompareKeyGen`. Re-implement this function in your plugin if the default algorithm is not suitable."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:1
# f17b8c6cc3f34e399a4e76aa033c987a
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:3
# d01ac81ab27449518e7084bd03c7e08b
msgid "If identifiers(s) are specified and no match is found and this metadata source does not store all related identifiers (for example, all ISBNs of a book), this method should retry with just the title and author (assuming they were specified)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:8
# 7dab672ad65143ee832400d0946da490
msgid "If this metadata source also provides covers, the URL to the cover should be cached so that a subsequent call to the get covers API with the same ISBN/special identifier does not need to get the cover URL again. Use the caching API for this."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:13
# 9db1552fea12468b953125425ac43bd4
msgid "Every Metadata object put into result_queue by this method must have a `source_relevance` attribute that is an integer indicating the order in which the results were returned by the metadata source for this query. This integer will be used by :meth:`compare_identify_results`. If the order is unimportant, set it to zero for every result."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:19
# 7db2becc6d2045609d7dfe0096586c58
msgid "Make sure that any cover/isbn mapping information is cached before the Metadata object is put into result_queue."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:22
# baaddd61639b4a7b9d1a7e07580cf93d
msgid "A log object, use it to output debugging information/errors"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:23
# 3fed87582c54490bba0043bb44b4c5c2
msgid "A result Queue, results should be put into it. Each result is a Metadata object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:25
# 39ad65e8b98e4188abf1cbeec832ceb3
msgid "If abort.is_set() returns True, abort further processing and return as soon as possible"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:27
# 2196896c4e4541719fa1ac0bae716325
msgid "The title of the book, can be None"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:28
# dafb4fa298774edba49baac47a837b50
msgid "A list of authors of the book, can be None"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:29
# fa91802f3e754e45ace743b576fd1635
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:31
# 4b5e4e6ab8c74dfa845921d352ff00f4
msgid "Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:33
# 1aba63f1d2e9419a937a78887c338fc2
msgid "None if no errors occurred, otherwise a unicode representation of the error suitable for showing to the user"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:1
# e4990941396b4a76a6f2e4de87324f53
msgid "Download a cover and put it into result_queue. The parameters all have the same meaning as for :meth:`identify`. Put (self, cover_data) into result_queue."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:5
# ae4f6dddf254444aa9007fb573a61bf7
msgid "This method should use cached cover URLs for efficiency whenever possible. When cached data is not present, most plugins simply call identify and use its results."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:9
# 8ccafb48304942ef878a850c08bf2056
msgid "If the parameter get_best_cover is True and this plugin can get multiple covers, it should only get the \"best\" one."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
# 343b8b1a092346329a33f099c45c368f
msgid "Generate a sort key for comparison of the relevance of Metadata objects, given a search query. This is used only to compare results from the same metadata source, not across different sources."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
# 69e248bc890a4a3e8136305c3134ba9e
msgid "The sort key ensures that an ascending order sort is a sort by order of decreasing relevance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
# d2d2fbe5c84d4a099b65a2eb8c19148f
msgid "The algorithm is:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
# ac8b7138eca146868d5ad279b5ef36e6
msgid "Prefer results that have at least one identifier the same as for the query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
# ee71e26ded7f454ca3fd75e2c0bc8a80
msgid "Prefer results with a cached cover URL"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
# af669de0d3da496fabc5c161eaac9e0a
msgid "Prefer results with all available fields filled in"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
# 30684073261b400d9d8e3307af928bd8
msgid "Prefer results with the same language as the current user interface language"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
# 196936cc5d3949e88cfd34a482df44ab
msgid "Prefer results that are an exact title match to the query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
# f5ad9ebd4a1f4df98ca61f995557f7ca
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
# ac6e3f73b1704b74a9b824140d00d6aa
msgid "Use the relevance of the result as reported by the metadata source's search"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:17
# df74d24c71b0437abd1633780b2af126
msgid "engine"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:76
# fe03cedfe7f34d73bde35dcc19c4a07b
msgid "Conversion plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin:1
# 5ff32c18da7c4e4aad1b4d7bb2f95b4b
msgid "InputFormatPlugins are responsible for converting a document into HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.file_types:1
# 0a251d4ceb284c50a2d341157b7cb029
msgid "Set of file types for which this plugin should be run For example: ``set(['azw', 'mobi', 'prc'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
# 2463940487fb4ebf9cfe998cd00757f0
msgid "If True, this input plugin generates a collection of images, one per HTML file. This can be set dynamically, in the convert method if the input files can be both image collections and non-image collections. If you set this to True, you must implement the get_images() method that returns a list of images."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.core_usage:1
# 0768641cb9194c9e904a49122eecaaa0
msgid "Number of CPU cores used by this plugin A value of -1 means that it uses all available cores"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.for_viewer:1
# 60f545313f394d21a24fbbe9872145ba
msgid "If set to True, the input plugin will perform special processing to make its output suitable for viewing"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.output_encoding:1
# 08b9b1c6f3c94afbaac872c4a5ecab2e
msgid "The encoding that this input plugin creates files in. A value of None means that the encoding is undefined and must be detected individually"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.common_options:1
# fb41fed23177440dae4b26e4a5bdf0af
# 0ee8fc0651804890b2e5013015315c05
msgid "Options shared by all Input format plugins. Do not override in sub-classes. Use :attr:`options` instead. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.options:1
# c01df7bbf0d546d7ae2e727e15586fa5
# f5f2d29c27d34bb28b0634ef8a553c7b
msgid "Options to customize the behavior of this plugin. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.recommendations:1
# 50d2fe198ed749a48ddadaf390653a61
# 71745b5aace44f38af5b9de7cd8f8387
msgid "A set of 3-tuples of the form (option_name, recommended_value, recommendation_level)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.get_images:1
# bf36b4f6667e4c7fbc618730d0592fa1
msgid "Return a list of absolute paths to the images, if this input plugin represents an image collection. The list of images is in the same order as the spine and the TOC."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:1
# 86031461c107488989576c162cde62fb
msgid "This method must be implemented in sub-classes. It must return the path to the created OPF file or an :class:`OEBBook` instance. All output should be contained in the current directory. If this plugin creates files outside the current directory they must be deleted/marked for deletion before this method returns."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:8
# 8bf4ebf674754e7c9a4d9d272d05f47d
msgid "A file like object that contains the input file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:9
# 428e49a30b1649d2b28dc9d691d6f2fc
msgid "Options to customize the conversion process. Guaranteed to have attributes corresponding to all the options declared by this plugin. In addition, it will have a verbose attribute that takes integral values from zero upwards. Higher numbers mean be more verbose. Another useful attribute is ``input_profile`` that is an instance of :class:`calibre.customize.profiles.InputProfile`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:17
# f070c193ff8945ef9fcc29ab7dddc4ba
msgid "The extension (without the .) of the input file. It is guaranteed to be one of the `file_types` supported by this plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:20
# 402ffef4423045e29a88149fc650d01a
msgid "A :class:`calibre.utils.logging.Log` object. All output should use this object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:22
# 5562e75c75e544e08bbfbf744459b3aa
msgid "A dictionary of various information that the input plugin can get easily that would speed up the subsequent stages of the conversion."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
# 2c2c26d49c8a432c9777d5994f1c0c06
msgid "Called to allow the input plugin to perform postprocessing after the book has been parsed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.specialize:1
# 340083b5fe684a62b05dc3c9242067ad
msgid "Called to allow the input plugin to specialize the parsed book for a particular output format. Called after postprocess_book and before any transforms are performed on the parsed book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
# 903706cca23c4c4fa5e4832987589e0f
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builting input plugins for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:1
# 8ccb75436ec44bdc8c8fc1dc13e6ff37
msgid "OutputFormatPlugins are responsible for converting an OEB document (OPF+HTML) into an output ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:4
# 985be69cd2b541bca0932e8476d125d1
msgid "The OEB document can be assumed to be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.file_type:1
# 01d9c635a42b4e2ca7c1e94c9ab09177
msgid "The file type (extension without leading period) that this plugin outputs"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:1
# 0f3a08d5354246e5a6be6a1a4a84b8a0
msgid "Render the contents of `oeb_book` (which is an instance of :class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:4
# 9c6da812bb82483ab68c9ec943a3c5cc
msgid "Either a file like object or a string. If it is a string it is the path to a directory that may or may not exist. The output plugin should write its output into that directory. If it is a file like object, the output plugin should write its output into the file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:8
# 5195f3de36c9484b9d216b41e07a01a4
msgid "The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:10
# 04c47d2c8f1a4427b5fb85f7c64ecd6b
msgid "Conversion options. Guaranteed to have attributes corresponding to the OptionRecommendations of this plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:12
# d5ab1e87faf646f4ae6249ece2f15bcc
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
# 564f82aae97e4ab5bced4cc3d09d1705
msgid "Can be used to make changes to the css during the CSS flattening process."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
# 65fb8ae92adb43cba1b2d60f97d1a1b8
msgid "The item (HTML file) being processed"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
# 595f72b0f1494be186379d54cd508d4f
msgid "A Stylizer object containing the flattened styles for item. You can get the style for any element by stylizer.style(element)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
# d645e35b9c9344f2bab0a2b496a8a921
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builtin output plugins for examples."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:91
# 1f9e96d196b9473b8ae1935828764952
msgid "Device Drivers"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:95
# c9c519b3ac3c4cd1839a8f6efd50433c
msgid "The base class for all device drivers is :class:`DevicePlugin`. However, if your device exposes itself as a USBMS drive to the operating system, you should use the USBMS class instead as it implements all the logic needed to support these kinds of devices."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin:1
# dcc9831b5be44d8cac8e7ff534721163
msgid "Defines the interface that should be implemented by backends that communicate with an ebook reader."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.FORMATS:1
# 8ea53daf216347b7b260746b002e3183
msgid "Ordered list of supported formats"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VENDOR_ID:1
# 83ca347e44b146808c70409bde0541fd
msgid "VENDOR_ID can be either an integer, a list of integers or a dictionary If it is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
# be2c07f1c6d94b0486b7c4de312ea2e2
msgid "An integer or a list of integers"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.BCD:1
# cd10253d6bd34367abc9141a0fbf3b24
msgid "BCD can be either None to not distinguish between devices based on BCD, or it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
# daa3b777351a4532ab55fe5ca1ee60a0
msgid "Height for thumbnails on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
# 7caadf09cfbb4230a574c8851f8aef7f
msgid "Width for thumbnails on the device. Setting this will force thumbnails to this size, not preserving aspect ratio. If it is not set, then the aspect ratio will be preserved and the thumbnail will be no higher than THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 to have better quality thumbnails with fewer compression artifacts. Of course, the thumbnails get larger as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
# 38701265bf4141cc95906ead457dd2aa
msgid "Set this to True if the device supports updating cover thumbnails during sync_booklists. Setting it to true will ask device.py to refresh the cover thumbnails during book matching"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
# 26297b1f44ad443a8c5eb9fd39e17979
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
# 844b16713b8141a5a27f39cc7cd3c532
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.path_sep:1
# f12e30e1c11c45cc83067d07803a58a3
msgid "Path separator for paths to books on device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.icon:1
# 63a2b89c2723456d91a68445dca7a77a
msgid "Icon for this device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
# 833baafa22e846fea07ccd0956abb854
msgid "GUI displays this as a message if not None. Useful if opening can take a long time"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
# f5c4d6c96a1e40f9ac8923627687a103
msgid "Set of extensions that are \"virtual books\" on the device and therefore cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
# 63b6bc6798e34eb8a4f7d8a447b91fb3
msgid "Whether to nuke comments in the copy of the book sent to the device. If not None this should be short string that the comments will be replaced by."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
# 2f0a8adb69b041978168862506205384
msgid "If True indicates that  this driver completely manages device detection, ejecting and so forth. If you set this to True, you *must* implement the detect_managed_devices and debug_managed_device_detection methods. A driver with this set to true is responsible for detection of devices, managing a blacklist of devices, a list of ejected devices and so forth. calibre will periodically call the detect_managed_devices() method and if it returns a detected device, calibre will call open(). open() will be called every time a device is returned even is previous calls to open() failed, therefore the driver must maintain its own blacklist of failed devices. Similarly, when ejecting, calibre will call eject() and then assuming the next call to detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
# 0318e5d5efb94f0c915751f5798a5ae7
msgid "If set the True, calibre will call the :meth:`get_driveinfo()` method after the books lists have been loaded to get the driveinfo."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
# abeaafa31d7346318768b2f96438cad2
msgid "If set to True, calibre will ask the user if they want to manage the device with calibre, the first time it is detected. If you set this to True you must implement :meth:`get_device_uid()` and :meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` and :meth:`set_user_blacklisted_devices`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
# 0cdcfbd9aaac4835b0b59fb07c9aa87d
msgid "Set this to a dictionary of the form {'title':title, 'msg':msg, 'det_msg':detailed_msg} to have calibre popup a message to the user after some callbacks are run (currently only upload_books). Be careful to not spam the user with too many messages. This variable is checked after *every* callback, so only set it when you really need to."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:1
# a3ec8132971a4c5ea5b27609a7f847ba
msgid "Return True, device_info if a device handled by this plugin is currently connected."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:3
# d85cccaafa9b465e99b9d720c13edce1
msgid "List of devices currently connected"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
# 6b2c78e99c994b2d87a9d404c3bc021d
# 6144ac38d6b74c4b8fffbd6e77b56d48
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:3
# 069e02fa248d4b48b2739fa4e662b8ea
msgid "Scan for devices that this driver can handle. Should return a device object if a device is found. This object will be passed to the open() method as the connected_device. If no device is found, return None. The returned object can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:9
# d4b53abe27b14298a5b62bb5db705277
msgid "This method is called periodically by the GUI, so make sure it is not too resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:13
# b3e574e3d9e8457094d6c50036b64044
msgid "Set of USB devices found on the system."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:15
# 9a95a661e1b54fe3bbe181b380a835ef
msgid "If True and the driver uses a cache to prevent repeated scanning, the cache must be flushed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
# 61ec79f247ad4eb18811115fb63447d2
msgid "Should write information about the devices detected on the system to output, which is a file like object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
# 952a0d519b1d44ed962038f5303c4554
msgid "Should return True if a device was detected and successfully opened, otherwise False."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:1
# 5792f4b0086e453db527f108da851555
msgid "The key to unlock the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:2
# b8eec1f4147c439ea0bf646eb4030e91
msgid "If true the packet stream to/from the device is logged"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:3
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:3
# 8da02627c0c94633a6d0879667c1b1f9
# 8e97d3bb64784b31ba2a06362211e8a6
msgid "Function that is called with a % progress (number between 0 and 100) for various tasks If it is called with -1 that means that the task does not have any progress information"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:7
# 25fe1fcb4b1b487f944fda58a54b06be
msgid "Device information from the device scanner"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:1
# 1e109c04bd364076a09c6bd1800bafac
msgid "Optional method to perform further checks on a device to see if this driver is capable of handling it. If it is not it should return False. This method is only called after the vendor, product ids and the bcd have matched, so it can do some relatively time intensive checks. The default implementation returns True. This method is called only on windows. See also :meth:`can_handle`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:8
# d5bf9f8937bd4041bb0a573771939e73
msgid "On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, bcd)``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:1
# 884b9c3fa61f498eaca95b8b3fa16dd2
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:3
# b935a9f15d744f75bd99ab83f7138e65
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:1
# 81b70f443d35449e9b98e502a1d1ba30
msgid "Perform any device specific initialization. Called after the device is detected but before any other functions that communicate with the device. For example: For devices that present themselves as USB Mass storage devices, this method would be responsible for mounting the device or if the device has been automounted, for finding out where it has been mounted. The method :meth:`calibre.devices.usbms.device.Device.open` has an implementation of this function that should serve as a good example for USB Mass storage devices."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:11
# 15c58ba8d8a5477d8bce31e2592a6407
msgid "This method can raise an OpenFeedback exception to display a message to the user."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:14
# 0fcd2455e8204291a9931ab1a7919408
msgid "The device that we are trying to open. It is a tuple of (vendor id, product id, bcd, manufacturer name, product name, device serial number). However, some devices have no serial number and on windows only the first three fields are present, the rest are None."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:20
# 2c539e98d1fb4b9abe4fe35325558a64
msgid "The UUID of the current calibre library. Can be None if there is no library (for example when used from the command line)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:1
# e2bc00908b514effbaa7a3fbd0355ff9
msgid "Un-mount / eject the device from the OS. This does not check if there are pending GUI jobs that need to communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:4
# 6608b7896bd749e5a8bebf104c421fde
msgid "NOTE: That this method may not be called on the same thread as the rest of the device methods."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
# 2a75c2535ec5488e80579848a94ebfe6
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:1
# 21d808d579154056a3fa901d03bd32bb
msgid "Set a function to report progress information."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:1
# 11ba6548b3a34aee88175659462d41d9
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:3
# bc187f3f8afa442a9cdd7253f06c50ef
msgid "(device name, device version, software version on device, mime type) The tuple can optionally have a fifth element, which is a drive information dictionary. See usbms.driver for an example."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_driveinfo:1
# e4fce3ca57564912ae3d417f04de74f3
msgid "Return the driveinfo dictionary. Usually called from get_device_information(), but if loading the driveinfo is slow for this driver, then it should set SLOW_DRIVEINFO. In this case, this method will be called by calibre after the book lists have been loaded. Note that it is not called on the device thread, so the driver should cache the drive info in the books() method and this function should return the cached data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.card_prefix:1
# b6d63a73ac984213accf7b69f1ec5acc
msgid "Return a 2 element list of the prefix to paths on the cards. If no card is present None is set for the card's prefix. E.G. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# e0ce73b8a7b9496f85ae367dd84bffe9
msgid "Get total space available on the mountpoints:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:2
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:2
# 22cec5dd8b5d4bbc8d44c95de2627b12
# 5dc5805507854bd987cf8d2d4c41608a
msgid "Main memory"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:3
# dec1abb9fe6849dfad2cb2ffa9b92f43
msgid "Memory Card A"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# e939064236ea406398cf9faa38af89ff
msgid "Memory Card B"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:6
# f361b8aedd51478daf53074ba48f75da
msgid "A 3 element list with total space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return 0."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# da9c5a04937d4aaca491134de6eba28a
msgid "Get free space available on the mountpoints:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:3
# 57d650f97030422ba84fb421e88fcc00
msgid "Card A"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 598b015fa77f4bd6ae87aeab51c41764
msgid "Card B"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:6
# 91c12e4b9c134afa8b4420d9e59d5dde
msgid "A 3 element list with free space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return -1."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:1
# ad5aaa4406144298958a03b67caabbfc
msgid "Return a list of ebooks on the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:3
# aea1c1cf1e0140f78fbf044f94990d3f
msgid "If 'carda' or 'cardb' return a list of ebooks on the specific storage card, otherwise return list of ebooks in main memory of device. If a card is specified and no books are on the card return empty list."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:8
# 993c8e56182149cfadbd7c64a487aa25
msgid "A BookList."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:1
# 7160a4cdb7f2426f83a403d6f6510ff9
msgid "Upload a list of books to the device. If a file already exists on the device, it should be replaced. This method should raise a :class:`FreeSpaceError` if there is not enough free space on the device. The text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is not None otherwise it must contain the word \"memory\"."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:7
# a3b6a2e4bf7941409d81af7f268712a3
msgid "A list of paths"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:8
# 77023b2e7243475c85fd3dface17fe4f
msgid "A list of file names that the books should have once uploaded to the device. len(names) == len(files)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:10
# 9e821b206a344a0b8d2550e05ffdf7ba
msgid "If not None, it is a list of :class:`Metadata` objects. The idea is to use the metadata to determine where on the device to put the book. len(metadata) == len(files). Apart from the regular cover (path to cover), there may also be a thumbnail attribute, which should be used in preference. The thumbnail attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:17
# b27cc9c1163142fba7c366568f10367e
msgid "A list of 3-element tuples. The list is meant to be passed to :meth:`add_books_to_metadata`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
# d64d6965c15e4015871b0260c3f57bdb
msgid "Add locations to the booklists. This function must not communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
# 8a8f71f524804630875fe45702157b3e
msgid "Result of a call to L{upload_books}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
# e3cd29cef5a544a2a81ef14d57d03d55
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:3
# 010bf68c38e440deaa57e1e3eb3ad59d
# df2951fbfa154726ae545b6271c0a8a6
# 99c976f387ef46a6961b9ace418e86a9
msgid "A tuple containing the result of calls to (:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.delete_books:1
# f8d48e8dd751414ca6e63bec2bfbc0c5
msgid "Delete books at paths on device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
# 674a6aa4b28f4bc19716c3b4c891d64d
msgid "Remove books from the metadata list. This function must not communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
# 300f1afc5d7848ab891fff6bbb61c1a5
msgid "paths to books on the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:1
# a7797a762f1b433595710fb0c80d738f
msgid "Update metadata on device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:1
# af659a4b445f401d8f0fa3081eb4f20e
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:3
# be52a15178b3425e82d57c5cf4f711ac
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.config_widget:1
# b339179d75e94a89a83427e423023687
msgid "Should return a QWidget. The QWidget contains the settings for the device interface"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.save_settings:1
# d702a3d2a3ce4d638250c7ae5b2698d8
msgid "Should save settings to disk. Takes the widget created in :meth:`config_widget` and saves all settings to disk."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.settings:1
# f3761c648451496db19519bd31bd573a
msgid "Should return an opts object. The opts object should have at least one attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:1
# 62154f66f0f34a60b55a52299b1de81a
msgid "provide the driver the current set of plugboards and a function to select a specific plugboard. This method is called immediately before add_books and sync_booklists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# f9043e78149347d4a3aebbcd6950503e
msgid "pb_func is a callable with the following signature::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 2c810daa2c7d4feb8b8f437d4ecd48ac
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:8
# 31831aecb0684bd09df8b4814793f317
msgid "You give it the current device name (either the class name or DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or 'device_db'), and the plugboards (you were given those by set_plugboards, the same place you got this method)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:13
# 67611eebce3e4518966510243bf82186
msgid "None or a single plugboard instance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
# 6b1c04bd151f4e35869a7806d098ea4c
msgid "Set the device name in the driveinfo file to 'name'. This setting will persist until the file is re-created or the name is changed again."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
# d6fe3d4b4efb4962a066a513dbd7e717
msgid "Non-disk devices should implement this method based on the location codes returned by the get_device_information() method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:1
# e0474e39e8a24bdc92bae598e19c90a8
msgid "Given a list of paths, returns another list of paths. These paths point to addable versions of the books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:4
# 76bd6209519942ce8d75b05307a9cc16
msgid "If there is an error preparing a book, then instead of a path, the position in the returned list for that book should be a three tuple: (original_path, the exception instance, traceback)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.startup:1
# a66516fa02c946b690be62163eded9cf
msgid "Called when calibre is is starting the device. Do any initialization required. Note that multiple instances of the class can be instantiated, and thus __init__ can be called multiple times, but only one instance will have this method called. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.shutdown:1
# 94f4f04db2b549829cc2212f533aa0f4
msgid "Called when calibre is shutting down, either for good or in preparation to restart. Do any cleanup required. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_uid:1
# e01cf2795bbc4cc8b18d79ffceea7823
msgid "Must return a unique id for the currently connected device (this is called immediately after a successful call to open()). You must implement this method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ignore_connected_device:1
# d98aa0fb2b0b4a6f84cb1ad6a2843971
msgid "Should ignore the device identified by uid (the result of a call to get_device_uid()) in the future. You must implement this method if you set ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately after open(), so if open() caches some state, the driver should reset that state."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
# 79ee38370c8749039db6f2f7d0aab4f8
msgid "Return map of device uid to friendly name for all devices that the user has asked to be ignored."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
# db7c90018b5d412886e96314ff74c935
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
# d2997738049d4c90bebd0ae125185349
msgid "Implement this method if your device wants to override a particular preference. You must ensure that all call sites that want a preference that can be overridden use device_prefs['something'] instead of prefs['something']. Your method should call device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: metadata management (prefs['manage_device_metadata'])"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_library_info:1
# e73c1268ca304edfb3b3e1c4ab13c59b
msgid "Implement this method if you want information about the current calibre library. This method is called at startup and when the calibre library changes while connected."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
# 2d165c8d338c490582954c7cb14a8dba
msgid "Called by the device manager when starting plugins. If this method returns a string, then a) it supports the device manager's dynamic control interface, and b) that name is to be used when talking to the plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:4
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:3
# 76ed66d2e0bd48f593d3dc859e2bb86e
# 0261756b9cbd4572b69bf7b3e5a9a282
# 01e346c915794fccb7db2161d5cf8d9f
# 037071041cd045cca12df18f14a48895
# ef9fc7e352da49fbb0a1038f148d2ab9
# f759d7056a0b4c799829e4481c55aecd
msgid "This method can be called on the GUI thread. A driver that implements this method must be thread safe."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:1
# f3992559151d42f6a77d94c39381abd4
msgid "This method is called to start the plugin. The plugin should begin to accept device connections however it does that. If the plugin is already accepting connections, then do nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:1
# 6c5bceec4bf04ad4bca1f15566b33160
msgid "This method is called to stop the plugin. The plugin should no longer accept connections, and should cleanup behind itself. It is likely that this method should call shutdown. If the plugin is already not accepting connections, then do nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:1
# b49dc3e3a5154e94a096f77e1407e7e6
msgid "Return the value of the option indicated by opt_string. This method can be called when the plugin is not started. Return None if the option does not exist."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:1
# 6a1990efdd2448208ddb670c24f86659
msgid "Set the value of the option indicated by opt_string. This method can be called when the plugin is not started."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:1
# 9d6be6bf743b42538e1aab7fa46208ec
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:1
# 5222531a183e4396b788ac4a6616322f
msgid "Called during book matching when a book on the device is matched with a book in calibre's db. The method is responsible for syncronizing data from the device to calibre's db (if needed)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:5
# d2a58bcb8c2a4e45b265f4dd5a1187fa
msgid "The method must return a two-value tuple. The first value is a set of calibre book ids changed if calibre's database was changed or None if the database was not changed. If the first value is an empty set then the metadata for the book on the device is updated with calibre's metadata and given back to the device, but no GUI refresh of that book is done. This is useful when the calibre data is correct but must be sent to the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:13
# 50f1d90ceb9b4f48821e508c0feec85f
msgid "The second value is itself a 2-value tuple. The first value in the tuple specifies whether a book format should be sent to the device. The intent is to permit verifying that the book on the device is the same as the book in calibre. This value must be None if no book is to be sent, otherwise return the base file name on the device (a string like foobar.epub). Be sure to include the extension in the name. The device subsystem will construct a send_books job for all books with not- None returned values. Note: other than to later retrieve the extension, the name is ignored in cases where the device uses a template to generate the file name, which most do. The second value in the returned tuple indicated whether the format is future-dated. Return True if it is, otherwise return False. Calibre will display a dialog to the user listing all future dated books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:27
# 9dde9b8f42a340a2b1e0141ffa950281
msgid "Extremely important: this method is called on the GUI thread. It must be threadsafe with respect to the device manager's thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:30
# 0e627c562e7d4c49b2e185a61cef75a4
msgid "book_id: the calibre id for the book in the database. book_metadata: the Metadata object for the book coming from the device. first_call: True if this is the first call during a sync, False otherwise"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 69858b9b7fbc45f5913371c8faacdd6a
msgid "Bases: :class:`list`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:1
# 78e4697c6deb490f8a033aa48b5c7830
msgid "A list of books. Each Book object must have the fields"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:3
# a3ce7f4aa7e74af7b0cf6d13f0e0188c
msgid "title"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:4
# b20d6c368fa84520a039827a7873a918
msgid "authors"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:5
# c6d3c4533e974188af41d154a7949a32
msgid "size (file size of the book)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:6
# 898d27c909d2465b979805fcb740860f
msgid "datetime (a UTC time tuple)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:7
# aab004bf16644a7cb2ffab839f9a8f50
msgid "path (path on the device to the book)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:8
# e5a2ee0f4e3a46f585a0d581fe64e525
msgid "thumbnail (can be None) thumbnail is either a str/bytes object with the image data or it should have an attribute image_path that stores an absolute (platform native) path to the image"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:11
# 98fbb82ef54546dd85d72e1140464b33
msgid "tags (a list of strings, can be empty)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.supports_collections:1
# 8751b8f7f5d64e93877438d799e0cb79
msgid "Return True if the device supports collections for this book list."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.add_book:1
# 7592ef8e0d5b4faa9f9863bcaad7c6d3
msgid "Add the book to the booklist. Intent is to maintain any device-internal metadata. Return True if booklists must be sync'ed"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.remove_book:1
# d716719ec3c14b23a4c576442b1b62d0
msgid "Remove a book from the booklist. Correct any device metadata at the same time"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:1
# ff2a3fe0c1684f9aa3496b5d0a0e3552
msgid "Return a dictionary of collections created from collection_attributes. Each entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:5
# 6fcd47bf8b71432a9b6d6eb38d1580b3
msgid "The list of books is sorted by book title, except for collections created from series, in which case series_index is used."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:8
# 3bbbe430e4b44a359c4148de3e3ea9c4
msgid "A list of attributes of the Book object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:109
# 139df528ecb545d8ad51262748ed4fc1
msgid "USB Mass Storage based devices"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:111
# a8887ea67f084abfbfa3141107faf4aa
msgid "The base class for such devices is :class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits some of its functionality from its bases, documented below. A typical basic USBMS based driver looks like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 2ebb56c2074f45d6b445697596767491
msgid "Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, :class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device:1
# 781127cfdd68456e9aca221101a454cf
msgid "This class provides logic common to all drivers for devices that export themselves as USB Mass Storage devices. Provides implementations for mounting/ejecting of USBMS devices on all platforms."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
# 93c546f8bce64041a0585b50a2c355e9
msgid "String identifying the main memory of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
# e090f1698504439da4915bc6a6d391a0
msgid "String identifying the first card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
# 98c660edc22243ddaa15f5bcff0a855c
msgid "String identifying the second card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
# 5ece69c02c16496ca3a88084d5529d87
msgid "Used by the new driver detection to disambiguate main memory from storage cards. Should be a regular expression that matches the main memory mount point assigned by OS X"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
# f61aebb76d1f419587de8156a1e7beea
msgid "The maximum length of paths created on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
# aabd9ddec03d407b89f7085e4ce9316a
msgid "Put news in its own folder"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.windows_sort_drives:1
# a21ae40cd9a64f97959d27f8221835ab
msgid "Called to disambiguate main memory and storage card for devices that do not distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The EB600"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_callback:1
# ea5f2b15827945f49374edb86ad41995
msgid "Callback to allow individual device drivers to override the path sanitization used by :meth:`create_upload_path`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.filename_callback:1
# f3dba88fab5f4c39b5ddc79449cb92f5
msgid "Callback to allow drivers to change the default file name set by :meth:`create_upload_path`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_path_components:1
# d55797786e8043f08cccd07ad2dd2598
msgid "Perform any device specific sanitization on the path components for files to be uploaded to the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.get_annotations:1
# 69e6b9a643704d55a238830fe3653430
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.add_annotation_to_library:1
# bb78ba01bbf842f5b93721e623cd181a
msgid "Add an annotation to the calibre library"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 76449c841b9c4418bdd51a6b6c012452
msgid "Bases: :class:`calibre.devices.usbms.cli.CLI`, :class:`calibre.devices.usbms.device.Device`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS:1
# a748f208aec245de836cd908440db1f6
msgid "The base class for all USBMS devices. Implements the logic for sending/getting/updating metadata/caching metadata/etc."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:1
# e0396bb9320b47889d0c17f11e30efab
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:3
# d423c064c0b94b2289220e0de1039248
msgid "The full path to the directory where the associated book is located."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:4
# 11b0e248004b42d4b569d83dba27ad32
msgid "The name of the book file without the extension."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:5
# 754b7ae922c04c0b856537d14a5fc3c4
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:7
# ba1ce170f9f44a80bfa536b5a29aba85
msgid "The full path to the ebook file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.normalize_path:1
# b41b3a61d185421898c6b78819311c33
msgid "Return path with platform native path separators"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:157
# a01a2fc6a0234b9ea3331492c112a9a6
msgid "User Interface Actions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:159
# eb902e89af30454388ba850ac3c8892e
msgid "If you are adding your own plugin in a zip file, you should subclass both InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` method of you InterfaceActionBase subclass must return an instantiated object of your InterfaceBase subclass."
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# f045b29fbc3c4e91a9044cfabcaa50c4
msgid "Bases: :class:`PyQt5.QtCore.QObject`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:1
# 5198e402fefe4b069f74e167bb2c0c48
msgid "A plugin representing an \"action\" that can be taken in the graphical user interface. All the items in the toolbar and context menus are implemented by these plugins."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:5
# 7f53e33043c247dfa318ec77c3c62521
msgid "Note that this class is the base class for these plugins, however, to integrate the plugin with calibre's plugin system, you have to make a wrapper class that references the actual plugin. See the :mod:`calibre.customize.builtins` module for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:10
# e4a85a56f9124c6db6c50161947b52eb
msgid "If two :class:`InterfaceAction` objects have the same name, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:13
# b83e03dfb31341d683c2b0086ea9b20f
msgid "Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected` :meth:`shutting_down` and :meth:`initialization_complete` methods."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:17
# 1a9f1f92256c45948b4da91d58e2687d
msgid "Once initialized, this plugin has access to the main calibre GUI via the :attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:22
# 2b31378181b04d7d83b7e532fa01c034
msgid "To access the actual plugin, use the :attr:`interface_action_base_plugin` attribute, this attribute only becomes available after the plugin has been initialized. Useful if you want to use methods from the plugin class like do_user_config()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:27
# d8cbf8b659da47b5a93b00f102452963
msgid "The QAction specified by :attr:`action_spec` is automatically create and made available as ``self.qaction``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.name:1
# 10661172b9514509908d3536f3ec9551
msgid "The plugin name. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.priority:1
# 899726e030364fdfb18a2210084106f7
msgid "The plugin priority. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.popup_type:1
# f3d48470bb154542bd92c41210a17e69
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.auto_repeat:1
# 1e9ac96ce6b346b093fc8065e0d06f84
msgid "Whether this action should be auto repeated when its shortcut key is held down."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_spec:1
# 6a772554daa34542bf2e723d1c71d07f
msgid "Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and keyboard shortcut can be None shortcut must be a string, None or tuple of shortcuts. If None, a keyboard shortcut corresponding to the action is not registered. If you pass an empty tuple, then the shortcut is registered with no default key binding."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_add_menu:1
# 7904f46ee9ff46f88646d167e078482d
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
# 09cff2ae03344db3b98ae900c382a7f9
msgid "If True, a clone of self.qaction is added to the menu of self.qaction If you want the text of this action to be different from that of self.qaction, set this variable to the new text"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_add_to:1
# 69d79e99a65d435fb2ccbe14651834ba
msgid "Set of locations to which this action must not be added. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_remove_from:1
# 57121600582d4fdb83172793db9a4138
msgid "Set of locations from which this action must not be removed. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_type:1
# 98ac877ac302425998487cca18f79ad4
msgid "Type of action 'current' means acts on the current view 'global' means an action that does not act on the current view, but rather on calibre as a whole"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accepts_drops:1
# d25b64c27cb149849d2dd238433496c6
msgid "If True, then this InterfaceAction will have the opportunity to interact with drag and drop events. See the methods, :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
# d5150d251fe14ac89c9e1d9f5b191963
# 840bab5d3541475394bed309115b4d3a
msgid "This method should return True iff this interface action is capable of handling the drag event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.drop_event:1
# d24e4ae5a51f460ba5126926d0c18813
msgid "This method should perform some useful action and return True iff this interface action is capable of handling the drop event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI. You should not perform blocking/long operations in this function. Instead emit a signal or use QTimer.singleShot and return quickly. See the builtin actions for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:1
# 93653695cb5942dcb10faca30ab3e2b7
msgid "Convenience method to easily add actions to a QMenu. Returns the created QAction, This action has one extra attribute calibre_shortcut_unique_name which if not None refers to the unique name under which this action is registered with the keyboard manager."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:6
# 90ddfc0ca2fd411299aa09d64e28601a
msgid "The QMenu the newly created action will be added to"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:7
# 9186a61fee7e423894b5cbd5529e05f2
msgid "A unique name for this action, this must be globally unique, so make it as descriptive as possible. If in doubt add a uuid to it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:10
# b8800a4b20e6421ebaff6a008c01715b
msgid "The text of the action."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:11
# 895161e32b3f4191b6c4479a9636e130
msgid "Either a QIcon or a file name. The file name is passed to the I() builtin, so you do not need to pass the full path to the images directory."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:14
# 03dc0cd6753b409eb33f726ba6992ca3
msgid "A string, a list of strings, None or False. If False, no keyboard shortcut is registered for this action. If None, a keyboard shortcut with no default keybinding is registered. String and list of strings register a shortcut with default keybinding as specified."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:18
# 5a010bce7a604b71b41e35998e7f27ed
msgid "A description for this action. Used to set tooltips."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:20
# 1532e2ec3f654e8dbca73837a25cdf0f
msgid "A callable which is connected to the triggered signal of the created action."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:22
# 129fa6286fba4560baa5f64012ef9242
msgid "The test displayed to the user when customizing the keyboard shortcuts for this action. By default it is set to the value of ``text``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:12
# 7ed0d315a6c2475a8bd60e7692a4fe34
msgid "A dictionary of the form ``{name : file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.genesis:1
# 4de76561b0894add8cccec3c2d066d80
msgid "Setup this plugin. Only called once during initialization. self.gui is available. The action specified by :attr:`action_spec` is available as ``self.qaction``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:1
# 1c52be2ac305486f9e5a809ebc2c6ced
msgid "Called whenever the book list being displayed in calibre changes. Currently values for loc are: ``library, main, card and cardb``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:4
# e5af91c8df184163b9d57d30f3d1d5e7
msgid "This method should enable/disable this action and its sub actions as appropriate for the location."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:1
# 47283df445e546fe88001342b09db76e
msgid "Called whenever the current library is changed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:3
# aa0e599518b045458e519596462e13fd
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
# d8f444529b474457b57254b7c7f10bee
msgid "Called once per action when the layout of the main GUI is completed. If your action needs to make changes to the layout, they should be done here, rather than in :meth:`initialization_complete`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.initialization_complete:1
# 86c57f8d0fff457f86bcc20879a26974
msgid "Called once per action when the initialization of the main GUI is completed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:1
# 590191ba3c0547e3a67a203711596694
msgid "Called once per plugin when the main GUI is in the process of shutting down. Release any used resources, but try not to block the shutdown for long periods of time."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:5
# 27f4207850064619a667b35f1cf55c8f
msgid "False to halt the shutdown. You are responsible for telling the user why the shutdown was halted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.InterfaceActionBase.load_actual_plugin:1
# f4ce21871a68482e9d8e9a80371df6e0
msgid "This method must return the actual interface action plugin object."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:174
# d1f0c50ffcc04bc6906a906464e8dde7
msgid "Preferences Plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:1
# c1a94fd3fd454365a6acbd97551cf418
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:3
# 3965253d2669455d81dfcd8ebf6beaf6
msgid "This plugin has only one important method :meth:`create_widget`. The various fields of the plugin control how it is categorized in the UI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.config_widget:1
# d6764b6a5de44e9dac56e61d7f88ed05
msgid "Import path to module that contains a class named ConfigWidget which implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category_order:1
# eae1a21b42524217bb09e242275bbb9c
msgid "Where in the list of categories the :attr:`category` of this plugin should be."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.name_order:1
# edde796e2f0f4d3abcb76f723c5cf628
msgid "Where in the list of names in a category, the :attr:`gui_name` of this plugin should be"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category:1
# ad7c2522c45c4cca826b281760e47e5a
msgid "The category this plugin should be in"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_category:1
# 96073766a78044808e17928380fe7a02
msgid "The category name displayed to the user for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_name:1
# d3acbf6e292749e0908dafe18f89c7e0
msgid "The name displayed to the user for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.icon:1
# 8166fadb50d04f72a044e21a74875c1b
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.description:1
# aab8106472da428595cd3de53addc0a0
msgid "The description used for tooltips and the like"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:1
# bd122fb1c23e42fbb088980e89b8107b
msgid "Create and return the actual Qt widget used for setting this group of preferences. The widget must implement the :class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:5
# 530db6c0faa24bd8bc3ef120abe513c6
msgid "The default implementation uses :attr:`config_widget` to instantiate the widget."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface:1
# 80338188469e461cb10a80c4fa2853ab
msgid "This class defines the interface that all widgets displayed in the Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base class that implements this interface and defines various convenience methods as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
# 6c8797db47344df69482a0ea0d2d9c30
msgid "This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
# c1ce6973afdc405bb17c19c714e7ab33
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
# 322a3e183ec049c882707ae7c254457f
msgid "The tooltip for the Restore to defaults button"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
# ace789c6c0684451bbcc79d074067407
msgid "If True the Preferences dialog will not allow the user to set any more preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
# 62522fc2df204d1485c81e7fa10090ee
msgid "Called once before the widget is displayed, should perform any necessary setup."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
# 8e28331d3cf941969c3050dd74a86820
msgid "The main calibre graphical user interface"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
# 938ad2e378914eb0bb1d598d5f9eb32f
msgid "Should set all config values to their initial values (the values stored in the config files)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
# 330a38f931e042199a0b08dd6795fa00
msgid "Should set all config values to their defaults."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
# 14b0c77a3ddd448bb4bdc5f2caefff88
msgid "Save any changed settings. Return True if the changes require a restart, False otherwise. Raise an :class:`AbortCommit` exception to indicate that an error occurred. You are responsible for giving the user feedback about what the error is and how to correct it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
# a819e7f36f964a54941bea2af03e0c5b
msgid "Called once after this widget is committed. Responsible for causing the gui to reread any changed settings. Note that by default the GUI re-initializes various elements anyway, so most widgets won't need to use this method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:1
# d249706620734c3f9aa09b2760972995
msgid "Base class that contains code to easily add standard config widgets like checkboxes, combo boxes, text fields and so on. See the :meth:`register` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:5
# d9b0e016435c4ce883e63212446bd18a
msgid "This class automatically handles change notification, resetting to default, translation between gui objects and config objects, etc. for registered settings."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:9
# 62ae3b91c4424e25ae800f63d83093f6
msgid "If your config widget inherits from this class but includes setting that are not registered, you should override the :class:`ConfigWidgetInterface` methods and call the base class methods inside the overrides."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:1
# 1eda531443c5436a8fde25463e871496
msgid "Register a setting."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:3
# f43c26d6d4c1438e8ef006366c90c1ba
msgid "The setting name"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:4
# 6aa22d9ee5644c259bcf8243a333847f
msgid "The config object that reads/writes the setting"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:5
# 0ab6a413d13f4a71ab938ee00f23c6a6
msgid "The name of the GUI object that presents an interface to change the setting. By default it is assumed to be ``'opt_' + name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:8
# fc6ca0c22be14ad69c7d32671906c16c
msgid "If this setting is a multiple choice (combobox) based setting, the list of choices. The list is a list of two element tuples of the form: ``[(gui name, value), ...]``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:11
# 7657518601cd420c81e0a100763ce944
msgid "The class responsible for managing this setting. The default class handles almost all cases, so this param is rarely used."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:190
# e9d0efa2ccf746af95c4e6ea5744b9a1
msgid "Viewer plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.type:1
# e8b03151b03e4ceda5e6b621b36dd4bd
msgid "These plugins are used to add functionality to the calibre viewer."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_fonts:1
# fb55d9df926d4cc783c9ce0bb4a0ccfb
msgid "This method is called once at viewer startup. It should load any fonts it wants to make available. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_javascript:1
# cf5c9b20a79b40938e3b416988857d43
msgid "This method is called every time a new HTML document is loaded in the viewer. Use it to load javascript libraries into the viewer. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.run_javascript:1
# 00e0fedafebc46a1a3dc1eb02f456d7b
msgid "This method is called every time a document has finished loading. Use it in the same way as load_javascript()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_ui:1
# 9154ed9f370c45208b4354be924dba3c
msgid "This method is called once when the viewer is created. Use it to make any customizations you want to the viewer's user interface. For example, you can modify the toolbars via ui.tool_bar and ui.tool_bar2."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_context_menu:1
# eeb81981a5cb42c79f37ed90f1bec62b
msgid "This method is called every time the context (right-click) menu is shown. You can use it to customize the context menu. ``event`` is the context menu event and hit_test_result is the QWebHitTestResult for this event in the currently loaded document."
msgstr ""

