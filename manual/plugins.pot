# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.46.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-25 09:34+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../plugins.rst:6
# f069271984d64c37bd2d3436bdf67c3f
msgid "API Documentation for plugins"
msgstr ""

#: ../../plugins.rst:11
# 0d688f0f67fa4c99812ecb57df28db8a
msgid "Defines various abstract base classes that can be subclassed to create powerful plugins. The useful classes are:"
msgstr ""

#: ../../plugins.rst:21
# 6dc012a4ba8f4857962f4c1a22080327
msgid "Plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:1
# 81eefcd44e5b49689f79160900ecc221
msgid "A calibre plugin. Useful members include:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 04552e378b504ea2b347eb0f1d403d40
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 3de469997ec347bfbe200d23076aed60
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# be76f8c7677f4fe09bf3b9a066c42c47
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# dbe1208dc3ea4332a9800638fb7638a9
msgid "by the user."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:9
# ed17b8eb8b83413dbb610440d3d79888
msgid "Methods that should be overridden in sub classes:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:11
# 33c875244d5c437faefb81e816f2c0b9
msgid ":meth:`initialize`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:12
# 7fe9fbfc39434724a47d0421e540a303
msgid ":meth:`customization_help`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:14
# d2a3cf7adda94eadbb772fd5cdf5b905
msgid "Useful methods:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:16
# 8a2e57f00a74457ea7ff74d330f34ec6
msgid ":meth:`temporary_file`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.supported_platforms:1
# d42b274abffc49b1b9fd9202b0aece45
msgid "List of platforms this plugin works on For example: ``['windows', 'osx', 'linux']``"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.name:1
# d599e7fd821843d29333e72d43337e14
msgid "The name of this plugin. You must set it something other than Trivial Plugin for it to work."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.version:1
# d8c3a85f3d4b417590dd7518f458c82a
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.description:1
# 8824e1af657e4a4b9b0e6061e3536a66
msgid "A short string describing what this plugin does"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.author:1
# 924ac7de1eda463cbf06c79f6f06b6d8
msgid "The author of this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.priority:1
# 76c2246c83a248c98a8b96eb2fc98f85
msgid "When more than one plugin exists for a filetype, the plugins are run in order of decreasing priority i.e. plugins with higher priority will be run first. The highest possible priority is ``sys.maxint``. Default priority is 1."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.minimum_calibre_version:1
# fffdf00389eb4f7cab4753e423735d9e
msgid "The earliest version of calibre this plugin requires"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.can_be_disabled:1
# 46963fe095034881af1c5760ebd18010
msgid "If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.type:1
# 7cf63597e1fc4a65b10e104a896bbbe2
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:1
# 2645c16a82ec42baa830a9388778eb25
msgid "Called once when calibre plugins are initialized. Plugins are re-initialized every time a new plugin is added."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:4
# 04dd8bd076704bbc995e498a0b92abb9
msgid "Perform any plugin specific initialization here, such as extracting resources from the plugin zip file. The path to the zip file is available as ``self.plugin_path``."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:8
# 391ec76cdcc74c71ab359e400e78b685
msgid "Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:1
# 1cc00a8f877e45a8bee05ee300145bf2
msgid "Implement this method and :meth:`save_settings` in your plugin to use a custom configuration dialog, rather then relying on the simple string based default customization."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:5
# 4704b2804d7d43a0ab145ca82694ef39
msgid "This method, if implemented, must return a QWidget. The widget can have an optional method validate() that takes no arguments and is called immediately after the user clicks OK. Changes are applied if and only if the method returns True."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:10
# b2dc44ed232b4396a41c71ed0fa2dad7
msgid "If for some reason you cannot perform the configuration at this time, return a tuple of two strings (message, details), these will be displayed as a warning dialog to the user and the process will be aborted."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:1
# ea3d5ff79868427386e2cfa6a6bfd2c2
msgid "Save the settings specified by the user with config_widget."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:3
# 7fafa126da444c1a9f4ecb39161e62d5
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.do_user_config:1
# 01240405f1a44871afbb03f947884555
msgid "This method shows a configuration dialog for this plugin. It returns True if the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:1
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:1
# 681fa98d6a3a452fa0f376059da1eeb4
# c4e43664015541f995e9e90e174b6e6a
msgid "If this plugin comes in a ZIP file (user added plugin), this method will allow you to load resources from the ZIP file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:4
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:4
# 2786db48378f4069b07b066403c78aad
# 87d8d03d94f54fb3a21f6c56f480da30
msgid "For example to load an image::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:10
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:10
# a7de561ef3504860a29820e47133e908
# bd7011c49e40403f8fc2e0f31c736ca3
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:12
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:12
# dbc4c933407e4212899ee57ea7d93cb7
# eec60e4de1d446ca9403693c8d381a7f
msgid "A dictionary of the form ``{name : file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:1
# 7ea508a5f43c4e1d8cee4ceede4c6a98
msgid "Return a string giving help on how to customize this plugin. By default raise a :class:`NotImplementedError`, which indicates that the plugin does not require customization."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:5
# 67f9181337a340f3afa0beb5854138a8
msgid "If you re-implement this method in your subclass, the user will be asked to enter a string as customization for this plugin. The customization string will be available as ``self.site_customization``."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:10
# 84651fe48bc04af898123027346f1934
msgid "Site customization could be anything, for example, the path to a needed binary on the user's computer."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:13
# ecec2d245abc4500b1a49839586ae781
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:1
# 4ddca1df36d04d4e958a587c8f548da3
msgid "Return a file-like object that is a temporary file on the file system. This file will remain available even after being closed and will only be removed on interpreter shutdown. Use the ``name`` member of the returned object to access the full path to the created temporary file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:6
# 88b4e7a0a23649d6b2f141e3e7e76b47
msgid "The suffix that the temporary file will have."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.cli_main:1
# 66787951738d425cbf654b1192e04dd0
msgid "This method is the main entry point for your plugins command line interface. It is called when the user does: calibre-debug -r \"Plugin Name\". Any arguments passed are present in the args variable."
msgstr ""

#: ../../plugins.rst:30
# 58e7a03406e740c1ac3bee3732512911
msgid "FileTypePlugin"
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
# f991856177eb41d79522abaec854dde6
# 6f1a903ddac145e5a114405420ffe45c
# 515c701ab15c408cb3ccdef66b030d9c
# 0c5c5b3c959445b285663474101c163c
# 2cbe85b2c4c5428da745b8d6db0a764c
# 8e2af6a0c726488ba85e06457f2f917e
# b6ca47a60d724eac8baf7f59e94abdba
# a4993a98f264442fa3c5d3b69e745744
# d5996f797c6943439df1419dcc055ebd
# 03f8af880cb24bc18066ea6dcf0cb3b6
# 679381f285244c14b869b5d155b99275
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin:1
# 6588db74cc6f40bb92161627f96a8166
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.file_types:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.file_types:1
# afe796dec1e04a93b36215be5abd97ff
# 8d003082b954442bb75f512913f7de3a
# 38e4275d5f80481982605bd797d2a1ca
msgid "Set of file types for which this plugin should be run For example: ``set(['lit', 'mobi', 'prc'])``"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_import:1
# 6c5da675d4554aa1a046ec378f58f9bf
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postimport:1
# fec6cbb06df144879abe0a7c1b8c7881
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_preprocess:1
# f7488b37b4484760b5c36f862a306458
msgid "If True, this plugin is run just before a conversion"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postprocess:1
# 42031130d41348d3b25afdc2e929d949
msgid "If True, this plugin is run after conversion on the final file produced by the conversion output plugin."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:1
# 00df8f8ad32841c19266aa885955cc98
msgid "Run the plugin. Must be implemented in subclasses. It should perform whatever modifications are required on the ebook and return the absolute path to the modified ebook. If no modifications are needed, it should return the path to the original ebook. If an error is encountered it should raise an Exception. The default implementation simply return the path to the original ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:9
# b247980b18d546f7bf144f18cae4607e
msgid "The modified ebook file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:12
# dee8e7f7d5c843bdadc9f96121ee565c
msgid "Absolute path to the ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:14
# 63c152332d2f47dfb18caea956aae479
msgid "Absolute path to the modified ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:1
# 43fb380bb10a420dac8b0f0c5b4f7d8e
msgid "Called post import, i.e., after the book file has been added to the database."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:3
# 8d083134f2b440ef9f19ee9b67896a9f
msgid "Database id of the added book."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:4
# 9631126bbd124a43bafdbb67a32ccb6e
msgid "The file type of the book that was added. :param db: Library database."
msgstr ""

#: ../../plugins.rst:41
# 68c048aaefd54b2892ce99dc6d16f64e
msgid "Metadata plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin:1
# 2f1c86c1951040299a97b193c83348c0
# 59a460fcdb7240558e8f12e2ff59e5b3
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.get_metadata:1
# 1ed41fedd91544a59328d75ec52fe80c
msgid "Return metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :return: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.set_metadata:1
# 98ffc67794124c9997c9c0349ec661ac
msgid "Set metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :param mi: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../plugins.rst:56
# 970e9f95838b45829214c89f1666962f
msgid "Catalog plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin:1
# 9a7e667b116b4a59acb192d1b1fb8419
msgid "A plugin that implements a catalog generator."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.file_types:1
# 1feca7e87d3a44e4be1cefecbe461895
msgid "Output file type for which this plugin should be run For example: 'epub' or 'xml'"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.cli_options:1
# 6da6535e77bd44f6b3f830667a68f9b0
msgid "CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.initialize:1
# 494c874ede204a2a96cf3ba59295ff54
msgid "If plugin is not a built-in, copy the plugin's .ui and .py files from the zip file to $TMPDIR. Tab will be dynamically generated and added to the Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:1
# c39f88c983ba41e98a0a85a994aadb0f
msgid "Run the plugin. Must be implemented in subclasses. It should generate the catalog in the format specified in file_types, returning the absolute path to the generated catalog file. If an error is encountered it should raise an Exception."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:7
# dcae6610a1fd496280e0c0a3f461ba87
msgid "The generated catalog file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:10
# 018b8a5991c743e29b5941754ae02799
msgid "Absolute path to the generated catalog file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:11
# 3366ddaea4f543bdb466a3cfb7c1cbac
msgid "A dictionary of keyword arguments"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:12
# 14d88c6af16244a3b2cda4642099cfe6
msgid "A LibraryDatabase2 object"
msgstr ""

#: ../../plugins.rst:66
# 38ebf5b9466b4d48aeb08e2cea85d99c
msgid "Metadata download plugins"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.capabilities:1
# 3028b25f80f84043ac65d4adddf46c61
msgid "Set of capabilities supported by this plugin. Useful capabilities are: 'identify', 'cover'"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.touched_fields:1
# a18567a975c5488bbd387573864d6c8a
msgid "List of metadata fields that can potentially be download by this plugin during the identify phase"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
# 4c9dde6d76aa4d0da39eefd6b4ce2642
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
# 35baa5d2ff5b46709136e4409f0e20ca
msgid "Setting this to True means that the browser object will add Accept-Encoding: gzip to all requests. This can speedup downloads but make sure that the source actually supports gzip transfer encoding correctly first"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
# 2248b8ef9b08481999841766013004ef
msgid "Cached cover URLs can sometimes be unreliable (i.e. the download could fail or the returned image could be bogus. If that is often the case with this source set to False"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.options:1
# 500e996e774d42b3994910dfcb9486ea
msgid "A list of :class:`Option` objects. They will be used to automatically construct the configuration widget for this plugin"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.config_help_message:1
# bacedd97b3f044068ebe78097f3ac93d
msgid "A string that is displayed at the top of the config widget for this plugin"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
# 9a6accf543b4482b9390e6f856835c00
msgid "If True this source can return multiple covers for a given query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
# c96fc805e29b46c0ba7da28f1509e16b
msgid "If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.is_configured:1
# 12e5b41e1053402e99a9857fe65a9644
msgid "Return False if your plugin needs to be configured before it can be used. For example, it might need a username/password/API key."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
# 717cfc4da2ec4287949e274ea982817c
msgid "Take a list of authors and return a list of tokens useful for an AND search query. This function tries to return tokens in first name middle names last name order, by assuming that if a comma is in the author name, the name is in lastname, other names form."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
# 9aa7be007d7145b38d1081bfeba4e756
msgid "Take a title and return a list of tokens useful for an AND search query. Excludes connectives(optionally) and punctuation."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
# c709fe58482a4aa199574cd33447b7e2
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.test_fields:1
# e067ded67f49419ab88e03bfd27cd181
msgid "Return the first field from self.touched_fields that is null on the mi object"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
# 42830033a8704c09a5c1761461fe928a
msgid "Call this method in your plugin's identify method to normalize metadata before putting the Metadata object into result_queue. You can of course, use a custom algorithm suited to your metadata source."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
# a744ae2279bd41a99e220e3914e81a89
msgid "Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, identifier_value, URL). The URL is the URL for the book identified by identifiers at this source. identifier_type, identifier_value specify the identifier corresponding to the URL. This URL must be browseable to by a human using a browser. It is meant to provide a clickable link for the user to easily visit the books page at this source. If no URL is found, return None. This method must be quick, and consistent, so only implement it if it is possible to construct the URL from a known scheme given identifiers."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
# a06a0a90707547c2892b6974d77b90f8
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
# 7726b48f4f3c43b380abcb71fb88cabe
msgid "Return cached cover URL for the book identified by the identifiers dict or None if no such URL exists."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
# 1ef51a1ad8eb40669821b8ce8e3211b3
msgid "Note that this method must only return validated URLs, i.e. not URLS that could result in a generic cover image or a not found error."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
# d6344b93736a4589987d4bdf033d1fe9
msgid "Return a function that is used to generate a key that can sort Metadata objects by their relevance given a search query (title, authors, identifiers)."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
# 6e3d086445e1464e810938ef15839e98
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
# b23f3eff5dde4fb8a1a8ec5636702bbe
msgid "For details on the default algorithm see :class:`InternalMetadataCompareKeyGen`. Re-implement this function in your plugin if the default algorithm is not suitable."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:1
# ba31e780707a40c4aff28a3ab1675bd6
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:3
# 078fbb6113544aca95a3e4e680d9ff65
msgid "If identifiers(s) are specified and no match is found and this metadata source does not store all related identifiers (for example, all ISBNs of a book), this method should retry with just the title and author (assuming they were specified)."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:8
# 37b49b8fe5c448fd994b9d7ad876930c
msgid "If this metadata source also provides covers, the URL to the cover should be cached so that a subsequent call to the get covers API with the same ISBN/special identifier does not need to get the cover URL again. Use the caching API for this."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:13
# c6c29748ecf441878cd04ca3bdd372cf
msgid "Every Metadata object put into result_queue by this method must have a `source_relevance` attribute that is an integer indicating the order in which the results were returned by the metadata source for this query. This integer will be used by :meth:`compare_identify_results`. If the order is unimportant, set it to zero for every result."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:19
# ccad28e33d8946b3a3bf8ba473a8d637
msgid "Make sure that any cover/isbn mapping information is cached before the Metadata object is put into result_queue."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:22
# 222eeef5686c4caf817ed4f048cb737d
msgid "A log object, use it to output debugging information/errors"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:23
# 85e0eb1200904c56a7d3c12b05b2960c
msgid "A result Queue, results should be put into it. Each result is a Metadata object"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:25
# 864903f11f6644adbf1cdb941a3575a0
msgid "If abort.is_set() returns True, abort further processing and return as soon as possible"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:27
# 32c80e34a1604de89b427d4a033b50be
msgid "The title of the book, can be None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:28
# 097030489a0c42858d2114bdd3e2e279
msgid "A list of authors of the book, can be None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:29
# ef705dc047164202b59cd076b43b8232
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:31
# a9dbd90a809746379687fca723e0b670
msgid "Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:33
# 36629eabda4b46cd9272f86498b7a360
msgid "None if no errors occurred, otherwise a unicode representation of the error suitable for showing to the user"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:1
# c6b04bdbdcd84a3eb6f073d24b1a7a5b
msgid "Download a cover and put it into result_queue. The parameters all have the same meaning as for :meth:`identify`. Put (self, cover_data) into result_queue."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:5
# b71d5daedc8145798821e79695345d17
msgid "This method should use cached cover URLs for efficiency whenever possible. When cached data is not present, most plugins simply call identify and use its results."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:9
# ebb91c00c57945c6bf20f0742473e996
msgid "If the parameter get_best_cover is True and this plugin can get multiple covers, it should only get the \"best\" one."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
# 537c75ad1ec04e5fb11af3fb4b24b5ed
msgid "Generate a sort key for comparison of the relevance of Metadata objects, given a search query. This is used only to compare results from the same metadata source, not across different sources."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
# f7a6287ebb8240dd87c6e9192e4190fb
msgid "The sort key ensures that an ascending order sort is a sort by order of decreasing relevance."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
# 456e66e37d684f34b29f3a45adf6941e
msgid "The algorithm is:"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
# 9e4899b061824ed69178b0011efe9904
msgid "Prefer results that have the same ISBN as specified in the query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
# 62eab44cd5c54c20810ae14b1741cee8
msgid "Prefer results with a cached cover URL"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
# c0d835fc2c42418590892f3b71d8fdce
msgid "Prefer results with all available fields filled in"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
# 47674b3b377f4c0e9a7cce5cddcb15bc
msgid "Prefer results that are an exact title match to the query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
# 0a9dd04a710c46d08863519fbda82713
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
# 8c693576064c4b458b8f4cfdbdf6facc
msgid "Use the relevance of the result as reported by the metadata source's search"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
# af6c6b578e464fffa5175e0d58ceab59
msgid "engine"
msgstr ""

#: ../../plugins.rst:78
# 8786108077644ad2a9f73405856879c4
msgid "Conversion plugins"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin:1
# be60ce0d07844c6796aed28e3ccf296a
msgid "InputFormatPlugins are responsible for converting a document into HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.file_types:1
# 33219ba3ecb44c0b8075c2fa54dcae06
msgid "Set of file types for which this plugin should be run For example: ``set(['azw', 'mobi', 'prc'])``"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
# 6e9b9dfae4a24a06abf1ea4e542de47b
msgid "If True, this input plugin generates a collection of images, one per HTML file. This can be set dynamically, in the convert method if the input files can be both image collections and non-image collections. If you set this to True, you must implement the get_images() method that returns a list of images."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.core_usage:1
# 414e4c61184f4543bcd8ac4957065a44
msgid "Number of CPU cores used by this plugin A value of -1 means that it uses all available cores"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.for_viewer:1
# 8d496b6af68d4cf59de38ce0007c33d9
msgid "If set to True, the input plugin will perform special processing to make its output suitable for viewing"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.output_encoding:1
# ad1179ffcb754f7aa3f388fd26cb5314
msgid "The encoding that this input plugin creates files in. A value of None means that the encoding is undefined and must be detected individually"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.common_options:1
# f59bb85245354ca79c43b93225153135
# f8c203a193fe4a5cad8f0a293f39531c
msgid "Options shared by all Input format plugins. Do not override in sub-classes. Use :attr:`options` instead. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.options:1
# a4e5c7c1cfc547858dc8f1a2bbffc24a
# f5c0c2d2cd244120a3cbec8de8efb4a2
msgid "Options to customize the behavior of this plugin. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.recommendations:1
# c4f7a4ed54934766a319e10d8bc3ba4e
# b7ee93b213d1440aa7fcdf46b131c8b4
msgid "A set of 3-tuples of the form (option_name, recommended_value, recommendation_level)"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.get_images:1
# 26d66a0f726a444086fd7f444bd6acad
msgid "Return a list of absolute paths to the images, if this input plugin represents an image collection. The list of images is in the same order as the spine and the TOC."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:1
# df45ac696a6940e09e3941c9fa5d26ca
msgid "This method must be implemented in sub-classes. It must return the path to the created OPF file or an :class:`OEBBook` instance. All output should be contained in the current directory. If this plugin creates files outside the current directory they must be deleted/marked for deletion before this method returns."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:8
# c310bb8fb08042eba77d1fd8b5aced63
msgid "A file like object that contains the input file."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:9
# 3fd6fd1d6c36481cb39f0ddb899b6fc8
msgid "Options to customize the conversion process. Guaranteed to have attributes corresponding to all the options declared by this plugin. In addition, it will have a verbose attribute that takes integral values from zero upwards. Higher numbers mean be more verbose. Another useful attribute is ``input_profile`` that is an instance of :class:`calibre.customize.profiles.InputProfile`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:17
# 0489d314237841fca451225767c6190b
msgid "The extension (without the .) of the input file. It is guaranteed to be one of the `file_types` supported by this plugin."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:20
# 64b848349ced48f7965dfda35c43e39d
msgid "A :class:`calibre.utils.logging.Log` object. All output should use this object."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:22
# b85e9e32614d4de7b5afbf78ff574147
msgid "A dictionary of various information that the input plugin can get easily that would speed up the subsequent stages of the conversion."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
# 1593597c9e58439fba83cbfe547257c4
msgid "Called to allow the input plugin to perform postprocessing after the book has been parsed."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.specialize:1
# a408e87890b64d228dc09e5bb6c32218
msgid "Called to allow the input plugin to specialize the parsed book for a particular output format. Called after postprocess_book and before any transforms are performed on the parsed book."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
# 2522003a801947f1ad4863ead448b45c
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builting input plugins for examples."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:1
# f5721582a1b14075a0c206defadf3c41
msgid "OutputFormatPlugins are responsible for converting an OEB document (OPF+HTML) into an output ebook."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:4
# 823fc38233274557bea5d6146875ceee
msgid "The OEB document can be assumed to be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.file_type:1
# 34502786d86c4a9888129901a47f3bae
msgid "The file type (extension without leading period) that this plugin outputs"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:1
# 4179f9bb764c495bac8d73a92e48d4ed
msgid "Render the contents of `oeb_book` (which is an instance of :class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:4
# 9fe7df1f3e3046c880e86ee3f4d1d1a8
msgid "Either a file like object or a string. If it is a string it is the path to a directory that may or may not exist. The output plugin should write its output into that directory. If it is a file like object, the output plugin should write its output into the file."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:8
# f9081a87e2254edfb4079f80f9a6a969
msgid "The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:10
# 6571365f8d644a25b4d54d2c836229a6
msgid "Conversion options. Guaranteed to have attributes corresponding to the OptionRecommendations of this plugin."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:12
# 55b29637d81744519ddde71189f6689d
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
# a056c78a462e4c0e9c913a30eb8289d7
msgid "Can be used to make changes to the css during the CSS flattening process."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
# 67d790c144de4945abd6ee9f89a59aca
msgid "The item (HTML file) being processed"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
# c53cb9c7c95642dd9968c136491b1bce
msgid "A Stylizer object containing the flattened styles for item. You can get the style for any element by stylizer.style(element)."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
# 778b4e02aff645c5b87eab127f39450f
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builtin output plugins for examples."
msgstr ""

#: ../../plugins.rst:93
# 9edb136764d84ce1a44f16bb51cb95b2
msgid "Device Drivers"
msgstr ""

#: ../../plugins.rst:97
# 758f0d360b0f42b09520ef9443de997f
msgid "The base class for all device drivers is :class:`DevicePlugin`. However, if your device exposes itself as a USBMS drive to the operating system, you should use the USBMS class instead as it implements all the logic needed to support these kinds of devices."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin:1
# 2fc6b61018e54fec9b423300b35a0af1
msgid "Defines the interface that should be implemented by backends that communicate with an ebook reader."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.FORMATS:1
# 302faa265e5b43398b8edefa32e77a40
msgid "Ordered list of supported formats"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VENDOR_ID:1
# fff7d142177b4a208858364ca9ab33c7
msgid "VENDOR_ID can be either an integer, a list of integers or a dictionary If it is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
# 139d2c1df62a4fc695e0ba153bad85b6
msgid "An integer or a list of integers"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.BCD:1
# 7c3e034de8f144f69a1cf261ab77e79a
msgid "BCD can be either None to not distinguish between devices based on BCD, or it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
# e729f0c7d55a42c492037c508ce6357e
msgid "Height for thumbnails on the device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
# fefabf1cfa73472880adeb7e11b409b1
msgid "Width for thumbnails on the device. Setting this will force thumbnails to this size, not preserving aspect ratio. If it is not set, then the aspect ratio will be preserved and the thumbnail will be no higher than THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 to have better quality thumbnails with fewer compression artifacts. Of course, the thumbnails get larger as well."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
# 5f86525c62884871873dbbac3a94b7b3
msgid "Set this to True if the device supports updating cover thumbnails during sync_booklists. Setting it to true will ask device.py to refresh the cover thumbnails during book matching"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
# 6eab40813aae4d379b1484f567c0a519
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
# 9f8da223d986499e95be68fd8973dc38
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.path_sep:1
# b308fde7824a4a7f89327dadc8df4427
msgid "Path separator for paths to books on device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.icon:1
# 19df4f554f3946f9ae4b7603e365d7ed
msgid "Icon for this device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
# fc6d675ce6ff4c4daf0f96f11afa4a95
msgid "GUI displays this as a message if not None. Useful if opening can take a long time"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
# 7b5210c6dc0c4fab8d7a8f387f485147
msgid "Set of extensions that are \"virtual books\" on the device and therefore cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
# 496feff4c4864b4cb7c73607f3a464de
msgid "Whether to nuke comments in the copy of the book sent to the device. If not None this should be short string that the comments will be replaced by."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
# 28e6ceef6b484da09806a3554f310ef9
msgid "If True indicates that  this driver completely manages device detection, ejecting and so forth. If you set this to True, you *must* implement the detect_managed_devices and debug_managed_device_detection methods. A driver with this set to true is responsible for detection of devices, managing a blacklist of devices, a list of ejected devices and so forth. calibre will periodically call the detect_managed_devices() method and is it returns a detected device, calibre will call open(). open() will be called every time a device is returned even is previous calls to open() failed, therefore the driver must maintain its own blacklist of failed devices. Similarly, when ejecting, calibre will call eject() and then assuming the next call to detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
# 849401c39afd4de3809dca4e72ee9099
msgid "If set the True, calibre will call the :meth:`get_driveinfo()` method after the books lists have been loaded to get the driveinfo."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
# adfd1f9e5f54437c926871dc5912c622
msgid "If set to True, calibre will ask the user if they want to manage the device with calibre, the first time it is detected. If you set this to True you must implement :meth:`get_device_uid()` and :meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` and :meth:`set_user_blacklisted_devices`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
# 83be4d6497294d0db0fa4c3a2ef6281c
msgid "Set this to a dictionary of the form {'title':title, 'msg':msg, 'det_msg':detailed_msg} to have calibre popup a message to the user after some callbacks are run (currently only upload_books). Be careful to not spam the user with too many messages. This variable is checked after *every* callback, so only set it when you really need to."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:1
# 45167e8b41724c60811a5332441c2d3a
msgid "Return True, device_info if a device handled by this plugin is currently connected."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:3
# 48480e573f394a359951bbe37c0f907b
msgid "List of devices currently connected"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
# ce767a7513554d7891047b790e8585a1
# af5ef52f3bac489cbdc86f20e9ae9ee5
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:3
# cc6773812efd4cf1807a2de7d0224007
msgid "Scan for devices that this driver can handle. Should return a device object if a device is found. This object will be passed to the open() method as the connected_device. If no device is found, return None. The returned object can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:9
# 5c4bf4bcb45c46f4ac2f4b40f9de47b4
msgid "This method is called periodically by the GUI, so make sure it is not too resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:13
# 7f3b8a465867416e861b16f91d9d1ebc
msgid "Set of USB devices found on the system."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:15
# 9cebddde07c544588402211c08fd9bfb
msgid "If True and the driver uses a cache to prevent repeated scanning, the cache must be flushed."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
# 4179b97aacc94330ab9c22d4202be3c9
msgid "Should write information about the devices detected on the system to output, which is a file like object."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
# 5a3075cf83d741f2a0bbfcb09b738b7f
msgid "Should return True if a device was detected and successfully opened, otherwise False."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:1
# 4a22e17085bf46a68061c1b90d86f483
msgid "The key to unlock the device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:2
# bd50da170a5948739f41ab8ce7312727
msgid "If true the packet stream to/from the device is logged"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:3
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:3
# fe27b9c5e8ae47d9ac8087843119403f
# 2dfe0b6f5d2e418ca710c6c17c258916
msgid "Function that is called with a % progress (number between 0 and 100) for various tasks If it is called with -1 that means that the task does not have any progress information"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:7
# 13a8d923c1104524bc631f2a90d94a05
msgid "Device information from the device scanner"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:1
# 90be8ccf89004419bb92d0f95e90c135
msgid "Optional method to perform further checks on a device to see if this driver is capable of handling it. If it is not it should return False. This method is only called after the vendor, product ids and the bcd have matched, so it can do some relatively time intensive checks. The default implementation returns True. This method is called only on windows. See also :meth:`can_handle`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:8
# e757196943cb4d75b1678b38877c1659
msgid "On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, bcd)``."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:1
# 3678bd8f7a8d45a699f19265aa1bad28
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:3
# 659be7a15d924d5585462a7141255955
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:1
# 8cc904b2e5734147a70de1d1fdace3f5
msgid "Perform any device specific initialization. Called after the device is detected but before any other functions that communicate with the device. For example: For devices that present themselves as USB Mass storage devices, this method would be responsible for mounting the device or if the device has been automounted, for finding out where it has been mounted. The method :meth:`calibre.devices.usbms.device.Device.open` has an implementation of this function that should serve as a good example for USB Mass storage devices."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:11
# bfd164da544e47d4a534f800f97a7123
msgid "This method can raise an OpenFeedback exception to display a message to the user."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:14
# bfab0e6d9f904821bebb622b97c87b0f
msgid "The device that we are trying to open. It is a tuple of (vendor id, product id, bcd, manufacturer name, product name, device serial number). However, some devices have no serial number and on windows only the first three fields are present, the rest are None."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:20
# fc8ce274854b4460b6f4d77554f1eb47
msgid "The UUID of the current calibre library. Can be None if there is no library (for example when used from the command line)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:1
# 5e76b408b3f7484483a1ca62b3e3947b
msgid "Un-mount / eject the device from the OS. This does not check if there are pending GUI jobs that need to communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:4
# dbfc236503f14ecc99b4da188bb43386
msgid "NOTE: That this method may not be called on the same thread as the rest of the device methods."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
# 43c52b5bf5ff476ead7ad79aba5874f6
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:1
# d1b5c3740bed4625bf7af5815682bb2e
msgid "Set a function to report progress information."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:1
# 7550b43b2cfd4ceab0db0d25f0cf7a58
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:3
# b2eb83dd19c94ad5a4d3c64eef999393
msgid "(device name, device version, software version on device, mime type) The tuple can optionally have a fifth element, which is a drive information dictionary. See usbms.driver for an example."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_driveinfo:1
# 257253dc800b440db9617fd2e863d7be
msgid "Return the driveinfo dictionary. Usually called from get_device_information(), but if loading the driveinfo is slow for this driver, then it should set SLOW_DRIVEINFO. In this case, this method will be called by calibre after the book lists have been loaded. Note that it is not called on the device thread, so the driver should cache the drive info in the books() method and this function should return the cached data."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.card_prefix:1
# e204dfe2e4a4499bac5f9a277c82237b
msgid "Return a 2 element list of the prefix to paths on the cards. If no card is present None is set for the card's prefix. E.G. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 8bd073cf2a9244cfafdbffca329f2dbb
msgid "Get total space available on the mountpoints:"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:2
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:2
# 7634afd9bfd24acbb25518749283c83b
# 23d48b78c298401a8a9af80333ad911d
msgid "Main memory"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:3
# 7b5e06cf1c3a4dc18f9de288e8b95862
msgid "Memory Card A"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 21be506b2eb346a19775b7617ddc024c
msgid "Memory Card B"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:6
# c04e1379f0f44c86883a84c92cc3369e
msgid "A 3 element list with total space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return 0."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 6aff75cd9af84df8b9228d38aa8ef159
msgid "Get free space available on the mountpoints:"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:3
# 4da90dccf3d94ff4bbb21b7be4104d51
msgid "Card A"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 949f87ef407f4f758513f9eea909f9ff
msgid "Card B"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:6
# 1268e3b0ac3247e18d91b51518f3dc4d
msgid "A 3 element list with free space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return -1."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:1
# c795794b1ae946eb94c93103dbe3d434
msgid "Return a list of ebooks on the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:3
# 288152ae7f314451a3eb20c1aef014a2
msgid "If 'carda' or 'cardb' return a list of ebooks on the specific storage card, otherwise return list of ebooks in main memory of device. If a card is specified and no books are on the card return empty list."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:8
# f7e6d53625ed4bc78f638d8f97278011
msgid "A BookList."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:1
# e6810ad7d597430db6ff3d88b78dd6b7
msgid "Upload a list of books to the device. If a file already exists on the device, it should be replaced. This method should raise a :class:`FreeSpaceError` if there is not enough free space on the device. The text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is not None otherwise it must contain the word \"memory\"."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:7
# d0f242ad573b40498750f34441a669eb
msgid "A list of paths"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:8
# c2ae154aad3f40d4a8166a4d74c8f9fc
msgid "A list of file names that the books should have once uploaded to the device. len(names) == len(files)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:10
# 1d2f918629cf463d909d7fd9bcec37d6
msgid "If not None, it is a list of :class:`Metadata` objects. The idea is to use the metadata to determine where on the device to put the book. len(metadata) == len(files). Apart from the regular cover (path to cover), there may also be a thumbnail attribute, which should be used in preference. The thumbnail attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:17
# 70d96aaa359144f9b1b9cf50ec8fa667
msgid "A list of 3-element tuples. The list is meant to be passed to :meth:`add_books_to_metadata`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
# 65b8e2a3092b49e497014891dc50f088
msgid "Add locations to the booklists. This function must not communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
# 4e053a01a544431db219d92cf5ed549b
msgid "Result of a call to L{upload_books}"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
# a7135f436bfd4cacae6b56459ecc0d56
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:3
# dbe841f5e1ac447ea0bed047d5c48d9a
# e3d4455e8941481b89fee9913b4b501f
# 30898f1fee1e4bb1800b99c4915ee2cb
msgid "A tuple containing the result of calls to (:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.delete_books:1
# fa903b6c4add46c4bf9d6aed6c700dfd
msgid "Delete books at paths on device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
# fcbe307ee23e49368658960cc4f3ce83
msgid "Remove books from the metadata list. This function must not communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
# 054bad8d8ccc422685d8e71b2e571012
msgid "paths to books on the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:1
# 7fc954c4399242ddb53e260820422308
msgid "Update metadata on device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:1
# 3b7d9bfb051849bbbd49bd6cf113b895
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:3
# bbe58cb7c71e4ddba099b29d8a2f835a
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.config_widget:1
# bdd02be2cca94cb4b484c3cdbcb77111
msgid "Should return a QWidget. The QWidget contains the settings for the device interface"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.save_settings:1
# d9a22198f60d4dafa03a2522f15c3b8c
msgid "Should save settings to disk. Takes the widget created in :meth:`config_widget` and saves all settings to disk."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.settings:1
# 83e672ef36a44ab88633d75968d7fd50
msgid "Should return an opts object. The opts object should have at least one attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:1
# 2a558d14e15c4ca2854247f4d2d9b34b
msgid "provide the driver the current set of plugboards and a function to select a specific plugboard. This method is called immediately before add_books and sync_booklists."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# f73ccb30b12d41e2b179a3d8d0c3bb99
msgid "pb_func is a callable with the following signature::"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 2d1ad0949c1b474e9f8bbea675b5d4c9
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:8
# 4b6646e674f8488b9da56b3a0610352e
msgid "You give it the current device name (either the class name or DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or 'device_db'), and the plugboards (you were given those by set_plugboards, the same place you got this method)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:13
# b271277cd6d64e2b8adb8cb384b62af7
msgid "None or a single plugboard instance."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
# cce7ff0331544169a9c29f9718a247d7
msgid "Set the device name in the driveinfo file to 'name'. This setting will persist until the file is re-created or the name is changed again."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
# 8f3ec8c40ce04c908b5eaf152f083410
msgid "Non-disk devices should implement this method based on the location codes returned by the get_device_information() method."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:1
# 0a736c6736764b3da98ba3595759ac5d
msgid "Given a list of paths, returns another list of paths. These paths point to addable versions of the books."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:4
# 84ac74f3571d4873912eb3660a4b0a10
msgid "If there is an error preparing a book, then instead of a path, the position in the returned list for that book should be a three tuple: (original_path, the exception instance, traceback)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.startup:1
# 2f481660c0d6467eb435f30157551728
msgid "Called when calibre is is starting the device. Do any initialization required. Note that multiple instances of the class can be instantiated, and thus __init__ can be called multiple times, but only one instance will have this method called. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.shutdown:1
# 94eee011b49f447fb9839b0d5c40301b
msgid "Called when calibre is shutting down, either for good or in preparation to restart. Do any cleanup required. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_uid:1
# bbbe4311155f4d03b0e595523ae9922e
msgid "Must return a unique id for the currently connected device (this is called immediately after a successful call to open()). You must implement this method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ignore_connected_device:1
# 0d70792c7e934a85bb7364c4f1076078
msgid "Should ignore the device identified by uid (the result of a call to get_device_uid()) in the future. You must implement this method if you set ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately after open(), so if open() caches some state, the driver should reset that state."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
# 97128483927a46e7ad653512accaf83f
msgid "Return map of device uid to friendly name for all devices that the user has asked to be ignored."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
# 2c5f1a5e7bf24bcaba6739d6c5157c95
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
# 04a1197701154603b9ec86aebb86015c
msgid "Implement this method if your device wants to override a particular preference. You must ensure that all call sites that want a preference that can be overridden use device_prefs['something'] instead of prefs['something']. Your method should call device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: metadata management (prefs['manage_device_metadata'])"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
# 791e201ef6a044f5b8075fa9b9c13d93
msgid "Called by the device manager when starting plugins. If this method returns a string, then a) it supports the device manager's dynamic control interface, and b) that name is to be used when talking to the plugin."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:4
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:3
# a2ca4129bc3e44fe85dddda73f403ce1
# c80778f8329a4e1bab89d733c3ceac1f
# d73a8a6f1ea44e5ca7ab4e8d86047739
# d1081f4f08324b07907e6b82df71be60
# ee17cfe312d84544898861d196a85816
# 40e4524d4ed44ac29587c351e23bde81
msgid "This method can be called on the GUI thread. A driver that implements this method must be thread safe."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:1
# c709e411026646478210e626f58aeac2
msgid "This method is called to start the plugin. The plugin should begin to accept device connections however it does that. If the plugin is already accepting connections, then do nothing."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:1
# 9eb78d8b40414c8abaf94d66f12aa402
msgid "This method is called to stop the plugin. The plugin should no longer accept connections, and should cleanup behind itself. It is likely that this method should call shutdown. If the plugin is already not accepting connections, then do nothing."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:1
# 346c13ffd9244a38b8b23cefa509a3a5
msgid "Return the value of the option indicated by opt_string. This method can be called when the plugin is not started. Return None if the option does not exist."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:1
# e74cee48b06b4ad5816aabf52a151c32
msgid "Set the value of the option indicated by opt_string. This method can be called when the plugin is not started."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:1
# d2735d3246574f8cb4027774fe6cac40
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:1
# 722f9f4142c74c9593e3c58044b02ffd
msgid "Called during book matching when a book on the device is matched with a book in calibre's db. The method is responsible for syncronizing data from the device to calibre's db (if needed)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:5
# 33f8e9934b1f4c27b26dc590f4635313
msgid "The method must return a set of calibre book ids changed if calibre's database was changed, None if the database was not changed. If the method returns an empty set then the metadata for the book on the device is updated with calibre's metadata and given back to the device, but no GUI refresh of that book is done. This is useful when the calire data is correct but must be sent to the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:12
# 840eaa8555db4d3f9d4cfbef6d5f83f8
msgid "Extremely important: this method is called on the GUI thread. It must be threadsafe with respect to the device manager's thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:15
# b0ef8797f3c0467c9c9e844a96091ef8
msgid "book_id: the calibre id for the book in the database. book_metadata: the Metadata object for the book coming from the device."
msgstr ""

#: ../../<autodoc>:1
# c0563a21edce4e3b8ddcdf5a64103bd8
msgid "Bases: :class:`list`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:1
# ae24013d49d9464ea27167de78185fd7
msgid "A list of books. Each Book object must have the fields"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:3
# 730a1478e64040a4bd60860f52821a7c
msgid "title"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:4
# 2e180b9cb34440cdb5420ff5649d4b87
msgid "authors"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:5
# 9cccc816132c4196a908bc7dc9edc3b2
msgid "size (file size of the book)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:6
# a63ba22e9fe4444ea140073d24f9d17f
msgid "datetime (a UTC time tuple)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:7
# 1a02257a28fd427f8bf5a04aa3663000
msgid "path (path on the device to the book)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:8
# fab17beaaa1b41b38cb834f296af8262
msgid "thumbnail (can be None) thumbnail is either a str/bytes object with the image data or it should have an attribute image_path that stores an absolute (platform native) path to the image"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:11
# c484c1f30b314a5a9cf4f75dc131add0
msgid "tags (a list of strings, can be empty)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.supports_collections:1
# 4bdc0724f2be40148f3c6b4244d7d0c2
msgid "Return True if the device supports collections for this book list."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.add_book:1
# 71b378848f574622bbc84a1ac89f69de
msgid "Add the book to the booklist. Intent is to maintain any device-internal metadata. Return True if booklists must be sync'ed"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.remove_book:1
# a9a6d3968d4d4e02901f26a2908ed02b
msgid "Remove a book from the booklist. Correct any device metadata at the same time"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:1
# 559eb0a164a6479eb85e8b92659cb77b
msgid "Return a dictionary of collections created from collection_attributes. Each entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:5
# 406bbdcf74a14001a5cbddb8b3226798
msgid "The list of books is sorted by book title, except for collections created from series, in which case series_index is used."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:8
# 10a77b41156a4675b37ac21c9e7b4c69
msgid "A list of attributes of the Book object"
msgstr ""

#: ../../plugins.rst:111
# 0d08955ddc204a1fba223d62c1a81396
msgid "USB Mass Storage based devices"
msgstr ""

#: ../../plugins.rst:113
# c77e00dcb5e3424bad009036b8543b41
msgid "The base class for such devices is :class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits some of its functionality from its bases, documented below. A typical basic USBMS based driver looks like this:"
msgstr ""

#: ../../<autodoc>:1
# d5f2d90b3e154663b716c8ac0d2e1a81
msgid "Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, :class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device:1
# b1e34528efd940df941e92a7ad8d7e25
msgid "This class provides logic common to all drivers for devices that export themselves as USB Mass Storage devices. Provides implementations for mounting/ejecting of USBMS devices on all platforms."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
# 0368a0d0ad6748baa5a2b5c38a0a72c7
msgid "String identifying the main memory of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
# 5764a7f437f04f6f8082d1f392117388
msgid "String identifying the first card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
# 166cf1b85c1c40b2b148ab9758e75f36
msgid "String identifying the second card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
# a786790e95594d9db42c463782223757
msgid "Used by the new driver detection to disambiguate main memory from storage cards. Should be a regular expression that matches the main memory mount point assigned by OS X"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
# 932cbd2545104948b6bc1c98aa35538f
msgid "The maximum length of paths created on the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
# 1c7a89b1de8841e5ab402c6f1284d74c
msgid "Put news in its own folder"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.windows_sort_drives:1
# 624c11fce87346f5bd7532292c1509e3
msgid "Called to disambiguate main memory and storage card for devices that do not distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The EB600"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_callback:1
# 2588e21a859f406f8b989ed5dd0899ba
msgid "Callback to allow individual device drivers to override the path sanitization used by :meth:`create_upload_path`."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.filename_callback:1
# b8facc2de9774e048a3a58f4c7e493bd
msgid "Callback to allow drivers to change the default file name set by :meth:`create_upload_path`."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_path_components:1
# eca52db0cc0d47e0a0f1c8a1b6341d10
msgid "Perform any device specific sanitization on the path components for files to be uploaded to the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.get_annotations:1
# d26ec741dd61429eae481f248a728a36
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.add_annotation_to_library:1
# 50fdddf5143d473c8411c2796330f653
msgid "Add an annotation to the calibre library"
msgstr ""

#: ../../<autodoc>:1
# 08a068712cd0442890356f2526f53395
msgid "Bases: :class:`calibre.devices.usbms.cli.CLI`, :class:`calibre.devices.usbms.device.Device`"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS:1
# 4670a07da9f34c47b60aac5910c4d15b
msgid "The base class for all USBMS devices. Implements the logic for sending/getting/updating metadata/caching metadata/etc."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:1
# 58ed49a7a40a4c4fb3952f572b5d909b
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:3
# a5666be809f5493c91c906243ae7d77a
msgid "The full path to the directory where the associated book is located."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:4
# c718a82ecf2c4526a8ab32787075f35c
msgid "The name of the book file without the extension."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:5
# 8b50c08e494345a0adab1eb87d3dd7cb
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:7
# d11a044905784a02949ab824fa8a759d
msgid "The full path to the ebook file"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.normalize_path:1
# 393de7114eae4d558f1c431271da7ad7
msgid "Return path with platform native path separators"
msgstr ""

#: ../../plugins.rst:159
# 80429dcb77724d388024306d4f882933
msgid "User Interface Actions"
msgstr ""

#: ../../plugins.rst:161
# 84fd37f630b44cfa87ec688bc962921c
msgid "If you are adding your own plugin in a zip file, you should subclass both InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` method of you InterfaceActionBase subclass must return an instantiated object of your InterfaceBase subclass."
msgstr ""

#: ../../<autodoc>:1
# 52e239145e564fd696c681747064b6c0
msgid "Bases: :class:`PyQt4.QtCore.QObject`"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:1
# 3ae3bdc11f0c4d9fa6f57d70874d0216
msgid "A plugin representing an \"action\" that can be taken in the graphical user interface. All the items in the toolbar and context menus are implemented by these plugins."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:5
# 91796025833542858caead5d6a2da894
msgid "Note that this class is the base class for these plugins, however, to integrate the plugin with calibre's plugin system, you have to make a wrapper class that references the actual plugin. See the :mod:`calibre.customize.builtins` module for examples."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:10
# 5102f93224c449d5a349f586ce1c908c
msgid "If two :class:`InterfaceAction` objects have the same name, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:13
# 059ba0acbedd4e80a909073785be560b
msgid "Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected` :meth:`shutting_down` and :meth:`initialization_complete` methods."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:17
# 3068a03b227b4670818bbbfbeb1ba10c
msgid "Once initialized, this plugin has access to the main calibre GUI via the :attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:22
# 1fe2a03e457744b895badceefe2f72fc
msgid "To access the actual plugin, use the :attr:`interface_action_base_plugin` attribute, this attribute only becomes available after the plugin has been initialized. Useful if you want to use methods from the plugin class like do_user_config()."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:27
# 47494420ef084c6ab40d5cec0bd08528
msgid "The QAction specified by :attr:`action_spec` is automatically create and made available as ``self.qaction``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.name:1
# 5fad5064e4b14188bac2b272c922f381
msgid "The plugin name. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.priority:1
# 2f85706104294f348f1681ed82b61949
msgid "The plugin priority. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.popup_type:1
# b4cc0ed5568f4f5dbfb81daf00e11cb4
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.auto_repeat:1
# fc1db5bbadfc44b783dacfd9337096ac
msgid "Whether this action should be auto repeated when its shortcut key is held down."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_spec:1
# b963caf8a7914d688b5f3639baad9c87
msgid "Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and keyboard shortcut can be None shortcut must be a string, None or tuple of shortcuts. If None, a keyboard shortcut corresponding to the action is not registered. If you pass an empty tuple, then the shortcut is registered with no default key binding."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_add_menu:1
# c39bb3d1340a40008329d599a1cfa5dc
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
# 94057894650245f3892133e64f7137e9
msgid "If True, a clone of self.qaction is added to the menu of self.qaction If you want the text of this action to be different from that of self.qaction, set this variable to the new text"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_add_to:1
# 2c20c8432f7f4af5ad2fb936a0064291
msgid "Set of locations to which this action must not be added. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_remove_from:1
# 68550bb115f94478891256911158880b
msgid "Set of locations from which this action must not be removed. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_type:1
# e840f48616a243259aaf0dc166f91120
msgid "Type of action 'current' means acts on the current view 'global' means an action that does not act on the current view, but rather on calibre as a whole"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accepts_drops:1
# 69ff90f1ddeb4abebd4e41244f766be3
msgid "If True, then this InterfaceAction will have the opportunity to interact with drag and drop events. See the methods, :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
# 2eb650c24bde49e5a58505487dc5da93
# 8c985f1d759448379b76476fd503ec36
msgid "This method should return True iff this interface action is capable of handling the drag event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.drop_event:1
# fe7745b1f5b24c9fbd691b11a50265fe
msgid "This method should perform some useful action and return True iff this interface action is capable of handling the drop event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI. You should not perform blocking/long operations in this function. Instead emit a signal or use QTimer.singleShot and return quickly. See the builtin actions for examples."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:1
# 24565c414bf94a5ebd526167e7d612db
msgid "Convenience method to easily add actions to a QMenu. Returns the created QAction, This action has one extra attribute calibre_shortcut_unique_name which if not None refers to the unique name under which this action is registered with the keyboard manager."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:6
# 01c912c44f4b4bb3907480d3b0ce4aa2
msgid "The QMenu the newly created action will be added to"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:7
# 1e97f656c2d84994aed2105bb2768ba5
msgid "A unique name for this action, this must be globally unique, so make it as descriptive as possible. If in doubt add a uuid to it."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:10
# 79f06c20412549de83bf657f3e30fa61
msgid "The text of the action."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:11
# c6dad64446724f7d8751d7b74a1b4786
msgid "Either a QIcon or a file name. The file name is passed to the I() builtin, so you do not need to pass the full path to the images directory."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:14
# 460a506d22b84db79d8d1da8504f3bda
msgid "A string, a list of strings, None or False. If False, no keyboard shortcut is registered for this action. If None, a keyboard shortcut with no default keybinding is registered. String and list of strings register a shortcut with default keybinding as specified."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:18
# ea5b7815ab7645d8b3dd67af6841f31d
msgid "A description for this action. Used to set tooltips."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:20
# 0aa07709dac44192989d9ef22d20347f
msgid "A callable which is connected to the triggered signal of the created action."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:22
# 1f6c560035014649b1ebfb786ef6673a
msgid "The test displayed to the user when customizing the keyboard shortcuts for this action. By default it is set to the value of ``text``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.genesis:1
# 63dddfbefd404833a3844cc9239df80a
msgid "Setup this plugin. Only called once during initialization. self.gui is available. The action specified by :attr:`action_spec` is available as ``self.qaction``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:1
# 67f66a6b2bab49bbaebd8ceb92908c27
msgid "Called whenever the book list being displayed in calibre changes. Currently values for loc are: ``library, main, card and cardb``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:4
# 23956a6bfc0446f58a85cdc7b07ab5a1
msgid "This method should enable/disable this action and its sub actions as appropriate for the location."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:1
# f4dcdea41fe44c2bb46f83c2ecf20f9d
msgid "Called whenever the current library is changed."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:3
# c96b0cef0d6b43919f5e48c6a25a93b4
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
# de99b0ed27de4fbe9c461b983cc9c51d
msgid "Called once per action when the layout of the main GUI is completed. If your action needs to make changes to the layout, they should be done here, rather than in :meth:`initialization_complete`."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.initialization_complete:1
# 955afc2c6bf24d3b81f911eaf579f344
msgid "Called once per action when the initialization of the main GUI is completed."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:1
# 510e05abfa964f4a8e044477b2fdc9d6
msgid "Called once per plugin when the main GUI is in the process of shutting down. Release any used resources, but try not to block the shutdown for long periods of time."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:5
# e7b67eb90f3f498b864fb26c484b9342
msgid "False to halt the shutdown. You are responsible for telling the user why the shutdown was halted."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.InterfaceActionBase.load_actual_plugin:1
# 9389cdd2d7a449c7904ae3817ac2ee07
msgid "This method must return the actual interface action plugin object."
msgstr ""

#: ../../plugins.rst:176
# e5c2cd7590d848d6b5e330a486800847
msgid "Preferences Plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:1
# e15935f807c5422fb984ad5513373826
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:3
# 95c1c096d0d749e885f4079e50d4cac7
msgid "This plugin has only one important method :meth:`create_widget`. The various fields of the plugin control how it is categorized in the UI."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.config_widget:1
# e9d63a13a2254d06bdc5eef2c9c890d0
msgid "Import path to module that contains a class named ConfigWidget which implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category_order:1
# b0a2eb61a91948f7bb6b648be9acdddf
msgid "Where in the list of categories the :attr:`category` of this plugin should be."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.name_order:1
# a9dc02b6ae6843cd835f24f6f5393eb6
msgid "Where in the list of names in a category, the :attr:`gui_name` of this plugin should be"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category:1
# 35c05755596842dfb0100db68d4366e2
msgid "The category this plugin should be in"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_category:1
# 7f2ab672cded4cdb974a1f88feeb1b08
msgid "The category name displayed to the user for this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_name:1
# c3b4e0f689ab490685c338094f05eb67
msgid "The name displayed to the user for this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.icon:1
# 33e6096a23c7423baa3141edc3dc11f1
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.description:1
# 65d29c91cabd45d8a433fa0deed1eb91
msgid "The description used for tooltips and the like"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:1
# 9bb68a45d74f4a0ba1d823e373d86666
msgid "Create and return the actual Qt widget used for setting this group of preferences. The widget must implement the :class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:5
# 0552bbb84f054e789c62bb1562458c68
msgid "The default implementation uses :attr:`config_widget` to instantiate the widget."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface:1
# fd91d5b36829455c8b6aa1cb7c75f00f
msgid "This class defines the interface that all widgets displayed in the Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base class that implements this interface and defines various convenience methods as well."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
# 6b4a9361b6f0482da89a7da246c86062
msgid "This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
# 186132dffc1d4ddabaa52e595f811613
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
# 47af0da2e6554502ab222211c002e4c5
msgid "The tooltip for the Restore to defaults button"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
# 2f91d03614af433fb5696e0543cd0571
msgid "If True the Preferences dialog will not allow the user to set any more preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
# 2691892c940a46768db8d30e5318b6b4
msgid "Called once before the widget is displayed, should perform any necessary setup."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
# 341a10a2792444e5aabdb82e509dcf83
msgid "The main calibre graphical user interface"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
# 954856fe34694d86a308dd0b9b93e429
msgid "Should set all config values to their initial values (the values stored in the config files)."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
# 988131a275044270bb4db2d5b03dd30c
msgid "Should set all config values to their defaults."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
# c6040fdef6514a70b2398eac2e2dbd99
msgid "Save any changed settings. Return True if the changes require a restart, False otherwise. Raise an :class:`AbortCommit` exception to indicate that an error occurred. You are responsible for giving the user feedback about what the error is and how to correct it."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
# 3e55a5eac56c43a5a9eb78d1873bafef
msgid "Called once after this widget is committed. Responsible for causing the gui to reread any changed settings. Note that by default the GUI re-initializes various elements anyway, so most widgets won't need to use this method."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:1
# 83eec3843e2049bca12b8d8ec605a085
msgid "Base class that contains code to easily add standard config widgets like checkboxes, combo boxes, text fields and so on. See the :meth:`register` method."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:5
# 9ac2682e45f249c49d10572e7b0e7094
msgid "This class automatically handles change notification, resetting to default, translation between gui objects and config objects, etc. for registered settings."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:9
# a77a00bad4e4440ebab7406f34a5ad48
msgid "If your config widget inherits from this class but includes setting that are not registered, you should override the :class:`ConfigWidgetInterface` methods and call the base class methods inside the overrides."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:1
# 91cab5ee8d9a482da6ea99000450ce6c
msgid "Register a setting."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:3
# 32411107024744f58ca0a3d79266f910
msgid "The setting name"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:4
# 45b9c3b419744b82bb3338554d84c39e
msgid "The config object that reads/writes the setting"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:5
# 9ce4bc5fc40540729833fbc80d0bcd5c
msgid "The name of the GUI object that presents an interface to change the setting. By default it is assumed to be ``'opt_' + name``."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:8
# 625cf837ac544cc39834a7f2055c4434
msgid "If this setting is a multiple choice (combobox) based setting, the list of choices. The list is a list of two element tuples of the form: ``[(gui name, value), ...]``"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:11
# 330f0036cf8a408e83916da104eb572c
msgid "The class responsible for managing this setting. The default class handles almost all cases, so this param is rarely used."
msgstr ""

#: ../../plugins.rst:192
# b3b9775920974ef5acecfd38e43062f1
msgid "Viewer plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.type:1
# 30c790f465c74cd6b84548c7d04c87bc
msgid "These plugins are used to add functionality to the calibre viewer."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_fonts:1
# 793d05b1cee74b96b2dd6805e0e59777
msgid "This method is called once at viewer startup. It should load any fonts it wants to make available. For example::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_javascript:1
# 7e0d0425d5a9452bbe090b0af01a91e5
msgid "This method is called every time a new HTML document is loaded in the viewer. Use it to load javascript libraries into the viewer. For example::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.run_javascript:1
# 7611634b01fa423ea34d99af9cc99caa
msgid "This method is called every time a document has finished loading. Use it in the same way as load_javascript()."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_ui:1
# 8c844e3243e14d5292dc3619caa657ec
msgid "This method is called once when the viewer is created. Use it to make any customizations you want to the viewer's user interface. For example, you can modify the toolbars via ui.tool_bar and ui.tool_bar2."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_context_menu:1
# 899f4635ecfd40e7aa6ecb1b162b3d03
msgid "This method is called every time the context (right-click) menu is shown. You can use it to customize the context menu. ``event`` is the context menu event and hit_test_result is the QWebHitTestResult for this event in the currently loaded document."
msgstr ""

#: ../../plugins.rst:200
# 133c33cad56c41f4b3b3d27d03bcecfd
msgid "Edit Book plugins"
msgstr ""

#: ../../<autodoc>:1
# 43b8bc0d2b804e5f89f285350e6d7d57
msgid "Bases: :class:`object`"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.name:1
# e86b50c5614a4b73bfe71511aa75cbe6
msgid "Set this to a unique name it will be used as a key"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.allowed_in_toolbar:1
# 21c513af8a914b91b1def6954d64a2a0
msgid "If True the user can choose to place this tool in the plugins toolbar"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.allowed_in_menu:1
# f37a01e3d76a44a284a5ec9e48a83568
msgid "If True the user can choose to place this tool in the plugins menu"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.toolbar_button_popup_mode:1
# 83f26fe1c5ad4264afbe1745edc4dc9b
msgid "The popup mode for the menu (if any) of the toolbar button. Possible values are 'delayed', 'instant', 'button'"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.boss:1
# bae6b1a2050c48f1a6ea64ddefbad267
msgid "The :class:`calibre.gui2.tweak_book.boss.Boss` object. Used to control the user interface."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.gui:1
# e1558cd96e834e798031b1a5fca65a90
msgid "The main window of the user interface"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.current_container:1
# 866667f2f7a04e0382ae8bd2b6cb65ac
msgid "Return the current :class:`calibre.ebooks.oeb.polish.container.Container` object that represents the book being edited."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:1
# d5f2a1f990074e04bbaea8e0aab52961
msgid "Register a keyboard shortcut that will trigger the specified ``qaction``. This keyboard shortcut will become automatically customizable by the user in the Keyboard section of the editor preferences."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:4
# 84b20062b52b48d0940f42e2077d071c
msgid "A QAction object, it will be triggered when the configured key combination is pressed by the user."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:6
# 40837dd3b457450c8b6d279845157b60
msgid "A unique name for this shortcut/action. It will be used internally, it must not be shared by any other actions in this plugin."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:9
# 14a4f51f82ec4ed28291e18536c18038
msgid "A list of the default keyboard shortcuts. If not specified no default shortcuts will be set. If the shortcuts specified here conflict with either builtin shortcuts or shortcuts from user configuration/other plugins, they will be ignored. In that case, users will have to configure the shortcuts manually via Preferences. For example: ``default_keys=('Ctrl+J', 'F9')``."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:15
# d682b203aef6478d8ace752171659e3d
msgid "An optional short description of this action. If not specified the text from the QAction will be used."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:17
# 6653f87064f848abbec880addfff60ed
msgid "An optional longer description of this action, it will be used in the preferences entry for this shortcut."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.create_action:1
# 5ea64d32e1bf49ab98cad29ac8bf0679
msgid "Create a QAction that will be added to either the plugins toolbar or the plugins menu depending on ``for_toolbar``. For example::"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.create_action:19
# a398f264ded24a42aa4a3cfbadd1a21f
msgid "Method :meth:`register_shortcut`."
msgstr ""

