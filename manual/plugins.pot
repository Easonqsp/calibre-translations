# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.42.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-27 09:25+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../plugins.rst:6
# 7b15bfade1b84638af756f929b289992
msgid "API Documentation for plugins"
msgstr ""

#: ../../plugins.rst:11
# b252b8702973452897cdba11e3a72644
msgid "Defines various abstract base classes that can be subclassed to create powerful plugins. The useful classes are:"
msgstr ""

#: ../../plugins.rst:21
# cce717a8a04b4709aa1f89a7290abf8a
msgid "Plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:1
# 5053294d2a0140dbb1dd18bc6299fee8
msgid "A calibre plugin. Useful members include:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 94d4294f32e4418ca95f4bed8c5e6ec5
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 3092ca4a9a494901b676b9f29b0086fc
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# ff28525b757b4c4cb9bac4741464ad3f
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# 84df1446d2cb4664ad5e3df66ee372e2
msgid "by the user."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:9
# 46f96de623f948afa49b8d246f20cf01
msgid "Methods that should be overridden in sub classes:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:11
# b67afda7b47a4c54b83cb964320bd603
msgid ":meth:`initialize`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:12
# fc58958519164bebbf5e245f34f62eb9
msgid ":meth:`customization_help`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:14
# ceeedfdda01e405ba87ce220537e46b8
msgid "Useful methods:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:16
# 5cee4f7f85d84e2aade255dd1e8745ab
msgid ":meth:`temporary_file`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.supported_platforms:1
# d935d8cd15fc44c19f3661e5e75aea3d
msgid "List of platforms this plugin works on For example: ``['windows', 'osx', 'linux']``"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.name:1
# 7f4e7780ddc241739e63a6c39b451a2a
msgid "The name of this plugin. You must set it something other than Trivial Plugin for it to work."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.version:1
# acda51dea58648f0bf6641187f6c868b
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.description:1
# be15fc0d1d374afb9257a118a60d3dac
msgid "A short string describing what this plugin does"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.author:1
# 5d6d190aec6a4d59bf2bffd476a0ab41
msgid "The author of this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.priority:1
# d48062701921481dade464c86b5b6f01
msgid "When more than one plugin exists for a filetype, the plugins are run in order of decreasing priority i.e. plugins with higher priority will be run first. The highest possible priority is ``sys.maxint``. Default priority is 1."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.minimum_calibre_version:1
# 0e1f0789fe274adf953529d8dc63854a
msgid "The earliest version of calibre this plugin requires"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.can_be_disabled:1
# 33c6ca3fc55042b29622a52bbf8f59a4
msgid "If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.type:1
# caf500cb072e46bab93f0930a7ccddc4
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:1
# 952d110b1dee494994f5a450dbbd32ae
msgid "Called once when calibre plugins are initialized. Plugins are re-initialized every time a new plugin is added."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:4
# 18cc324aed4e4a9a9cf865ffa0c4c59d
msgid "Perform any plugin specific initialization here, such as extracting resources from the plugin zip file. The path to the zip file is available as ``self.plugin_path``."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:8
# a0b4606c551941988d6ad080a3973afb
msgid "Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:1
# 154a137606004918ae4a900839cf2a48
msgid "Implement this method and :meth:`save_settings` in your plugin to use a custom configuration dialog, rather then relying on the simple string based default customization."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:5
# dc73127d765b48d1ad188f3bc336f6ba
msgid "This method, if implemented, must return a QWidget. The widget can have an optional method validate() that takes no arguments and is called immediately after the user clicks OK. Changes are applied if and only if the method returns True."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:10
# 74cecb8c770b42e99ba9704dfb153f77
msgid "If for some reason you cannot perform the configuration at this time, return a tuple of two strings (message, details), these will be displayed as a warning dialog to the user and the process will be aborted."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:1
# a1119cb6ecac4ec5b27d5145fc0330d8
msgid "Save the settings specified by the user with config_widget."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:3
# f10b868701454e5598ff95eb0160aa0b
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.do_user_config:1
# 12905a4e92e649e2b52c8604aa710989
msgid "This method shows a configuration dialog for this plugin. It returns True if the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:1
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:1
# cc161321a3b445a79178a4aa0abaf724
# 27c4857e254343b580cd9355509a204a
msgid "If this plugin comes in a ZIP file (user added plugin), this method will allow you to load resources from the ZIP file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:4
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:4
# d223f0670a58420885ddc585a647b4d8
# a395bfe46ac241f187c749095aef0c65
msgid "For example to load an image::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:10
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:10
# f3681dd085db466aa45ebc6f4518bd65
# 3b9f67747bc34cb4b2c28db94e63774c
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:12
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:12
# bd921b56dd3d404e94b7ca86f547bd41
# 0f1c0bde68ec4775b4bebed1f5f68a2f
msgid "A dictionary of the form ``{name : file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:1
# 61a6a7e3f0464079b6e3b79cc2d5368c
msgid "Return a string giving help on how to customize this plugin. By default raise a :class:`NotImplementedError`, which indicates that the plugin does not require customization."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:5
# 216ac58327564928865929ac62300cf2
msgid "If you re-implement this method in your subclass, the user will be asked to enter a string as customization for this plugin. The customization string will be available as ``self.site_customization``."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:10
# a24fb9fd0dd54c1e9be27a5155d5d880
msgid "Site customization could be anything, for example, the path to a needed binary on the user's computer."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:13
# c9c77979156c44f0a70114363f83f963
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:1
# f55c1912732c4c7b85c9261412ea6472
msgid "Return a file-like object that is a temporary file on the file system. This file will remain available even after being closed and will only be removed on interpreter shutdown. Use the ``name`` member of the returned object to access the full path to the created temporary file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:6
# 469f41f0521543d3b8868701243182cd
msgid "The suffix that the temporary file will have."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.cli_main:1
# 9dc6d384547f45d8be273a60ca5dce44
msgid "This method is the main entry point for your plugins command line interface. It is called when the user does: calibre-debug -r \"Plugin Name\". Any arguments passed are present in the args variable."
msgstr ""

#: ../../plugins.rst:30
# 2df58c0f9e5b4b89a484961552352966
msgid "FileTypePlugin"
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
# c5a4c8ea6ea24e7a8759647799c8befd
# 2cfa3e5b70134185a4bbe466c1a16759
# 19f653ee41794f6d9f9d3518a1a77975
# 9d4a1bcf6e69458586702df635b91b76
# c524f56f204d42298662c071e95b7f0d
# ea6b2413576148b3b7776365118995c9
# a1c22a177e334c848770a29e07b47270
# 5cb53ff6713c4ed7a2b78cf03647101d
# d8a6cdcd94d54da3a10bb98ac0c4b455
# 2456efffd585412fa6570b37657c67d9
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin:1
# 6182ebc4c5bb4a90b6c6d646d3b7c65d
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.file_types:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.file_types:1
# a6f78223329847b2b9ef0dedaf7acb9d
# 623b3cc3e3bc4afea32ce47423e2913b
# 0a754d1fabf54cc8af934b53c12d7412
msgid "Set of file types for which this plugin should be run For example: ``set(['lit', 'mobi', 'prc'])``"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_import:1
# 61c8e0cb78e8457d964ff4c6ffa4f6d5
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postimport:1
# 5e6c670d17174b48bde15c37d0e3c4ab
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_preprocess:1
# 21580165f8f0496caa2da4f6d25ab3e3
msgid "If True, this plugin is run just before a conversion"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postprocess:1
# 5415f62e129f42728fa07eded091f2b6
msgid "If True, this plugin is run after conversion on the final file produced by the conversion output plugin."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:1
# edd17fa2723544f48e9e585371ac9591
msgid "Run the plugin. Must be implemented in subclasses. It should perform whatever modifications are required on the ebook and return the absolute path to the modified ebook. If no modifications are needed, it should return the path to the original ebook. If an error is encountered it should raise an Exception. The default implementation simply return the path to the original ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:9
# a3bff48835de4acb93f50531c5fa8708
msgid "The modified ebook file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:12
# 5c868069e86941b28b373feb926a75f8
msgid "Absolute path to the ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:14
# cc8a01cc4a9b425f85744242cb68f3a7
msgid "Absolute path to the modified ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:1
# ff956f17a39f4c07804e7369f53d2954
msgid "Called post import, i.e., after the book file has been added to the database."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:3
# 75969351560c4eda91833572ac43488c
msgid "Database id of the added book."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:4
# 1ec925a180b34f1b953db5f3bc70cd7f
msgid "The file type of the book that was added. :param db: Library database."
msgstr ""

#: ../../plugins.rst:41
# 07bf4eb6c92246e1b81902840dc4f3e5
msgid "Metadata plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin:1
# f2dc02600f8847969920642d238419dc
# aba3f0e9e0224105a518d1da3306cd11
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.get_metadata:1
# 5371c062c829410f9ac50e26ff776adc
msgid "Return metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :return: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.set_metadata:1
# dd018e15928d486a9f5721061cdfbb7f
msgid "Set metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :param mi: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../plugins.rst:56
# 2a5ad324b659418f91f3a42ac675d881
msgid "Catalog plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin:1
# 4442211575d94c94bf2ac3e8f7120b59
msgid "A plugin that implements a catalog generator."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.file_types:1
# 884eb860201c4200af64d35eadf90e2f
msgid "Output file type for which this plugin should be run For example: 'epub' or 'xml'"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.cli_options:1
# 26ca0ef6469144709ef2b7aaad5c4db7
msgid "CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.initialize:1
# eacf43feb601411a8a0ed4834c77edd0
msgid "If plugin is not a built-in, copy the plugin's .ui and .py files from the zip file to $TMPDIR. Tab will be dynamically generated and added to the Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:1
# 0725c95b8ae641ab93837e45cd945161
msgid "Run the plugin. Must be implemented in subclasses. It should generate the catalog in the format specified in file_types, returning the absolute path to the generated catalog file. If an error is encountered it should raise an Exception."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:7
# 7a520130ede44472a42ca2f2e44ab50b
msgid "The generated catalog file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:10
# 8fd1d866cb68471ca567616b86052070
msgid "Absolute path to the generated catalog file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:11
# 1a8e7a11c0bd4d7e9dd2eca3a5be462f
msgid "A dictionary of keyword arguments"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:12
# 1917d57af7864a2a9bf736f774e5fddf
msgid "A LibraryDatabase2 object"
msgstr ""

#: ../../plugins.rst:66
# 4db7e05edcda4ad48fda85ba1a8f4b9c
msgid "Metadata download plugins"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.capabilities:1
# 8353326c48ee4cfbb0b5fe74fdaf2293
msgid "Set of capabilities supported by this plugin. Useful capabilities are: 'identify', 'cover'"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.touched_fields:1
# 71a06bbbc2774eb3950bd1f838b6c9a6
msgid "List of metadata fields that can potentially be download by this plugin during the identify phase"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
# f9a44afeebfb466dbb2c072c68d0f825
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
# bb249f612ac54392bc5fb666f1c8aa0c
msgid "Setting this to True means that the browser object will add Accept-Encoding: gzip to all requests. This can speedup downloads but make sure that the source actually supports gzip transfer encoding correctly first"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
# 6f4c2de241e84ea181327be6922da843
msgid "Cached cover URLs can sometimes be unreliable (i.e. the download could fail or the returned image could be bogus. If that is often the case with this source set to False"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.options:1
# b21d72afa49f44a7b14f51220221b551
msgid "A list of :class:`Option` objects. They will be used to automatically construct the configuration widget for this plugin"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.config_help_message:1
# 3e7d6bb20122491bae0fc2599c3845e3
msgid "A string that is displayed at the top of the config widget for this plugin"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
# 8394f799d89a4e07bffba06e6c86d9ea
msgid "If True this source can return multiple covers for a given query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
# 0ff9752688be4d9fb06f2d174e437837
msgid "If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.is_configured:1
# fed603428ab44fae83e76a87a5e1bb03
msgid "Return False if your plugin needs to be configured before it can be used. For example, it might need a username/password/API key."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
# c36d097308f944b5ba19bb8177e9088b
msgid "Take a list of authors and return a list of tokens useful for an AND search query. This function tries to return tokens in first name middle names last name order, by assuming that if a comma is in the author name, the name is in lastname, other names form."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
# 19e97ec1955f47e0b165d6a71b54d7a9
msgid "Take a title and return a list of tokens useful for an AND search query. Excludes connectives(optionally) and punctuation."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
# 04e303af6d6442a3af97f1f02073fd65
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.test_fields:1
# d56cad967aa14dfaa4e9ca9a88081dd0
msgid "Return the first field from self.touched_fields that is null on the mi object"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
# 174ec1b5e94f48ac8a34935cf23221e7
msgid "Call this method in your plugin's identify method to normalize metadata before putting the Metadata object into result_queue. You can of course, use a custom algorithm suited to your metadata source."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
# cf3d6f571f554bd581fc39d1e97286e3
msgid "Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, identifier_value, URL). The URL is the URL for the book identified by identifiers at this source. identifier_type, identifier_value specify the identifier corresponding to the URL. This URL must be browseable to by a human using a browser. It is meant to provide a clickable link for the user to easily visit the books page at this source. If no URL is found, return None. This method must be quick, and consistent, so only implement it if it is possible to construct the URL from a known scheme given identifiers."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
# 28eb9f88934847108076b4c18486cd8a
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
# a340ea90725748b6a9797692d3df6183
msgid "Return cached cover URL for the book identified by the identifiers dict or None if no such URL exists."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
# 650f408b9d8446ac815fdf4b777b91d2
msgid "Note that this method must only return validated URLs, i.e. not URLS that could result in a generic cover image or a not found error."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
# d774cdc08225425cbc0a89f0297bb10f
msgid "Return a function that is used to generate a key that can sort Metadata objects by their relevance given a search query (title, authors, identifiers)."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
# d35e25a8d47d409a8f3d5fe355c77827
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
# c7e6dadfcbc749468952fb104af0856d
msgid "For details on the default algorithm see :class:`InternalMetadataCompareKeyGen`. Re-implement this function in your plugin if the default algorithm is not suitable."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:1
# b07548f302b84a0dad1c92dbfbbb3373
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:3
# 6ad028020f2047128717190fe11ccf5a
msgid "If identifiers(s) are specified and no match is found and this metadata source does not store all related identifiers (for example, all ISBNs of a book), this method should retry with just the title and author (assuming they were specified)."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:8
# ba1753c204ac4b259d54488fec35fb7f
msgid "If this metadata source also provides covers, the URL to the cover should be cached so that a subsequent call to the get covers API with the same ISBN/special identifier does not need to get the cover URL again. Use the caching API for this."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:13
# ef04fb4e425540bbbfc6caa76c5c69f4
msgid "Every Metadata object put into result_queue by this method must have a `source_relevance` attribute that is an integer indicating the order in which the results were returned by the metadata source for this query. This integer will be used by :meth:`compare_identify_results`. If the order is unimportant, set it to zero for every result."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:19
# a74ab61c5bc145adbdd36f2884388eea
msgid "Make sure that any cover/isbn mapping information is cached before the Metadata object is put into result_queue."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:22
# 8cc340dc4d19444b812a961f64fe54a7
msgid "A log object, use it to output debugging information/errors"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:23
# 20af6f4064274921babe3f8846380d6d
msgid "A result Queue, results should be put into it. Each result is a Metadata object"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:25
# 8928ef00f27640dd9c29b180b8a68be8
msgid "If abort.is_set() returns True, abort further processing and return as soon as possible"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:27
# 6db5cccdb48845e68f868ed3c93bda3a
msgid "The title of the book, can be None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:28
# 088be1c83dd54201a6bf62f93ab6b6ae
msgid "A list of authors of the book, can be None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:29
# 631826fdc25b43b7ab19c1a78d16a5df
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:31
# 27c8a5534d854c8890db59c46ef5d340
msgid "Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:33
# be12cfb28749419a8a5ddfef62ab5daa
msgid "None if no errors occurred, otherwise a unicode representation of the error suitable for showing to the user"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:1
# 56148795f2984cc29d3d66eed5f4ad4f
msgid "Download a cover and put it into result_queue. The parameters all have the same meaning as for :meth:`identify`. Put (self, cover_data) into result_queue."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:5
# b05bdaf0d863406bb46ae0612a5d9521
msgid "This method should use cached cover URLs for efficiency whenever possible. When cached data is not present, most plugins simply call identify and use its results."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:9
# 5d9474679c8149859ba38936b3cea596
msgid "If the parameter get_best_cover is True and this plugin can get multiple covers, it should only get the \"best\" one."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
# 4592eb5a2e1242758396275a7a6c0d10
msgid "Generate a sort key for comparison of the relevance of Metadata objects, given a search query. This is used only to compare results from the same metadata source, not across different sources."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
# 02aadc3bdbdf4c4bbaa8db85190d3eb0
msgid "The sort key ensures that an ascending order sort is a sort by order of decreasing relevance."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
# 6ce6b3591cb745808ca8e583ab35cdf1
msgid "The algorithm is:"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
# 4d3d5e3b39b945b487ab49eaac6eb617
msgid "Prefer results that have the same ISBN as specified in the query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
# 1c13a18ab42c4a5683c2d08789c0e4a8
msgid "Prefer results with a cached cover URL"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
# 4c9efb1ec00343bdb268f1bdc5d28eb2
msgid "Prefer results with all available fields filled in"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
# cbec12612e1a445d8df4ce11df412b9b
msgid "Prefer results that are an exact title match to the query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
# 85df952b822b4b1daf534164ece5ac48
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
# e52e82b918e042f4a1fc8ac91422950d
msgid "Use the relevance of the result as reported by the metadata source's search"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
# 96e0186c1a224b36ac57828ddf4cc6aa
msgid "engine"
msgstr ""

#: ../../plugins.rst:78
# ab78465e1b0042209a45f70e96cbe0cd
msgid "Conversion plugins"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin:1
# 146758a1546a400ebc6a88a8328d1ca0
msgid "InputFormatPlugins are responsible for converting a document into HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.file_types:1
# 5db53bf425b242a08f6828bec8cd8db7
msgid "Set of file types for which this plugin should be run For example: ``set(['azw', 'mobi', 'prc'])``"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
# 25e2447bdcdf4bf88c3d971a825adc41
msgid "If True, this input plugin generates a collection of images, one per HTML file. This can be set dynamically, in the convert method if the input files can be both image collections and non-image collections. If you set this to True, you must implement the get_images() method that returns a list of images."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.core_usage:1
# 142357d5a0f748b28bf0efca6b85dad6
msgid "Number of CPU cores used by this plugin A value of -1 means that it uses all available cores"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.for_viewer:1
# 39a292ae597b472aa43658addb17fd34
msgid "If set to True, the input plugin will perform special processing to make its output suitable for viewing"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.output_encoding:1
# ee10c728ef8f41f283151c307349d115
msgid "The encoding that this input plugin creates files in. A value of None means that the encoding is undefined and must be detected individually"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.common_options:1
# 7bf7cee00e2d41f3a4976ba3be0d074d
# a13354bbb75549aaa521245f84d4d067
msgid "Options shared by all Input format plugins. Do not override in sub-classes. Use :attr:`options` instead. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.options:1
# 71b0d4084fda4f2f928cb7bee605264f
# 133f38c236c44c4da53f2a7c064e271f
msgid "Options to customize the behavior of this plugin. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.recommendations:1
# 4723c5fb5efa4a70b7cb1f78606e5d7e
# 46604c8f5fd34d9a9a648737c8736f43
msgid "A set of 3-tuples of the form (option_name, recommended_value, recommendation_level)"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.get_images:1
# b7863dd89f9d461b80d16dd39313a897
msgid "Return a list of absolute paths to the images, if this input plugin represents an image collection. The list of images is in the same order as the spine and the TOC."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:1
# 228e8398d71d4a6b997eef465e8c0f5c
msgid "This method must be implemented in sub-classes. It must return the path to the created OPF file or an :class:`OEBBook` instance. All output should be contained in the current directory. If this plugin creates files outside the current directory they must be deleted/marked for deletion before this method returns."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:8
# dfcb84330f1e4cdba5d7f1d1b5e97d77
msgid "A file like object that contains the input file."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:9
# 2a51ccc72126403088aced008c9e2ec4
msgid "Options to customize the conversion process. Guaranteed to have attributes corresponding to all the options declared by this plugin. In addition, it will have a verbose attribute that takes integral values from zero upwards. Higher numbers mean be more verbose. Another useful attribute is ``input_profile`` that is an instance of :class:`calibre.customize.profiles.InputProfile`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:17
# 5d33ef85867c4cc4bd32e7671b0722c3
msgid "The extension (without the .) of the input file. It is guaranteed to be one of the `file_types` supported by this plugin."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:20
# 4416aa3394304137a8315888847d6132
msgid "A :class:`calibre.utils.logging.Log` object. All output should use this object."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:22
# c9448c3db1194df08183759ed87dfa20
msgid "A dictionary of various information that the input plugin can get easily that would speed up the subsequent stages of the conversion."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
# 8528f07391764447beb1a4ac9db0d6a5
msgid "Called to allow the input plugin to perform postprocessing after the book has been parsed."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.specialize:1
# c74f11c197ce408c8ef3419419fd3e52
msgid "Called to allow the input plugin to specialize the parsed book for a particular output format. Called after postprocess_book and before any transforms are performed on the parsed book."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
# f2ab28d87ba744728d2349da534ea9fc
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builting input plugins for examples."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:1
# b49f48929f104155b91f56473ab61b08
msgid "OutputFormatPlugins are responsible for converting an OEB document (OPF+HTML) into an output ebook."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:4
# 9e975bae7dc14dafa903d6ad77fc68b0
msgid "The OEB document can be assumed to be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.file_type:1
# e724b27be2f949ec9d07e558b829adb1
msgid "The file type (extension without leading period) that this plugin outputs"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:1
# bac67286e8c34fea83455b70c6e1fc9e
msgid "Render the contents of `oeb_book` (which is an instance of :class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:4
# d129ec19b0e64f76aa1dc1ba3cfc2d75
msgid "Either a file like object or a string. If it is a string it is the path to a directory that may or may not exist. The output plugin should write its output into that directory. If it is a file like object, the output plugin should write its output into the file."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:8
# 488ec508d9e64b3fa6fb547d2572bf0d
msgid "The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:10
# a414fa9525e34a5a8e8c3a8e34e95680
msgid "Conversion options. Guaranteed to have attributes corresponding to the OptionRecommendations of this plugin."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:12
# 4bcb89a4689841a3853b1d5b60bdb00a
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
# b66242527f6c489083ce4fff7bd209e9
msgid "Can be used to make changes to the css during the CSS flattening process."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
# 29bf4cd0f519481e9e381045914d1c07
msgid "The item (HTML file) being processed"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
# b882f9256e354ba5af7cd82edf192c5e
msgid "A Stylizer object containing the flattened styles for item. You can get the style for any element by stylizer.style(element)."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
# 2cf6b25b40d04ffb9a1f1912d77d0284
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builtin output plugins for examples."
msgstr ""

#: ../../plugins.rst:93
# b8b9dd0caf9341b598db7651fcd7386c
msgid "Device Drivers"
msgstr ""

#: ../../plugins.rst:97
# fbf1f6ae8f6a4e439742307ae43b7cff
msgid "The base class for all device drivers is :class:`DevicePlugin`. However, if your device exposes itself as a USBMS drive to the operating system, you should use the USBMS class instead as it implements all the logic needed to support these kinds of devices."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin:1
# ac4b48af60914fc09014aec2e328edbc
msgid "Defines the interface that should be implemented by backends that communicate with an ebook reader."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.FORMATS:1
# 9f405000aebc49d1a73c44acbc0a0c33
msgid "Ordered list of supported formats"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VENDOR_ID:1
# 8cfff86fb7a84476900e4d7862c01d99
msgid "VENDOR_ID can be either an integer, a list of integers or a dictionary If it is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
# a13f95a4eacf479081ab2aec22ffeef3
msgid "An integer or a list of integers"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.BCD:1
# dcb03ff4e4ab4e1a88d2ced702829cfb
msgid "BCD can be either None to not distinguish between devices based on BCD, or it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
# bac46f62af7848d896c67996d7c91de9
msgid "Height for thumbnails on the device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
# c15cab714f6e43619a2e57471a2d2017
msgid "Width for thumbnails on the device. Setting this will force thumbnails to this size, not preserving aspect ratio. If it is not set, then the aspect ratio will be preserved and the thumbnail will be no higher than THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 to have better quality thumbnails with fewer compression artifacts. Of course, the thumbnails get larger as well."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
# 96e18a25d1b54144b8bdaada431bed26
msgid "Set this to True if the device supports updating cover thumbnails during sync_booklists. Setting it to true will ask device.py to refresh the cover thumbnails during book matching"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
# 39685271db3246f4b1030667dc5ff3ac
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
# 76de7bec6db84da48eaafaa3e4b42f55
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.path_sep:1
# 6dae058fd23843758ffc7f5db2e62f1a
msgid "Path separator for paths to books on device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.icon:1
# cd3a0eb9175f4dbf9bf65d244124f303
msgid "Icon for this device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
# 00d6f88e5dc744e2bbada1145d8710bd
msgid "GUI displays this as a message if not None. Useful if opening can take a long time"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
# 70e1c562175044a6ae0a9ceb2a4d7899
msgid "Set of extensions that are \"virtual books\" on the device and therefore cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
# f1adb88a1da8459399a44f72e395af54
msgid "Whether to nuke comments in the copy of the book sent to the device. If not None this should be short string that the comments will be replaced by."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
# 8b4c9ac15ee342bda8cb87337681fc37
msgid "If True indicates that  this driver completely manages device detection, ejecting and so forth. If you set this to True, you *must* implement the detect_managed_devices and debug_managed_device_detection methods. A driver with this set to true is responsible for detection of devices, managing a blacklist of devices, a list of ejected devices and so forth. calibre will periodically call the detect_managed_devices() method and is it returns a detected device, calibre will call open(). open() will be called every time a device is returned even is previous calls to open() failed, therefore the driver must maintain its own blacklist of failed devices. Similarly, when ejecting, calibre will call eject() and then assuming the next call to detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
# 308754c072a44b4b816bf255274593a0
msgid "If set the True, calibre will call the :meth:`get_driveinfo()` method after the books lists have been loaded to get the driveinfo."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
# 3cd7a573738d4e7cb20af4741e64987b
msgid "If set to True, calibre will ask the user if they want to manage the device with calibre, the first time it is detected. If you set this to True you must implement :meth:`get_device_uid()` and :meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` and :meth:`set_user_blacklisted_devices`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
# 42394fb0ef804eba8518fc554621a27b
msgid "Set this to a dictionary of the form {'title':title, 'msg':msg, 'det_msg':detailed_msg} to have calibre popup a message to the user after some callbacks are run (currently only upload_books). Be careful to not spam the user with too many messages. This variable is checked after *every* callback, so only set it when you really need to."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:1
# c45c4962feb8452a90f2f61168cd663b
msgid "Return True, device_info if a device handled by this plugin is currently connected."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:3
# 11cba831301543039c594f6478fb3c2c
msgid "List of devices currently connected"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
# 7cc3384a64ec410699f39e0a773274dc
# 7d06f8408a244749976cbe3ea7e8b280
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:3
# eaa65c83266040a78c3f6b458f8c9003
msgid "Scan for devices that this driver can handle. Should return a device object if a device is found. This object will be passed to the open() method as the connected_device. If no device is found, return None. The returned object can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:9
# c9070e6782a8403fb9e7fe161af5c448
msgid "This method is called periodically by the GUI, so make sure it is not too resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:13
# a0ef6009d47140e9aa8d2df8c212cf93
msgid "Set of USB devices found on the system."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:15
# 2f062f5f74b74df087ffe6b1b5a11852
msgid "If True and the driver uses a cache to prevent repeated scanning, the cache must be flushed."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
# 394f5663a98c435a92d6dbb1602f9a08
msgid "Should write information about the devices detected on the system to output, which is a file like object."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
# c93570e7bcfb49659c4acd8b948ce19f
msgid "Should return True if a device was detected and successfully opened, otherwise False."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:1
# 2602c57512a348fda2983301dad3258c
msgid "The key to unlock the device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:2
# 98a9a6c2cf81459f9910dfc42b271304
msgid "If true the packet stream to/from the device is logged"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:3
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:3
# f18771bda8674e199925a85a7d9709d2
# 31c5d576d4d246059eaa636a0d6b9ec6
msgid "Function that is called with a % progress (number between 0 and 100) for various tasks If it is called with -1 that means that the task does not have any progress information"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:7
# a20fd966adc34b86abf5ccba8debd1bf
msgid "Device information from the device scanner"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:1
# 33fc518ec8974c489831c00c7ceda42d
msgid "Optional method to perform further checks on a device to see if this driver is capable of handling it. If it is not it should return False. This method is only called after the vendor, product ids and the bcd have matched, so it can do some relatively time intensive checks. The default implementation returns True. This method is called only on windows. See also :meth:`can_handle`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:8
# 6af6303ce0e542ccb083c834a3eb6cce
msgid "On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, bcd)``."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:1
# 26d28a27c7f749a993dc7153e1d5c810
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:3
# c4f349c1508940309caa23b0c31dead3
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:1
# b76fb73970d243f7b73dba7e3f0a4d35
msgid "Perform any device specific initialization. Called after the device is detected but before any other functions that communicate with the device. For example: For devices that present themselves as USB Mass storage devices, this method would be responsible for mounting the device or if the device has been automounted, for finding out where it has been mounted. The method :meth:`calibre.devices.usbms.device.Device.open` has an implementation of this function that should serve as a good example for USB Mass storage devices."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:11
# ca883547f55340d980710aa6b0ea9e03
msgid "This method can raise an OpenFeedback exception to display a message to the user."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:14
# 40dcb090d89b48e0b39cc6890791c75c
msgid "The device that we are trying to open. It is a tuple of (vendor id, product id, bcd, manufacturer name, product name, device serial number). However, some devices have no serial number and on windows only the first three fields are present, the rest are None."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:20
# 69fe107d851048b19802b23ad708027c
msgid "The UUID of the current calibre library. Can be None if there is no library (for example when used from the command line)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:1
# 3d3296ba361243639fe7768584b28252
msgid "Un-mount / eject the device from the OS. This does not check if there are pending GUI jobs that need to communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:4
# 65adc7140c7f460f8ebb69e25c89fbc9
msgid "NOTE: That this method may not be called on the same thread as the rest of the device methods."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
# b676cf7a32704439969aaf4b56b3b7c0
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:1
# 330c8de0205f4d6f91df5078893e463a
msgid "Set a function to report progress information."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:1
# dd687387e4174868b64ff62b30f7bab1
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:3
# db4726044631494da80c34260a4065e9
msgid "(device name, device version, software version on device, mime type) The tuple can optionally have a fifth element, which is a drive information dictionary. See usbms.driver for an example."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_driveinfo:1
# 3dda1feeddb44a5b9ffb52fdaff7ef8c
msgid "Return the driveinfo dictionary. Usually called from get_device_information(), but if loading the driveinfo is slow for this driver, then it should set SLOW_DRIVEINFO. In this case, this method will be called by calibre after the book lists have been loaded. Note that it is not called on the device thread, so the driver should cache the drive info in the books() method and this function should return the cached data."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.card_prefix:1
# f163fa94d2254464b4af3302862f4599
msgid "Return a 2 element list of the prefix to paths on the cards. If no card is present None is set for the card's prefix. E.G. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 7b74a28f713b4474ad5cb2f7e4c842d3
msgid "Get total space available on the mountpoints:"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:2
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:2
# e66502326e6f4082b5c5dc78a8a49e00
# c69b61fb7a8c4cb8908f11f593f5f33d
msgid "Main memory"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:3
# 26d9441f58f443a984bfa1e590e4f408
msgid "Memory Card A"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 43f2c5be5d7e4d92b73b3fabb1060c48
msgid "Memory Card B"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:6
# ec159b2a74b54d95a229694ca4f5db80
msgid "A 3 element list with total space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return 0."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# c9775f6b898d4176a8987f8054c70840
msgid "Get free space available on the mountpoints:"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:3
# 04439ce98ff4407284aba18c49e97665
msgid "Card A"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 738935ec296f45b492a8de476e5609a8
msgid "Card B"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:6
# 7bf61f1a3129418d9fbd8841a33386d6
msgid "A 3 element list with free space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return -1."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:1
# 04e64563dac34ebf8a5b30ee08e1d559
msgid "Return a list of ebooks on the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:3
# da8116929432451db71af17d3d85b821
msgid "If 'carda' or 'cardb' return a list of ebooks on the specific storage card, otherwise return list of ebooks in main memory of device. If a card is specified and no books are on the card return empty list."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:8
# 8bb3217e5c8b4df4b8875e68fe4e2071
msgid "A BookList."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:1
# 701615fb93a241fdae151344a09d1b1c
msgid "Upload a list of books to the device. If a file already exists on the device, it should be replaced. This method should raise a :class:`FreeSpaceError` if there is not enough free space on the device. The text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is not None otherwise it must contain the word \"memory\"."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:7
# f93ddd1588b44b078236f00e43733e25
msgid "A list of paths"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:8
# 8a99922e4ef846d2967e19fdcc34d8a8
msgid "A list of file names that the books should have once uploaded to the device. len(names) == len(files)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:10
# eddc2aeed246461d919748720b608de3
msgid "If not None, it is a list of :class:`Metadata` objects. The idea is to use the metadata to determine where on the device to put the book. len(metadata) == len(files). Apart from the regular cover (path to cover), there may also be a thumbnail attribute, which should be used in preference. The thumbnail attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:17
# 92ffc712c8844bd991b3aeac2064747e
msgid "A list of 3-element tuples. The list is meant to be passed to :meth:`add_books_to_metadata`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
# 3ba3bdf2ef704d8fb94904873310f90b
msgid "Add locations to the booklists. This function must not communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
# 85af6b21f08a4f458b471e91882924c9
msgid "Result of a call to L{upload_books}"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
# 2bb1776cc3294c12b22d662cbef05d89
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:3
# 5a0cf5e6c1714228aa94f23eae74c68d
# 45580c23de80408387407c13b4ce52d2
# b0ee895bf2884ee2a0bc5dddd7b05626
msgid "A tuple containing the result of calls to (:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.delete_books:1
# 0f1a1cb9fed14b99b4731cd5da06a293
msgid "Delete books at paths on device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
# 38e9484209cb498cb430c9a2388a8e9a
msgid "Remove books from the metadata list. This function must not communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
# cb525d82454449d280cdfe823ce10d6f
msgid "paths to books on the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:1
# ee257df4bebc47e18782097dd4122f77
msgid "Update metadata on device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:1
# 0ff379719ce64eafbd6237d16d47ab59
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:3
# 0731a695445144dcb184787664f6199c
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.config_widget:1
# f38f3177308f4a27873b0acbc5555073
msgid "Should return a QWidget. The QWidget contains the settings for the device interface"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.save_settings:1
# f6d05fb2b9964a8b836c90769fa658d6
msgid "Should save settings to disk. Takes the widget created in :meth:`config_widget` and saves all settings to disk."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.settings:1
# 196a9d7636104bca812925003e229450
msgid "Should return an opts object. The opts object should have at least one attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:1
# 39c3fda5508e4ed29f9bfdcb2b04f6db
msgid "provide the driver the current set of plugboards and a function to select a specific plugboard. This method is called immediately before add_books and sync_booklists."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# d44a57fbcbd74ec78a20397e69b8c52a
msgid "pb_func is a callable with the following signature::"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 448593d2008d4e8c85bbd8394fee1069
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:8
# 9b4ee5d91cba435ab0c88d482ebd3e2a
msgid "You give it the current device name (either the class name or DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or 'device_db'), and the plugboards (you were given those by set_plugboards, the same place you got this method)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:13
# 99a986806a7c4fbf85ad1a6626522924
msgid "None or a single plugboard instance."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
# deaa8692efdc4d89b4df6d365db294ec
msgid "Set the device name in the driveinfo file to 'name'. This setting will persist until the file is re-created or the name is changed again."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
# 40dabdd1717d4ee7adcbf3117164e617
msgid "Non-disk devices should implement this method based on the location codes returned by the get_device_information() method."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:1
# 511d9dcfb1244186b3c498dece82b409
msgid "Given a list of paths, returns another list of paths. These paths point to addable versions of the books."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:4
# 27d62f5c828f47428591eb4b1cb6c33f
msgid "If there is an error preparing a book, then instead of a path, the position in the returned list for that book should be a three tuple: (original_path, the exception instance, traceback)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.startup:1
# a8b96ffaf0464f53bc4efdb8c4da8eaa
msgid "Called when calibre is is starting the device. Do any initialization required. Note that multiple instances of the class can be instantiated, and thus __init__ can be called multiple times, but only one instance will have this method called. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.shutdown:1
# a8ea5607ccae4ac089c9f5645e4dfa88
msgid "Called when calibre is shutting down, either for good or in preparation to restart. Do any cleanup required. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_uid:1
# af6934f5416c493392e2bcce932b31e7
msgid "Must return a unique id for the currently connected device (this is called immediately after a successful call to open()). You must implement this method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ignore_connected_device:1
# b70cc4cc38354a638a64872b87ff7ee0
msgid "Should ignore the device identified by uid (the result of a call to get_device_uid()) in the future. You must implement this method if you set ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately after open(), so if open() caches some state, the driver should reset that state."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
# ddc799b027d94e119101d2893b8b8f7e
msgid "Return map of device uid to friendly name for all devices that the user has asked to be ignored."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
# 34d8c3dc476741e8bda5a3e286dc9e13
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
# 4ddb9e1886d64e9fb8a644961c77133f
msgid "Implement this method if your device wants to override a particular preference. You must ensure that all call sites that want a preference that can be overridden use device_prefs['something'] instead of prefs['something']. Your method should call device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: metadata management (prefs['manage_device_metadata'])"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
# 581722fffca94d12b8640d6b7fa6c3a6
msgid "Called by the device manager when starting plugins. If this method returns a string, then a) it supports the device manager's dynamic control interface, and b) that name is to be used when talking to the plugin."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:4
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:3
# 3e7bce1b55654e028b964cc1c05cc833
# 8b94a7ba60344ce1af388b301c820504
# a59464ec80b54cc38a5b90709e317e97
# 12fc501e075f493583d6a3fdbff56f59
# 61a287df35e944a0b87f04800fb87653
# f7936b8cd70b47fa985b183f3778c48f
msgid "This method can be called on the GUI thread. A driver that implements this method must be thread safe."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:1
# 40d51b80452d47119b09384d30d5fd2e
msgid "This method is called to start the plugin. The plugin should begin to accept device connections however it does that. If the plugin is already accepting connections, then do nothing."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:1
# 07fc9f0929d1444aaa4d2ad2b14886df
msgid "This method is called to stop the plugin. The plugin should no longer accept connections, and should cleanup behind itself. It is likely that this method should call shutdown. If the plugin is already not accepting connections, then do nothing."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:1
# 5afeba0829b6468188a44450b7d55e06
msgid "Return the value of the option indicated by opt_string. This method can be called when the plugin is not started. Return None if the option does not exist."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:1
# 0f2ba55a8ef740cd82c9760a981d9d5b
msgid "Set the value of the option indicated by opt_string. This method can be called when the plugin is not started."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:1
# 67f67e95159b4214ac8f9adeb65f44ca
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:1
# 22fd506de6534c9a8f643b31c5055a00
msgid "Called during book matching when a book on the device is matched with a book in calibre's db. The method is responsible for syncronizing data from the device to calibre's db (if needed)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:5
# 8ef0c321205843a4941f568b6f9698c6
msgid "The method must return a set of calibre book ids changed if calibre's database was changed, None if the database was not changed. If the method returns an empty set then the metadata for the book on the device is updated with calibre's metadata and given back to the device, but no GUI refresh of that book is done. This is useful when the calire data is correct but must be sent to the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:12
# 4d26623fe0c94959949d605907b8510b
msgid "Extremely important: this method is called on the GUI thread. It must be threadsafe with respect to the device manager's thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:15
# e8de4e9bb58c41a1ac51d7e6bbc401cc
msgid "book_id: the calibre id for the book in the database. book_metadata: the Metadata object for the book coming from the device."
msgstr ""

#: ../../<autodoc>:1
# 339d73dd965447679750924bb34e166d
msgid "Bases: :class:`list`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:1
# ed9988667b69413b9353c49b7e6a8eef
msgid "A list of books. Each Book object must have the fields"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:3
# eacb162cbc664f498003f19dcdc7ccbc
msgid "title"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:4
# 3318c3ed66d7464c8a762c14708c6234
msgid "authors"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:5
# 7a2ef5e833bf4c5ca5d50a4189ced13a
msgid "size (file size of the book)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:6
# 3b237d4741e6434aa62317e4c5e79742
msgid "datetime (a UTC time tuple)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:7
# 3a7b23ab721c4e2f81e8aa78b83c9d57
msgid "path (path on the device to the book)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:8
# 3da94e1a1b8142079e03411d758834d7
msgid "thumbnail (can be None) thumbnail is either a str/bytes object with the image data or it should have an attribute image_path that stores an absolute (platform native) path to the image"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:11
# 825743656bb7460c9b3f9afdd964612b
msgid "tags (a list of strings, can be empty)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.supports_collections:1
# aad8b3d3eee0460fa6dca98c2fbd17b7
msgid "Return True if the device supports collections for this book list."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.add_book:1
# 4ad54e3f3b4c4d5ea35f0d987f63e346
msgid "Add the book to the booklist. Intent is to maintain any device-internal metadata. Return True if booklists must be sync'ed"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.remove_book:1
# 97fd5706fa254730ab79e2d187ac80c8
msgid "Remove a book from the booklist. Correct any device metadata at the same time"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:1
# 931e7181eca34a388a48e9c4d0859533
msgid "Return a dictionary of collections created from collection_attributes. Each entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:5
# 3554acf1003046ea8193241b1c49bbe7
msgid "The list of books is sorted by book title, except for collections created from series, in which case series_index is used."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:8
# 6db5bf0e805f49da8ab4912698b722e3
msgid "A list of attributes of the Book object"
msgstr ""

#: ../../plugins.rst:111
# c0cb40a59e924d3f9ab153e3195a67dd
msgid "USB Mass Storage based devices"
msgstr ""

#: ../../plugins.rst:113
# 8e1651f8957142b5ba587920c4ef65ac
msgid "The base class for such devices is :class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits some of its functionality from its bases, documented below. A typical basic USBMS based driver looks like this:"
msgstr ""

#: ../../<autodoc>:1
# ff93fb38bd0b41cca00018b6f4f7ba9e
msgid "Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, :class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device:1
# 41ae78de0e6242fcae3e6cb1499cb02d
msgid "This class provides logic common to all drivers for devices that export themselves as USB Mass Storage devices. Provides implementations for mounting/ejecting of USBMS devices on all platforms."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
# ae4d005cd0ec4b00a2b722c0a9ed7e01
msgid "String identifying the main memory of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
# 41210486a19241ff8c1e4f67d1f509de
msgid "String identifying the first card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
# 2e7d8b776cef4716ab9c03878c0c711c
msgid "String identifying the second card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
# 14cf5d8a230e4fecbb400a725f9e10b7
msgid "Used by the new driver detection to disambiguate main memory from storage cards. Should be a regular expression that matches the main memory mount point assigned by OS X"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
# 0dab43e0e5924ad2a1db80d61f35426b
msgid "The maximum length of paths created on the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
# 19c0c7de66234639953ed4392e70dacf
msgid "Put news in its own folder"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.windows_sort_drives:1
# e957384e345b438396131d1289b6b70c
msgid "Called to disambiguate main memory and storage card for devices that do not distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The EB600"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_callback:1
# d26e2c8359d54f37b7c8f7d6f23f7050
msgid "Callback to allow individual device drivers to override the path sanitization used by :meth:`create_upload_path`."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.filename_callback:1
# 435dafa8a7dd471f92e4de6db1c81d0a
msgid "Callback to allow drivers to change the default file name set by :meth:`create_upload_path`."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_path_components:1
# 08c67b001d2644269c73c1764e27232b
msgid "Perform any device specific sanitization on the path components for files to be uploaded to the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.get_annotations:1
# a16eade47bf64976843121af24d7816a
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.add_annotation_to_library:1
# ae6d44c762ca44e1a204fb584b3dcb8b
msgid "Add an annotation to the calibre library"
msgstr ""

#: ../../<autodoc>:1
# add4c574f91849ec92adbed3301c345e
msgid "Bases: :class:`calibre.devices.usbms.cli.CLI`, :class:`calibre.devices.usbms.device.Device`"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS:1
# feb35e4d0d0e4f21b357d9fff26b20ca
msgid "The base class for all USBMS devices. Implements the logic for sending/getting/updating metadata/caching metadata/etc."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:1
# 9bf04662a2fc4345af605f06f2d4f77b
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:3
# d9cbd76fbcc148fe9b2a2dd0679af078
msgid "The full path to the directory where the associated book is located."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:4
# ef0a11e402c0477f8d09e970549ea75b
msgid "The name of the book file without the extension."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:5
# 1c29a73bb297430397f64a3fd586cec1
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:7
# e43e2555fb794e3087b200286bfb0f7a
msgid "The full path to the ebook file"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.normalize_path:1
# 20a9b75887e8425b948a5b807fa2eb3f
msgid "Return path with platform native path separators"
msgstr ""

#: ../../plugins.rst:159
# 035ebfe7f80240bdbd13ff3b2dd0cc34
msgid "User Interface Actions"
msgstr ""

#: ../../plugins.rst:161
# d1878f3e27d943abad5439bd3e168385
msgid "If you are adding your own plugin in a zip file, you should subclass both InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` method of you InterfaceActionBase subclass must return an instantiated object of your InterfaceBase subclass."
msgstr ""

#: ../../<autodoc>:1
# 775b3c13c07a4fcf8edb87dd3bfe07a6
msgid "Bases: :class:`PyQt4.QtCore.QObject`"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:1
# 43f9cb73cac344b4addeeb064a2f7892
msgid "A plugin representing an \"action\" that can be taken in the graphical user interface. All the items in the toolbar and context menus are implemented by these plugins."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:5
# 9410ca5eb16e4f458fbeb6bb8feefb5f
msgid "Note that this class is the base class for these plugins, however, to integrate the plugin with calibre's plugin system, you have to make a wrapper class that references the actual plugin. See the :mod:`calibre.customize.builtins` module for examples."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:10
# 82c7412b14c04d0693e6bc23e444fb28
msgid "If two :class:`InterfaceAction` objects have the same name, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:13
# 375353bbce354ab7b7381a35fff38d8f
msgid "Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected` :meth:`shutting_down` and :meth:`initialization_complete` methods."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:17
# af3df7c57b174944a2d62edef5b645cd
msgid "Once initialized, this plugin has access to the main calibre GUI via the :attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:22
# 30ac11a5e96e436ebc603a996014d4a7
msgid "To access the actual plugin, use the :attr:`interface_action_base_plugin` attribute, this attribute only becomes available after the plugin has been initialized. Useful if you want to use methods from the plugin class like do_user_config()."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:27
# 96d5e7fe41df4ed9a087c86d3d026952
msgid "The QAction specified by :attr:`action_spec` is automatically create and made available as ``self.qaction``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.name:1
# 444ff7feeca14af997b6d5c399f66e5a
msgid "The plugin name. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.priority:1
# 7b11172b2eb5405eaba133275592a3fd
msgid "The plugin priority. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.popup_type:1
# b7f22790ab524de6bf7fd00bdb078125
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.auto_repeat:1
# 24ebf2c429fc47c4882aaf23b3ea8140
msgid "Whether this action should be auto repeated when its shortcut key is held down."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_spec:1
# ef8bb601bbc241a8bc7ecaf43ce57c97
msgid "Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and keyboard shortcut can be None shortcut must be a string, None or tuple of shortcuts. If None, a keyboard shortcut corresponding to the action is not registered. If you pass an empty tuple, then the shortcut is registered with no default key binding."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_add_menu:1
# 6de959872d5642388fca6b1149d0b8e2
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
# 422c69e7ce8f41859f1559121b619e20
msgid "If True, a clone of self.qaction is added to the menu of self.qaction If you want the text of this action to be different from that of self.qaction, set this variable to the new text"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_add_to:1
# 28427b93c9784bc7aabf71ef1747dca9
msgid "Set of locations to which this action must not be added. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_remove_from:1
# aba00560123d4977a6b9b1ae183a84da
msgid "Set of locations from which this action must not be removed. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_type:1
# 62136405d9b94748840f01adf12dc4b4
msgid "Type of action 'current' means acts on the current view 'global' means an action that does not act on the current view, but rather on calibre as a whole"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accepts_drops:1
# 5e135f502e354fefa72c8c1c126c4f6c
msgid "If True, then this InterfaceAction will have the opportunity to interact with drag and drop events. See the methods, :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
# 2c2b37788e784607ac45521e62d2a3e4
# a7a92ee57dd34a6db5a4e0a41ebc3ef0
msgid "This method should return True iff this interface action is capable of handling the drag event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.drop_event:1
# ad6af97ac0b44c349ccf978c2ad29327
msgid "This method should perform some useful action and return True iff this interface action is capable of handling the drop event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI. You should not perform blocking/long operations in this function. Instead emit a signal or use QTimer.singleShot and return quickly. See the builtin actions for examples."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:1
# 4b9fccaad4e640829b9d07ab6bdd1d04
msgid "Convenience method to easily add actions to a QMenu. Returns the created QAction, This action has one extra attribute calibre_shortcut_unique_name which if not None refers to the unique name under which this action is registered with the keyboard manager."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:6
# 41375555a89e4755b0e894d2051a6cce
msgid "The QMenu the newly created action will be added to"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:7
# 1f28ba482b7e4319b1a6fbee53305675
msgid "A unique name for this action, this must be globally unique, so make it as descriptive as possible. If in doubt add a uuid to it."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:10
# 0fea5b6155264197809b025bad2b3908
msgid "The text of the action."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:11
# 3ec01b372f614a159028b3309232fefd
msgid "Either a QIcon or a file name. The file name is passed to the I() builtin, so you do not need to pass the full path to the images directory."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:14
# bdae5ad2534c4e4b90f8c70811f25113
msgid "A string, a list of strings, None or False. If False, no keyboard shortcut is registered for this action. If None, a keyboard shortcut with no default keybinding is registered. String and list of strings register a shortcut with default keybinding as specified."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:18
# ac6acb7083674d1eabf789edcdfa796c
msgid "A description for this action. Used to set tooltips."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:20
# 343bf1edb2e04e0c82b60ad8d182589a
msgid "A callable which is connected to the triggered signal of the created action."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:22
# 1f29d86c53ff47a0a5f4b5f9dbd84e45
msgid "The test displayed to the user when customizing the keyboard shortcuts for this action. By default it is set to the value of ``text``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.genesis:1
# 51f25226fed44fddb4fd6b5ea98323ff
msgid "Setup this plugin. Only called once during initialization. self.gui is available. The action specified by :attr:`action_spec` is available as ``self.qaction``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:1
# b591bd16b8cc4730b83950a0efc4a3b8
msgid "Called whenever the book list being displayed in calibre changes. Currently values for loc are: ``library, main, card and cardb``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:4
# 6c74b05c1f6f4460844cae563a3b83fd
msgid "This method should enable/disable this action and its sub actions as appropriate for the location."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:1
# f818c19d817045e1a2cce6fe4e7b07a0
msgid "Called whenever the current library is changed."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:3
# fbfd009f9b9d4741a5d5810125d885e4
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
# 88b20b306d2a48d0b977a4670f1f2f47
msgid "Called once per action when the layout of the main GUI is completed. If your action needs to make changes to the layout, they should be done here, rather than in :meth:`initialization_complete`."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.initialization_complete:1
# 278c96084eb04daa94588f9b534286ab
msgid "Called once per action when the initialization of the main GUI is completed."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:1
# 59f440ed6e604647bdf41dad9299b993
msgid "Called once per plugin when the main GUI is in the process of shutting down. Release any used resources, but try not to block the shutdown for long periods of time."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:5
# 54c5389a2aeb472d8cc93da1932625b9
msgid "False to halt the shutdown. You are responsible for telling the user why the shutdown was halted."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.InterfaceActionBase.load_actual_plugin:1
# 5422967064c145b3bfb94d1bd0157e82
msgid "This method must return the actual interface action plugin object."
msgstr ""

#: ../../plugins.rst:176
# 39093401c703476d8df966940035b70f
msgid "Preferences Plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:1
# d390d957ad604f8ebada5321340c0dc5
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:3
# 8bd2a2444a2849938a68ba91776f1161
msgid "This plugin has only one important method :meth:`create_widget`. The various fields of the plugin control how it is categorized in the UI."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.config_widget:1
# e77a57ef00f746d7829aca4717f9fa62
msgid "Import path to module that contains a class named ConfigWidget which implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category_order:1
# 7d1bcf56e6a04bd0bfcdcad1fccb67a0
msgid "Where in the list of categories the :attr:`category` of this plugin should be."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.name_order:1
# dda055bd819d4620b34b08d1d47aedb3
msgid "Where in the list of names in a category, the :attr:`gui_name` of this plugin should be"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category:1
# 8588985291284f239e2f5ea53a3ee88c
msgid "The category this plugin should be in"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_category:1
# 314f138d5e37472ba48711883bed03f1
msgid "The category name displayed to the user for this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_name:1
# c670057c15bc4f21812197e57ed02d90
msgid "The name displayed to the user for this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.icon:1
# 85682ed16e3b4e108dcbcfb48958e993
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.description:1
# 64aaf18fdc234ac68a1f225f3e93153b
msgid "The description used for tooltips and the like"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:1
# b340cbc50f654913b267f757b4675d60
msgid "Create and return the actual Qt widget used for setting this group of preferences. The widget must implement the :class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:5
# 39ac089958304f94ba9ea8627a7da50d
msgid "The default implementation uses :attr:`config_widget` to instantiate the widget."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface:1
# 47135d1ff6ec4f9b970021e3050f9980
msgid "This class defines the interface that all widgets displayed in the Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base class that implements this interface and defines various convenience methods as well."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
# 5432d6ee242444308935af9bef10f82f
msgid "This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
# 8745d6a72ae54ec0bcdb40a91da7ea51
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
# 0f20cae15d3a48e8a7caec53b5c92c80
msgid "The tooltip for the Restore to defaults button"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
# a2257801bcc043e8bc07efcdfcae7b0d
msgid "If True the Preferences dialog will not allow the user to set any more preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
# f23e8740a08e4f9080c209985eaab882
msgid "Called once before the widget is displayed, should perform any necessary setup."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
# 15c8fb29dfcb41b1acd2207a556e88c1
msgid "The main calibre graphical user interface"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
# 30c434b18f6b449391b8881a72d8ee2d
msgid "Should set all config values to their initial values (the values stored in the config files)."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
# b4cb2a74690f4c0ba34e3f2d8c2a0a01
msgid "Should set all config values to their defaults."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
# a50f5df9ef08456cb6faff93d5e9d307
msgid "Save any changed settings. Return True if the changes require a restart, False otherwise. Raise an :class:`AbortCommit` exception to indicate that an error occurred. You are responsible for giving the user feedback about what the error is and how to correct it."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
# 30d02d33c63d4934ad077c10d49bc88f
msgid "Called once after this widget is committed. Responsible for causing the gui to reread any changed settings. Note that by default the GUI re-initializes various elements anyway, so most widgets won't need to use this method."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:1
# 7004df2e815b4fc784badc25d78423eb
msgid "Base class that contains code to easily add standard config widgets like checkboxes, combo boxes, text fields and so on. See the :meth:`register` method."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:5
# 37a1a911420b43f78bfe1cae5f755dac
msgid "This class automatically handles change notification, resetting to default, translation between gui objects and config objects, etc. for registered settings."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:9
# bb430e3cf1f44f97b23cfc6fc8788131
msgid "If your config widget inherits from this class but includes setting that are not registered, you should override the :class:`ConfigWidgetInterface` methods and call the base class methods inside the overrides."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:1
# 6a2ef657f8c74c6393f8bfa363514de2
msgid "Register a setting."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:3
# a08723dba41b4cffac4312df0b85117c
msgid "The setting name"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:4
# 740fb30f50564c53a162ad48c5795ec2
msgid "The config object that reads/writes the setting"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:5
# 88f6a26c06264bc8ba89869bacf1cc6a
msgid "The name of the GUI object that presents an interface to change the setting. By default it is assumed to be ``'opt_' + name``."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:8
# dca1ba89150f475193324ec5f2ca1008
msgid "If this setting is a multiple choice (combobox) based setting, the list of choices. The list is a list of two element tuples of the form: ``[(gui name, value), ...]``"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:11
# fa55f6d11ae34ac0821984f74a274534
msgid "The class responsible for managing this setting. The default class handles almost all cases, so this param is rarely used."
msgstr ""

