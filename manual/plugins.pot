# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.42.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-27 23:37+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../plugins.rst:6
# 7696f3d74e8147fb9058a33e9fa35f85
msgid "API Documentation for plugins"
msgstr ""

#: ../../plugins.rst:11
# ea9eec0f77c249f98b43443e91103287
msgid "Defines various abstract base classes that can be subclassed to create powerful plugins. The useful classes are:"
msgstr ""

#: ../../plugins.rst:21
# 265d43fb1c6941a78baadf2c207c11a2
msgid "Plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:1
# e38a45ced4a448c0b64fbcb254457499
msgid "A calibre plugin. Useful members include:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 1561b0588e9c48f6bbaf6abbf468fff5
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# e0d0d453ac1144d3b5d90f44a5b87ece
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# 7ede0f73fecb4f898fc85af3e15534a5
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# a698df4ba4d34503aa9b1478447afe08
msgid "by the user."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:9
# ba658161744a48fea6c5b77d98979bf1
msgid "Methods that should be overridden in sub classes:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:11
# e2cd9b21c25442409ccdfccfc89b7837
msgid ":meth:`initialize`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:12
# 4f5a841741ff4beab6a7f9042c9ddc24
msgid ":meth:`customization_help`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:14
# d82cce0a3a644ccb890b93d9d156492c
msgid "Useful methods:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:16
# ab18a45cb66444249aa1672fcc59912b
msgid ":meth:`temporary_file`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.supported_platforms:1
# d94b5bfcb5dd481aa7980814653b85ff
msgid "List of platforms this plugin works on For example: ``['windows', 'osx', 'linux']``"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.name:1
# e16fe1650d554be6b43dae4f184d3b47
msgid "The name of this plugin. You must set it something other than Trivial Plugin for it to work."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.version:1
# 497fa99063954d519e134f91c2f4fafd
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.description:1
# 749ffc7361244927acdb0a4e252e83b5
msgid "A short string describing what this plugin does"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.author:1
# db7dff8e0bd940b7b45bcc6c04d6fc30
msgid "The author of this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.priority:1
# d211172608f34ae891396ffce06d1771
msgid "When more than one plugin exists for a filetype, the plugins are run in order of decreasing priority i.e. plugins with higher priority will be run first. The highest possible priority is ``sys.maxint``. Default priority is 1."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.minimum_calibre_version:1
# 7ad8bd00b2f14a65ba62d3f9e0b941ba
msgid "The earliest version of calibre this plugin requires"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.can_be_disabled:1
# 9c1823b48833475eb4595b5aa4805275
msgid "If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.type:1
# 47dd2ddd4b8048b38514ad301a8b64d8
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:1
# 4d6025b9fbc64f6eb16117aedbee540d
msgid "Called once when calibre plugins are initialized. Plugins are re-initialized every time a new plugin is added."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:4
# 0d74db67b678400a914a18a9aab441d0
msgid "Perform any plugin specific initialization here, such as extracting resources from the plugin zip file. The path to the zip file is available as ``self.plugin_path``."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:8
# b70ea47753934a89a3a2950b46cf94d4
msgid "Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:1
# c3e53744e6124dc58c7ec6ecaf358705
msgid "Implement this method and :meth:`save_settings` in your plugin to use a custom configuration dialog, rather then relying on the simple string based default customization."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:5
# c9ac9cca5d174389907d2985be459ced
msgid "This method, if implemented, must return a QWidget. The widget can have an optional method validate() that takes no arguments and is called immediately after the user clicks OK. Changes are applied if and only if the method returns True."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:10
# 363c49a453e842a8952bb6de06de3c30
msgid "If for some reason you cannot perform the configuration at this time, return a tuple of two strings (message, details), these will be displayed as a warning dialog to the user and the process will be aborted."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:1
# 4b5cb3ca2c674697a7975e8c563c5c2a
msgid "Save the settings specified by the user with config_widget."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:3
# cd266d3b94ab41878f04bcff93a95090
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.do_user_config:1
# 5addf35d9d07490c9e40f795ef6a52ee
msgid "This method shows a configuration dialog for this plugin. It returns True if the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:1
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:1
# 3414bd10c8d3475eb8bd4062d43a2f9e
# 3d9e62a52f71484b9d7f894cc6116b32
msgid "If this plugin comes in a ZIP file (user added plugin), this method will allow you to load resources from the ZIP file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:4
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:4
# dd8ba9126c9746d783583ae8a257cba8
# 639bcb15432746e4921533676cce2cf2
msgid "For example to load an image::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:10
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:10
# cb5b5f29204a424e9fb5b392e580345d
# 99d13fbab63d431ca561c690bc57a222
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:12
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:12
# ef1764c0086b421ca24e5977b8d243ca
# 987a7f0f2e994d91b149f532951b6aae
msgid "A dictionary of the form ``{name : file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:1
# 5b9b527f890344fa9b31c8b9306b6e4a
msgid "Return a string giving help on how to customize this plugin. By default raise a :class:`NotImplementedError`, which indicates that the plugin does not require customization."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:5
# 273a022a04b1425aa7fcd5bd46c7b567
msgid "If you re-implement this method in your subclass, the user will be asked to enter a string as customization for this plugin. The customization string will be available as ``self.site_customization``."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:10
# cb92f9e4158b4eb18253bc044a95be6f
msgid "Site customization could be anything, for example, the path to a needed binary on the user's computer."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:13
# 1ec6bb5bc1f0438688478191f40dcfb7
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:1
# 41929051df104dc1a215e785caf01185
msgid "Return a file-like object that is a temporary file on the file system. This file will remain available even after being closed and will only be removed on interpreter shutdown. Use the ``name`` member of the returned object to access the full path to the created temporary file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:6
# 71c32071ddec41678e00b2df4836556b
msgid "The suffix that the temporary file will have."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.cli_main:1
# 40b8c69a407f4c14bb45efe1ca058cd8
msgid "This method is the main entry point for your plugins command line interface. It is called when the user does: calibre-debug -r \"Plugin Name\". Any arguments passed are present in the args variable."
msgstr ""

#: ../../plugins.rst:30
# 06941c17c9574843ab2579d1a7b16b4a
msgid "FileTypePlugin"
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
# 29e2f9765ccf411785d26a4cd2ec888c
# 911ebd8f381e4e7eb367b4b4eb28738e
# e59b033ffb114d8cb02a5b5d58d02e73
# 289d714bbbf34a558f91c6f5ae7adc3e
# a2bef5201cdf4c249f8e7df1ebdcce3a
# eb07f4756a6846bf9ed3c6a032650ecd
# dd0421b77e1f40be95095538e3ba79d8
# 91123e8215de41d191407a183d679783
# f611dd4974e841cba720e6ed73cf5c21
# 8d8cb42da1f84db1b57efccc1d45636f
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin:1
# d75f20d16a654efd86e96b291b261a28
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.file_types:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.file_types:1
# 1034e4a0a08f4f0f97935c50a3a0c45b
# ccdfa0afd9964c599fd3170e1c3bcef9
# 164a65b71dfc417d9d8bf36a3c5f7587
msgid "Set of file types for which this plugin should be run For example: ``set(['lit', 'mobi', 'prc'])``"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_import:1
# 25b8481ce2e748ac8efc0e21b60c3aa4
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postimport:1
# 3463a0b8512b46cdbb2a4d0b7a66d0db
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_preprocess:1
# 805e66d26a584824ad53ed852ad5253f
msgid "If True, this plugin is run just before a conversion"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postprocess:1
# a5b7be93904443b4b4c4e92c7b722d77
msgid "If True, this plugin is run after conversion on the final file produced by the conversion output plugin."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:1
# 88d8ba5c67454940b3b6b0194d92227a
msgid "Run the plugin. Must be implemented in subclasses. It should perform whatever modifications are required on the ebook and return the absolute path to the modified ebook. If no modifications are needed, it should return the path to the original ebook. If an error is encountered it should raise an Exception. The default implementation simply return the path to the original ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:9
# b8663dd0bd5942d2adcbe096f697423c
msgid "The modified ebook file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:12
# 5b7dca6047304a88b1a88ad2328088ae
msgid "Absolute path to the ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:14
# 96ed402506f6428a9a07242fb5bccf0c
msgid "Absolute path to the modified ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:1
# a839aa0bdbcb4c5cb9ff2b569a3f9b7c
msgid "Called post import, i.e., after the book file has been added to the database."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:3
# ca06ee6472724fd6a2f7faf9113e8e06
msgid "Database id of the added book."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:4
# 23ca8b8b6c764c48b4208b5d57da57ee
msgid "The file type of the book that was added. :param db: Library database."
msgstr ""

#: ../../plugins.rst:41
# 7c8040fa46694063880dacd074d62bf7
msgid "Metadata plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin:1
# fe4a6dea6a1e4e41a3fefa81a617b850
# 81d570a96e5a4e0298c2dcb078ff962f
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.get_metadata:1
# d063c67c812d40728dd2d73048ebc13f
msgid "Return metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :return: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.set_metadata:1
# d364fdd5e3dc4c1ebbabf7132d14fbb5
msgid "Set metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :param mi: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../plugins.rst:56
# 64be49ef9ad54f23ae8f4b0ac1ae8ae1
msgid "Catalog plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin:1
# 2ca9687513e94498b569dfa96d79547c
msgid "A plugin that implements a catalog generator."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.file_types:1
# 4d43eed3d77241edb9f5e6d2b0ad927a
msgid "Output file type for which this plugin should be run For example: 'epub' or 'xml'"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.cli_options:1
# 66b99c606b6244c8b7bd8ee4f3a1735b
msgid "CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.initialize:1
# 3a0b745157e04e9c960818dfc7455708
msgid "If plugin is not a built-in, copy the plugin's .ui and .py files from the zip file to $TMPDIR. Tab will be dynamically generated and added to the Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:1
# 581f16a7124c43e29a80eb576a97f3cf
msgid "Run the plugin. Must be implemented in subclasses. It should generate the catalog in the format specified in file_types, returning the absolute path to the generated catalog file. If an error is encountered it should raise an Exception."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:7
# b41a81fae21a4279b43a95b77a8b45ca
msgid "The generated catalog file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:10
# 1a6b7b1451504bc293d9ac5be3a19e38
msgid "Absolute path to the generated catalog file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:11
# f3e77272e1d74698bdeb91f129774fee
msgid "A dictionary of keyword arguments"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:12
# 29918b6adb8a4fc1b928803b5aab2fd4
msgid "A LibraryDatabase2 object"
msgstr ""

#: ../../plugins.rst:66
# ae2b2ee8632d4189a1dde95245234f08
msgid "Metadata download plugins"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.capabilities:1
# 771ebd88fc74468b832aaee06f8dace0
msgid "Set of capabilities supported by this plugin. Useful capabilities are: 'identify', 'cover'"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.touched_fields:1
# 2902343cad184d81b5a841bc2276c35a
msgid "List of metadata fields that can potentially be download by this plugin during the identify phase"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
# 039c65fc6eab40c68b273c7b454180da
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
# 823323a049f24c56b81076da1d17eeb4
msgid "Setting this to True means that the browser object will add Accept-Encoding: gzip to all requests. This can speedup downloads but make sure that the source actually supports gzip transfer encoding correctly first"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
# 83445d511d1d48c2a359a0d5a3be6367
msgid "Cached cover URLs can sometimes be unreliable (i.e. the download could fail or the returned image could be bogus. If that is often the case with this source set to False"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.options:1
# 049250e675dc4f69b8ed41cbaaabbdf4
msgid "A list of :class:`Option` objects. They will be used to automatically construct the configuration widget for this plugin"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.config_help_message:1
# 2f81dd75c131423f81b82ea71e3c83e9
msgid "A string that is displayed at the top of the config widget for this plugin"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
# 388b5eb1de954c9890afbcd6f0351fc5
msgid "If True this source can return multiple covers for a given query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
# 10f4ec944eb3442e8e0bf70f07160b17
msgid "If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.is_configured:1
# e8bade8181584f52934710fa70ae7f55
msgid "Return False if your plugin needs to be configured before it can be used. For example, it might need a username/password/API key."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
# 40a485b0293e4a598683a8f7288fe8d1
msgid "Take a list of authors and return a list of tokens useful for an AND search query. This function tries to return tokens in first name middle names last name order, by assuming that if a comma is in the author name, the name is in lastname, other names form."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
# 221df5694af4472284637b3287491711
msgid "Take a title and return a list of tokens useful for an AND search query. Excludes connectives(optionally) and punctuation."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
# 2a68efe4094f48359cbfe021a2e3d36b
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.test_fields:1
# 61e155adc27a46f9a5eb4091eae87eb6
msgid "Return the first field from self.touched_fields that is null on the mi object"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
# d557c0e9c129404b91534b50e22938ac
msgid "Call this method in your plugin's identify method to normalize metadata before putting the Metadata object into result_queue. You can of course, use a custom algorithm suited to your metadata source."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
# 1b5862e280a34526b11fbb51082ceee5
msgid "Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, identifier_value, URL). The URL is the URL for the book identified by identifiers at this source. identifier_type, identifier_value specify the identifier corresponding to the URL. This URL must be browseable to by a human using a browser. It is meant to provide a clickable link for the user to easily visit the books page at this source. If no URL is found, return None. This method must be quick, and consistent, so only implement it if it is possible to construct the URL from a known scheme given identifiers."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
# 74d6642f94ff4e9e8d6cec365515f832
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
# 85f1fa0bfd044b2a83a9645ecb5bece4
msgid "Return cached cover URL for the book identified by the identifiers dict or None if no such URL exists."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
# 8c4169cf2c5045558b64798cc031e54d
msgid "Note that this method must only return validated URLs, i.e. not URLS that could result in a generic cover image or a not found error."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
# 451f8d7e9fb64dedb94a08e7a92c5fbc
msgid "Return a function that is used to generate a key that can sort Metadata objects by their relevance given a search query (title, authors, identifiers)."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
# 1b54b7a53f294ee293e8efbbb9522cf7
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
# 1cc664341f2145bf938829445d5b20a3
msgid "For details on the default algorithm see :class:`InternalMetadataCompareKeyGen`. Re-implement this function in your plugin if the default algorithm is not suitable."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:1
# b2a75065130141f294ab772305532c19
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:3
# bbd884874573478497a3239ec6830aec
msgid "If identifiers(s) are specified and no match is found and this metadata source does not store all related identifiers (for example, all ISBNs of a book), this method should retry with just the title and author (assuming they were specified)."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:8
# e8e6c3855fec4152aa03fcbc3b93a09f
msgid "If this metadata source also provides covers, the URL to the cover should be cached so that a subsequent call to the get covers API with the same ISBN/special identifier does not need to get the cover URL again. Use the caching API for this."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:13
# 8bb3d81aebea42acbe4fa13e464cb299
msgid "Every Metadata object put into result_queue by this method must have a `source_relevance` attribute that is an integer indicating the order in which the results were returned by the metadata source for this query. This integer will be used by :meth:`compare_identify_results`. If the order is unimportant, set it to zero for every result."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:19
# 76cce75c9ee147e3b886879be791f90b
msgid "Make sure that any cover/isbn mapping information is cached before the Metadata object is put into result_queue."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:22
# 61ed927b404e4d43a5c5fb1630911172
msgid "A log object, use it to output debugging information/errors"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:23
# fd572e926b134dc98d1d86615f37f518
msgid "A result Queue, results should be put into it. Each result is a Metadata object"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:25
# 38f0bb65e52d48ba8f21eabb7d80d941
msgid "If abort.is_set() returns True, abort further processing and return as soon as possible"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:27
# cfa6db834e744e8397f967cbe44f90a5
msgid "The title of the book, can be None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:28
# 24d7ee3d19394a9ca592e5a7c740a2c7
msgid "A list of authors of the book, can be None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:29
# 9085e80fb31b469698550e6df338d04a
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:31
# 061f464bd36040fc8a41faab2b3e3c97
msgid "Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:33
# a39636bbd8004f329bcf88c0c86a7024
msgid "None if no errors occurred, otherwise a unicode representation of the error suitable for showing to the user"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:1
# 1b02f5e485034d06a0debedbfe24e228
msgid "Download a cover and put it into result_queue. The parameters all have the same meaning as for :meth:`identify`. Put (self, cover_data) into result_queue."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:5
# 52330984f2c04f56b41373e8b27a6678
msgid "This method should use cached cover URLs for efficiency whenever possible. When cached data is not present, most plugins simply call identify and use its results."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:9
# 2ee10365987748488d3fc70b4c3701fc
msgid "If the parameter get_best_cover is True and this plugin can get multiple covers, it should only get the \"best\" one."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
# 789acd9d2d9049ad95d70b823a158d0f
msgid "Generate a sort key for comparison of the relevance of Metadata objects, given a search query. This is used only to compare results from the same metadata source, not across different sources."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
# 3e11edc5a34b4c218ee057df31bd7aa0
msgid "The sort key ensures that an ascending order sort is a sort by order of decreasing relevance."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
# 3e09d3b9d50b49d69a20a17217b10aa6
msgid "The algorithm is:"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
# 5995aae32942464a8b210c349f18cbc3
msgid "Prefer results that have the same ISBN as specified in the query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
# 49078267740f42649805af157f97a62b
msgid "Prefer results with a cached cover URL"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
# 0438a2e6b947423bae8a3d5044678763
msgid "Prefer results with all available fields filled in"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
# 05fbbc9e42a04d5294f23430bcd99534
msgid "Prefer results that are an exact title match to the query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
# 4b6dc3d224ad48b196df493a71ca20e6
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
# bf1dae682ad5432b95f0e76471c88805
msgid "Use the relevance of the result as reported by the metadata source's search"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
# 534fc3bbd1c7433789bd20c445b4c9fe
msgid "engine"
msgstr ""

#: ../../plugins.rst:78
# 392b99b187f548d4b950d587aebe521d
msgid "Conversion plugins"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin:1
# de8e0e6b43254a7aa2188c25eea99237
msgid "InputFormatPlugins are responsible for converting a document into HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.file_types:1
# 7568af0f87db4beab79d6fc39542d1d9
msgid "Set of file types for which this plugin should be run For example: ``set(['azw', 'mobi', 'prc'])``"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
# 7344a2d7eed3428e86b3610f11d27e8a
msgid "If True, this input plugin generates a collection of images, one per HTML file. This can be set dynamically, in the convert method if the input files can be both image collections and non-image collections. If you set this to True, you must implement the get_images() method that returns a list of images."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.core_usage:1
# 53597d13c46449788eeed31879489e33
msgid "Number of CPU cores used by this plugin A value of -1 means that it uses all available cores"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.for_viewer:1
# 4ffcf879f3b5403a9b1168007539babd
msgid "If set to True, the input plugin will perform special processing to make its output suitable for viewing"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.output_encoding:1
# 71eb6a83823d463c9719b9a1d9137150
msgid "The encoding that this input plugin creates files in. A value of None means that the encoding is undefined and must be detected individually"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.common_options:1
# b458196c90004f67acefcd0204f1297b
# 3832ec246c31446abec5f3fb99740440
msgid "Options shared by all Input format plugins. Do not override in sub-classes. Use :attr:`options` instead. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.options:1
# 2d879e84ed9849ba97b71c29ad8800b8
# 89968c176810480c8643c438934cfcd8
msgid "Options to customize the behavior of this plugin. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.recommendations:1
# 0b2da331506248fab934bdc94f24f0ba
# 9079fec71bb24d78abffa1fa0c2a4e39
msgid "A set of 3-tuples of the form (option_name, recommended_value, recommendation_level)"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.get_images:1
# 6058540225e54a02802464f169a6fb43
msgid "Return a list of absolute paths to the images, if this input plugin represents an image collection. The list of images is in the same order as the spine and the TOC."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:1
# a31172899bc6401997fba28fcedcd0ed
msgid "This method must be implemented in sub-classes. It must return the path to the created OPF file or an :class:`OEBBook` instance. All output should be contained in the current directory. If this plugin creates files outside the current directory they must be deleted/marked for deletion before this method returns."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:8
# 38c1ab975e8440b5b892850bb7675479
msgid "A file like object that contains the input file."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:9
# b87eb2cd1d4a4d0494224ce6cf3030a7
msgid "Options to customize the conversion process. Guaranteed to have attributes corresponding to all the options declared by this plugin. In addition, it will have a verbose attribute that takes integral values from zero upwards. Higher numbers mean be more verbose. Another useful attribute is ``input_profile`` that is an instance of :class:`calibre.customize.profiles.InputProfile`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:17
# 979c304de1c14de99dad70519abd9ed2
msgid "The extension (without the .) of the input file. It is guaranteed to be one of the `file_types` supported by this plugin."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:20
# 0712a0ab1a844d83a363c6bb63886d97
msgid "A :class:`calibre.utils.logging.Log` object. All output should use this object."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:22
# 1753e8807b05483287852444ae246c11
msgid "A dictionary of various information that the input plugin can get easily that would speed up the subsequent stages of the conversion."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
# 497a515d829d4a6681d01ae2cfeea122
msgid "Called to allow the input plugin to perform postprocessing after the book has been parsed."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.specialize:1
# 93f48f10fa7e4bea829c50c4a220a2ec
msgid "Called to allow the input plugin to specialize the parsed book for a particular output format. Called after postprocess_book and before any transforms are performed on the parsed book."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
# 306b6087ef55428e8a1e3d323e55dbcd
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builting input plugins for examples."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:1
# 05612184b3024c4db530316628d9dc32
msgid "OutputFormatPlugins are responsible for converting an OEB document (OPF+HTML) into an output ebook."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:4
# a2f2b36e9b2c4e889f40235bc907f07b
msgid "The OEB document can be assumed to be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.file_type:1
# 875575e4a2e944ef8dddab0dfc2059f1
msgid "The file type (extension without leading period) that this plugin outputs"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:1
# 6b30caf52f4344f6b00835e1166fedb9
msgid "Render the contents of `oeb_book` (which is an instance of :class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:4
# 0159860846d5432aaeb7fab6316f700d
msgid "Either a file like object or a string. If it is a string it is the path to a directory that may or may not exist. The output plugin should write its output into that directory. If it is a file like object, the output plugin should write its output into the file."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:8
# 09b460ef0f734222bf3d2fbc0ae082f3
msgid "The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:10
# f8b2a2be71b8430fa7a2b5eae59f53b4
msgid "Conversion options. Guaranteed to have attributes corresponding to the OptionRecommendations of this plugin."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:12
# a47694f04601418c959ec39a3efeb93e
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
# 94d1bac6d3194150a3d1d8cce4703e6c
msgid "Can be used to make changes to the css during the CSS flattening process."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
# 4ebee18ba9104422a59d3857b0c046ea
msgid "The item (HTML file) being processed"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
# 96026ad8f04340fe88b395e9caa4c655
msgid "A Stylizer object containing the flattened styles for item. You can get the style for any element by stylizer.style(element)."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
# 505a6cd26d1e46fc88d36c922eeb48c8
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builtin output plugins for examples."
msgstr ""

#: ../../plugins.rst:93
# 38eecd7714d74f6c8c5d489ed7ae434e
msgid "Device Drivers"
msgstr ""

#: ../../plugins.rst:97
# 00f2c7e00fa34b9a88e7d94535cf131c
msgid "The base class for all device drivers is :class:`DevicePlugin`. However, if your device exposes itself as a USBMS drive to the operating system, you should use the USBMS class instead as it implements all the logic needed to support these kinds of devices."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin:1
# 1264874caad846078c0258dbe3bcca52
msgid "Defines the interface that should be implemented by backends that communicate with an ebook reader."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.FORMATS:1
# 83c68962113248749d374cec8fb2afe7
msgid "Ordered list of supported formats"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VENDOR_ID:1
# cf63df2552e642cd90b60bd26041d77b
msgid "VENDOR_ID can be either an integer, a list of integers or a dictionary If it is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
# b292069643f14188ace3e13bf88a96d6
msgid "An integer or a list of integers"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.BCD:1
# 5e00e57a481f4bc1820d9176a9fc9f63
msgid "BCD can be either None to not distinguish between devices based on BCD, or it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
# 3db729da24504fa4a97b41c4785f3d62
msgid "Height for thumbnails on the device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
# e13ca73636ea48079f336ab4e7d05524
msgid "Width for thumbnails on the device. Setting this will force thumbnails to this size, not preserving aspect ratio. If it is not set, then the aspect ratio will be preserved and the thumbnail will be no higher than THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 to have better quality thumbnails with fewer compression artifacts. Of course, the thumbnails get larger as well."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
# afe47c315cb04418bf0a1d683adaa0da
msgid "Set this to True if the device supports updating cover thumbnails during sync_booklists. Setting it to true will ask device.py to refresh the cover thumbnails during book matching"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
# e0c4e8bccb204ac48360141c3d9cf1a8
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
# 2116767d63d24d0ab168b927722d9b74
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.path_sep:1
# 60add53019514e7cbaeb0cf46fe63a33
msgid "Path separator for paths to books on device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.icon:1
# d8abef7ee633448e80e2a49746da92d3
msgid "Icon for this device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
# bcccaf5a5518461ca46b8f32b2266f60
msgid "GUI displays this as a message if not None. Useful if opening can take a long time"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
# cea7abc1ecfd46cba8ad4c9a173f539e
msgid "Set of extensions that are \"virtual books\" on the device and therefore cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
# 2b8e44d63e3b499ab27393752b6992b5
msgid "Whether to nuke comments in the copy of the book sent to the device. If not None this should be short string that the comments will be replaced by."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
# 69cdc1e3d9e744ea876c28c6c795ae5b
msgid "If True indicates that  this driver completely manages device detection, ejecting and so forth. If you set this to True, you *must* implement the detect_managed_devices and debug_managed_device_detection methods. A driver with this set to true is responsible for detection of devices, managing a blacklist of devices, a list of ejected devices and so forth. calibre will periodically call the detect_managed_devices() method and is it returns a detected device, calibre will call open(). open() will be called every time a device is returned even is previous calls to open() failed, therefore the driver must maintain its own blacklist of failed devices. Similarly, when ejecting, calibre will call eject() and then assuming the next call to detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
# 0d3133cd6dca41a69d9cc68363ffd092
msgid "If set the True, calibre will call the :meth:`get_driveinfo()` method after the books lists have been loaded to get the driveinfo."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
# ff99490bc7db449e8a5e6aa88917f9d1
msgid "If set to True, calibre will ask the user if they want to manage the device with calibre, the first time it is detected. If you set this to True you must implement :meth:`get_device_uid()` and :meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` and :meth:`set_user_blacklisted_devices`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
# c84f6c4a22524c70ac9e588182733fcc
msgid "Set this to a dictionary of the form {'title':title, 'msg':msg, 'det_msg':detailed_msg} to have calibre popup a message to the user after some callbacks are run (currently only upload_books). Be careful to not spam the user with too many messages. This variable is checked after *every* callback, so only set it when you really need to."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:1
# dd671a7cbcb1489187de7af94ac3d27f
msgid "Return True, device_info if a device handled by this plugin is currently connected."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:3
# b5aef80194be4c709db06e53a8085a69
msgid "List of devices currently connected"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
# 6f16b3129080441495532c88c2f45a97
# 607e99b6bb524bbca39c5bc5f728809d
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:3
# 23a182f03fe34643ad0d2b7475ebe6e4
msgid "Scan for devices that this driver can handle. Should return a device object if a device is found. This object will be passed to the open() method as the connected_device. If no device is found, return None. The returned object can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:9
# d2385b5841d8442d95810c89c429a606
msgid "This method is called periodically by the GUI, so make sure it is not too resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:13
# 987b2ccf739248318b555275d1f3c7c9
msgid "Set of USB devices found on the system."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:15
# a6d8dca9f5a2476c897df7396b111cda
msgid "If True and the driver uses a cache to prevent repeated scanning, the cache must be flushed."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
# 58bc37e54bab4c639006b5bf94384591
msgid "Should write information about the devices detected on the system to output, which is a file like object."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
# 595bcccaf71e42f6a2ecc7822d9d3568
msgid "Should return True if a device was detected and successfully opened, otherwise False."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:1
# c00f111c515644c7b0f0444c9a458866
msgid "The key to unlock the device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:2
# ccebbd58dbfe47b4866ba81233262772
msgid "If true the packet stream to/from the device is logged"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:3
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:3
# c65ebf1c702345f6859ec0d8bea23607
# 3db0d4bd02eb4cc3954c28566a6c56ff
msgid "Function that is called with a % progress (number between 0 and 100) for various tasks If it is called with -1 that means that the task does not have any progress information"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:7
# 40fe2d54d5134ece8527fc077623e55d
msgid "Device information from the device scanner"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:1
# a8daced9baa24f4b99899ff74d6a2f19
msgid "Optional method to perform further checks on a device to see if this driver is capable of handling it. If it is not it should return False. This method is only called after the vendor, product ids and the bcd have matched, so it can do some relatively time intensive checks. The default implementation returns True. This method is called only on windows. See also :meth:`can_handle`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:8
# 6aa6ab87debd41708d2df5cf0dcb8f9c
msgid "On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, bcd)``."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:1
# 8707a2274ca74774a894c590a09d704a
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:3
# da35071e16bd45a4b8280af3c3b28bbe
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:1
# 26e60885429442f7890c8b3ee39edb7e
msgid "Perform any device specific initialization. Called after the device is detected but before any other functions that communicate with the device. For example: For devices that present themselves as USB Mass storage devices, this method would be responsible for mounting the device or if the device has been automounted, for finding out where it has been mounted. The method :meth:`calibre.devices.usbms.device.Device.open` has an implementation of this function that should serve as a good example for USB Mass storage devices."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:11
# 2d05052e830d498c9100a9b17859eee8
msgid "This method can raise an OpenFeedback exception to display a message to the user."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:14
# 04487f997075423184fa89bccc44f07c
msgid "The device that we are trying to open. It is a tuple of (vendor id, product id, bcd, manufacturer name, product name, device serial number). However, some devices have no serial number and on windows only the first three fields are present, the rest are None."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:20
# a6e3b8d919b14fb587e676d6160690e1
msgid "The UUID of the current calibre library. Can be None if there is no library (for example when used from the command line)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:1
# a0ea14690bbd44b1ad73a10789e45929
msgid "Un-mount / eject the device from the OS. This does not check if there are pending GUI jobs that need to communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:4
# 689e6c5e72b3485ea4dca9cc089de6bb
msgid "NOTE: That this method may not be called on the same thread as the rest of the device methods."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
# b49c08698dd9434ca531eec17cdc6781
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:1
# 7c8eb40b666b4b88a79ae5cb3ed19248
msgid "Set a function to report progress information."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:1
# f3b91c3546b84d4f90630fc722167984
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:3
# 092637c84ac946fbba8096a58047cde4
msgid "(device name, device version, software version on device, mime type) The tuple can optionally have a fifth element, which is a drive information dictionary. See usbms.driver for an example."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_driveinfo:1
# 5bbb3c74310c471fbd8ede079f59f3cf
msgid "Return the driveinfo dictionary. Usually called from get_device_information(), but if loading the driveinfo is slow for this driver, then it should set SLOW_DRIVEINFO. In this case, this method will be called by calibre after the book lists have been loaded. Note that it is not called on the device thread, so the driver should cache the drive info in the books() method and this function should return the cached data."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.card_prefix:1
# e280a6694fbc4c77ab0f23b56812f795
msgid "Return a 2 element list of the prefix to paths on the cards. If no card is present None is set for the card's prefix. E.G. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 35ee5c5b61554fbc8a13337cc709b095
msgid "Get total space available on the mountpoints:"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:2
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:2
# 50d07d460f53491d9d19b19cd588e2b0
# 9469487b69e2492daf2ce881ea502808
msgid "Main memory"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:3
# 744a7f1691394220867716ef48f23f48
msgid "Memory Card A"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 866a2d6e390542b084272572bc025b6d
msgid "Memory Card B"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:6
# c48c6a7b5aec4ec386d52580d5c3d9fe
msgid "A 3 element list with total space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return 0."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# d3145e1f6f954dfdb59d9dac01577d11
msgid "Get free space available on the mountpoints:"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:3
# 9b7b1de1781d4ca081d53442b99db1ee
msgid "Card A"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# b2738aeaa0004a2ea8b97cbddaaf1a03
msgid "Card B"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:6
# e3f708842c86454cb810b92e5ade923d
msgid "A 3 element list with free space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return -1."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:1
# 84972f0e97694681b99a138c0f455d8a
msgid "Return a list of ebooks on the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:3
# ec96b940959d44b8beedc9beebe8778a
msgid "If 'carda' or 'cardb' return a list of ebooks on the specific storage card, otherwise return list of ebooks in main memory of device. If a card is specified and no books are on the card return empty list."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:8
# fcdfdd9efe5d488ea614d0d3d26e2877
msgid "A BookList."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:1
# 6ad80be4930a4d5d85e3498077df6adf
msgid "Upload a list of books to the device. If a file already exists on the device, it should be replaced. This method should raise a :class:`FreeSpaceError` if there is not enough free space on the device. The text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is not None otherwise it must contain the word \"memory\"."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:7
# e33b86b2769c43a7ac4a49af13bfd48e
msgid "A list of paths"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:8
# 31244d00a6df4951b7ed943649aeb31b
msgid "A list of file names that the books should have once uploaded to the device. len(names) == len(files)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:10
# 72429143d524474288a373bcc15ba98b
msgid "If not None, it is a list of :class:`Metadata` objects. The idea is to use the metadata to determine where on the device to put the book. len(metadata) == len(files). Apart from the regular cover (path to cover), there may also be a thumbnail attribute, which should be used in preference. The thumbnail attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:17
# 8e02c324d35041b697946c6b9b9026d5
msgid "A list of 3-element tuples. The list is meant to be passed to :meth:`add_books_to_metadata`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
# ecf44d51d7be41189489283cc57322f6
msgid "Add locations to the booklists. This function must not communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
# fe643ec68f7a4214b47176f791c4641b
msgid "Result of a call to L{upload_books}"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
# e861c143b08045f3846931c12bce363d
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:3
# 57ca43eb13fe4b148eedbfd5e3c68b33
# 0a0bb032d06644a6ad7146a414c75fca
# 693ddc15defb493b9edc51f24b2b3b9b
msgid "A tuple containing the result of calls to (:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.delete_books:1
# 494f6481d70a4f1687950722f42a07c1
msgid "Delete books at paths on device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
# ddd2aa445f364c279b758679d5051e2c
msgid "Remove books from the metadata list. This function must not communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
# bd518c94530d446b99b387487790428f
msgid "paths to books on the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:1
# 8ff65e31c2464189860610da37007164
msgid "Update metadata on device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:1
# 395c7af9328547349dd0137bf095368d
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:3
# d81a5138351044c0b300c685529e3361
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.config_widget:1
# 9d414efe8acd4e9cab651004480602bd
msgid "Should return a QWidget. The QWidget contains the settings for the device interface"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.save_settings:1
# 69da8de77dfe4716ae1635650a488a1c
msgid "Should save settings to disk. Takes the widget created in :meth:`config_widget` and saves all settings to disk."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.settings:1
# 09c863fbb93a496eac7ae1058e4ce4a9
msgid "Should return an opts object. The opts object should have at least one attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:1
# 16e62d819fa1457ca9fcad5fe6c54504
msgid "provide the driver the current set of plugboards and a function to select a specific plugboard. This method is called immediately before add_books and sync_booklists."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 94bf8263991c4a6480a5cada7b55007f
msgid "pb_func is a callable with the following signature::"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# bdea53dea69440bb80890f0db6be7080
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:8
# 5eb42a2b120c4ad2ae8bc96ce909f9bc
msgid "You give it the current device name (either the class name or DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or 'device_db'), and the plugboards (you were given those by set_plugboards, the same place you got this method)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:13
# 51ab8544fee0446890044b3791002db7
msgid "None or a single plugboard instance."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
# 889b02f6bbec49149150d35d445c1673
msgid "Set the device name in the driveinfo file to 'name'. This setting will persist until the file is re-created or the name is changed again."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
# 699508dee8ae4dc781f9c5bb6cb9f038
msgid "Non-disk devices should implement this method based on the location codes returned by the get_device_information() method."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:1
# 2f4ea6398f774e3dbdd9cd617fc75640
msgid "Given a list of paths, returns another list of paths. These paths point to addable versions of the books."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:4
# 238f93a5e13e47f5843cdec8721d68e6
msgid "If there is an error preparing a book, then instead of a path, the position in the returned list for that book should be a three tuple: (original_path, the exception instance, traceback)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.startup:1
# 494b4e51d5b445b3b32dc532f1a0e3bc
msgid "Called when calibre is is starting the device. Do any initialization required. Note that multiple instances of the class can be instantiated, and thus __init__ can be called multiple times, but only one instance will have this method called. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.shutdown:1
# 1489314defeb45ff9f18c47f86b5eee4
msgid "Called when calibre is shutting down, either for good or in preparation to restart. Do any cleanup required. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_uid:1
# 4aa493fa53ba4e71913a47a651356a1c
msgid "Must return a unique id for the currently connected device (this is called immediately after a successful call to open()). You must implement this method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ignore_connected_device:1
# b8a4cc52facf4705944f57b06edd4f77
msgid "Should ignore the device identified by uid (the result of a call to get_device_uid()) in the future. You must implement this method if you set ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately after open(), so if open() caches some state, the driver should reset that state."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
# e761223313ff4f9b9fe2131402f11d46
msgid "Return map of device uid to friendly name for all devices that the user has asked to be ignored."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
# bcc180ce08cc41d5945497f82661d09a
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
# 09475ce2bb6b422b965892ac7eb5f4a9
msgid "Implement this method if your device wants to override a particular preference. You must ensure that all call sites that want a preference that can be overridden use device_prefs['something'] instead of prefs['something']. Your method should call device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: metadata management (prefs['manage_device_metadata'])"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
# fa1f5f328b6646f08ff58aa05afafd6c
msgid "Called by the device manager when starting plugins. If this method returns a string, then a) it supports the device manager's dynamic control interface, and b) that name is to be used when talking to the plugin."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:4
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:3
# 5a2af2fd27a04d978dd904b0354e4e41
# 3609ef22d93b4b9c8fd23e05eaeb3054
# 53629432581d4b77a471a3f6613b8f58
# 70974e80882c4df192cab5c11a9a3ad3
# 74d378fb4bfd4f5c90202aac2b2bac0e
# 50725e22c018409bb39d5f3de1bc968b
msgid "This method can be called on the GUI thread. A driver that implements this method must be thread safe."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:1
# c73c3f7b4d874de4acfca2aa33924750
msgid "This method is called to start the plugin. The plugin should begin to accept device connections however it does that. If the plugin is already accepting connections, then do nothing."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:1
# be3d81f348a44fb5be0a2627ec6114bb
msgid "This method is called to stop the plugin. The plugin should no longer accept connections, and should cleanup behind itself. It is likely that this method should call shutdown. If the plugin is already not accepting connections, then do nothing."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:1
# cbb6d9191d0c4da384613bc93b69ae77
msgid "Return the value of the option indicated by opt_string. This method can be called when the plugin is not started. Return None if the option does not exist."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:1
# ab0da11774b749b18ff3dc0744b7296e
msgid "Set the value of the option indicated by opt_string. This method can be called when the plugin is not started."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:1
# bde8a6eeab9a41d09dfe698e32147729
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:1
# 9c76a378f20749598eeeb9623cbdd85c
msgid "Called during book matching when a book on the device is matched with a book in calibre's db. The method is responsible for syncronizing data from the device to calibre's db (if needed)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:5
# 4ee5595a6ef64f88a759f2a3a30d94a2
msgid "The method must return a set of calibre book ids changed if calibre's database was changed, None if the database was not changed. If the method returns an empty set then the metadata for the book on the device is updated with calibre's metadata and given back to the device, but no GUI refresh of that book is done. This is useful when the calire data is correct but must be sent to the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:12
# 8f9e708711894befae653e675dbb3189
msgid "Extremely important: this method is called on the GUI thread. It must be threadsafe with respect to the device manager's thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:15
# 4b03b0486db74a00a3d706c18d1d64c4
msgid "book_id: the calibre id for the book in the database. book_metadata: the Metadata object for the book coming from the device."
msgstr ""

#: ../../<autodoc>:1
# 8046b48ae04740908a5b7f808abbc5e2
msgid "Bases: :class:`list`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:1
# c8cfa13f54024ca18d63c1d062d76f9f
msgid "A list of books. Each Book object must have the fields"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:3
# 7e50fed9c41c490a9301615b418e8817
msgid "title"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:4
# 6b875ce8641747a9a0932c2f3095863c
msgid "authors"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:5
# e847dd7102ce485dad5318ed893f1f59
msgid "size (file size of the book)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:6
# fbdcaf1170d24fe3a660dd8b350d66b2
msgid "datetime (a UTC time tuple)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:7
# b97e2cf1e8534ec0a3a7dc02882f0286
msgid "path (path on the device to the book)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:8
# e896d947bf9a4c3a9204cb19b56a309b
msgid "thumbnail (can be None) thumbnail is either a str/bytes object with the image data or it should have an attribute image_path that stores an absolute (platform native) path to the image"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:11
# 38e4b4845047470ba1e270e3a2c4d730
msgid "tags (a list of strings, can be empty)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.supports_collections:1
# 055f2f6f0b51460bb77dcae879582908
msgid "Return True if the device supports collections for this book list."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.add_book:1
# 55648346770d44a7b1c01083b4cce1f0
msgid "Add the book to the booklist. Intent is to maintain any device-internal metadata. Return True if booklists must be sync'ed"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.remove_book:1
# 6fdd7aa2345c477989541d48fb4a0120
msgid "Remove a book from the booklist. Correct any device metadata at the same time"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:1
# 8a407d8fc49e490ebf1f410534acf094
msgid "Return a dictionary of collections created from collection_attributes. Each entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:5
# b7a7157078614a469b1869aa5055d02e
msgid "The list of books is sorted by book title, except for collections created from series, in which case series_index is used."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:8
# f5a76e1285904ea7b1eae60ba3dc0b75
msgid "A list of attributes of the Book object"
msgstr ""

#: ../../plugins.rst:111
# 92eda6db5f924e54b2892eede41ed07c
msgid "USB Mass Storage based devices"
msgstr ""

#: ../../plugins.rst:113
# 2b45983e88074f2f8d5d67a54ab19516
msgid "The base class for such devices is :class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits some of its functionality from its bases, documented below. A typical basic USBMS based driver looks like this:"
msgstr ""

#: ../../<autodoc>:1
# df81ea6bb5724fd1826265f008d41d72
msgid "Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, :class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device:1
# 58d84a90522e4ccabc6afa1847f5c962
msgid "This class provides logic common to all drivers for devices that export themselves as USB Mass Storage devices. Provides implementations for mounting/ejecting of USBMS devices on all platforms."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
# e93ab98bae5a415cbde7b69f040df65c
msgid "String identifying the main memory of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
# 2c08e36278fd45d298366f247880e58c
msgid "String identifying the first card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
# 18f05ccc299844fc828db1a70d6c4974
msgid "String identifying the second card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
# 6a425f643f0146ac862022f3b5f2e850
msgid "Used by the new driver detection to disambiguate main memory from storage cards. Should be a regular expression that matches the main memory mount point assigned by OS X"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
# 0774fb293d4c4fe8ba0cc4afd30dbb6b
msgid "The maximum length of paths created on the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
# 8deadc3f8fe04dfab8975f9bbc4efa58
msgid "Put news in its own folder"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.windows_sort_drives:1
# c97b7e5f497d423d8bb20deee2786adc
msgid "Called to disambiguate main memory and storage card for devices that do not distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The EB600"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_callback:1
# cee51c5bcee74260b7eb9aaaccf5545e
msgid "Callback to allow individual device drivers to override the path sanitization used by :meth:`create_upload_path`."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.filename_callback:1
# a395a014071c47df8d4b19bc959fdfa7
msgid "Callback to allow drivers to change the default file name set by :meth:`create_upload_path`."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_path_components:1
# 9c8e091afe4542978909983658bb69b0
msgid "Perform any device specific sanitization on the path components for files to be uploaded to the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.get_annotations:1
# 7da4bc7483654945b35d206952c9ad95
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.add_annotation_to_library:1
# 30112d0355a245e0bf37462982da254d
msgid "Add an annotation to the calibre library"
msgstr ""

#: ../../<autodoc>:1
# a0e48ba4bcce40db815271589a19c398
msgid "Bases: :class:`calibre.devices.usbms.cli.CLI`, :class:`calibre.devices.usbms.device.Device`"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS:1
# ad8039303db6491a970da7c12f45de9c
msgid "The base class for all USBMS devices. Implements the logic for sending/getting/updating metadata/caching metadata/etc."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:1
# 9d6d17b8d0374dee84cdfde77af7224b
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:3
# 80b4de4bf7ed4f1494115e543ffc28be
msgid "The full path to the directory where the associated book is located."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:4
# 27ace48a7b71413e9dc37d5dd41d5ad6
msgid "The name of the book file without the extension."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:5
# 099ec4a2caea410eb504ddb9c1766966
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:7
# fa6428c73c8248538164f4779b4f4a22
msgid "The full path to the ebook file"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.normalize_path:1
# 4cefaf839891451b874fcc7c26ba21bd
msgid "Return path with platform native path separators"
msgstr ""

#: ../../plugins.rst:159
# 3aa55e5c003e4db0bbd486f40467befb
msgid "User Interface Actions"
msgstr ""

#: ../../plugins.rst:161
# 6c33b39816de4b18ab412f2bb262c1b9
msgid "If you are adding your own plugin in a zip file, you should subclass both InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` method of you InterfaceActionBase subclass must return an instantiated object of your InterfaceBase subclass."
msgstr ""

#: ../../<autodoc>:1
# 2c5d819543544f808b63c439c4ab1c59
msgid "Bases: :class:`PyQt4.QtCore.QObject`"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:1
# c03c9ce3c8ef42bcab459731ad401fce
msgid "A plugin representing an \"action\" that can be taken in the graphical user interface. All the items in the toolbar and context menus are implemented by these plugins."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:5
# f0bb5725de6248afbc00109b48b2c6ba
msgid "Note that this class is the base class for these plugins, however, to integrate the plugin with calibre's plugin system, you have to make a wrapper class that references the actual plugin. See the :mod:`calibre.customize.builtins` module for examples."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:10
# f31adfa3f1304cbf8d326a1d37d531da
msgid "If two :class:`InterfaceAction` objects have the same name, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:13
# 0c62a8c177774db7b215b3ad4a142e94
msgid "Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected` :meth:`shutting_down` and :meth:`initialization_complete` methods."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:17
# 64c366b740c345d2a3f5216c573c29f0
msgid "Once initialized, this plugin has access to the main calibre GUI via the :attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:22
# fe938a9f7a0a4689841cbfddd02847b6
msgid "To access the actual plugin, use the :attr:`interface_action_base_plugin` attribute, this attribute only becomes available after the plugin has been initialized. Useful if you want to use methods from the plugin class like do_user_config()."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:27
# 5fa421a540144e6dba12a2ef7fec4c4d
msgid "The QAction specified by :attr:`action_spec` is automatically create and made available as ``self.qaction``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.name:1
# 3f49626119a34d6a9405c1e70443cc91
msgid "The plugin name. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.priority:1
# 37b6bc34d9e0491085833816fd196e7d
msgid "The plugin priority. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.popup_type:1
# 7caa50fe0a434157ac4e3a5ff2b4f721
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.auto_repeat:1
# 1e3b62eb63de41708b2dee96b132149d
msgid "Whether this action should be auto repeated when its shortcut key is held down."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_spec:1
# e5c1862cbe71432d881fdf1df19c0a30
msgid "Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and keyboard shortcut can be None shortcut must be a string, None or tuple of shortcuts. If None, a keyboard shortcut corresponding to the action is not registered. If you pass an empty tuple, then the shortcut is registered with no default key binding."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_add_menu:1
# 4ab270a9f93f4d1aa5bd47a8e8b68132
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
# 45bbb99720b1482cbf8cefa27e0a4acf
msgid "If True, a clone of self.qaction is added to the menu of self.qaction If you want the text of this action to be different from that of self.qaction, set this variable to the new text"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_add_to:1
# 88328b5674e140d6b8f511873cd696e9
msgid "Set of locations to which this action must not be added. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_remove_from:1
# 52e800aedb9b46838d8c5baf2a26d04b
msgid "Set of locations from which this action must not be removed. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_type:1
# fa8bd04e7152409daed88152a9569d03
msgid "Type of action 'current' means acts on the current view 'global' means an action that does not act on the current view, but rather on calibre as a whole"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accepts_drops:1
# 077df04e8ea34ce29395ed18596362ca
msgid "If True, then this InterfaceAction will have the opportunity to interact with drag and drop events. See the methods, :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
# 83de245997084e33bdd2a16854a68bdc
# 9eec182740ab42019129937dfe0245e2
msgid "This method should return True iff this interface action is capable of handling the drag event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.drop_event:1
# 622d08bc0e29407cb3fba23d56d80ec4
msgid "This method should perform some useful action and return True iff this interface action is capable of handling the drop event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI. You should not perform blocking/long operations in this function. Instead emit a signal or use QTimer.singleShot and return quickly. See the builtin actions for examples."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:1
# a14fcbb753e84454b447aa2819b9333a
msgid "Convenience method to easily add actions to a QMenu. Returns the created QAction, This action has one extra attribute calibre_shortcut_unique_name which if not None refers to the unique name under which this action is registered with the keyboard manager."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:6
# a0b560c0409843d3a100ff34e745517f
msgid "The QMenu the newly created action will be added to"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:7
# 8eaf7316515a4823ba94e5b12085891d
msgid "A unique name for this action, this must be globally unique, so make it as descriptive as possible. If in doubt add a uuid to it."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:10
# ddeb98ad7423422f9bc1bc27d7335550
msgid "The text of the action."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:11
# aad391ccb49c4bbd8300109b3c871884
msgid "Either a QIcon or a file name. The file name is passed to the I() builtin, so you do not need to pass the full path to the images directory."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:14
# 7bb92b5bf74d43229b633b8ce299af29
msgid "A string, a list of strings, None or False. If False, no keyboard shortcut is registered for this action. If None, a keyboard shortcut with no default keybinding is registered. String and list of strings register a shortcut with default keybinding as specified."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:18
# db8410bb95734f589cd175252679a331
msgid "A description for this action. Used to set tooltips."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:20
# 3a89be6c51814111b2001dcbb3d77757
msgid "A callable which is connected to the triggered signal of the created action."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:22
# 2e6c7d89dc8c4437b16aa650dbaf6828
msgid "The test displayed to the user when customizing the keyboard shortcuts for this action. By default it is set to the value of ``text``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.genesis:1
# 2e7124d9cb55419893ab77af0235412a
msgid "Setup this plugin. Only called once during initialization. self.gui is available. The action specified by :attr:`action_spec` is available as ``self.qaction``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:1
# 8dc56113d9544612b97df035ac515a25
msgid "Called whenever the book list being displayed in calibre changes. Currently values for loc are: ``library, main, card and cardb``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:4
# bb9df51a0caa4b739c60836ad565fb53
msgid "This method should enable/disable this action and its sub actions as appropriate for the location."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:1
# 0b6dc8018b564050aaa12901693ea573
msgid "Called whenever the current library is changed."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:3
# 943eb58ee5e040a6bb6001d96210bf1e
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
# d6acf70d9cb04f3d8cddf1c64593fe5e
msgid "Called once per action when the layout of the main GUI is completed. If your action needs to make changes to the layout, they should be done here, rather than in :meth:`initialization_complete`."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.initialization_complete:1
# 0c529046e67b4b73abe7d500a22183cd
msgid "Called once per action when the initialization of the main GUI is completed."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:1
# f53355c4d6604eb1a9c08da4a787edc5
msgid "Called once per plugin when the main GUI is in the process of shutting down. Release any used resources, but try not to block the shutdown for long periods of time."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:5
# 36bd11987fa84dd095f48f38940e1922
msgid "False to halt the shutdown. You are responsible for telling the user why the shutdown was halted."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.InterfaceActionBase.load_actual_plugin:1
# 9fdde8e0c780440086da18db953550bd
msgid "This method must return the actual interface action plugin object."
msgstr ""

#: ../../plugins.rst:176
# cd624517c43b4706a0fa0c22cf50d4a1
msgid "Preferences Plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:1
# f2105afd6cf94e29973ef1f11e50b575
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:3
# 524f85d3b6a241be81dc99e0acfcd85c
msgid "This plugin has only one important method :meth:`create_widget`. The various fields of the plugin control how it is categorized in the UI."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.config_widget:1
# e9cf260275ba4058a415b74b1dba9887
msgid "Import path to module that contains a class named ConfigWidget which implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category_order:1
# 9eebc4046f404dc7bfc25e2a1635e6ea
msgid "Where in the list of categories the :attr:`category` of this plugin should be."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.name_order:1
# ac664c8f253a4b15906d5dbafb887e1c
msgid "Where in the list of names in a category, the :attr:`gui_name` of this plugin should be"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category:1
# b1caecb584e946149fc99da828026718
msgid "The category this plugin should be in"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_category:1
# 7559534e9ad4407e95b3c532ebc155db
msgid "The category name displayed to the user for this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_name:1
# 23fea403d42045c8b572698d1fda6956
msgid "The name displayed to the user for this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.icon:1
# 961e68624fb54b9ebe95c65a1babd175
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.description:1
# 6bd9197897c64fc680b751b77ea8757e
msgid "The description used for tooltips and the like"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:1
# 0002210eaa0c40bc8f486c1d8e2d8299
msgid "Create and return the actual Qt widget used for setting this group of preferences. The widget must implement the :class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:5
# 71390dd0ddd14c34a6f280c8e813e7b0
msgid "The default implementation uses :attr:`config_widget` to instantiate the widget."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface:1
# 696f602bb17b4bac97bb219f7150160b
msgid "This class defines the interface that all widgets displayed in the Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base class that implements this interface and defines various convenience methods as well."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
# 530793cde9764bb1b0f48d8c3349dd2f
msgid "This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
# bd5ceaddeeab4ae88d465941961d6fe2
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
# eeaeab58d1eb4ee5a48e175779e414c9
msgid "The tooltip for the Restore to defaults button"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
# d84f3ec259ff4c7295111979cb1851e9
msgid "If True the Preferences dialog will not allow the user to set any more preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
# 2edf5536303546508d68815f406a19dd
msgid "Called once before the widget is displayed, should perform any necessary setup."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
# e52c7e18641a41cd910cba0fd4b12994
msgid "The main calibre graphical user interface"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
# 333b75d1b9454b71b0a07bdeeee0c0c9
msgid "Should set all config values to their initial values (the values stored in the config files)."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
# 1bac118e5dcb4e3a93c3732dfc29e99e
msgid "Should set all config values to their defaults."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
# c8addf2982144809bafb9e6cba87da06
msgid "Save any changed settings. Return True if the changes require a restart, False otherwise. Raise an :class:`AbortCommit` exception to indicate that an error occurred. You are responsible for giving the user feedback about what the error is and how to correct it."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
# 2dc462f37842427e9f000fb1ea2690ab
msgid "Called once after this widget is committed. Responsible for causing the gui to reread any changed settings. Note that by default the GUI re-initializes various elements anyway, so most widgets won't need to use this method."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:1
# 85e49fd27a004e36a3be30d95afcfb98
msgid "Base class that contains code to easily add standard config widgets like checkboxes, combo boxes, text fields and so on. See the :meth:`register` method."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:5
# c379b9d7a86e47bfb0fd2f3d154dffa3
msgid "This class automatically handles change notification, resetting to default, translation between gui objects and config objects, etc. for registered settings."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:9
# 2fc9391a9872444189cfe5464fbe6d54
msgid "If your config widget inherits from this class but includes setting that are not registered, you should override the :class:`ConfigWidgetInterface` methods and call the base class methods inside the overrides."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:1
# 5e34e6c10d1d4bfaa7318d897267052c
msgid "Register a setting."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:3
# c980bbdf7475484791ed5a91bc5af7c8
msgid "The setting name"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:4
# b7fc462628894bb39f174a535306f22a
msgid "The config object that reads/writes the setting"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:5
# aa48189c4b06489881885a76a48a5ac7
msgid "The name of the GUI object that presents an interface to change the setting. By default it is assumed to be ``'opt_' + name``."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:8
# e100c5e23b364642999ee8fbc74bfa99
msgid "If this setting is a multiple choice (combobox) based setting, the list of choices. The list is a list of two element tuples of the form: ``[(gui name, value), ...]``"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:11
# c737eb969e20410191a8cd4b92c80ad5
msgid "The class responsible for managing this setting. The default class handles almost all cases, so this param is rarely used."
msgstr ""

