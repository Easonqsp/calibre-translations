# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.19.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-06 09:49+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/plugins.rst:4
# 1bc4e1bd15fd4716ad7beb9ce133a379
msgid "API Documentation for plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:9
# e1cbc5e17b12483fa8779edb5ba7c63a
msgid "Defines various abstract base classes that can be subclassed to create powerful plugins. The useful classes are:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:19
# b021993705cd46158854225bd75619dd
msgid "Plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:1
# cc9aef16cae9468ab9a872f0ab87864a
msgid "A calibre plugin. Useful members include:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# d8bc6ff39c55409d95864a643434d032
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 6a4c5ddc999a493682d864e901c198e9
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# ec28a5177c23419a813e45852d19cbbc
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# 43ed3dc406bc44cbaeb05ca8aaf79313
msgid "by the user."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:9
# 69b15836e44c4fb1b37b82cd5691d425
msgid "Methods that should be overridden in sub classes:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:11
# 8065149b1d3f4098bfd6096cdc9ca483
msgid ":meth:`initialize`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:12
# c35ff497d9894df2ad07335039bb7d58
msgid ":meth:`customization_help`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:14
# 5cb4731aa22d4a489d05347cae56f6c0
msgid "Useful methods:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:16
# e37ebcd0d82249dfb6bf0fa7badeba34
msgid ":meth:`temporary_file`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:17
# 7040c24931a945c89d4ba8a6f62586e3
msgid ":meth:`__enter__`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:18
# fa31755bf8954419a213617d76acb61c
msgid ":meth:`load_resources`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.supported_platforms:1
# ee0e0990440d486c8f145d324efe9069
msgid "List of platforms this plugin works on. For example: ``['windows', 'osx', 'linux']``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.name:1
# db0edb7fc0034d08a17c9c69468fcb8b
msgid "The name of this plugin. You must set it something other than Trivial Plugin for it to work."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.version:1
# 2e0b06b6d4e34f5dbba72aba7743857f
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.description:1
# 6dd43c8689c2487186f249c176d3dbbe
msgid "A short string describing what this plugin does"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.author:1
# 3edb973cf2e64a79b9bb628b0ee6fefd
msgid "The author of this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.priority:1
# 35c14c317adc41519193b78be924cfc2
msgid "When more than one plugin exists for a filetype, the plugins are run in order of decreasing priority i.e. plugins with higher priority will be run first. The highest possible priority is ``sys.maxint``. Default priority is 1."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.minimum_calibre_version:1
# e178de99b05a4fbb8a0fc01467838f36
msgid "The earliest version of calibre this plugin requires"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.can_be_disabled:1
# 173d4f3e0f224a77ac5bb80ff95d2f5c
msgid "If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.type:1
# 3deb3da3abad4909b56f49585c99682d
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:1
# 27cb2ce49a014c89988093fcd279399d
msgid "Called once when calibre plugins are initialized.  Plugins are re-initialized every time a new plugin is added. Also note that if the plugin is run in a worker process, such as for adding books, then the plugin will be initialized for every new worker process."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:6
# 6847ffd6912040ce936bae514a1db0d2
msgid "Perform any plugin specific initialization here, such as extracting resources from the plugin zip file. The path to the zip file is available as ``self.plugin_path``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:10
# 4216afbb2d7244c583c192bf8030f342
msgid "Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:1
# 28276ccc047a4ef5b5f5f4c459f0a7dc
msgid "Implement this method and :meth:`save_settings` in your plugin to use a custom configuration dialog, rather then relying on the simple string based default customization."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:5
# 77f0a217c07549acba2421e2f07b0255
msgid "This method, if implemented, must return a QWidget. The widget can have an optional method validate() that takes no arguments and is called immediately after the user clicks OK. Changes are applied if and only if the method returns True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:10
# 2f8c87b19bbe4ae79f6df9fb4d08e00f
msgid "If for some reason you cannot perform the configuration at this time, return a tuple of two strings (message, details), these will be displayed as a warning dialog to the user and the process will be aborted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:1
# 07de444bd8a04d93b578a0abae91874a
msgid "Save the settings specified by the user with config_widget."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:3
# 317a5e4ee35e4ac292d1275fe6ede79a
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.do_user_config:1
# 838c2c7478e74a0295088c12bdda6664
msgid "This method shows a configuration dialog for this plugin. It returns True if the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:1
# 3a127bce9ec54198a85d4de185785b54
# 7a0c5287d37246aea0a9f360424d69bb
msgid "If this plugin comes in a ZIP file (user added plugin), this method will allow you to load resources from the ZIP file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:4
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:4
# 35c66cecf70d4f59b5cd6aeeb19db675
# 8fb1d23c2f8f453ab67c8beee84198f3
msgid "For example to load an image::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:10
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:10
# 6775f1095e034243b93f20bdb1f224e4
# 74de54805ab4404a9abfca7d03fea481
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:12
# b5f23e246bcd45428b27937a5e72b059
msgid "A dictionary of the form ``{name: file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:1
# 6cf9c6e25bfc43cb95e5a2eb7b07fa7e
msgid "Return a string giving help on how to customize this plugin. By default raise a :class:`NotImplementedError`, which indicates that the plugin does not require customization."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:5
# f87faf68d52248d7a6e662961624a061
msgid "If you re-implement this method in your subclass, the user will be asked to enter a string as customization for this plugin. The customization string will be available as ``self.site_customization``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:10
# a2e826b19ed14995a4869cd10f9deca9
msgid "Site customization could be anything, for example, the path to a needed binary on the user's computer."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:13
# 63af355324114cd3874cd8be3d6463c9
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:1
# dc23755ead0f4070bde38b8b1f7b71e2
msgid "Return a file-like object that is a temporary file on the file system. This file will remain available even after being closed and will only be removed on interpreter shutdown. Use the ``name`` member of the returned object to access the full path to the created temporary file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:6
# 336c232d0fed4b2b9eb71a9928f56b69
msgid "The suffix that the temporary file will have."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.cli_main:1
# 59968d9124a14886a5c9ec825ef3897e
msgid "This method is the main entry point for your plugins command line interface. It is called when the user does: calibre-debug -r \"Plugin Name\". Any arguments passed are present in the args variable."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:28
# 168b07151b6d46f9964425cf7fd15e4a
msgid "FileTypePlugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 10248f02ec3f4674bee41fd3a8915e90
# 81b16a43389e44c0b3658317822a539f
# 960a2ea4e8e14dfcb5a0dc3c18fb02af
# bef6971ef6a140f5b2ecb758d5eb2c5d
# aa692344e4524b1f9875f036a3cfa1e1
# 3fbed04e5fb44392b1bc1839dcb9f8ba
# d34311e100b64aed9356d4f807548c81
# 59b6d812812940378d550f1e4ac616d6
# 017f43622be74c1a9ab8dc9be4e299f7
# b3a083a541d140988c32d833e835471b
# 4a30ba1bb8bf4d77bd67e5862f918d67
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin:1
# 088a605a4ad6481a8f97db628612e461
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.file_types:1
# 78cbb36f6a44425caa4425199aeb22ed
msgid "Set of file types for which this plugin should be run. For example: ``{'lit', 'mobi', 'prc'}``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_import:1
# 27d7ed06c19744c5a7d286ff7be8564d
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postimport:1
# 067c4520790a4e70834aab3bd9872938
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_preprocess:1
# 432682ce8b2848758bb1fcb42a6ac7ef
msgid "If True, this plugin is run just before a conversion"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postprocess:1
# 723146dfa7f746a48d39716eb8b3aea2
msgid "If True, this plugin is run after conversion on the final file produced by the conversion output plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:1
# c387f7d2795a494f9f971bbfc959cf8b
msgid "Run the plugin. Must be implemented in subclasses. It should perform whatever modifications are required on the ebook and return the absolute path to the modified ebook. If no modifications are needed, it should return the path to the original ebook. If an error is encountered it should raise an Exception. The default implementation simply return the path to the original ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:9
# c489faa974404ccba3601bfcf09ee00a
msgid "The modified ebook file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:12
# 3780abd189ed4672b857e4354202c336
msgid "Absolute path to the ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:14
# 2f42be06bde348b8bf9c3e8ab9e5c064
msgid "Absolute path to the modified ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:1
# 8c672c7ff806492a804afdff9aaa1f4b
msgid "Called post import, i.e., after the book file has been added to the database."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:3
# 1b30a9dc6f0846b19d3f0ca632e984b5
msgid "Database id of the added book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:4
# 5580c2f1f1574741a5e5fd6439c20d4f
msgid "The file type of the book that was added."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:5
# efe38c0e1a284d4cb89414e1a87a0f43
msgid "Library database."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:39
# e425d45d2e79454bb64771f78885e05d
msgid "Metadata plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin:1
# 80bde78fb628497981f68a713d16fb77
# ae7753f444b944abbe6bdd079910185b
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.file_types:1
# ea97af07e13b4f92a67a87bd75d65df4
# 0c038f93cea441e4b961864087ac5439
msgid "Set of file types for which this plugin should be run For example: ``set(['lit', 'mobi', 'prc'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.get_metadata:1
# cf5ad12383a441c99e7f237a454aba02
msgid "Return metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :return: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.set_metadata:1
# 041e5ffb5198472ebfff7f35060adefc
msgid "Set metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :param mi: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:54
# 8e2fb933a32a464599cacb5b019b8548
msgid "Catalog plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin:1
# 75ee79efd08b47fcb4a9828290c60dc1
msgid "A plugin that implements a catalog generator."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.file_types:1
# 1d62d5f5e917445fa34bbe2352310779
msgid "Output file type for which this plugin should be run For example: 'epub' or 'xml'"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.cli_options:1
# 69ab8b24e50e42acab2da751ef9067c5
msgid "CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.initialize:1
# 8d307a29290f4144bff6a040338a0a45
msgid "If plugin is not a built-in, copy the plugin's .ui and .py files from the zip file to $TMPDIR. Tab will be dynamically generated and added to the Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:1
# 32f0f7d562414ab59931b07e58f7f072
msgid "Run the plugin. Must be implemented in subclasses. It should generate the catalog in the format specified in file_types, returning the absolute path to the generated catalog file. If an error is encountered it should raise an Exception."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:7
# b4a877f48a2a4b3db09656f6c3af5c51
msgid "The generated catalog file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:10
# c0d49b0330f748d6a15554f1f8e14158
msgid "Absolute path to the generated catalog file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:11
# b4dd0fc58e19439cb7fb43878f949105
msgid "A dictionary of keyword arguments"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:12
# 38b97f7fd48445ec9119dbe362c9b5ee
msgid "A LibraryDatabase2 object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:64
# abd119a6abd847829c089132d121ddf4
msgid "Metadata download plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.capabilities:1
# 7c03114ccdcf4131b0fde2f4bd44583d
msgid "Set of capabilities supported by this plugin. Useful capabilities are: 'identify', 'cover'"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.touched_fields:1
# 9c2383be8d284d9885f89344da77440d
msgid "List of metadata fields that can potentially be download by this plugin during the identify phase"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
# 8b48c74b6ed94f8c8a1cf9d585962650
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
# 1748ca1086da4ff1932cd9d6a373a244
msgid "Setting this to True means that the browser object will add Accept-Encoding: gzip to all requests. This can speedup downloads but make sure that the source actually supports gzip transfer encoding correctly first"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
# 4801ad490eea449eac9f9104741b6101
msgid "Cached cover URLs can sometimes be unreliable (i.e. the download could fail or the returned image could be bogus. If that is often the case with this source set to False"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.options:1
# 0fe135cc6c2b4bbab6223a4a5379d295
msgid "A list of :class:`Option` objects. They will be used to automatically construct the configuration widget for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.config_help_message:1
# 396a9bb3c7404bea942ddfc4ac87187b
msgid "A string that is displayed at the top of the config widget for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
# d0dce9cd3b9548999b8cc2e3a43b7ba8
msgid "If True this source can return multiple covers for a given query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
# d5f5b89f0df1498f8018e2ec45e5c660
msgid "If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.prefer_results_with_isbn:1
# c47c18f71e7f44d098c06fee4cfff7b5
msgid "If set to True, and this source returns multiple results for a query, some of which have ISBNs and some of which do not, the results without ISBNs will be ignored"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.is_configured:1
# 3c74a9a98d0f4d0b98cf7015b86c44ed
msgid "Return False if your plugin needs to be configured before it can be used. For example, it might need a username/password/API key."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
# b0bc07c8214b4c6d8ae91c8b5f38f4b3
msgid "Take a list of authors and return a list of tokens useful for an AND search query. This function tries to return tokens in first name middle names last name order, by assuming that if a comma is in the author name, the name is in lastname, other names form."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
# 4d835d3a3bfc461aa44936d45fd6c756
msgid "Take a title and return a list of tokens useful for an AND search query. Excludes connectives(optionally) and punctuation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
# 4ea0ab99843d4165b13f0b01f3f36a9d
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.test_fields:1
# f4e51808943a42c495c33ce170aa4d83
msgid "Return the first field from self.touched_fields that is null on the mi object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
# 2f4e6a1196a440b495341f622d138ce2
msgid "Call this method in your plugin's identify method to normalize metadata before putting the Metadata object into result_queue. You can of course, use a custom algorithm suited to your metadata source."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
# 0848ad65703e46d691b386eb14110435
msgid "Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, identifier_value, URL). The URL is the URL for the book identified by identifiers at this source. identifier_type, identifier_value specify the identifier corresponding to the URL. This URL must be browseable to by a human using a browser. It is meant to provide a clickable link for the user to easily visit the books page at this source. If no URL is found, return None. This method must be quick, and consistent, so only implement it if it is possible to construct the URL from a known scheme given identifiers."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
# 07d829f8abfc4d709e81c3f5b271c51b
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_urls:1
# 381247fb0e254967ab65995092aa6180
msgid "Override this method if you would like to return multiple urls for this book. Return a list of 3-tuples. By default this method simply calls :method:`get_book_url`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
# 3a1cd997ac7046f8920558961ed33312
msgid "Return cached cover URL for the book identified by the identifiers dict or None if no such URL exists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
# 6e7412d4dbc34854a307a90796167f4f
msgid "Note that this method must only return validated URLs, i.e. not URLS that could result in a generic cover image or a not found error."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
# 0907b37bae9445dc97092b0322057e4a
msgid "Return a function that is used to generate a key that can sort Metadata objects by their relevance given a search query (title, authors, identifiers)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
# dbc8db855d364b4590ad5ad81ac7fb6c
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
# eecb5b7304284a85b15e35b5c3ce62c4
msgid "For details on the default algorithm see :class:`InternalMetadataCompareKeyGen`. Re-implement this function in your plugin if the default algorithm is not suitable."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:1
# fb9905cb1c094d12904a3ee14878e1d2
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:3
# d1967348f0ab406dad0787db37799f3d
msgid "If identifiers(s) are specified and no match is found and this metadata source does not store all related identifiers (for example, all ISBNs of a book), this method should retry with just the title and author (assuming they were specified)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:8
# 697141161adf4b339a17f2e9057e4ff2
msgid "If this metadata source also provides covers, the URL to the cover should be cached so that a subsequent call to the get covers API with the same ISBN/special identifier does not need to get the cover URL again. Use the caching API for this."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:13
# 2049999a18fa44fb978cc3cbc9629fe8
msgid "Every Metadata object put into result_queue by this method must have a `source_relevance` attribute that is an integer indicating the order in which the results were returned by the metadata source for this query. This integer will be used by :meth:`compare_identify_results`. If the order is unimportant, set it to zero for every result."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:19
# ed8f3ffdd9924964b7b906fb7f0da348
msgid "Make sure that any cover/isbn mapping information is cached before the Metadata object is put into result_queue."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:22
# 46f0a0e5244149dd99af4b0f3f06ba7d
msgid "A log object, use it to output debugging information/errors"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:23
# 4681bc11b6a54181b7c1928b081a0587
msgid "A result Queue, results should be put into it. Each result is a Metadata object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:25
# 8c4afed08fe54c95a2f51d11e97bbb50
msgid "If abort.is_set() returns True, abort further processing and return as soon as possible"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:27
# 31fb0a7d99884a798bb069386820e4b2
msgid "The title of the book, can be None"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:28
# 24bdb776d8e74b769590f7bcb3e6dbeb
msgid "A list of authors of the book, can be None"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:29
# 0c0e54c3337d4deb983e157aba985ced
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:31
# 7ee9178a17e94a0ba1f2ebae4cab36c4
msgid "Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:33
# 5c83f59437fe42758a2f12b692f81e2e
msgid "None if no errors occurred, otherwise a unicode representation of the error suitable for showing to the user"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:1
# fd7e0ca3fcd84468b9fe936be8b914fe
msgid "Download a cover and put it into result_queue. The parameters all have the same meaning as for :meth:`identify`. Put (self, cover_data) into result_queue."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:5
# 80d7b5f0da4e4edc9287ff9845322a62
msgid "This method should use cached cover URLs for efficiency whenever possible. When cached data is not present, most plugins simply call identify and use its results."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:9
# b81d0a9a2f0648c5ab93c9267d88a19c
msgid "If the parameter get_best_cover is True and this plugin can get multiple covers, it should only get the \"best\" one."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
# 6fb59f50809343b28f730dad7994a544
msgid "Generate a sort key for comparison of the relevance of Metadata objects, given a search query. This is used only to compare results from the same metadata source, not across different sources."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
# ce1451e105b845f1bf043285b29ff6e3
msgid "The sort key ensures that an ascending order sort is a sort by order of decreasing relevance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
# 77e038d0f7f04f00ac5781d453814034
msgid "The algorithm is:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
# 0ca6188d45eb4da49857e9c8a4f5f7da
msgid "Prefer results that have at least one identifier the same as for the query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
# 693fc9231a2e4512a30709a942c23787
msgid "Prefer results with a cached cover URL"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
# d81bfd8e3e0b4d8d815300afe06dc503
msgid "Prefer results with all available fields filled in"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
# 10b00ef4c9504901ab7ec8be6e0ed6f7
msgid "Prefer results with the same language as the current user interface language"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
# 9a1526023bd2451585d7da02c11cdc8c
msgid "Prefer results that are an exact title match to the query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
# 05f34657accb47228d78cf60da933ced
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
# 2e9f39128b0048a28dad3471745319bb
msgid "Use the relevance of the result as reported by the metadata source's search"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:17
# a01a8c4050fc49e4bfe61ddf2ed16d88
msgid "engine"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:76
# 232024990ccd4edda41fe836e31dcc10
msgid "Conversion plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin:1
# fa99b3d808244a8db775d61e3403b449
msgid "InputFormatPlugins are responsible for converting a document into HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.file_types:1
# df6c26c4ffe64cbdb6520138974462de
msgid "Set of file types for which this plugin should be run For example: ``set(['azw', 'mobi', 'prc'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
# a6bf41f548544e4fbc10293f5f647ab7
msgid "If True, this input plugin generates a collection of images, one per HTML file. This can be set dynamically, in the convert method if the input files can be both image collections and non-image collections. If you set this to True, you must implement the get_images() method that returns a list of images."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.core_usage:1
# 6b571e8cd9f24b79b45315ca1b4741df
msgid "Number of CPU cores used by this plugin A value of -1 means that it uses all available cores"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.for_viewer:1
# 6ab0a006c2794c6cba24cd1684b63fbb
msgid "If set to True, the input plugin will perform special processing to make its output suitable for viewing"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.output_encoding:1
# 75a8b94be58f479eb89e055c5ac76635
msgid "The encoding that this input plugin creates files in. A value of None means that the encoding is undefined and must be detected individually"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.common_options:1
# 5295368fb52640ad91ebe81dd8cf8047
# 140d96af6f7d463ca41d4abc90df71fd
msgid "Options shared by all Input format plugins. Do not override in sub-classes. Use :attr:`options` instead. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.options:1
# ed7c5bf7524c4dedad9b8da0721d2a94
# b4a5bf518af947779b2b3667af6b13ae
msgid "Options to customize the behavior of this plugin. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.recommendations:1
# 61ca231e226c4f07ab117978b7aa3862
# f53e4db4a9c04992bc02b4dfdd43b6b1
msgid "A set of 3-tuples of the form (option_name, recommended_value, recommendation_level)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.get_images:1
# 6b2bb135f6ce40709cf93ff121f26f51
msgid "Return a list of absolute paths to the images, if this input plugin represents an image collection. The list of images is in the same order as the spine and the TOC."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:1
# 1aa8604e40044b079c0b0ca271cdc437
msgid "This method must be implemented in sub-classes. It must return the path to the created OPF file or an :class:`OEBBook` instance. All output should be contained in the current directory. If this plugin creates files outside the current directory they must be deleted/marked for deletion before this method returns."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:8
# 33efcf0fa5694d1d9f20d714bb8cd7b8
msgid "A file like object that contains the input file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:9
# ca39481214e14946bff9fadc4ca882ca
msgid "Options to customize the conversion process. Guaranteed to have attributes corresponding to all the options declared by this plugin. In addition, it will have a verbose attribute that takes integral values from zero upwards. Higher numbers mean be more verbose. Another useful attribute is ``input_profile`` that is an instance of :class:`calibre.customize.profiles.InputProfile`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:17
# 41f92fd5c19a454ca010ddedf174a7bc
msgid "The extension (without the .) of the input file. It is guaranteed to be one of the `file_types` supported by this plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:20
# 4a2cac3cb6a64052afaec71ee64617a8
msgid "A :class:`calibre.utils.logging.Log` object. All output should use this object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:22
# 839d83da6f744bafbf8aa6679b16fd12
msgid "A dictionary of various information that the input plugin can get easily that would speed up the subsequent stages of the conversion."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
# 4fb5486688424ed1a59291bc922eb145
msgid "Called to allow the input plugin to perform postprocessing after the book has been parsed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.specialize:1
# 4b3b280081bf463982847588559d2b72
msgid "Called to allow the input plugin to specialize the parsed book for a particular output format. Called after postprocess_book and before any transforms are performed on the parsed book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
# a6acd06f9e574ff4a9a8d0b09e86e31a
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builting input plugins for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:1
# 21d0bca5dc1d416c9e144bc47df68845
msgid "OutputFormatPlugins are responsible for converting an OEB document (OPF+HTML) into an output ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:4
# 3dd4cf13fde840de8a020da782b1fbc1
msgid "The OEB document can be assumed to be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.file_type:1
# ea06b0ccb88242979c6de0d84cfb5252
msgid "The file type (extension without leading period) that this plugin outputs"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:1
# 43d6686775c34f298c61947b0ee585c0
msgid "Render the contents of `oeb_book` (which is an instance of :class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:4
# 15a2a4401fa24503b10853f7ea568364
msgid "Either a file like object or a string. If it is a string it is the path to a directory that may or may not exist. The output plugin should write its output into that directory. If it is a file like object, the output plugin should write its output into the file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:8
# 6decb9e72b9045baa715eda574a6571e
msgid "The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:10
# a95c6528711644eeb3dd8251f6e4ea6d
msgid "Conversion options. Guaranteed to have attributes corresponding to the OptionRecommendations of this plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:12
# 6dce59e13a4b4df783caa1d87e0be3d7
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
# 2da01fb983e24687a524eb0078a078b9
msgid "Can be used to make changes to the css during the CSS flattening process."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
# bb2fd775ac814b77bdb0d4bb1e94b7e3
msgid "The item (HTML file) being processed"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
# d47256a3742e4c1a96f5c9ae3533147f
msgid "A Stylizer object containing the flattened styles for item. You can get the style for any element by stylizer.style(element)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
# 820a432eedc14a1c9936f05afbff0568
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builtin output plugins for examples."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:91
# b0ba372d78354c3290df3dc74f392b0f
msgid "Device Drivers"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:95
# eead4c491b9843d9858505bd48c7d1b6
msgid "The base class for all device drivers is :class:`DevicePlugin`. However, if your device exposes itself as a USBMS drive to the operating system, you should use the USBMS class instead as it implements all the logic needed to support these kinds of devices."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin:1
# c6c6bc3045bf4633a717544b436dd928
msgid "Defines the interface that should be implemented by backends that communicate with an ebook reader."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.FORMATS:1
# 26b0df562e264a868d1acd898d79bc73
msgid "Ordered list of supported formats"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VENDOR_ID:1
# 0a612691417847fe83526c5a54d66ac2
msgid "VENDOR_ID can be either an integer, a list of integers or a dictionary If it is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
# d0113c28b80a4ad69353fc6d0795b666
msgid "An integer or a list of integers"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.BCD:1
# 1355b047799f49a29e8fab65a70b6195
msgid "BCD can be either None to not distinguish between devices based on BCD, or it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
# 46c7ee25c6694e56851e62affd570f69
msgid "Height for thumbnails on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
# c41cb1fc71d4481aaaa0e24d2d6b27e9
msgid "Width for thumbnails on the device. Setting this will force thumbnails to this size, not preserving aspect ratio. If it is not set, then the aspect ratio will be preserved and the thumbnail will be no higher than THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 to have better quality thumbnails with fewer compression artifacts. Of course, the thumbnails get larger as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
# b75ee5dbdbe740e796c387a017969379
msgid "Set this to True if the device supports updating cover thumbnails during sync_booklists. Setting it to true will ask device.py to refresh the cover thumbnails during book matching"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
# fd02432167734b4c8bad5ee4e9f40fe4
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
# b2b3923e6d144560a50dc01a7a54bf69
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.path_sep:1
# 80d17da0695142e3a30990623f4fe364
msgid "Path separator for paths to books on device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.icon:1
# c4dfca4aa4d7410183a9d96c87f05027
msgid "Icon for this device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
# 70eeaba7782d42469f8ae8ad048bd393
msgid "GUI displays this as a message if not None. Useful if opening can take a long time"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
# af05eaf2d9d840df9a368792a9ec3f0f
msgid "Set of extensions that are \"virtual books\" on the device and therefore cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
# 5d4d9170808b477db93812473f5324cc
msgid "Whether to nuke comments in the copy of the book sent to the device. If not None this should be short string that the comments will be replaced by."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
# 402bc75d0ba447a98b7b20ebee2a30f5
msgid "If True indicates that  this driver completely manages device detection, ejecting and so forth. If you set this to True, you *must* implement the detect_managed_devices and debug_managed_device_detection methods. A driver with this set to true is responsible for detection of devices, managing a blacklist of devices, a list of ejected devices and so forth. calibre will periodically call the detect_managed_devices() method and if it returns a detected device, calibre will call open(). open() will be called every time a device is returned even is previous calls to open() failed, therefore the driver must maintain its own blacklist of failed devices. Similarly, when ejecting, calibre will call eject() and then assuming the next call to detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
# 51aa9e5d2bc84a83bdb64266f08f68b3
msgid "If set the True, calibre will call the :meth:`get_driveinfo()` method after the books lists have been loaded to get the driveinfo."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
# fa8784752aed47f69fb7c2b0961634af
msgid "If set to True, calibre will ask the user if they want to manage the device with calibre, the first time it is detected. If you set this to True you must implement :meth:`get_device_uid()` and :meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` and :meth:`set_user_blacklisted_devices`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
# 7aeea3f2a74a4c57bc1937d108c705c2
msgid "Set this to a dictionary of the form {'title':title, 'msg':msg, 'det_msg':detailed_msg} to have calibre popup a message to the user after some callbacks are run (currently only upload_books). Be careful to not spam the user with too many messages. This variable is checked after *every* callback, so only set it when you really need to."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:1
# 45a9ed231045419183a62a2a84eaaf15
msgid "Return True, device_info if a device handled by this plugin is currently connected."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:3
# b6a505d3f5fd4e2ca804468c9aa6643a
msgid "List of devices currently connected"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
# 875a5a89d57c471ebeecbfb97d1ad302
# fd5532e26fda4943b8e5c9703f7a8c02
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:3
# 83824b43fb0a4918bcab918277ddf215
msgid "Scan for devices that this driver can handle. Should return a device object if a device is found. This object will be passed to the open() method as the connected_device. If no device is found, return None. The returned object can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:9
# 4e23b9e0062d4085860e4ae9f6c2a0e8
msgid "This method is called periodically by the GUI, so make sure it is not too resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:13
# 8fdaa5959d134dfe9e32c2078d292a3a
msgid "Set of USB devices found on the system."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:15
# 4c834c27c0944fc6827b5cc738608dd9
msgid "If True and the driver uses a cache to prevent repeated scanning, the cache must be flushed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
# 9e9f6cda6eea45f6aac771af3a304a90
msgid "Should write information about the devices detected on the system to output, which is a file like object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
# 57fb0a06762848c69799953c2e28cf48
msgid "Should return True if a device was detected and successfully opened, otherwise False."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:1
# 054a4f5358cd4559ba2bad5a5da2f17c
msgid "The key to unlock the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:2
# 1f5017df8ce44bfd9ffd9fb2a45182a8
msgid "If true the packet stream to/from the device is logged"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:3
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:3
# d25c38272d084baaa25f69228b7f4465
# 95e658b42be146759e3c8bbb2164c0bf
msgid "Function that is called with a % progress (number between 0 and 100) for various tasks If it is called with -1 that means that the task does not have any progress information"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:7
# 4a7e383b66e545cf9793e82023798aed
msgid "Device information from the device scanner"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:1
# 872bd3b74ff9466692840c86d9e3102a
msgid "Optional method to perform further checks on a device to see if this driver is capable of handling it. If it is not it should return False. This method is only called after the vendor, product ids and the bcd have matched, so it can do some relatively time intensive checks. The default implementation returns True. This method is called only on windows. See also :meth:`can_handle`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:8
# f19096a96f9f435eb8a1c84710fed495
msgid "On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, bcd)``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:1
# f147b4c1093943a9add16f52086dd2c8
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:3
# 16553b6f201f48d7bd82ca40cb268327
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:1
# e96145330e5e46a68ae3b2ed8065bbd1
msgid "Perform any device specific initialization. Called after the device is detected but before any other functions that communicate with the device. For example: For devices that present themselves as USB Mass storage devices, this method would be responsible for mounting the device or if the device has been automounted, for finding out where it has been mounted. The method :meth:`calibre.devices.usbms.device.Device.open` has an implementation of this function that should serve as a good example for USB Mass storage devices."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:11
# d1b560f87d90434ba9cfdad7ccf6c63d
msgid "This method can raise an OpenFeedback exception to display a message to the user."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:14
# 4e70e97e201f4edab1f12c952fd03360
msgid "The device that we are trying to open. It is a tuple of (vendor id, product id, bcd, manufacturer name, product name, device serial number). However, some devices have no serial number and on windows only the first three fields are present, the rest are None."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:20
# 82befb001c3e49bb927c95f8b083f5dd
msgid "The UUID of the current calibre library. Can be None if there is no library (for example when used from the command line)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:1
# 91b71ac9ebc441ebbe8daaf78cab1e80
msgid "Un-mount / eject the device from the OS. This does not check if there are pending GUI jobs that need to communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:4
# 49e22dda00ba4ffebcf9ea1592637d30
msgid "NOTE: That this method may not be called on the same thread as the rest of the device methods."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
# 237d390c6139463ba58c9d896fea1a35
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:1
# 0a39937f6d924f78be95388791427bbf
msgid "Set a function to report progress information."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:1
# 525e3ea261f24e6ea50db1ae325bd47f
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:3
# 526b6691547e4ca8a74d0a676b84eae4
msgid "(device name, device version, software version on device, mime type) The tuple can optionally have a fifth element, which is a drive information dictionary. See usbms.driver for an example."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_driveinfo:1
# b6c04d3aa88d4c168568a88864844889
msgid "Return the driveinfo dictionary. Usually called from get_device_information(), but if loading the driveinfo is slow for this driver, then it should set SLOW_DRIVEINFO. In this case, this method will be called by calibre after the book lists have been loaded. Note that it is not called on the device thread, so the driver should cache the drive info in the books() method and this function should return the cached data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.card_prefix:1
# 0f39a7b145ea4aeb8a7cf15d44299379
msgid "Return a 2 element list of the prefix to paths on the cards. If no card is present None is set for the card's prefix. E.G. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# a9fc4a2baba44ed0aa850d39409edf13
msgid "Get total space available on the mountpoints:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:2
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:2
# c63f6070714b4dfcade7e40ccfdf593e
# a32d43f62d5a473cb6680c2bf4ea7d15
msgid "Main memory"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:3
# b6ae5b2307624ffe82ba79c05fe55cb7
msgid "Memory Card A"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 6b11349058224b52875386a27e012b8b
msgid "Memory Card B"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:6
# a063fbd9a95f4714a75dd20b1c57abcb
msgid "A 3 element list with total space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return 0."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 9f564342e3ca4c57bec4b3a2c61c2a6b
msgid "Get free space available on the mountpoints:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:3
# dfa78ee83334447794de3af447339ff5
msgid "Card A"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 336c6f52b38f49d9adf87a5afce3ab8a
msgid "Card B"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:6
# f41bf38cb28c495ca6f81dd47c4df4cc
msgid "A 3 element list with free space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return -1."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:1
# 51b23628283143ba940974fcc08ae24f
msgid "Return a list of ebooks on the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:3
# cca09be47ecf4b6d87b9e309b58ecc73
msgid "If 'carda' or 'cardb' return a list of ebooks on the specific storage card, otherwise return list of ebooks in main memory of device. If a card is specified and no books are on the card return empty list."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:8
# a195156fd0f949319301399c39d5a481
msgid "A BookList."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:1
# 304c51a82581466b9d705a80fb37e338
msgid "Upload a list of books to the device. If a file already exists on the device, it should be replaced. This method should raise a :class:`FreeSpaceError` if there is not enough free space on the device. The text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is not None otherwise it must contain the word \"memory\"."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:7
# a2302553621846e5811c335625cd82cb
msgid "A list of paths"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:8
# 083d8469a9e64e9683052f4afc44ec07
msgid "A list of file names that the books should have once uploaded to the device. len(names) == len(files)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:10
# ac491500d5e14e5fb6e62eed18ce11e2
msgid "If not None, it is a list of :class:`Metadata` objects. The idea is to use the metadata to determine where on the device to put the book. len(metadata) == len(files). Apart from the regular cover (path to cover), there may also be a thumbnail attribute, which should be used in preference. The thumbnail attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:17
# 44f9e46f9aa44e43b00549bd238673a6
msgid "A list of 3-element tuples. The list is meant to be passed to :meth:`add_books_to_metadata`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
# de34fe15b50347bdba5f9a4ac7eccc86
msgid "Add locations to the booklists. This function must not communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
# 7053eb36219847fa89f56117e8d39bd3
msgid "Result of a call to L{upload_books}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
# 4940bec65a8d41808b52ae20a97f3830
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:3
# f4db99c24ca0490a8e2bfd41a169523f
# c411b5b134044ac08b739d8497804a82
# c07c212b924d4a77b6edf326677666c4
msgid "A tuple containing the result of calls to (:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.delete_books:1
# aba618473c5443068bfb650f03ac4b98
msgid "Delete books at paths on device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
# d7c6a10187ab489d9ff2b8811bd6eefe
msgid "Remove books from the metadata list. This function must not communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
# 8ae5a3b0a9be4e489282707f06fadb54
msgid "paths to books on the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:1
# 2894773a70e14cf0bf27351290e802e9
msgid "Update metadata on device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:1
# e9262dcc19794a03946743b87b96b02b
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:3
# e8e5b3ec3685465bb0be3a90bfeb27dd
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.config_widget:1
# c3453d4635e746268a597df47ee2498b
msgid "Should return a QWidget. The QWidget contains the settings for the device interface"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.save_settings:1
# 07f26afb40134fb98530e5019de27f0c
msgid "Should save settings to disk. Takes the widget created in :meth:`config_widget` and saves all settings to disk."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.settings:1
# c19a553207444ec996045ea30b794d6e
msgid "Should return an opts object. The opts object should have at least one attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:1
# 31fd7e900f074323bd8d486568622651
msgid "provide the driver the current set of plugboards and a function to select a specific plugboard. This method is called immediately before add_books and sync_booklists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# fedeb982d4914b049e9485b6c2589d41
msgid "pb_func is a callable with the following signature::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 418e9555a8fd46c896fc15396beab588
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:8
# a6432bd11924414582b3fb3627afd615
msgid "You give it the current device name (either the class name or DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or 'device_db'), and the plugboards (you were given those by set_plugboards, the same place you got this method)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:13
# a4f349e05bba49e0af983c13311a2aeb
msgid "None or a single plugboard instance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
# 1e220ff027c048b2ab50eec97339f63d
msgid "Set the device name in the driveinfo file to 'name'. This setting will persist until the file is re-created or the name is changed again."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
# ba9d3c0a91f14a90bf8dcd56f98d2ecc
msgid "Non-disk devices should implement this method based on the location codes returned by the get_device_information() method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:1
# a751cbee54a3447792e4aa2f10bb1342
msgid "Given a list of paths, returns another list of paths. These paths point to addable versions of the books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:4
# eedd0aae0c224ae9858e83f7b33c1e97
msgid "If there is an error preparing a book, then instead of a path, the position in the returned list for that book should be a three tuple: (original_path, the exception instance, traceback)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.startup:1
# fdb2816ce03b44f6b22594c30156ef1f
msgid "Called when calibre is is starting the device. Do any initialization required. Note that multiple instances of the class can be instantiated, and thus __init__ can be called multiple times, but only one instance will have this method called. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.shutdown:1
# 4e1298b1115d42ab8771deb824e7f6be
msgid "Called when calibre is shutting down, either for good or in preparation to restart. Do any cleanup required. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_uid:1
# ab870cec82cf4739a32d4a93145c8404
msgid "Must return a unique id for the currently connected device (this is called immediately after a successful call to open()). You must implement this method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ignore_connected_device:1
# ec41c55cbb3b4eef9d6f6beb22ff7fa1
msgid "Should ignore the device identified by uid (the result of a call to get_device_uid()) in the future. You must implement this method if you set ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately after open(), so if open() caches some state, the driver should reset that state."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
# e03f6109ae9c462c8055437c111e4b99
msgid "Return map of device uid to friendly name for all devices that the user has asked to be ignored."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
# 081494eb5b0140b39a59e35d3860aea1
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
# b5da5282854442a8b614c2b35b85c2aa
msgid "Implement this method if your device wants to override a particular preference. You must ensure that all call sites that want a preference that can be overridden use device_prefs['something'] instead of prefs['something']. Your method should call device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: metadata management (prefs['manage_device_metadata'])"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_library_info:1
# 3b39ce1e2e524737b64343bff1d48657
msgid "Implement this method if you want information about the current calibre library. This method is called at startup and when the calibre library changes while connected."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
# b2b7f19ae42944459b79ff9aea8ff711
msgid "Called by the device manager when starting plugins. If this method returns a string, then a) it supports the device manager's dynamic control interface, and b) that name is to be used when talking to the plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:4
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:3
# 5bdf00991d9844ecaae1ef8eecdbba2d
# 36e765f9abd64bbb8e382edaff08e405
# 174e3605882e4c1ba606d64c7ac39fe2
# c3856ed746a14e87af05931af20602ae
# ea53660366ed4e36808766bdf5aa8e6e
# 56562098aa05455c9a67a50bae03e7c1
msgid "This method can be called on the GUI thread. A driver that implements this method must be thread safe."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:1
# f1833730db66406982510d7a37b092d8
msgid "This method is called to start the plugin. The plugin should begin to accept device connections however it does that. If the plugin is already accepting connections, then do nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:1
# 29a03f093cd04200a0378f30455110b0
msgid "This method is called to stop the plugin. The plugin should no longer accept connections, and should cleanup behind itself. It is likely that this method should call shutdown. If the plugin is already not accepting connections, then do nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:1
# 0e425bbfe04a419d81bc24b4017017a9
msgid "Return the value of the option indicated by opt_string. This method can be called when the plugin is not started. Return None if the option does not exist."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:1
# 7ae3a81e6ee344e19256c3f19d0c7081
msgid "Set the value of the option indicated by opt_string. This method can be called when the plugin is not started."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:1
# c2c327c15d2045d2b8c9d61933ca26a7
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:1
# f6d238c45c354c2b92a67a7973718f89
msgid "Called during book matching when a book on the device is matched with a book in calibre's db. The method is responsible for syncronizing data from the device to calibre's db (if needed)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:5
# 881d0a6987b34172a8d06991e6722603
msgid "The method must return a two-value tuple. The first value is a set of calibre book ids changed if calibre's database was changed or None if the database was not changed. If the first value is an empty set then the metadata for the book on the device is updated with calibre's metadata and given back to the device, but no GUI refresh of that book is done. This is useful when the calibre data is correct but must be sent to the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:13
# 39178d291e20448e81874f6c9fea09b9
msgid "The second value is itself a 2-value tuple. The first value in the tuple specifies whether a book format should be sent to the device. The intent is to permit verifying that the book on the device is the same as the book in calibre. This value must be None if no book is to be sent, otherwise return the base file name on the device (a string like foobar.epub). Be sure to include the extension in the name. The device subsystem will construct a send_books job for all books with not- None returned values. Note: other than to later retrieve the extension, the name is ignored in cases where the device uses a template to generate the file name, which most do. The second value in the returned tuple indicated whether the format is future-dated. Return True if it is, otherwise return False. Calibre will display a dialog to the user listing all future dated books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:27
# f400e1d59830464f825f29388a46ec47
msgid "Extremely important: this method is called on the GUI thread. It must be threadsafe with respect to the device manager's thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:30
# a8f5ad840ab0446ca7c324bcf13c65c3
msgid "book_id: the calibre id for the book in the database. book_metadata: the Metadata object for the book coming from the device. first_call: True if this is the first call during a sync, False otherwise"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 359a10bce807426c89aaa76280054c15
msgid "Bases: :class:`list`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:1
# 6ddf3dfe19fa4afc96a0e308cc1245fd
msgid "A list of books. Each Book object must have the fields"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:3
# 26e59c2a843b4bed8d50cee340cdac94
msgid "title"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:4
# 256fae0519f4420ca34b599e64319fc1
msgid "authors"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:5
# d9355dfa0cab4407b3847c90a0a0d17c
msgid "size (file size of the book)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:6
# c0f12b2490814b8e8fc8151635afb9d3
msgid "datetime (a UTC time tuple)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:7
# 3cb6ed947f9d45d98e8ab646815cb341
msgid "path (path on the device to the book)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:8
# ec00abc81ce54d06b1c9d2e3b0d9a667
msgid "thumbnail (can be None) thumbnail is either a str/bytes object with the image data or it should have an attribute image_path that stores an absolute (platform native) path to the image"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:11
# 3eb6bef7678d487685252ac71671a9fd
msgid "tags (a list of strings, can be empty)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.supports_collections:1
# e9029ea362204d269c190c73af136ce2
msgid "Return True if the device supports collections for this book list."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.add_book:1
# 29a3f65446af4b19b23b752b21ad065e
msgid "Add the book to the booklist. Intent is to maintain any device-internal metadata. Return True if booklists must be sync'ed"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.remove_book:1
# f32602fa868f4f4289cd1d3bced8d956
msgid "Remove a book from the booklist. Correct any device metadata at the same time"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:1
# 9090d0658410434f9e66c36538ceb2c6
msgid "Return a dictionary of collections created from collection_attributes. Each entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:5
# 7eac6f7b443e4f928dc9ed095e7ac954
msgid "The list of books is sorted by book title, except for collections created from series, in which case series_index is used."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:8
# b42430403dcc4ce2a571716593ba9597
msgid "A list of attributes of the Book object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:109
# 425b6c2c695744d1bceccde7cc8b4ec1
msgid "USB Mass Storage based devices"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:111
# 62e68c6272454eeaa1aa8b1af00e2c29
msgid "The base class for such devices is :class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits some of its functionality from its bases, documented below. A typical basic USBMS based driver looks like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 50bcb49e98334b618e45fb920741abc4
msgid "Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, :class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device:1
# 0c2ca6104d6a4008aeea7c97d558ec0d
msgid "This class provides logic common to all drivers for devices that export themselves as USB Mass Storage devices. Provides implementations for mounting/ejecting of USBMS devices on all platforms."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
# 56b1ec93d2cd43d79ff840c44995cde8
msgid "String identifying the main memory of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
# 795e757d25b54ae8a7b8e98928e41f8d
msgid "String identifying the first card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
# e99f00ba593847019ea32c6652895cd2
msgid "String identifying the second card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
# 1da83622c8d34f1e81798951d6eda1bb
msgid "Used by the new driver detection to disambiguate main memory from storage cards. Should be a regular expression that matches the main memory mount point assigned by OS X"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
# 9b4dc024bfcd4cbab62d8bf0f0dd7da1
msgid "The maximum length of paths created on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
# 8d9399c0e1ae4e6d8440f32dd0e61988
msgid "Put news in its own folder"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.windows_sort_drives:1
# 58d6dac39f884c1cb9a47fdb4b118711
msgid "Called to disambiguate main memory and storage card for devices that do not distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The EB600"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_callback:1
# 4a595a78892149e49323e7944772f9a4
msgid "Callback to allow individual device drivers to override the path sanitization used by :meth:`create_upload_path`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.filename_callback:1
# d4057ebe60734181a9f5f1973cf15c58
msgid "Callback to allow drivers to change the default file name set by :meth:`create_upload_path`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_path_components:1
# 273e46aab3bb484c91bb14da4e3ad14b
msgid "Perform any device specific sanitization on the path components for files to be uploaded to the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.get_annotations:1
# 860ae152b0964b1e9c88fcf53e91388f
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.add_annotation_to_library:1
# 0ab4ab51e59a4730a2dc2a4049795558
msgid "Add an annotation to the calibre library"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 05a6909a143a4fdeb054b4041d080d7f
msgid "Bases: :class:`calibre.devices.usbms.cli.CLI`, :class:`calibre.devices.usbms.device.Device`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS:1
# a5f8ea6736f74637b516ac5ab4c24151
msgid "The base class for all USBMS devices. Implements the logic for sending/getting/updating metadata/caching metadata/etc."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:1
# 206db5fdd9e34da786d48aee7ccd0a1e
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:3
# 88ec2e8df6f849f6b074eaec0fde4b01
msgid "The full path to the directory where the associated book is located."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:4
# 77eb03b5d9784b22a8899e699fea07a2
msgid "The name of the book file without the extension."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:5
# 717622066da0485689f10b1cefd037be
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:7
# fc40dfeb8f2c43fcb34fc092ee151132
msgid "The full path to the ebook file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.normalize_path:1
# 7998b2e53c2f46d4a16299367973f62a
msgid "Return path with platform native path separators"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:157
# 535b2bbb1c544714be2be9a0f6979b99
msgid "User Interface Actions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:159
# 68e76b3ede694312a5b62c0f8a42ec5b
msgid "If you are adding your own plugin in a zip file, you should subclass both InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` method of you InterfaceActionBase subclass must return an instantiated object of your InterfaceBase subclass."
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 484d4cb731954a8fb06c147714b9e6fe
msgid "Bases: :class:`PyQt5.QtCore.QObject`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:1
# 2deddb204ce2453189200c68f3deaa74
msgid "A plugin representing an \"action\" that can be taken in the graphical user interface. All the items in the toolbar and context menus are implemented by these plugins."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:5
# 5a79d8a49bca46c9ac935ed40a5166df
msgid "Note that this class is the base class for these plugins, however, to integrate the plugin with calibre's plugin system, you have to make a wrapper class that references the actual plugin. See the :mod:`calibre.customize.builtins` module for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:10
# e20712fa7d1247ff8d3f399fe78f1e93
msgid "If two :class:`InterfaceAction` objects have the same name, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:13
# 9d488fe7ddc84bed8ac8691eb0ee4b52
msgid "Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected` :meth:`shutting_down` and :meth:`initialization_complete` methods."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:17
# a956fa140ad64be1bf034f349b0fbca3
msgid "Once initialized, this plugin has access to the main calibre GUI via the :attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:22
# 9363f987bc5143c0a45445d6d2bc85d8
msgid "To access the actual plugin, use the :attr:`interface_action_base_plugin` attribute, this attribute only becomes available after the plugin has been initialized. Useful if you want to use methods from the plugin class like do_user_config()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:27
# 1a75047765d341789748d5f57040e587
msgid "The QAction specified by :attr:`action_spec` is automatically create and made available as ``self.qaction``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.name:1
# 07e7eda8330f41089e44eb32dcf70a1e
msgid "The plugin name. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.priority:1
# 70681d81049c46a4b509840d4f7e1173
msgid "The plugin priority. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.popup_type:1
# b3f67ce633004e2b95941263d9eacdd0
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.auto_repeat:1
# 4abbb449eba54e8e9ab4125508afe594
msgid "Whether this action should be auto repeated when its shortcut key is held down."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_spec:1
# a52f1e6c0482475eb5fd5740b4ba34fd
msgid "Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and keyboard shortcut can be None shortcut must be a string, None or tuple of shortcuts. If None, a keyboard shortcut corresponding to the action is not registered. If you pass an empty tuple, then the shortcut is registered with no default key binding."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_add_menu:1
# 90b15f86b3fa4b8881024d8d1ccd3d6a
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
# 62bdda08e93f466cb5f33767ab91071a
msgid "If True, a clone of self.qaction is added to the menu of self.qaction If you want the text of this action to be different from that of self.qaction, set this variable to the new text"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_add_to:1
# 5c8f15a76d0f4338a14811a2b025d84b
msgid "Set of locations to which this action must not be added. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_remove_from:1
# 88cd5a68b1cb4f16806886d036ff56e6
msgid "Set of locations from which this action must not be removed. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_type:1
# 6ad3d73836824ad3a590ef682b2cd837
msgid "Type of action 'current' means acts on the current view 'global' means an action that does not act on the current view, but rather on calibre as a whole"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accepts_drops:1
# 281329624a2d4a3eb8447bff660866a9
msgid "If True, then this InterfaceAction will have the opportunity to interact with drag and drop events. See the methods, :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
# f33dcdef731d489d95580c92133e2692
# 350a2ed7beda4afa9d121df314c3af03
msgid "This method should return True iff this interface action is capable of handling the drag event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.drop_event:1
# 40c1b7b859114138a22526720d4ac3b0
msgid "This method should perform some useful action and return True iff this interface action is capable of handling the drop event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI. You should not perform blocking/long operations in this function. Instead emit a signal or use QTimer.singleShot and return quickly. See the builtin actions for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:1
# abb14b17445f429eae6f34943cb5509c
msgid "Convenience method to easily add actions to a QMenu. Returns the created QAction, This action has one extra attribute calibre_shortcut_unique_name which if not None refers to the unique name under which this action is registered with the keyboard manager."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:6
# 274f58c5642540e98ded2f072cb8d437
msgid "The QMenu the newly created action will be added to"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:7
# eda5f962a3cb4989a029ed16cb247087
msgid "A unique name for this action, this must be globally unique, so make it as descriptive as possible. If in doubt add a uuid to it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:10
# 1569a35202a94685a502ba6f51dfc800
msgid "The text of the action."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:11
# 3ac60430674448758de967f6dc6d9625
msgid "Either a QIcon or a file name. The file name is passed to the I() builtin, so you do not need to pass the full path to the images directory."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:14
# a16556295889418196cf466815cd626d
msgid "A string, a list of strings, None or False. If False, no keyboard shortcut is registered for this action. If None, a keyboard shortcut with no default keybinding is registered. String and list of strings register a shortcut with default keybinding as specified."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:18
# 24c87331220545a8b60e585534739cb8
msgid "A description for this action. Used to set tooltips."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:20
# 837b679054b04ff8b1931797f0747cde
msgid "A callable which is connected to the triggered signal of the created action."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:22
# ca784e6a60ab473f992bf8b2d937eeff
msgid "The test displayed to the user when customizing the keyboard shortcuts for this action. By default it is set to the value of ``text``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:12
# a4367b7b62864064904ce0775a90b7b9
msgid "A dictionary of the form ``{name : file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.genesis:1
# 2967fa4872d94cb28c01d9c63d4316a4
msgid "Setup this plugin. Only called once during initialization. self.gui is available. The action specified by :attr:`action_spec` is available as ``self.qaction``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:1
# c1f3e5da050042438801f130ecbb2d89
msgid "Called whenever the book list being displayed in calibre changes. Currently values for loc are: ``library, main, card and cardb``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:4
# 7b120d7e052f4e10ba3d6712ec887036
msgid "This method should enable/disable this action and its sub actions as appropriate for the location."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:1
# d676855b22714140babd9b6ae1ecc4af
msgid "Called whenever the current library is changed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:3
# 3253b6f07746404d8f255ce02fc9af3a
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
# 5e279a26a842442eae7a24257393932d
msgid "Called once per action when the layout of the main GUI is completed. If your action needs to make changes to the layout, they should be done here, rather than in :meth:`initialization_complete`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.initialization_complete:1
# 03b1539e1793405dbd8954a274bbf097
msgid "Called once per action when the initialization of the main GUI is completed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:1
# 72c6396051f94f618bed813b3d8cc160
msgid "Called once per plugin when the main GUI is in the process of shutting down. Release any used resources, but try not to block the shutdown for long periods of time."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:5
# 7a4d49372b2c4f108cbe89bae14aac81
msgid "False to halt the shutdown. You are responsible for telling the user why the shutdown was halted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.InterfaceActionBase.load_actual_plugin:1
# 96ef337a7a6f439b99f976df8d9224df
msgid "This method must return the actual interface action plugin object."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:174
# eb7ef0e7e270469eb4c764e88dde590f
msgid "Preferences Plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:1
# 237a5a7b06fa4f748aba5ae861b2cc5b
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:3
# 0e12f84ed64d4a119e4845259c47f25f
msgid "This plugin has only one important method :meth:`create_widget`. The various fields of the plugin control how it is categorized in the UI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.config_widget:1
# ce5ff5c7f7b84846abf32c8aa4508375
msgid "Import path to module that contains a class named ConfigWidget which implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category_order:1
# 3c57e65fb405410a89a30cfb0d7ec905
msgid "Where in the list of categories the :attr:`category` of this plugin should be."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.name_order:1
# 93ae8bec76054de49f60b67938536c7b
msgid "Where in the list of names in a category, the :attr:`gui_name` of this plugin should be"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category:1
# c1755d5741ff4bf7949a478004a48515
msgid "The category this plugin should be in"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_category:1
# 9098db021d4e481297faf92f4de76772
msgid "The category name displayed to the user for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_name:1
# 7156b24a74d34de1a483998fc984917e
msgid "The name displayed to the user for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.icon:1
# 0c2a5746f71e417189df251e1b45d814
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.description:1
# 0937b7615da0448eb2b7ba90ef5dbac9
msgid "The description used for tooltips and the like"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:1
# 81de3a7696404153baf2cc3fa799765e
msgid "Create and return the actual Qt widget used for setting this group of preferences. The widget must implement the :class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:5
# 7f26176236df43a59b1d60d65ca73eb1
msgid "The default implementation uses :attr:`config_widget` to instantiate the widget."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface:1
# f55eddc31e4b4b69988347aa307c97dc
msgid "This class defines the interface that all widgets displayed in the Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base class that implements this interface and defines various convenience methods as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
# 96b6a7f7614d46a68d3740af230ed1dc
msgid "This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
# 0af9025975d34fccafd6dd68dbd97e12
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
# 4d1b9cd162374ad284acbc3fd93fd4dc
msgid "The tooltip for the Restore to defaults button"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
# 106cb0366a3940869ad5d7ce3d440b2d
msgid "If True the Preferences dialog will not allow the user to set any more preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
# d75f9e922c214ac48dbc8c3112d210d3
msgid "Called once before the widget is displayed, should perform any necessary setup."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
# 88a03ec605614ff9ad5bc6826272e7df
msgid "The main calibre graphical user interface"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
# 60763be4526240d390b945a8aed7e3d8
msgid "Should set all config values to their initial values (the values stored in the config files)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
# fdd6c7abf5124579b016f060916b301a
msgid "Should set all config values to their defaults."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
# 87469a7d399c444a817b3af9c088ae19
msgid "Save any changed settings. Return True if the changes require a restart, False otherwise. Raise an :class:`AbortCommit` exception to indicate that an error occurred. You are responsible for giving the user feedback about what the error is and how to correct it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
# 4cfeeb9bdfb745ffb131556f7354cd57
msgid "Called once after this widget is committed. Responsible for causing the gui to reread any changed settings. Note that by default the GUI re-initializes various elements anyway, so most widgets won't need to use this method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:1
# 16edb132d97344f08ec2800c735e9299
msgid "Base class that contains code to easily add standard config widgets like checkboxes, combo boxes, text fields and so on. See the :meth:`register` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:5
# 3a5bd9655a3441b393cd33cc7f9750cf
msgid "This class automatically handles change notification, resetting to default, translation between gui objects and config objects, etc. for registered settings."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:9
# e0a8344a8dc64988b1d34e92ed2fc4e0
msgid "If your config widget inherits from this class but includes setting that are not registered, you should override the :class:`ConfigWidgetInterface` methods and call the base class methods inside the overrides."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:1
# d60755455d1c41919d77577f93d3db05
msgid "Register a setting."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:3
# 83e8737693494885aab7de156172458d
msgid "The setting name"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:4
# e345368f8aba40839f94562b7f632b20
msgid "The config object that reads/writes the setting"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:5
# 5aa7be9854524d5d84bfd181aa16c1f1
msgid "The name of the GUI object that presents an interface to change the setting. By default it is assumed to be ``'opt_' + name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:8
# 05250e2b46bf47aa8004d24ae25c3166
msgid "If this setting is a multiple choice (combobox) based setting, the list of choices. The list is a list of two element tuples of the form: ``[(gui name, value), ...]``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:11
# dd59780d998d44869dd1f5c12b22fabe
msgid "The class responsible for managing this setting. The default class handles almost all cases, so this param is rarely used."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:190
# e25ec07af5804dc0bf59a05bb51b5fcd
msgid "Viewer plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.type:1
# c69594c7f9ae45bfb7cda4d5ddfc71f3
msgid "These plugins are used to add functionality to the calibre viewer."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_fonts:1
# de039f9d306e41f183e3c43af0273c2e
msgid "This method is called once at viewer startup. It should load any fonts it wants to make available. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_javascript:1
# fb537be9b87247e79e28a7731b1f0012
msgid "This method is called every time a new HTML document is loaded in the viewer. Use it to load javascript libraries into the viewer. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.run_javascript:1
# f59b3b7fa6d54be084602981caa7682e
msgid "This method is called every time a document has finished loading. Use it in the same way as load_javascript()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_ui:1
# 2a252d2f45f24d3e966ac6e4275644ff
msgid "This method is called once when the viewer is created. Use it to make any customizations you want to the viewer's user interface. For example, you can modify the toolbars via ui.tool_bar and ui.tool_bar2."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_context_menu:1
# 4a6ba0417e614fc3bea15c918d58f3e6
msgid "This method is called every time the context (right-click) menu is shown. You can use it to customize the context menu. ``event`` is the context menu event and hit_test_result is the QWebHitTestResult for this event in the currently loaded document."
msgstr ""

