# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.28.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-15 09:00+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/plugins.rst:4
# a2c5c005f9dd4c108542e295a4c19611
msgid "API Documentation for plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:9
# 24eb2ca09f524464b532f182f31dc63e
msgid "Defines various abstract base classes that can be subclassed to create powerful plugins. The useful classes are:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:19
# e7602745d8624f8a901e7bb2a4ba75f4
msgid "Plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:1
# a12e5f7c987c4ef08033f60f1f93679a
msgid "A calibre plugin. Useful members include:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 5465960d0f434e6f876fa11407beec6d
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 661fe2dcad764bd18ccb734994cf6555
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# b407015b339345b2a4a21ee20e6d032e
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# f2b0de1f4f0d46ed88ea924887ef5d2c
msgid "by the user."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:9
# 1fc03f45afe54804b8b5ce9482c8d128
msgid "Methods that should be overridden in sub classes:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:11
# 8eb77d9a0f734782a8b399b2dd589227
msgid ":meth:`initialize`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:12
# ebea9bec9dc24885bcb87cd4bf73a477
msgid ":meth:`customization_help`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:14
# cb11c75b292246c5a7d36470d7e9f8c1
msgid "Useful methods:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:16
# 0cc16741e44747678f6e7b765dff1090
msgid ":meth:`temporary_file`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:17
# 063530b931d641ecbf0576889b9a3195
msgid ":meth:`__enter__`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:18
# e05d42ec03e04b90b1717a0f252c91bf
msgid ":meth:`load_resources`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.supported_platforms:1
# cdedaa79c81a49be93b6b2b7d82dc366
msgid "List of platforms this plugin works on. For example: ``['windows', 'osx', 'linux']``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.name:1
# 885206a1f4d741eaa5c9618f4378829f
msgid "The name of this plugin. You must set it something other than Trivial Plugin for it to work."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.version:1
# 5101bdb903134d56a6bef890c4812742
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.description:1
# 5584c356c6094e22b5403538b403b266
msgid "A short string describing what this plugin does"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.author:1
# 150f8c18f4fc46a2ae104756e85f9db4
msgid "The author of this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.priority:1
# 10b5d42960ec44d9aa65f0b377e26044
msgid "When more than one plugin exists for a filetype, the plugins are run in order of decreasing priority i.e. plugins with higher priority will be run first. The highest possible priority is ``sys.maxint``. Default priority is 1."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.minimum_calibre_version:1
# b2a6b3b592e94f58b8b034504db629b0
msgid "The earliest version of calibre this plugin requires"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.can_be_disabled:1
# 8505abcce29c4fbbbd4b1ce3072be0b8
msgid "If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.type:1
# 7c76f1850b914de9a9516330c48e72b3
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:1
# c285d4d8f3164d399652a6fc041a731b
msgid "Called once when calibre plugins are initialized.  Plugins are re-initialized every time a new plugin is added. Also note that if the plugin is run in a worker process, such as for adding books, then the plugin will be initialized for every new worker process."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:6
# 01d22fc0f79c4409839827c2966507cb
msgid "Perform any plugin specific initialization here, such as extracting resources from the plugin zip file. The path to the zip file is available as ``self.plugin_path``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:10
# 95ddfea9e93e4dc0a943c3af1e30793e
msgid "Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:1
# 5e6a2b9dd3304799bd7353398d27d9fe
msgid "Implement this method and :meth:`save_settings` in your plugin to use a custom configuration dialog, rather then relying on the simple string based default customization."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:5
# 2b825b0f475849348fc5fd0c38fa700b
msgid "This method, if implemented, must return a QWidget. The widget can have an optional method validate() that takes no arguments and is called immediately after the user clicks OK. Changes are applied if and only if the method returns True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:10
# 20efb998a6f3436989acbf3600f59dde
msgid "If for some reason you cannot perform the configuration at this time, return a tuple of two strings (message, details), these will be displayed as a warning dialog to the user and the process will be aborted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:1
# fc297d4443a041118e78bcdae15bf7e9
msgid "Save the settings specified by the user with config_widget."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:3
# 6ee30335532441cf9aaa00c235dc2509
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.do_user_config:1
# 66d8f6f9f6514914be22827d6cc43d02
msgid "This method shows a configuration dialog for this plugin. It returns True if the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:1
# 9d92a412a6c8460f9e303593edff82ea
# 02ed6db0bab54c0f9b7f99b03d6f044d
msgid "If this plugin comes in a ZIP file (user added plugin), this method will allow you to load resources from the ZIP file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:4
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:4
# 92b8e63862f14747b5cb9208794c17ef
# 99568687fb8b4aaaa33d272f9b682f52
msgid "For example to load an image::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:10
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:10
# ccc85d451c96493293a6b5079b9de306
# aec7e1b97d724ca1b8fe9491d6c6761f
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:12
# 316040e0ad844f39ab9361fe173f52f6
msgid "A dictionary of the form ``{name: file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:1
# 4bbefe2d3f98497abb11b010e1720445
msgid "Return a string giving help on how to customize this plugin. By default raise a :class:`NotImplementedError`, which indicates that the plugin does not require customization."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:5
# bdfd927083ee41c682b038266d2889ef
msgid "If you re-implement this method in your subclass, the user will be asked to enter a string as customization for this plugin. The customization string will be available as ``self.site_customization``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:10
# f696a9d949014252bcc5375c632e7649
msgid "Site customization could be anything, for example, the path to a needed binary on the user's computer."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:13
# a6322cd2bc7b41f882bd18e4fa41e6f6
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:1
# 2cbcf1614c70444f90539aff38631a5d
msgid "Return a file-like object that is a temporary file on the file system. This file will remain available even after being closed and will only be removed on interpreter shutdown. Use the ``name`` member of the returned object to access the full path to the created temporary file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:6
# dd43f1ccb6134b319a804f75301cfed3
msgid "The suffix that the temporary file will have."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.cli_main:1
# 29c6182da19e4ef49091dab93e72a82c
msgid "This method is the main entry point for your plugins command line interface. It is called when the user does: calibre-debug -r \"Plugin Name\". Any arguments passed are present in the args variable."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:28
# 4bf393ee8fee4a3bbd5e1076f022711b
msgid "FileTypePlugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 6a9d3f86168c4ecc81b28a1ab226ea12
# 3e4b2c53b90949cb82186dffd6ccef72
# dde9e774bc0341eb9f3ff3de6c6cfdd0
# 1b3e2a6703a545418adc5b459b9ceb54
# 8caaac43096a470fbcf665450862b1df
# 094d77dafcbf42d1b540518b61dcdef7
# 7f4c6f27457e4622b8288c2fd29efdb2
# 113de847b0fb4d00bf10816c4f0c5edd
# a68707fb50b54be8b12877fe14b4da4d
# b16c2c7719fd4405ba3007b0dd4133d4
# 73ee6320a6a744e2b4072e7f9e65de2f
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin:1
# 113a4f72b26b4073b3342b1cfc06453f
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.file_types:1
# 76c2ff9e470d4ac1b966490784d5beff
msgid "Set of file types for which this plugin should be run. For example: ``{'lit', 'mobi', 'prc'}``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_import:1
# abad3061011e4c93a8722ff006980778
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postimport:1
# 4ff4c8592e744bc6b7f6440074a2ab1a
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_preprocess:1
# 6dff2ac19a7241b8ba9f44d45c29d79c
msgid "If True, this plugin is run just before a conversion"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postprocess:1
# e58292de076c47a7970cdc99d7df86a3
msgid "If True, this plugin is run after conversion on the final file produced by the conversion output plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:1
# 6460deac586846bc9fe31ee0aa2547a6
msgid "Run the plugin. Must be implemented in subclasses. It should perform whatever modifications are required on the ebook and return the absolute path to the modified ebook. If no modifications are needed, it should return the path to the original ebook. If an error is encountered it should raise an Exception. The default implementation simply return the path to the original ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:9
# eb4c40c588e746fc8a17006a557ac770
msgid "The modified ebook file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:12
# 9926bc38633b4c86b8d9cbf7abc52e0c
msgid "Absolute path to the ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:14
# 436c8f0c4cee401fa476273c5c6ebf15
msgid "Absolute path to the modified ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:1
# 3249e95718d74e58b6931913bd0886cc
msgid "Called post import, i.e., after the book file has been added to the database."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:3
# 2217dadb571d44dbb56b3dc80a59e65a
msgid "Database id of the added book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:4
# 4f9b93e836b64a98bbaf835856dd66bc
msgid "The file type of the book that was added."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:5
# ab63eede7fc94abb88febb1877753862
msgid "Library database."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:39
# aab4cc5af2d64f90be43d2a52fc70a2b
msgid "Metadata plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin:1
# b9ffbefb3677443cb22b290b6b1cb456
# a72857a2bd4e482ca416f3318f5a6d00
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.file_types:1
# 30453ca1297447a89b3dd3de8fffb5ab
# 09543c9a35954b5fae4d987cdb77a2b0
msgid "Set of file types for which this plugin should be run For example: ``set(['lit', 'mobi', 'prc'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.get_metadata:1
# a8fda5b7fef84f17a872226123ec143d
msgid "Return metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :return: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.set_metadata:1
# cf11c974640741ecbc92c2c8ea599927
msgid "Set metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :param mi: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:54
# 9764006561404eb7add1f0544bac91d0
msgid "Catalog plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin:1
# c8e5b2be5b9c4a4fab8ca1523223f74e
msgid "A plugin that implements a catalog generator."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.file_types:1
# edc1929d5fe8496680f4e981d3df3541
msgid "Output file type for which this plugin should be run For example: 'epub' or 'xml'"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.cli_options:1
# d7dedfce1aed40bc9d5dd6b0651cbb8c
msgid "CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.initialize:1
# 2478f856cf3e460c8a3b5095b5266f3f
msgid "If plugin is not a built-in, copy the plugin's .ui and .py files from the zip file to $TMPDIR. Tab will be dynamically generated and added to the Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:1
# b097db30ccfc49b8b095226c57ddeab3
msgid "Run the plugin. Must be implemented in subclasses. It should generate the catalog in the format specified in file_types, returning the absolute path to the generated catalog file. If an error is encountered it should raise an Exception."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:7
# 8fbb6a3d05dd4c0ca06ec45ed51aa358
msgid "The generated catalog file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:10
# 1d4f00cca7e84a5a90c1495cf7f58eec
msgid "Absolute path to the generated catalog file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:11
# 49b3521a910d4a4cbf1744c58b78fbdf
msgid "A dictionary of keyword arguments"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:12
# 098d3e39aed64a0cab7138d160347fa3
msgid "A LibraryDatabase2 object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:64
# 093f4fa623c843719c909bdf62b1e3e3
msgid "Metadata download plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.capabilities:1
# 7863fac2a5444adc885dc4f6bb6c15ae
msgid "Set of capabilities supported by this plugin. Useful capabilities are: 'identify', 'cover'"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.touched_fields:1
# 3091ced8a2b34275bf5490f534ed2276
msgid "List of metadata fields that can potentially be download by this plugin during the identify phase"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
# 912da32cb680479caec0117301278677
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
# 7c1fcf4ff66945d3b08db4d413a50a8d
msgid "Setting this to True means that the browser object will add Accept-Encoding: gzip to all requests. This can speedup downloads but make sure that the source actually supports gzip transfer encoding correctly first"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
# 8aed810fc0e440948721410ac4c49e86
msgid "Cached cover URLs can sometimes be unreliable (i.e. the download could fail or the returned image could be bogus. If that is often the case with this source set to False"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.options:1
# 1a940661fb164af1bf3ffec444d6a7c1
msgid "A list of :class:`Option` objects. They will be used to automatically construct the configuration widget for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.config_help_message:1
# f0a12dd25ea641499e9144a5de893d12
msgid "A string that is displayed at the top of the config widget for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
# aa0263b3172643728e2e0200f56f8a92
msgid "If True this source can return multiple covers for a given query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
# 1acd55143e104542a61c3644e2c9c38d
msgid "If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.prefer_results_with_isbn:1
# e2162932706f4fd9a1c94460870344a5
msgid "If set to True, and this source returns multiple results for a query, some of which have ISBNs and some of which do not, the results without ISBNs will be ignored"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.is_configured:1
# 9b1a6671b7224167afe9fc03f643d4de
msgid "Return False if your plugin needs to be configured before it can be used. For example, it might need a username/password/API key."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
# 023e58f59957425db109de6070a1aa1a
msgid "Take a list of authors and return a list of tokens useful for an AND search query. This function tries to return tokens in first name middle names last name order, by assuming that if a comma is in the author name, the name is in lastname, other names form."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
# 87adbdc72d8044f2a3041974ce1da07e
msgid "Take a title and return a list of tokens useful for an AND search query. Excludes connectives(optionally) and punctuation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
# 0e947afe4f764262bb074f02b7eb769e
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.test_fields:1
# 14cac5daf91c4b24bfe6bfae5bae4bc1
msgid "Return the first field from self.touched_fields that is null on the mi object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
# e47b217cffa445ffac8e8dd971e06e3a
msgid "Call this method in your plugin's identify method to normalize metadata before putting the Metadata object into result_queue. You can of course, use a custom algorithm suited to your metadata source."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
# 5aa7912b6336410485e120ba5241d5fb
msgid "Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, identifier_value, URL). The URL is the URL for the book identified by identifiers at this source. identifier_type, identifier_value specify the identifier corresponding to the URL. This URL must be browseable to by a human using a browser. It is meant to provide a clickable link for the user to easily visit the books page at this source. If no URL is found, return None. This method must be quick, and consistent, so only implement it if it is possible to construct the URL from a known scheme given identifiers."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
# 3b39803fb2b145b981f1012bb663acb7
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_urls:1
# 9ddd8733c1b54401843e6219846adb52
msgid "Override this method if you would like to return multiple urls for this book. Return a list of 3-tuples. By default this method simply calls :func:`get_book_url`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
# e06eb7f6ba6142b1804847f1dd8068ea
msgid "Return cached cover URL for the book identified by the identifiers dict or None if no such URL exists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
# 9e2d46f1f074452e9b6306948e36c09a
msgid "Note that this method must only return validated URLs, i.e. not URLS that could result in a generic cover image or a not found error."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
# b6256620305242ac9e854c803cf053e1
msgid "Return a function that is used to generate a key that can sort Metadata objects by their relevance given a search query (title, authors, identifiers)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
# cca2eb1499c242629fae0c69a401fb79
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
# 94430f8508a74e92a67730767230befc
msgid "For details on the default algorithm see :class:`InternalMetadataCompareKeyGen`. Re-implement this function in your plugin if the default algorithm is not suitable."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:1
# c3acb2ce96a444439fbbef012050bb12
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:3
# 580aa351650349028f149da8742e1140
msgid "If identifiers(s) are specified and no match is found and this metadata source does not store all related identifiers (for example, all ISBNs of a book), this method should retry with just the title and author (assuming they were specified)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:8
# ed7dd534d7c54555aad11cb67f573b45
msgid "If this metadata source also provides covers, the URL to the cover should be cached so that a subsequent call to the get covers API with the same ISBN/special identifier does not need to get the cover URL again. Use the caching API for this."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:13
# e292487f99894d75b78fc39afc6f2cfa
msgid "Every Metadata object put into result_queue by this method must have a `source_relevance` attribute that is an integer indicating the order in which the results were returned by the metadata source for this query. This integer will be used by :meth:`compare_identify_results`. If the order is unimportant, set it to zero for every result."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:19
# 648f749e14c2465b84e36fc01277db16
msgid "Make sure that any cover/isbn mapping information is cached before the Metadata object is put into result_queue."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:22
# 9b1688c6f49b471a9169b07082c808fe
msgid "A log object, use it to output debugging information/errors"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:23
# a0306cbff34d4b28b4dd42f08c378200
msgid "A result Queue, results should be put into it. Each result is a Metadata object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:25
# 82b65d95de804498a280d659636b43e0
msgid "If abort.is_set() returns True, abort further processing and return as soon as possible"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:27
# a0f5067b27ee491e8f456f0a2fdde932
msgid "The title of the book, can be None"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:28
# f76efe658286430d9aebfae36ebb0a88
msgid "A list of authors of the book, can be None"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:29
# 887325ac2d1e480d90978bee4a22f14f
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:31
# 2da93a1ab4fe4523b4bddacb2053c34f
msgid "Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:33
# b41586c41988447895d67bd1411bd2b6
msgid "None if no errors occurred, otherwise a unicode representation of the error suitable for showing to the user"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:1
# 4de2c5a3a98f42e09300b0f2a5370644
msgid "Download a cover and put it into result_queue. The parameters all have the same meaning as for :meth:`identify`. Put (self, cover_data) into result_queue."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:5
# 0713ba8636d444a595602d5321ffef33
msgid "This method should use cached cover URLs for efficiency whenever possible. When cached data is not present, most plugins simply call identify and use its results."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:9
# e547f40dad624341b16e29c416a8745a
msgid "If the parameter get_best_cover is True and this plugin can get multiple covers, it should only get the \"best\" one."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
# 32222966688a4dff811e0de113287ca1
msgid "Generate a sort key for comparison of the relevance of Metadata objects, given a search query. This is used only to compare results from the same metadata source, not across different sources."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
# 8aad13985992471b9c35f526b1ac98c9
msgid "The sort key ensures that an ascending order sort is a sort by order of decreasing relevance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
# 6f8b4dbb3beb40d18d66b463a6061c63
msgid "The algorithm is:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
# bbaf7b2de500476399069da7a041242e
msgid "Prefer results that have at least one identifier the same as for the query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
# ea5e41019c0547dd9ef0d2adc7acf8ca
msgid "Prefer results with a cached cover URL"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
# 0cc0b3546a834d5f8be2a95feb162d8a
msgid "Prefer results with all available fields filled in"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
# 0f6c911ca13146e6b5bf5d1268a8af7e
msgid "Prefer results with the same language as the current user interface language"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
# a93271777f114fbea96b98d92de5a653
msgid "Prefer results that are an exact title match to the query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
# 554779b4db9e4982b07b251e41d8d496
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
# 8ca4414da07b4fb8bb6914c5e72068a1
msgid "Use the relevance of the result as reported by the metadata source's search"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:17
# f6384c63cd8e44cfbf78d6f68eb3c835
msgid "engine"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:76
# af3df1067af14414a6b63a2841557bef
msgid "Conversion plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin:1
# eca4e32d4d9e4218b5bf900425276497
msgid "InputFormatPlugins are responsible for converting a document into HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.file_types:1
# 5446bc11356648a084c464a223818420
msgid "Set of file types for which this plugin should be run For example: ``set(['azw', 'mobi', 'prc'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
# e08fb4fab8734e8d9fcef7bf3761c68f
msgid "If True, this input plugin generates a collection of images, one per HTML file. This can be set dynamically, in the convert method if the input files can be both image collections and non-image collections. If you set this to True, you must implement the get_images() method that returns a list of images."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.core_usage:1
# db11e03ceeda4e7ca0d6d37bc3f50869
msgid "Number of CPU cores used by this plugin A value of -1 means that it uses all available cores"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.for_viewer:1
# 9cb543c57f864f99a1498b908484a75f
msgid "If set to True, the input plugin will perform special processing to make its output suitable for viewing"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.output_encoding:1
# 833b2f9d3b374d9f96351548c1ed0810
msgid "The encoding that this input plugin creates files in. A value of None means that the encoding is undefined and must be detected individually"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.common_options:1
# 1ab2dfb7b5544fd4a293fd580334a6fb
# 79a40fabe1f44b5bbeb18cc26bfe769f
msgid "Options shared by all Input format plugins. Do not override in sub-classes. Use :attr:`options` instead. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.options:1
# 56b1d11b2189438abdb4f7227d0c2df1
# 07a955caf2164adfb4d3421b614a0f51
msgid "Options to customize the behavior of this plugin. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.recommendations:1
# 69c270907ceb4ff2bc3071a00934ad27
# 0af04bff7f4b4135992e0fb3fc662e5c
msgid "A set of 3-tuples of the form (option_name, recommended_value, recommendation_level)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.get_images:1
# ebd197cc89124191b0528a254b8a23ce
msgid "Return a list of absolute paths to the images, if this input plugin represents an image collection. The list of images is in the same order as the spine and the TOC."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:1
# 1072fee749c8487f9f8ff96e7ae5d6e4
msgid "This method must be implemented in sub-classes. It must return the path to the created OPF file or an :class:`OEBBook` instance. All output should be contained in the current directory. If this plugin creates files outside the current directory they must be deleted/marked for deletion before this method returns."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:8
# 3a6c7beb4c7e47f5912ffc1ce5a1b69c
msgid "A file like object that contains the input file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:9
# d908e4c08dd94103be5b93fd93ed49fa
msgid "Options to customize the conversion process. Guaranteed to have attributes corresponding to all the options declared by this plugin. In addition, it will have a verbose attribute that takes integral values from zero upwards. Higher numbers mean be more verbose. Another useful attribute is ``input_profile`` that is an instance of :class:`calibre.customize.profiles.InputProfile`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:17
# 9c9200711e82456da7ec7c1563a36e99
msgid "The extension (without the .) of the input file. It is guaranteed to be one of the `file_types` supported by this plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:20
# 32c7e2cd2b8f4f2eb71bcccdbede04c5
msgid "A :class:`calibre.utils.logging.Log` object. All output should use this object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:22
# b729576427bf4c0db5330d6e8e487e2a
msgid "A dictionary of various information that the input plugin can get easily that would speed up the subsequent stages of the conversion."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
# 29f9351d2445405f828e4d085c180181
msgid "Called to allow the input plugin to perform postprocessing after the book has been parsed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.specialize:1
# 15d8d992d29044d39eeea23a9aa227de
msgid "Called to allow the input plugin to specialize the parsed book for a particular output format. Called after postprocess_book and before any transforms are performed on the parsed book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
# ad4e97f706e64ec1a77e60effa15f269
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builting input plugins for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:1
# 662a47adc44d468ead0834b38ffb5dc3
msgid "OutputFormatPlugins are responsible for converting an OEB document (OPF+HTML) into an output ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:4
# 23d397bd3abd46bcb1be792219c7d51a
msgid "The OEB document can be assumed to be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.file_type:1
# 94cd768370114b8780976cd1e9b75ea3
msgid "The file type (extension without leading period) that this plugin outputs"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:1
# fb9e1ba0ffac4d01af75640f9c473775
msgid "Render the contents of `oeb_book` (which is an instance of :class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:4
# 0e12386222ab4a3982e707e599b377dc
msgid "Either a file like object or a string. If it is a string it is the path to a directory that may or may not exist. The output plugin should write its output into that directory. If it is a file like object, the output plugin should write its output into the file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:8
# 20df608a654646fe9ba0396d4ec0e530
msgid "The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:10
# 4f6bb24bde144d24af215a9be59c26c9
msgid "Conversion options. Guaranteed to have attributes corresponding to the OptionRecommendations of this plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:12
# beb59b28f18a432baeeba014b6ad2ad2
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
# 725e3d4f7fb54b3dbcd90d2fdb9d76fd
msgid "Can be used to make changes to the css during the CSS flattening process."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
# ade82ba570114bf49622d14c9425214d
msgid "The item (HTML file) being processed"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
# 9b733bb18d4746f78421372cbd27952a
msgid "A Stylizer object containing the flattened styles for item. You can get the style for any element by stylizer.style(element)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
# 58cc32c5527f4599bb741e78ba90e9e5
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builtin output plugins for examples."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:91
# 7e28a918c36c40bab14dd23546b23c10
msgid "Device Drivers"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:95
# b9346d827cff48f5bc3bc9ab9ac68853
msgid "The base class for all device drivers is :class:`DevicePlugin`. However, if your device exposes itself as a USBMS drive to the operating system, you should use the USBMS class instead as it implements all the logic needed to support these kinds of devices."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin:1
# 5c9ef94508be4f0284222ea051e33221
msgid "Defines the interface that should be implemented by backends that communicate with an ebook reader."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.FORMATS:1
# 8b257d4a595c48c5ac9d18d7c1ac9e48
msgid "Ordered list of supported formats"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VENDOR_ID:1
# 72172ae6ed6645f5ae2f6e9ec8a458c3
msgid "VENDOR_ID can be either an integer, a list of integers or a dictionary If it is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
# 9bf1f584b2d04138bf0fd3c906f7352c
msgid "An integer or a list of integers"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.BCD:1
# f55e5c888a094f499cfcfea0226e6441
msgid "BCD can be either None to not distinguish between devices based on BCD, or it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
# f95ad6b1b82a42dc8a0c93c289c20f95
msgid "Height for thumbnails on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
# bf422fdadfc24fd8a1bce8b2eb4fc700
msgid "Width for thumbnails on the device. Setting this will force thumbnails to this size, not preserving aspect ratio. If it is not set, then the aspect ratio will be preserved and the thumbnail will be no higher than THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 to have better quality thumbnails with fewer compression artifacts. Of course, the thumbnails get larger as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
# 04172ab6a5f04361924a2a0c1a974c2d
msgid "Set this to True if the device supports updating cover thumbnails during sync_booklists. Setting it to true will ask device.py to refresh the cover thumbnails during book matching"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
# 8fde91478f42493eb028fff7bea2f7ce
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
# fd51295f101b432395cf60429bc11aa8
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.path_sep:1
# 0de8c8890b0d45cb958e18c0e05a157f
msgid "Path separator for paths to books on device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.icon:1
# 67ac03ef7fb64b3094e5212aa1a3c842
msgid "Icon for this device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
# ef8fa5526b0f48828e2d6434e3b54528
msgid "GUI displays this as a message if not None. Useful if opening can take a long time"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
# af38d81c52ad4d9da3e3a9e2c12144e3
msgid "Set of extensions that are \"virtual books\" on the device and therefore cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
# a6c89228753146e9acca01b4c5b3d4d8
msgid "Whether to nuke comments in the copy of the book sent to the device. If not None this should be short string that the comments will be replaced by."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
# 681119cc53d94d57ba4e74ea701afda0
msgid "If True indicates that  this driver completely manages device detection, ejecting and so forth. If you set this to True, you *must* implement the detect_managed_devices and debug_managed_device_detection methods. A driver with this set to true is responsible for detection of devices, managing a blacklist of devices, a list of ejected devices and so forth. calibre will periodically call the detect_managed_devices() method and if it returns a detected device, calibre will call open(). open() will be called every time a device is returned even is previous calls to open() failed, therefore the driver must maintain its own blacklist of failed devices. Similarly, when ejecting, calibre will call eject() and then assuming the next call to detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
# cbb4f0f3e70c46bd9800b65c61b413ef
msgid "If set the True, calibre will call the :meth:`get_driveinfo()` method after the books lists have been loaded to get the driveinfo."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
# 78ab9bbf98d2456da238a3e9b1a8641f
msgid "If set to True, calibre will ask the user if they want to manage the device with calibre, the first time it is detected. If you set this to True you must implement :meth:`get_device_uid()` and :meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` and :meth:`set_user_blacklisted_devices`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
# bcb7d54922d5411f9a202a22bc9b7945
msgid "Set this to a dictionary of the form {'title':title, 'msg':msg, 'det_msg':detailed_msg} to have calibre popup a message to the user after some callbacks are run (currently only upload_books). Be careful to not spam the user with too many messages. This variable is checked after *every* callback, so only set it when you really need to."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:1
# 92c58519a46e44b5a2f153dc709bb839
msgid "Return True, device_info if a device handled by this plugin is currently connected."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:3
# 0dbc2ae126114c81ab595bad1c593cdb
msgid "List of devices currently connected"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
# 0c69ccbc75294f76bcd6f9f3361e7f31
# 088c50a80bd640e89c594ad274d0d557
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:3
# 069f9a2b48e94db98aa5d126059773f1
msgid "Scan for devices that this driver can handle. Should return a device object if a device is found. This object will be passed to the open() method as the connected_device. If no device is found, return None. The returned object can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:9
# 17171783417a455c832801a2ce477f0c
msgid "This method is called periodically by the GUI, so make sure it is not too resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:13
# 806229dc379a4371af88c31147baadec
msgid "Set of USB devices found on the system."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:15
# c8faf3def3044a8b97dd506cea343aaf
msgid "If True and the driver uses a cache to prevent repeated scanning, the cache must be flushed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
# 0d85ecb9d65f4e568c9f2c68822349b1
msgid "Should write information about the devices detected on the system to output, which is a file like object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
# 7b6d7b70e96f43bc94b588015a6b443f
msgid "Should return True if a device was detected and successfully opened, otherwise False."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:1
# fc7c01961fa1443faa9446382bd44d1f
msgid "The key to unlock the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:2
# badd4ed400bc4cedbd4a1c1fec5947e9
msgid "If true the packet stream to/from the device is logged"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:3
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:3
# 3ffc4af1eaf949d98478000cc52db98c
# d733e3b6b5644907946cedcdddd63cef
msgid "Function that is called with a % progress (number between 0 and 100) for various tasks If it is called with -1 that means that the task does not have any progress information"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:7
# 2a288631abff42d6a3412f0a5705cf42
msgid "Device information from the device scanner"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:1
# 96a23c5bd26f4d90b501c6a51a46b08f
msgid "Optional method to perform further checks on a device to see if this driver is capable of handling it. If it is not it should return False. This method is only called after the vendor, product ids and the bcd have matched, so it can do some relatively time intensive checks. The default implementation returns True. This method is called only on windows. See also :meth:`can_handle`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:8
# 893fa70a92304ee094a4799676564880
msgid "On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, bcd)``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:1
# b2c7202d29bd4c2eb38fe1b96b619011
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:3
# 76c85af181584ad6b28e96a97d814044
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:1
# 13fc67edcca9475ab8dea8767d03d32f
msgid "Perform any device specific initialization. Called after the device is detected but before any other functions that communicate with the device. For example: For devices that present themselves as USB Mass storage devices, this method would be responsible for mounting the device or if the device has been automounted, for finding out where it has been mounted. The method :meth:`calibre.devices.usbms.device.Device.open` has an implementation of this function that should serve as a good example for USB Mass storage devices."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:11
# 86efa67802854ade93d78bea6bcd9cdc
msgid "This method can raise an OpenFeedback exception to display a message to the user."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:14
# eefc943f01bc46d0bd0d0da194401f2f
msgid "The device that we are trying to open. It is a tuple of (vendor id, product id, bcd, manufacturer name, product name, device serial number). However, some devices have no serial number and on windows only the first three fields are present, the rest are None."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:20
# d0797703e1cf42df8ab726dadd01da96
msgid "The UUID of the current calibre library. Can be None if there is no library (for example when used from the command line)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:1
# 374f83d72e3a4857b4185a198feae3f7
msgid "Un-mount / eject the device from the OS. This does not check if there are pending GUI jobs that need to communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:4
# ca526e974b674904b7b51728b72ffa37
msgid "NOTE: That this method may not be called on the same thread as the rest of the device methods."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
# 48f3077f5a444639b3e32b1ef6451fb8
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:1
# 78c2e939e30b4921b3356d10bd3f6377
msgid "Set a function to report progress information."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:1
# 7cad0e10f6fe4147bd2c81a07b9d676f
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:3
# ee89f558955b4c83b233adca615284cf
msgid "(device name, device version, software version on device, mime type) The tuple can optionally have a fifth element, which is a drive information dictionary. See usbms.driver for an example."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_driveinfo:1
# edfd9408cf7f4bf59247e0f709288ad9
msgid "Return the driveinfo dictionary. Usually called from get_device_information(), but if loading the driveinfo is slow for this driver, then it should set SLOW_DRIVEINFO. In this case, this method will be called by calibre after the book lists have been loaded. Note that it is not called on the device thread, so the driver should cache the drive info in the books() method and this function should return the cached data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.card_prefix:1
# 420e15dd11af44f4bcaa74a99aac1ce3
msgid "Return a 2 element list of the prefix to paths on the cards. If no card is present None is set for the card's prefix. E.G. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 7c7ac6895c614f67b3386ffea20a854b
msgid "Get total space available on the mountpoints:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:2
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:2
# 5cc281427c4245e598b5b421e2399c20
# 3723f5651d9245b1902a62785b6c043c
msgid "Main memory"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:3
# e3f0b2ce36184829850bfe7c67266958
msgid "Memory Card A"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 7532c5fce8834d2cb854179762240488
msgid "Memory Card B"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:6
# f6428b5cb3794c4a9202958d96bf2d90
msgid "A 3 element list with total space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return 0."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 07d5cfe5910c46baa85b0b33165d44bb
msgid "Get free space available on the mountpoints:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:3
# 98c3880ec896455a9b011a2d0c2d0b74
msgid "Card A"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 2221f57b99f14c16843223d786385130
msgid "Card B"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:6
# e9cc2b348b94459e957b3d509a3da032
msgid "A 3 element list with free space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return -1."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:1
# 91d4554cdcd44d069a88ba50aca14afd
msgid "Return a list of ebooks on the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:3
# 0fc93003c7264d7eaa1b3e50996d5445
msgid "If 'carda' or 'cardb' return a list of ebooks on the specific storage card, otherwise return list of ebooks in main memory of device. If a card is specified and no books are on the card return empty list."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:8
# ced893ebb3af4636b35dfaa4847fb724
msgid "A BookList."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:1
# f8b9a85b629a4708adcb578ff3596b16
msgid "Upload a list of books to the device. If a file already exists on the device, it should be replaced. This method should raise a :class:`FreeSpaceError` if there is not enough free space on the device. The text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is not None otherwise it must contain the word \"memory\"."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:7
# 4f1417e05ae34adeb15e57eb9944d2f9
msgid "A list of paths"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:8
# 61412e2dcf9a4e4c9579219d6a61113c
msgid "A list of file names that the books should have once uploaded to the device. len(names) == len(files)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:10
# da838b6ec50c4ecfa4bab001aeeb9650
msgid "If not None, it is a list of :class:`Metadata` objects. The idea is to use the metadata to determine where on the device to put the book. len(metadata) == len(files). Apart from the regular cover (path to cover), there may also be a thumbnail attribute, which should be used in preference. The thumbnail attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:17
# ad9e4db9bd8b49dca5b4e9d83cbb7927
msgid "A list of 3-element tuples. The list is meant to be passed to :meth:`add_books_to_metadata`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
# 41ae71596ca24b7aa8c19b31c65b0922
msgid "Add locations to the booklists. This function must not communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
# 84135178dde24d90a262d34141ff148d
msgid "Result of a call to L{upload_books}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
# d811fb62f0ad4c7cb2ac58fc45f44981
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:3
# 694753f71800487bb5133da2a8138b3a
# dc3e8fb70c044beea5456701d2136a62
# fd57edeb4736475686d17373975275ee
msgid "A tuple containing the result of calls to (:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.delete_books:1
# 79b5abe35df84d588692f9996e9e7b99
msgid "Delete books at paths on device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
# 79a5ef94d2e146308a0e7edb9723def4
msgid "Remove books from the metadata list. This function must not communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
# ec12d0280b0f4fae890a811bf6cffb04
msgid "paths to books on the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:1
# a9cdeac223064faaaf6db654daadd24d
msgid "Update metadata on device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:1
# cefc6021def8473292fc4f6c226856ba
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:3
# a683aaa6acce412bb03d89c6ec91c54d
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.config_widget:1
# d635b2a8463d44e89de6ea6bcabf746e
msgid "Should return a QWidget. The QWidget contains the settings for the device interface"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.save_settings:1
# 0807a99faf514ad8bac3d3d01940042d
msgid "Should save settings to disk. Takes the widget created in :meth:`config_widget` and saves all settings to disk."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.settings:1
# 87a7440d329b48e5a8f4e568e6a036e0
msgid "Should return an opts object. The opts object should have at least one attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:1
# 629bacd5dcd047ff96081433fd7cdcee
msgid "provide the driver the current set of plugboards and a function to select a specific plugboard. This method is called immediately before add_books and sync_booklists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 90967efbe22f4cafbfbb908e3b0c414c
msgid "pb_func is a callable with the following signature::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 32050e67744a4e1cadb1dc3c95cf6898
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:8
# 922044bce1fc485fbfe068a3dce7c6bd
msgid "You give it the current device name (either the class name or DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or 'device_db'), and the plugboards (you were given those by set_plugboards, the same place you got this method)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:13
# 3920e675056741faabbfc6bb7976b018
msgid "None or a single plugboard instance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
# 335776d7e5d740138f53bbd1d4f43f91
msgid "Set the device name in the driveinfo file to 'name'. This setting will persist until the file is re-created or the name is changed again."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
# 96b85349808e4d53bd57c22ab409bfeb
msgid "Non-disk devices should implement this method based on the location codes returned by the get_device_information() method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:1
# 5c772b239d164f418b95fe4ade3fd4ce
msgid "Given a list of paths, returns another list of paths. These paths point to addable versions of the books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:4
# b7a2363fa11048aca0a166675d64ca1e
msgid "If there is an error preparing a book, then instead of a path, the position in the returned list for that book should be a three tuple: (original_path, the exception instance, traceback)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.startup:1
# cf43e4bb5d304e9c92a18f4544cd723d
msgid "Called when calibre is is starting the device. Do any initialization required. Note that multiple instances of the class can be instantiated, and thus __init__ can be called multiple times, but only one instance will have this method called. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.shutdown:1
# cb8eedaed9f5476894e5eb1724da2e9b
msgid "Called when calibre is shutting down, either for good or in preparation to restart. Do any cleanup required. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_uid:1
# 19e47d774a454e25ba5c93445b75a8df
msgid "Must return a unique id for the currently connected device (this is called immediately after a successful call to open()). You must implement this method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ignore_connected_device:1
# 97f0798127894476a069e304ee2b0929
msgid "Should ignore the device identified by uid (the result of a call to get_device_uid()) in the future. You must implement this method if you set ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately after open(), so if open() caches some state, the driver should reset that state."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
# 6c23dc379f424e738d4ef6c42e108950
msgid "Return map of device uid to friendly name for all devices that the user has asked to be ignored."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
# bc52b50868884f0d881d3a3b02290522
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
# 1774103aa0cd426cbb23a0a8eecfa702
msgid "Implement this method if your device wants to override a particular preference. You must ensure that all call sites that want a preference that can be overridden use device_prefs['something'] instead of prefs['something']. Your method should call device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: metadata management (prefs['manage_device_metadata'])"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_library_info:1
# bae770eb84ca4e8cb7093fbe2ca06fee
msgid "Implement this method if you want information about the current calibre library. This method is called at startup and when the calibre library changes while connected."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
# ca2f68d755084840854a47a0f8e3f57f
msgid "Called by the device manager when starting plugins. If this method returns a string, then a) it supports the device manager's dynamic control interface, and b) that name is to be used when talking to the plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:4
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:3
# ac37e49ba3a54697ba76886d19b343b5
# e706a85008f448a48bae1dc08ad2103d
# fcd324d0a62f48dfa199296c46d4baf8
# 6d9dd274f23743cd86b3f6b99be6f97f
# 092aa3ed88b942d0b52c9ee366173c49
# bd9033337e1e44c190a2367dcc9e0f8f
msgid "This method can be called on the GUI thread. A driver that implements this method must be thread safe."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:1
# 058b2ff4537841dc9de184323083574d
msgid "This method is called to start the plugin. The plugin should begin to accept device connections however it does that. If the plugin is already accepting connections, then do nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:1
# 06bda8afd09944dc93354418498ac712
msgid "This method is called to stop the plugin. The plugin should no longer accept connections, and should cleanup behind itself. It is likely that this method should call shutdown. If the plugin is already not accepting connections, then do nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:1
# 4467c3cf3d554c7e9e21af33f102c48f
msgid "Return the value of the option indicated by opt_string. This method can be called when the plugin is not started. Return None if the option does not exist."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:1
# d9f2d04e8b364aadbf3aa944222eb86b
msgid "Set the value of the option indicated by opt_string. This method can be called when the plugin is not started."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:1
# 171eb47e444e489ea90df812bc8f8cc7
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:1
# c3908e26266748a596b5d48cc0501f64
msgid "Called during book matching when a book on the device is matched with a book in calibre's db. The method is responsible for syncronizing data from the device to calibre's db (if needed)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:5
# 7ef039faf3564043a1cc875bb5b15f6c
msgid "The method must return a two-value tuple. The first value is a set of calibre book ids changed if calibre's database was changed or None if the database was not changed. If the first value is an empty set then the metadata for the book on the device is updated with calibre's metadata and given back to the device, but no GUI refresh of that book is done. This is useful when the calibre data is correct but must be sent to the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:13
# 3b4d9cfb143a4d97af305641185dd7ae
msgid "The second value is itself a 2-value tuple. The first value in the tuple specifies whether a book format should be sent to the device. The intent is to permit verifying that the book on the device is the same as the book in calibre. This value must be None if no book is to be sent, otherwise return the base file name on the device (a string like foobar.epub). Be sure to include the extension in the name. The device subsystem will construct a send_books job for all books with not- None returned values. Note: other than to later retrieve the extension, the name is ignored in cases where the device uses a template to generate the file name, which most do. The second value in the returned tuple indicated whether the format is future-dated. Return True if it is, otherwise return False. Calibre will display a dialog to the user listing all future dated books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:27
# 51a0b0cefd004db282f164b12fc44ef7
msgid "Extremely important: this method is called on the GUI thread. It must be threadsafe with respect to the device manager's thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:30
# 38a07a4da16b43a0a757db6a18b337f8
msgid "book_id: the calibre id for the book in the database. book_metadata: the Metadata object for the book coming from the device. first_call: True if this is the first call during a sync, False otherwise"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# c7a1a1a6d0b14db594dbefa58e4f38e2
msgid "Bases: :class:`list`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:1
# ae9469dbba2b461fab093296f7a51687
msgid "A list of books. Each Book object must have the fields"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:3
# 4739313963734fdaadb02c4e276b4723
msgid "title"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:4
# 70a49f36a8814333babbad282263f42c
msgid "authors"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:5
# b9895eabd1674cf39f60d588cef5cd16
msgid "size (file size of the book)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:6
# b40ddba966474c6e9b85a591b1e8c4d3
msgid "datetime (a UTC time tuple)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:7
# 50b35a0a16644097b57927f5f1ceb715
msgid "path (path on the device to the book)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:8
# abc5edf0502845b6ad7a52f62ad2c6dc
msgid "thumbnail (can be None) thumbnail is either a str/bytes object with the image data or it should have an attribute image_path that stores an absolute (platform native) path to the image"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:11
# b94ab34acd1f4adea4e37ba07df4fde7
msgid "tags (a list of strings, can be empty)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.supports_collections:1
# f61ef391e7f04d5a841a72c4c21aebbc
msgid "Return True if the device supports collections for this book list."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.add_book:1
# 993007f2d89d43efa4419f00c521e595
msgid "Add the book to the booklist. Intent is to maintain any device-internal metadata. Return True if booklists must be sync'ed"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.remove_book:1
# 9458cf2f532b4d0fb89cf20f43f2df78
msgid "Remove a book from the booklist. Correct any device metadata at the same time"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:1
# 42c21e6d0e0f4ea0bef4c6e82f5c001b
msgid "Return a dictionary of collections created from collection_attributes. Each entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:5
# 49f8b261e6744691850888e32c8577cc
msgid "The list of books is sorted by book title, except for collections created from series, in which case series_index is used."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:8
# eb604e8235ba468b80a6ff2bd1f45f67
msgid "A list of attributes of the Book object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:109
# 4d4474f7e91e40af84f0a2cafa26d2e5
msgid "USB Mass Storage based devices"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:111
# b505b2bdc47c462795ce901908e76281
msgid "The base class for such devices is :class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits some of its functionality from its bases, documented below. A typical basic USBMS based driver looks like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 0ff949cdc8194d84add56acabb863055
msgid "Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, :class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device:1
# d2dcdb6c4f234c61be66cbfeaa9656d2
msgid "This class provides logic common to all drivers for devices that export themselves as USB Mass Storage devices. Provides implementations for mounting/ejecting of USBMS devices on all platforms."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
# 63e05755a159469bb8b32d4ee9b70cb3
msgid "String identifying the main memory of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
# 20bdeaf873db4eda93aba9b1a2ff5d26
msgid "String identifying the first card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
# 0f61c48740624f18a16508b50cd6c8aa
msgid "String identifying the second card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
# 7906b52bf0044c619a782265f650db68
msgid "Used by the new driver detection to disambiguate main memory from storage cards. Should be a regular expression that matches the main memory mount point assigned by OS X"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
# 5f3ef9b0454440ddbdd00c5e9da0b1bd
msgid "The maximum length of paths created on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
# 4fc45825534e42118d2fa659bfc82e7d
msgid "Put news in its own folder"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.windows_sort_drives:1
# ec71761dbbb6481c96c1422c6f0a2987
msgid "Called to disambiguate main memory and storage card for devices that do not distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The EB600"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_callback:1
# d6a5cc78459042c499f3a332231b8271
msgid "Callback to allow individual device drivers to override the path sanitization used by :meth:`create_upload_path`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.filename_callback:1
# 7a76a07bb3594662a8e739767848975b
msgid "Callback to allow drivers to change the default file name set by :meth:`create_upload_path`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_path_components:1
# aff6faf3bfb4428e95f9c2c64aea3052
msgid "Perform any device specific sanitization on the path components for files to be uploaded to the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.get_annotations:1
# 1e07aaedeeec4e0c8191d249bc7e9dd7
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.add_annotation_to_library:1
# 81e2b7a3a9b14d1b96fe49c31fcf6e99
msgid "Add an annotation to the calibre library"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# f70f8220ce4d4ecba259a930d1495bb7
msgid "Bases: :class:`calibre.devices.usbms.cli.CLI`, :class:`calibre.devices.usbms.device.Device`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS:1
# 6eec71966a4a41939506947f54c062dc
msgid "The base class for all USBMS devices. Implements the logic for sending/getting/updating metadata/caching metadata/etc."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:1
# 95e3676eccf74152a1ab63605a587e84
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:3
# fafa6c2f4b79483f85055954f1a5eabd
msgid "The full path to the directory where the associated book is located."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:4
# 5b4897a15ef04f39987c93e738da84bd
msgid "The name of the book file without the extension."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:5
# 91290c9e13794964ab5d3ed3ee6350e8
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:7
# 7e20dafb039a4fa28f98d4aec7542ed7
msgid "The full path to the ebook file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.normalize_path:1
# 16db8f8c0212481a80683f8d3ab2d85e
msgid "Return path with platform native path separators"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:157
# a660c526b6d64e01bba42fc26f168329
msgid "User Interface Actions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:159
# e98d30842aa24819a4a38bf85926e49d
msgid "If you are adding your own plugin in a zip file, you should subclass both InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` method of you InterfaceActionBase subclass must return an instantiated object of your InterfaceBase subclass."
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 3de1c6d5afe143ea889e175acbdbcd56
msgid "Bases: :class:`PyQt5.QtCore.QObject`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:1
# 343a9f64a1ae4d229e648ad2a9509b41
msgid "A plugin representing an \"action\" that can be taken in the graphical user interface. All the items in the toolbar and context menus are implemented by these plugins."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:5
# 4e708d9620cf4fba99a091f58583abb7
msgid "Note that this class is the base class for these plugins, however, to integrate the plugin with calibre's plugin system, you have to make a wrapper class that references the actual plugin. See the :mod:`calibre.customize.builtins` module for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:10
# 160e3012ff9740a0b2f2fd15e69b279c
msgid "If two :class:`InterfaceAction` objects have the same name, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:13
# 5a0aa7bde37749d19bb63ce44f455995
msgid "Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected` :meth:`shutting_down` and :meth:`initialization_complete` methods."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:17
# e7f86531ee424ef59a16cf1f3e880a70
msgid "Once initialized, this plugin has access to the main calibre GUI via the :attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:22
# fa212890ee2249b0b398d804f07b23ba
msgid "To access the actual plugin, use the :attr:`interface_action_base_plugin` attribute, this attribute only becomes available after the plugin has been initialized. Useful if you want to use methods from the plugin class like do_user_config()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:27
# 319ee1b9074843b28d79a43c1bc73be2
msgid "The QAction specified by :attr:`action_spec` is automatically create and made available as ``self.qaction``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.name:1
# e058fce5dcc1467e84bff68a9163cdd2
msgid "The plugin name. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.priority:1
# 0a6c384f355e478ab71f3a5dacf180aa
msgid "The plugin priority. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.popup_type:1
# df3e06673fbf4a77974ada40b45f8370
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.auto_repeat:1
# 3042eae7664148f3a807dfbe55e0ad22
msgid "Whether this action should be auto repeated when its shortcut key is held down."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_spec:1
# 5d45b617a13f46f49f75fe529c54a145
msgid "Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and keyboard shortcut can be None shortcut must be a string, None or tuple of shortcuts. If None, a keyboard shortcut corresponding to the action is not registered. If you pass an empty tuple, then the shortcut is registered with no default key binding."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_add_menu:1
# 16553326caf743e9bb7c382d53e27ea1
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
# e00633d54a7f4754844dce266c9f0626
msgid "If True, a clone of self.qaction is added to the menu of self.qaction If you want the text of this action to be different from that of self.qaction, set this variable to the new text"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_add_to:1
# 156f5ef7ebd8468aa1e67ef88113a5cf
msgid "Set of locations to which this action must not be added. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_remove_from:1
# 69a5742cd3df4d31a0c1df8a60fa3409
msgid "Set of locations from which this action must not be removed. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_type:1
# 8d0c6dcc984846d6ae3a1768bc347830
msgid "Type of action 'current' means acts on the current view 'global' means an action that does not act on the current view, but rather on calibre as a whole"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accepts_drops:1
# 8dae233bd6c34b7b8739b9bcb13dbbaf
msgid "If True, then this InterfaceAction will have the opportunity to interact with drag and drop events. See the methods, :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
# 997ea4ecd6f6420894b9f50b284e90aa
# 59106309061b49a79cad834cf701d325
msgid "This method should return True iff this interface action is capable of handling the drag event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.drop_event:1
# d3bcff79e85f44caa5dc4eeda7efc5fe
msgid "This method should perform some useful action and return True iff this interface action is capable of handling the drop event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI. You should not perform blocking/long operations in this function. Instead emit a signal or use QTimer.singleShot and return quickly. See the builtin actions for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:1
# 1f30d090e1ca44deac682a0edceb2fef
msgid "Convenience method to easily add actions to a QMenu. Returns the created QAction, This action has one extra attribute calibre_shortcut_unique_name which if not None refers to the unique name under which this action is registered with the keyboard manager."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:6
# 3b21e14d729a4ff08eee8ce2b2a1c39f
msgid "The QMenu the newly created action will be added to"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:7
# 68affb88c9f24065813417e7099c564e
msgid "A unique name for this action, this must be globally unique, so make it as descriptive as possible. If in doubt add a uuid to it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:10
# a9da762b0b5540f5bbdb37034ff8ec6b
msgid "The text of the action."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:11
# 927dc25a311e4f14a4308b00475d0bc9
msgid "Either a QIcon or a file name. The file name is passed to the I() builtin, so you do not need to pass the full path to the images directory."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:14
# c843ce6228544b8ebc0b1f52417dd65b
msgid "A string, a list of strings, None or False. If False, no keyboard shortcut is registered for this action. If None, a keyboard shortcut with no default keybinding is registered. String and list of strings register a shortcut with default keybinding as specified."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:18
# e906d007b23140a8a56e32aa0e093b97
msgid "A description for this action. Used to set tooltips."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:20
# 9b836ae774944f179c7b67f18357e0b8
msgid "A callable which is connected to the triggered signal of the created action."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:22
# fed5643318624c249503bdeb4c8f18f7
msgid "The test displayed to the user when customizing the keyboard shortcuts for this action. By default it is set to the value of ``text``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:12
# 6148d580d3f9478b8b06909f528d162e
msgid "A dictionary of the form ``{name : file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.genesis:1
# ea6bbefb01e0478a91c1b00850dc44bd
msgid "Setup this plugin. Only called once during initialization. self.gui is available. The action specified by :attr:`action_spec` is available as ``self.qaction``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:1
# 2b956312f6354583b310c4c0afde499c
msgid "Called whenever the book list being displayed in calibre changes. Currently values for loc are: ``library, main, card and cardb``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:4
# 1dcfc2aeb4274452bc55f4d39532dd7e
msgid "This method should enable/disable this action and its sub actions as appropriate for the location."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:1
# ca560562e5154572bc3355a9ddf544c3
msgid "Called whenever the current library is changed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:3
# aa59399e78d347849508e7ea7ec3413e
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
# 2b967ad4c9494da9bfcdedc9fa0ffdd4
msgid "Called once per action when the layout of the main GUI is completed. If your action needs to make changes to the layout, they should be done here, rather than in :meth:`initialization_complete`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.initialization_complete:1
# 124bec7af6554f5b9afbae3f9ff16a3b
msgid "Called once per action when the initialization of the main GUI is completed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:1
# 863a0eb424e54c0c81c881afd503693e
msgid "Called once per plugin when the main GUI is in the process of shutting down. Release any used resources, but try not to block the shutdown for long periods of time."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:5
# 37dd31249777488791996e99e3ac8717
msgid "False to halt the shutdown. You are responsible for telling the user why the shutdown was halted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.InterfaceActionBase.load_actual_plugin:1
# 80ad63d7809e4851a08ab85b15081ee5
msgid "This method must return the actual interface action plugin object."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:174
# 9cbb5d314e684f8eaa2fa0d57c5eb2ae
msgid "Preferences Plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:1
# 0589ede6706a4551857b7d77443e6f48
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:3
# bf8e01c88ceb4ffbaf6141ee4cae59fd
msgid "This plugin has only one important method :meth:`create_widget`. The various fields of the plugin control how it is categorized in the UI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.config_widget:1
# 42f660decf05476a8768e90f12002db5
msgid "Import path to module that contains a class named ConfigWidget which implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category_order:1
# 34c006b21f034983a0e48dd37ecba67d
msgid "Where in the list of categories the :attr:`category` of this plugin should be."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.name_order:1
# 83a671018dff47ba8733a295e76f9ba3
msgid "Where in the list of names in a category, the :attr:`gui_name` of this plugin should be"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category:1
# 93e436f46ffe4f73a181677f9bb44cc2
msgid "The category this plugin should be in"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_category:1
# 0e56f3ef77fa455290e623dbd5f83ea8
msgid "The category name displayed to the user for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_name:1
# 636545548ece41d19d40a4ef48f6383a
msgid "The name displayed to the user for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.icon:1
# d19ae98a96c541a2b751ef049ced3fc4
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.description:1
# 9e39925fe964408aaf8ce4ce4850ceb9
msgid "The description used for tooltips and the like"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:1
# 5a0374d7c3b74e95a2237f20f03049fe
msgid "Create and return the actual Qt widget used for setting this group of preferences. The widget must implement the :class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:5
# 35b3394958a649619afc32ea0112ef5a
msgid "The default implementation uses :attr:`config_widget` to instantiate the widget."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface:1
# 5c44f4ec327f4e85b8c2db89234aa467
msgid "This class defines the interface that all widgets displayed in the Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base class that implements this interface and defines various convenience methods as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
# 49f066757cdb41f390e11ccb96bb5cd7
msgid "This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
# 0745334054a846628aaedfaff11ddda5
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
# b6b583b3330946cabea3fc0c1fc40ee0
msgid "The tooltip for the Restore to defaults button"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
# 03281e5e49024499bffa588762f4bc17
msgid "If True the Preferences dialog will not allow the user to set any more preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
# 4ab4786f2abe4a9cbdb018848a1078d4
msgid "Called once before the widget is displayed, should perform any necessary setup."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
# e87773f71f1e451eb91381f3e3ee7889
msgid "The main calibre graphical user interface"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
# e9723b87d07648e3ad9edb9d11bbd9e9
msgid "Should set all config values to their initial values (the values stored in the config files)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
# dce3621d24c24949abf8bd5e5df5a6df
msgid "Should set all config values to their defaults."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
# 816fd16cb51b49dca56394cc51dc0ab6
msgid "Save any changed settings. Return True if the changes require a restart, False otherwise. Raise an :class:`AbortCommit` exception to indicate that an error occurred. You are responsible for giving the user feedback about what the error is and how to correct it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
# 64ad7615c00946108eaec99347f08eb4
msgid "Called once after this widget is committed. Responsible for causing the gui to reread any changed settings. Note that by default the GUI re-initializes various elements anyway, so most widgets won't need to use this method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:1
# 748f1e93fd0c4ca1af206f049d05f915
msgid "Base class that contains code to easily add standard config widgets like checkboxes, combo boxes, text fields and so on. See the :meth:`register` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:5
# 4bca000e33b24fafa92f899bf8d38774
msgid "This class automatically handles change notification, resetting to default, translation between gui objects and config objects, etc. for registered settings."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:9
# 9d17089f29dc4eb092560df6fdd468bc
msgid "If your config widget inherits from this class but includes setting that are not registered, you should override the :class:`ConfigWidgetInterface` methods and call the base class methods inside the overrides."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:1
# 78fa4d592b2e4453a8ebef81c8038565
msgid "Register a setting."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:3
# c962ed9e80ab4c38af93b5e4aac3fc1a
msgid "The setting name"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:4
# 978ad18037e246a8b2790db628653acc
msgid "The config object that reads/writes the setting"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:5
# d8e59dbccb5e4005839c80eb62b3ff21
msgid "The name of the GUI object that presents an interface to change the setting. By default it is assumed to be ``'opt_' + name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:8
# 8bb92ea5f87e47f9b03bb80d4ef98b70
msgid "If this setting is a multiple choice (combobox) based setting, the list of choices. The list is a list of two element tuples of the form: ``[(gui name, value), ...]``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:11
# 59015f00ec844da0b6216d32413fa581
msgid "The class responsible for managing this setting. The default class handles almost all cases, so this param is rarely used."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:190
# 932c4f4b32154871b71f0e5d180c2fef
msgid "Viewer plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.type:1
# fb18cbffcd204474954a02967fe7fc33
msgid "These plugins are used to add functionality to the calibre viewer."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_fonts:1
# 19ca051a805848aa90fcdb2eb3e8a883
msgid "This method is called once at viewer startup. It should load any fonts it wants to make available. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_javascript:1
# ef11386ee5f34f0094fb085f69445cb2
msgid "This method is called every time a new HTML document is loaded in the viewer. Use it to load javascript libraries into the viewer. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.run_javascript:1
# 16c56e63952b4e1f8c1374d8fa613aae
msgid "This method is called every time a document has finished loading. Use it in the same way as load_javascript()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_ui:1
# 86d75fab7c914188950804d4afb6318c
msgid "This method is called once when the viewer is created. Use it to make any customizations you want to the viewer's user interface. For example, you can modify the toolbars via ui.tool_bar and ui.tool_bar2."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_context_menu:1
# 925b7623d40a44f9b867e0201a5d8921
msgid "This method is called every time the context (right-click) menu is shown. You can use it to customize the context menu. ``event`` is the context menu event and hit_test_result is the QWebHitTestResult for this event in the currently loaded document."
msgstr ""

