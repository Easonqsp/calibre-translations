# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 2.20.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-10 09:59+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../home/kovid/work/calibre/manual/plugins.rst:4
# b0a1345402de49a19d25aaab7013f08e
msgid "API Documentation for plugins"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:9
# dc72ce8ec02549378249931a4d12d96c
msgid "Defines various abstract base classes that can be subclassed to create powerful plugins. The useful classes are:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:19
# a1a0dc3fcdee46b5b8f52c9e3891011e
msgid "Plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:1
# 19a8e356a7ed46b5a8eca64bb92095e9
msgid "A calibre plugin. Useful members include:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# ea6e5362f721486c94fc9787b0adc0c8
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 3dfcb810ec024285a783a72c58d83e86
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# 000eaa3bb42d4f6392337693648776bc
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# 9729482945cc414fb29a4ae8b1170244
msgid "by the user."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:9
# 5a2ec6669ba04466ba703795d8eb3726
msgid "Methods that should be overridden in sub classes:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:11
# dc47b2d5c19844ec8a35acb234d5a51a
msgid ":meth:`initialize`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:12
# e14986a2f2c34907a8df14f5be7e4f33
msgid ":meth:`customization_help`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:14
# 7cde8937401a4519a36e2c9b76832a7a
msgid "Useful methods:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:16
# 8bd127ab76124080ab337b51c0f3372a
msgid ":meth:`temporary_file`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:17
# b5b052a986af4c0ebe7fee45dca9e48e
msgid ":meth:`__enter__`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:18
# 21e76ff578264539b77a0e3ce95f18d9
msgid ":meth:`load_resources`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.supported_platforms:1
# 5e75fe3a5c924d1bb62a36dcf1468d7a
msgid "List of platforms this plugin works on. For example: ``['windows', 'osx', 'linux']``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.name:1
# e61ed110092c488ebb47445ccdb82feb
msgid "The name of this plugin. You must set it something other than Trivial Plugin for it to work."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.version:1
# 3cd118270daf4b8482c36c3d9ca567cb
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.description:1
# b887504c588c43c39a4caafe52d86fa6
msgid "A short string describing what this plugin does"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.author:1
# 9c6dbfce6f9b4f038a34924558595ce7
msgid "The author of this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.priority:1
# 4532c45a68784fc49e4e48cf4987e009
msgid "When more than one plugin exists for a filetype, the plugins are run in order of decreasing priority i.e. plugins with higher priority will be run first. The highest possible priority is ``sys.maxint``. Default priority is 1."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.minimum_calibre_version:1
# 6585f97f81664eb1a9a9129148e4856d
msgid "The earliest version of calibre this plugin requires"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.can_be_disabled:1
# b0346f801b314cd59c0ad0c5c4fdf768
msgid "If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.type:1
# 7ec1a7eaf7504f609ad2022d345eb42e
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:1
# ff5e76bf7e71487f877c2e672a74646b
msgid "Called once when calibre plugins are initialized.  Plugins are re-initialized every time a new plugin is added. Also note that if the plugin is run in a worker process, such as for adding books, then the plugin will be initialized for every new worker process."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:6
# 509ec0d4fc9043e2b373af5e66dc3c92
msgid "Perform any plugin specific initialization here, such as extracting resources from the plugin zip file. The path to the zip file is available as ``self.plugin_path``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:10
# 739af7ff023845f0a72bbd609e97ef88
msgid "Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:1
# aac8da25f1184f7d9add2ec9dcb9840c
msgid "Implement this method and :meth:`save_settings` in your plugin to use a custom configuration dialog, rather then relying on the simple string based default customization."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:5
# 9d57a155986a4d908af2af9710c97777
msgid "This method, if implemented, must return a QWidget. The widget can have an optional method validate() that takes no arguments and is called immediately after the user clicks OK. Changes are applied if and only if the method returns True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:10
# d7d540977147418baf31f305f6bfb21f
msgid "If for some reason you cannot perform the configuration at this time, return a tuple of two strings (message, details), these will be displayed as a warning dialog to the user and the process will be aborted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:1
# 296eda8d201c400f8984afa54c6174a7
msgid "Save the settings specified by the user with config_widget."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:3
# 54dc33c6f265412c84d84b62b43b54aa
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.do_user_config:1
# c54dcf62533645dead5cae19a1931849
msgid "This method shows a configuration dialog for this plugin. It returns True if the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:1
# ff3d3789aa7c4ed380440e328b1ec71f
# 1be43412db434d7ca3f81970353b3c21
msgid "If this plugin comes in a ZIP file (user added plugin), this method will allow you to load resources from the ZIP file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:4
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:4
# dc511f3398b04143b36579b9c3f4550e
# aa04eaa1895a4b81a2539d4d14906e79
msgid "For example to load an image::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:10
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:10
# b6be7627c55b4151a78913a62bfb1b5a
# b33cb775b9124e74936d5805aefbc268
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:12
# ac27b033909d4e689d5e8f5e81b8dcc7
msgid "A dictionary of the form ``{name: file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:1
# 63e06160b71f4d23aab808d45332693f
msgid "Return a string giving help on how to customize this plugin. By default raise a :class:`NotImplementedError`, which indicates that the plugin does not require customization."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:5
# d340ddf3f60c49b6b9bebc9e7722c49b
msgid "If you re-implement this method in your subclass, the user will be asked to enter a string as customization for this plugin. The customization string will be available as ``self.site_customization``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:10
# dd21b96e724a4788b0d8556dad2d2fd1
msgid "Site customization could be anything, for example, the path to a needed binary on the user's computer."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:13
# 9c937922e4a941748a17d1ce694f0d6f
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:1
# a0ea46f537774e13a43d4025255c0c93
msgid "Return a file-like object that is a temporary file on the file system. This file will remain available even after being closed and will only be removed on interpreter shutdown. Use the ``name`` member of the returned object to access the full path to the created temporary file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:6
# 9bed6f92548e4480840a5dba1a3e2dc4
msgid "The suffix that the temporary file will have."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.cli_main:1
# 4057809c14904f059b48d56a79d742f2
msgid "This method is the main entry point for your plugins command line interface. It is called when the user does: calibre-debug -r \"Plugin Name\". Any arguments passed are present in the args variable."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:28
# 6243dd3e112349dba854954dbe747a33
msgid "FileTypePlugin"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 1eb155e53a4f48cfbf05565297e089a8
# 5098b319f455495a9feb441f985d56dd
# 0fbf0d48fee94af99259875d616914fc
# d85273eff68646f1af97c4017fd675d5
# e9e0fb6da3284e5a8b1338165b96cbea
# 7a65ea29adcd4909adb4e49c8911e28e
# b23e98c88456476299751c724ef0541d
# de56df8f64cc4cadbdcbd08edee52199
# aa65de4b7c414a25b9544fbd17df88f0
# 8b0ab58cf1624a409d12f67a13b6a97b
# d2e2df8d761b45d984fb8642b3866840
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin:1
# 7d19cd4e19c349c9997de8956579290c
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.file_types:1
# 236cdbd83cc840b7a1615a42fbe7c244
msgid "Set of file types for which this plugin should be run. For example: ``{'lit', 'mobi', 'prc'}``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_import:1
# 390f799d1e364424a891705118d45fc3
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postimport:1
# 4bb4e48180c642eb97eacc4dc646b3e4
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_preprocess:1
# aa8ca26010e84a5f9402205dabebdafc
msgid "If True, this plugin is run just before a conversion"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postprocess:1
# e4cb759d42ac4fa795541bd61a2583cd
msgid "If True, this plugin is run after conversion on the final file produced by the conversion output plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:1
# ce2da6cc6f3a422995b4e396646deb67
msgid "Run the plugin. Must be implemented in subclasses. It should perform whatever modifications are required on the ebook and return the absolute path to the modified ebook. If no modifications are needed, it should return the path to the original ebook. If an error is encountered it should raise an Exception. The default implementation simply return the path to the original ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:9
# 6a9cf13f60e0404faa92c082f300cc26
msgid "The modified ebook file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:12
# 4bf9058566cf443db2a6f6ee3c0ac0bb
msgid "Absolute path to the ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:14
# 92d7fe3307c24e0e92f4251601eabfc5
msgid "Absolute path to the modified ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:1
# b9cb03d812194fdb83b446f4db2c503e
msgid "Called post import, i.e., after the book file has been added to the database."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:3
# a49ff977705f4eb89cb506949dce7e5b
msgid "Database id of the added book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:4
# b9f255d97e3843dfa48aabc67bdec486
msgid "The file type of the book that was added."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:5
# 09409ecb85ae466e8d5c399371ae2ed0
msgid "Library database."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:39
# 84e312a6e9d94ee4befa3e0b6498c746
msgid "Metadata plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin:1
# 14caa092c9f942e0a9c5a0c28ead62f2
# 3fd5205900e64498b027cfa22c96ed7c
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.file_types:1
# b15a13c96000434a9bf1500576d2f0cd
# 3f7dba8c08ab429fb407516d506e2c14
msgid "Set of file types for which this plugin should be run For example: ``set(['lit', 'mobi', 'prc'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.get_metadata:1
# 53abab497c4344d9939bddf85c112bb0
msgid "Return metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :return: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.set_metadata:1
# d6f57d824ff047ebaa9cece204882683
msgid "Set metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :param mi: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:54
# 94f6a4ae4beb425fab048bbbf82d718d
msgid "Catalog plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin:1
# b0ee4f25edbc4c278d295509e163a1f5
msgid "A plugin that implements a catalog generator."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.file_types:1
# 035197d33b39475c979d46572449ca26
msgid "Output file type for which this plugin should be run For example: 'epub' or 'xml'"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.cli_options:1
# fc0bdc25e58a481d97fc2448423d91ca
msgid "CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.initialize:1
# 152f52794c4b47e5bc7bc8f1ccfdf954
msgid "If plugin is not a built-in, copy the plugin's .ui and .py files from the zip file to $TMPDIR. Tab will be dynamically generated and added to the Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:1
# feb7d182959f44a99fba9593ed464444
msgid "Run the plugin. Must be implemented in subclasses. It should generate the catalog in the format specified in file_types, returning the absolute path to the generated catalog file. If an error is encountered it should raise an Exception."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:7
# 578a8a1c9134424cb215fa30ab672eeb
msgid "The generated catalog file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:10
# 69819b15c8464c4085f444da907b40ec
msgid "Absolute path to the generated catalog file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:11
# 947029fe39684d6681aa0fc34448d7f0
msgid "A dictionary of keyword arguments"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:12
# e0c347d3c5ad42f6bb8b5d72a7eb5094
msgid "A LibraryDatabase2 object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:64
# 044280e710be457aafc3469ea47b5657
msgid "Metadata download plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.capabilities:1
# e24b4fc8ad6d4cc1b408a3b864ef7406
msgid "Set of capabilities supported by this plugin. Useful capabilities are: 'identify', 'cover'"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.touched_fields:1
# 0f1fbadabd7c47dd846e2cad52e43958
msgid "List of metadata fields that can potentially be download by this plugin during the identify phase"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
# 356f249583a542679777ddfcc0a51356
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
# b3fe1411f1ba481f9487c101fda8a6c8
msgid "Setting this to True means that the browser object will add Accept-Encoding: gzip to all requests. This can speedup downloads but make sure that the source actually supports gzip transfer encoding correctly first"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
# 9fc94dca1e8d4f7c971c772d01c0fa46
msgid "Cached cover URLs can sometimes be unreliable (i.e. the download could fail or the returned image could be bogus. If that is often the case with this source set to False"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.options:1
# 2d564074bf3d407ea5d7dc3795711a84
msgid "A list of :class:`Option` objects. They will be used to automatically construct the configuration widget for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.config_help_message:1
# 62a25c898a9b499989c389b8451dcea8
msgid "A string that is displayed at the top of the config widget for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
# 435b4844b01a4526adbd9505058389b3
msgid "If True this source can return multiple covers for a given query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
# cc2f109628d74604868647de69633206
msgid "If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.prefer_results_with_isbn:1
# 67529a8153e44a47a04d8d11517a3dba
msgid "If set to True, and this source returns multiple results for a query, some of which have ISBNs and some of which do not, the results without ISBNs will be ignored"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.is_configured:1
# 21250bd2c21e4fc8af3bc2cb9ca6aec1
msgid "Return False if your plugin needs to be configured before it can be used. For example, it might need a username/password/API key."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
# 09c8c353cc1d495a93eab27f1098ae1e
msgid "Take a list of authors and return a list of tokens useful for an AND search query. This function tries to return tokens in first name middle names last name order, by assuming that if a comma is in the author name, the name is in lastname, other names form."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
# 23a63a1d7efc4872a5c1a15656fb492c
msgid "Take a title and return a list of tokens useful for an AND search query. Excludes connectives(optionally) and punctuation."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
# 554024c700694df9bd37064eb62cfb23
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.test_fields:1
# d032c07855ba4bda875d55d994c0b4a2
msgid "Return the first field from self.touched_fields that is null on the mi object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
# 6eac307b256f43fa93fac59e37bc9722
msgid "Call this method in your plugin's identify method to normalize metadata before putting the Metadata object into result_queue. You can of course, use a custom algorithm suited to your metadata source."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
# 37b51dc04f564446a4a6f07c265a4b0a
msgid "Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, identifier_value, URL). The URL is the URL for the book identified by identifiers at this source. identifier_type, identifier_value specify the identifier corresponding to the URL. This URL must be browseable to by a human using a browser. It is meant to provide a clickable link for the user to easily visit the books page at this source. If no URL is found, return None. This method must be quick, and consistent, so only implement it if it is possible to construct the URL from a known scheme given identifiers."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
# 022a27c666164056bbef17824c6fea75
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_urls:1
# 43240c2b0e304d58b1bccfda7c412f72
msgid "Override this method if you would like to return multiple urls for this book. Return a list of 3-tuples. By default this method simply calls :method:`get_book_url`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
# 721f5fb2677145c09c65af6e5e03b6e4
msgid "Return cached cover URL for the book identified by the identifiers dict or None if no such URL exists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
# 842c1ed7d9644a24bf5c8564a2801e63
msgid "Note that this method must only return validated URLs, i.e. not URLS that could result in a generic cover image or a not found error."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
# 7c8c05508ab24a3db62608bf326e420b
msgid "Return a function that is used to generate a key that can sort Metadata objects by their relevance given a search query (title, authors, identifiers)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
# fd36df1ad8424f2a9d68240bbdba42bf
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
# d02e6b99b4964e028984310b731a92e5
msgid "For details on the default algorithm see :class:`InternalMetadataCompareKeyGen`. Re-implement this function in your plugin if the default algorithm is not suitable."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:1
# 15b08875d5ce4c6ab746d662296bb33e
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:3
# a974cfd6dde34d149e052cccffed852f
msgid "If identifiers(s) are specified and no match is found and this metadata source does not store all related identifiers (for example, all ISBNs of a book), this method should retry with just the title and author (assuming they were specified)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:8
# a03b5814055b49e898ec38224012ab6e
msgid "If this metadata source also provides covers, the URL to the cover should be cached so that a subsequent call to the get covers API with the same ISBN/special identifier does not need to get the cover URL again. Use the caching API for this."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:13
# ac453ff7a6ad46c1ae23bee79b1e6b61
msgid "Every Metadata object put into result_queue by this method must have a `source_relevance` attribute that is an integer indicating the order in which the results were returned by the metadata source for this query. This integer will be used by :meth:`compare_identify_results`. If the order is unimportant, set it to zero for every result."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:19
# ecb6bb8b76a74cc796337237fe72476f
msgid "Make sure that any cover/isbn mapping information is cached before the Metadata object is put into result_queue."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:22
# 286bec52a6214158bf4f7e47b4a32ca6
msgid "A log object, use it to output debugging information/errors"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:23
# 02a9626dcb674003aa2c2e6726ddeb04
msgid "A result Queue, results should be put into it. Each result is a Metadata object"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:25
# 42efbdc366ee42d4ac9e52e28457014e
msgid "If abort.is_set() returns True, abort further processing and return as soon as possible"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:27
# 0ca15d5343a74fd8997af66176906c72
msgid "The title of the book, can be None"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:28
# 6bdbbafd63a545b5802d720999264d65
msgid "A list of authors of the book, can be None"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:29
# 39a8d0758d67451fb93d9900548e5503
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:31
# d384540e2fe54abdb6252a27a95cfc35
msgid "Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:33
# d98ae8c3040a48ccb05cb8c8afc66772
msgid "None if no errors occurred, otherwise a unicode representation of the error suitable for showing to the user"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:1
# 128dbf9af56d49d38e2b27c261f3fe79
msgid "Download a cover and put it into result_queue. The parameters all have the same meaning as for :meth:`identify`. Put (self, cover_data) into result_queue."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:5
# 7f43aafcbd78493ea9181da11babde93
msgid "This method should use cached cover URLs for efficiency whenever possible. When cached data is not present, most plugins simply call identify and use its results."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:9
# 17ed21e4e5f6409e85fa7c32820e4a19
msgid "If the parameter get_best_cover is True and this plugin can get multiple covers, it should only get the \"best\" one."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
# d782850dea8942de88bff79abc189e10
msgid "Generate a sort key for comparison of the relevance of Metadata objects, given a search query. This is used only to compare results from the same metadata source, not across different sources."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
# f639a1568a364ed1a6d22f2199e07dc7
msgid "The sort key ensures that an ascending order sort is a sort by order of decreasing relevance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
# e3c99ea285bb4df68ac93988e86597ad
msgid "The algorithm is:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
# 63e0b63da4fb4cfb9e8ecc54f5126a7f
msgid "Prefer results that have at least one identifier the same as for the query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
# 478025fdda1a464dbbb5c5ba95f6f37e
msgid "Prefer results with a cached cover URL"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
# ea41a97426c84f90ba22fa202bdc6bf9
msgid "Prefer results with all available fields filled in"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
# a3f6ccecf3e94255bec22d54ea96730b
msgid "Prefer results with the same language as the current user interface language"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
# d90a31dd31094a41829955e355eeb9e2
msgid "Prefer results that are an exact title match to the query"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
# eda92c54ddb24372bb251c48c26dd845
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
# e4d7261e56674069b4e5a7030d623b60
msgid "Use the relevance of the result as reported by the metadata source's search"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:17
# 37542979af5f4efc9bb02b61fe41675a
msgid "engine"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:76
# 5785dbef707643028f99b1cc67b746c6
msgid "Conversion plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin:1
# 5215b8f575ee4dfa82f87e30f12dda4f
msgid "InputFormatPlugins are responsible for converting a document into HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.file_types:1
# d4d37f64a32a45268749c29492262224
msgid "Set of file types for which this plugin should be run For example: ``set(['azw', 'mobi', 'prc'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
# f8b00f570f564997966bef4e0ab90898
msgid "If True, this input plugin generates a collection of images, one per HTML file. This can be set dynamically, in the convert method if the input files can be both image collections and non-image collections. If you set this to True, you must implement the get_images() method that returns a list of images."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.core_usage:1
# 47835a465eed460493494677d4afc211
msgid "Number of CPU cores used by this plugin A value of -1 means that it uses all available cores"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.for_viewer:1
# 81fcdf290cd34499932c2640354f962a
msgid "If set to True, the input plugin will perform special processing to make its output suitable for viewing"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.output_encoding:1
# 6592ce8f7f8a440f8dc4b1a5d07ca6f6
msgid "The encoding that this input plugin creates files in. A value of None means that the encoding is undefined and must be detected individually"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.common_options:1
# 51aeb05722be4823bd8ddca71dd9ca8d
# 689911189a3a48669bbcad86a0c63d44
msgid "Options shared by all Input format plugins. Do not override in sub-classes. Use :attr:`options` instead. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.options:1
# 0451dce37116496f9b9965893c405611
# 7adbbf77446d45f4abce542c842b58c6
msgid "Options to customize the behavior of this plugin. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.recommendations:1
# 1ddf107ff2d941c7904e76e334c01204
# 7dd0283c9858457d9efba644b3e1c584
msgid "A set of 3-tuples of the form (option_name, recommended_value, recommendation_level)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.get_images:1
# 43ba67ed521c4d0b8e48da2e85eacddf
msgid "Return a list of absolute paths to the images, if this input plugin represents an image collection. The list of images is in the same order as the spine and the TOC."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:1
# 3280ed0a8381423f93d3e0c213b9fcb1
msgid "This method must be implemented in sub-classes. It must return the path to the created OPF file or an :class:`OEBBook` instance. All output should be contained in the current directory. If this plugin creates files outside the current directory they must be deleted/marked for deletion before this method returns."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:8
# f799e588ed6545128901b4aacb07c36b
msgid "A file like object that contains the input file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:9
# 362909142adf443184929b48df474a60
msgid "Options to customize the conversion process. Guaranteed to have attributes corresponding to all the options declared by this plugin. In addition, it will have a verbose attribute that takes integral values from zero upwards. Higher numbers mean be more verbose. Another useful attribute is ``input_profile`` that is an instance of :class:`calibre.customize.profiles.InputProfile`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:17
# d0eddd6c47684338a9c4e7ab1a081d22
msgid "The extension (without the .) of the input file. It is guaranteed to be one of the `file_types` supported by this plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:20
# d6835aa724544255b11498d34c1d5228
msgid "A :class:`calibre.utils.logging.Log` object. All output should use this object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:22
# 658118e21f724e929d8ff5e8d04b08aa
msgid "A dictionary of various information that the input plugin can get easily that would speed up the subsequent stages of the conversion."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
# 8baab6a82051474fbd483328e7ada792
msgid "Called to allow the input plugin to perform postprocessing after the book has been parsed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.specialize:1
# d7d1dc76a0de4f9183d9e84271d3d5a8
msgid "Called to allow the input plugin to specialize the parsed book for a particular output format. Called after postprocess_book and before any transforms are performed on the parsed book."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
# 45e9b22d032746a09f6898a51b26023e
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builting input plugins for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:1
# 8622e96c77d64751bd08c98111d5f22e
msgid "OutputFormatPlugins are responsible for converting an OEB document (OPF+HTML) into an output ebook."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:4
# 40e84ae4bd4142d58925aeb554ec39ed
msgid "The OEB document can be assumed to be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.file_type:1
# 8ef054f65dfd480ea0bb891b877815c9
msgid "The file type (extension without leading period) that this plugin outputs"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:1
# 032a628ae56d461cac6fe6fc58909be9
msgid "Render the contents of `oeb_book` (which is an instance of :class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:4
# 7d84c01c76b443c681bc173cb961ad8f
msgid "Either a file like object or a string. If it is a string it is the path to a directory that may or may not exist. The output plugin should write its output into that directory. If it is a file like object, the output plugin should write its output into the file."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:8
# 0cc98eefb33d497e9ac03ec5495f47db
msgid "The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:10
# 0f50aa6efb73436697043e1412bb146d
msgid "Conversion options. Guaranteed to have attributes corresponding to the OptionRecommendations of this plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:12
# 4ba9db75a1554ad8bbeb3396440e9572
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
# 6c0ce3cdb5024c53b1a65bf10284dc51
msgid "Can be used to make changes to the css during the CSS flattening process."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
# f31421e90a934d3ba0d520454ceece35
msgid "The item (HTML file) being processed"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
# ea4ac0f422dc4b068855bcdd3645fb9f
msgid "A Stylizer object containing the flattened styles for item. You can get the style for any element by stylizer.style(element)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
# e3a04e945480432db9b436f8bfe9e335
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builtin output plugins for examples."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:91
# 8ff5a8d4047f4d62963853cde1473094
msgid "Device Drivers"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:95
# 1b335c4ac3934372b26a6ff0eae319d4
msgid "The base class for all device drivers is :class:`DevicePlugin`. However, if your device exposes itself as a USBMS drive to the operating system, you should use the USBMS class instead as it implements all the logic needed to support these kinds of devices."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin:1
# 12f47ad40f6f4c4391288b316b5af7a8
msgid "Defines the interface that should be implemented by backends that communicate with an ebook reader."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.FORMATS:1
# 9f503b47f0b940fe9517e628e6bc28c1
msgid "Ordered list of supported formats"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VENDOR_ID:1
# e54a5ff456ac4b2bba11b975e24e77be
msgid "VENDOR_ID can be either an integer, a list of integers or a dictionary If it is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
# c043278c14c04702ad8e4dbe4f3fe5d0
msgid "An integer or a list of integers"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.BCD:1
# 0fa60c6939264c2db141bc1b907d8198
msgid "BCD can be either None to not distinguish between devices based on BCD, or it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
# a8f0dfb964a949f39170b33a5fe321dc
msgid "Height for thumbnails on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
# ab7d606a54774cd9ab4605086018841d
msgid "Width for thumbnails on the device. Setting this will force thumbnails to this size, not preserving aspect ratio. If it is not set, then the aspect ratio will be preserved and the thumbnail will be no higher than THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 to have better quality thumbnails with fewer compression artifacts. Of course, the thumbnails get larger as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
# f2714073f34646aa9c9c41ec657c72ac
msgid "Set this to True if the device supports updating cover thumbnails during sync_booklists. Setting it to true will ask device.py to refresh the cover thumbnails during book matching"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
# cca628e62a184649ad1ca8784034ce9e
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
# b6175ebefeb546edaac6dcc5c5364d3d
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.path_sep:1
# 70750b34e9e74d06b0df62cfa4adf55f
msgid "Path separator for paths to books on device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.icon:1
# 8c8a17a7e1694231a6c8a47955c6cb4c
msgid "Icon for this device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
# f582143a512248c5a7f867e24d2007be
msgid "GUI displays this as a message if not None. Useful if opening can take a long time"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
# 5cf33a06dab94fbf9e5973a268b7dd17
msgid "Set of extensions that are \"virtual books\" on the device and therefore cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
# 490b54e8e85843c5913a750b33aa35a5
msgid "Whether to nuke comments in the copy of the book sent to the device. If not None this should be short string that the comments will be replaced by."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
# 3f6504c50f2243269fa99319bbb5ac94
msgid "If True indicates that  this driver completely manages device detection, ejecting and so forth. If you set this to True, you *must* implement the detect_managed_devices and debug_managed_device_detection methods. A driver with this set to true is responsible for detection of devices, managing a blacklist of devices, a list of ejected devices and so forth. calibre will periodically call the detect_managed_devices() method and if it returns a detected device, calibre will call open(). open() will be called every time a device is returned even is previous calls to open() failed, therefore the driver must maintain its own blacklist of failed devices. Similarly, when ejecting, calibre will call eject() and then assuming the next call to detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
# b2d0ee347c0e4187bb246d20b5cd369b
msgid "If set the True, calibre will call the :meth:`get_driveinfo()` method after the books lists have been loaded to get the driveinfo."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
# d0c280ffc95548989da49d857dcb9992
msgid "If set to True, calibre will ask the user if they want to manage the device with calibre, the first time it is detected. If you set this to True you must implement :meth:`get_device_uid()` and :meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` and :meth:`set_user_blacklisted_devices`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
# f9bce8ef4e1340f4b040ecf0459491fb
msgid "Set this to a dictionary of the form {'title':title, 'msg':msg, 'det_msg':detailed_msg} to have calibre popup a message to the user after some callbacks are run (currently only upload_books). Be careful to not spam the user with too many messages. This variable is checked after *every* callback, so only set it when you really need to."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:1
# a9b0af49d6c54c3b90c8981c6ea224b1
msgid "Return True, device_info if a device handled by this plugin is currently connected."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:3
# a1186ba544bc4185a418903bcd7563ad
msgid "List of devices currently connected"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
# 9f2b95513961465fb44ee49af37f7301
# 89dbeb344165473ca70ada4ac5565567
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:3
# 392b74279110487489213a4cd1d84431
msgid "Scan for devices that this driver can handle. Should return a device object if a device is found. This object will be passed to the open() method as the connected_device. If no device is found, return None. The returned object can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:9
# 1c7eead98f2d46be8f63cdaaf4d08dbe
msgid "This method is called periodically by the GUI, so make sure it is not too resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:13
# b90a18adea9d46a29dc3f4dde832a73e
msgid "Set of USB devices found on the system."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:15
# f03944db8a63496f9d2aecc8ebc67a43
msgid "If True and the driver uses a cache to prevent repeated scanning, the cache must be flushed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
# 3c21de0217834e88b87c4677faa1d74e
msgid "Should write information about the devices detected on the system to output, which is a file like object."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
# 3c0a3c0bc530456d92116074a9be2f04
msgid "Should return True if a device was detected and successfully opened, otherwise False."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:1
# accde086e12a46e5ace80c2aa969de4c
msgid "The key to unlock the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:2
# 24b9717ed19d4e1d83783c79ce656a4f
msgid "If true the packet stream to/from the device is logged"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:3
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:3
# a5c6e0b4fd8143bca5672861bacf68c9
# d08fd89943574a7ab76bd2e061bef75f
msgid "Function that is called with a % progress (number between 0 and 100) for various tasks If it is called with -1 that means that the task does not have any progress information"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:7
# 924469f9d27143b2a04cb2783251f9fc
msgid "Device information from the device scanner"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:1
# e05e00bce4a346c5a52f9851da53dfcf
msgid "Optional method to perform further checks on a device to see if this driver is capable of handling it. If it is not it should return False. This method is only called after the vendor, product ids and the bcd have matched, so it can do some relatively time intensive checks. The default implementation returns True. This method is called only on windows. See also :meth:`can_handle`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:8
# 4c34054af3c942268b2c7be7398b9ba1
msgid "On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, bcd)``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:1
# d3b1cb54cab24fd68d0fc92f5bdacf87
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:3
# e6b2150879764109ad78d4505e292053
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:1
# f92fe6da579b4369932951e712969582
msgid "Perform any device specific initialization. Called after the device is detected but before any other functions that communicate with the device. For example: For devices that present themselves as USB Mass storage devices, this method would be responsible for mounting the device or if the device has been automounted, for finding out where it has been mounted. The method :meth:`calibre.devices.usbms.device.Device.open` has an implementation of this function that should serve as a good example for USB Mass storage devices."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:11
# 73c7ea3bf26c49029d7dbeab3e361f04
msgid "This method can raise an OpenFeedback exception to display a message to the user."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:14
# dfa8d1c246df41609b7b0b8e536fcd4f
msgid "The device that we are trying to open. It is a tuple of (vendor id, product id, bcd, manufacturer name, product name, device serial number). However, some devices have no serial number and on windows only the first three fields are present, the rest are None."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:20
# 05bc35ddf63a4958ac316185596fddee
msgid "The UUID of the current calibre library. Can be None if there is no library (for example when used from the command line)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:1
# 3b2d72fe9be64d35b3b7016c6a424652
msgid "Un-mount / eject the device from the OS. This does not check if there are pending GUI jobs that need to communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:4
# c06a7c6964164fcaba36c1a08540ce38
msgid "NOTE: That this method may not be called on the same thread as the rest of the device methods."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
# 5316aa9ef09940b0af00002589e64188
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:1
# a93bb7a3b8be4225a700dc8a01368ecb
msgid "Set a function to report progress information."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:1
# 0d4bc17f6c6e4a6eaca6dd686ada4a6f
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:3
# 145058a9ee434da8ae2b052259dd4009
msgid "(device name, device version, software version on device, mime type) The tuple can optionally have a fifth element, which is a drive information dictionary. See usbms.driver for an example."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_driveinfo:1
# c53f16576fa341609d1ff2af970cf8da
msgid "Return the driveinfo dictionary. Usually called from get_device_information(), but if loading the driveinfo is slow for this driver, then it should set SLOW_DRIVEINFO. In this case, this method will be called by calibre after the book lists have been loaded. Note that it is not called on the device thread, so the driver should cache the drive info in the books() method and this function should return the cached data."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.card_prefix:1
# b105fdf85ae343baaa4167dd27b931f8
msgid "Return a 2 element list of the prefix to paths on the cards. If no card is present None is set for the card's prefix. E.G. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 8dc5bc52968a42b1a1c1ce78fad5dd84
msgid "Get total space available on the mountpoints:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:2
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:2
# ec84fd6642354767854c246ff00eabaf
# 2dcfb1d7fd4d41bdb56bf5b070f33c5e
msgid "Main memory"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:3
# 7f5616b1b44b4ff7a7375f68b1bb29c7
msgid "Memory Card A"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 1bf444eb632346d784bac1fbabde8c20
msgid "Memory Card B"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:6
# be5ef777df0b431cb4cdb36aeb4e3f80
msgid "A 3 element list with total space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return 0."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# f732e98703c14edb8ad1b3a2feef04f2
msgid "Get free space available on the mountpoints:"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:3
# e6d5b11451d84855a9dbb0266b80f779
msgid "Card A"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# 735c7e1eeba3422f99532af293671900
msgid "Card B"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:6
# 6a79dbfcade34097a10dd79f47b3e45e
msgid "A 3 element list with free space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return -1."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:1
# 8f83f39273364ae49c84cd3260834e51
msgid "Return a list of ebooks on the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:3
# d62f8ac734d0460fa8f451e675fd18e5
msgid "If 'carda' or 'cardb' return a list of ebooks on the specific storage card, otherwise return list of ebooks in main memory of device. If a card is specified and no books are on the card return empty list."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:8
# 8043108a112545a4a817b08c5c0ecd21
msgid "A BookList."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:1
# b4aec8716e8945728c9feddf1c51ac21
msgid "Upload a list of books to the device. If a file already exists on the device, it should be replaced. This method should raise a :class:`FreeSpaceError` if there is not enough free space on the device. The text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is not None otherwise it must contain the word \"memory\"."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:7
# da9d2ba4935040e698274cdcbeb37240
msgid "A list of paths"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:8
# 07a77813d485458f80119af25e69c034
msgid "A list of file names that the books should have once uploaded to the device. len(names) == len(files)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:10
# 6f10741908024833b94dcbabc58dd86a
msgid "If not None, it is a list of :class:`Metadata` objects. The idea is to use the metadata to determine where on the device to put the book. len(metadata) == len(files). Apart from the regular cover (path to cover), there may also be a thumbnail attribute, which should be used in preference. The thumbnail attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:17
# 510551237427494d959f2f8c9a1c2642
msgid "A list of 3-element tuples. The list is meant to be passed to :meth:`add_books_to_metadata`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
# 080e1ce8a09b4262a070fd59a0bc1d30
msgid "Add locations to the booklists. This function must not communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
# de4724aaec754f6399eab3cf64a27fe8
msgid "Result of a call to L{upload_books}"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
# a3834e4bb0c34aec8db76e80acd79301
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:3
# 17877fb26c9b43fc9c125e5661fe13e5
# 2accf1755f8a41c6b18f6c34b93685c0
# 9de5bd0af22a4f02ad818185704d5d03
msgid "A tuple containing the result of calls to (:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.delete_books:1
# 4bea0240140441cb9312975f55d8f4f9
msgid "Delete books at paths on device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
# c77b99bc15f84b7b8ba23cf0f1aab812
msgid "Remove books from the metadata list. This function must not communicate with the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
# 015642e8ec15454ca38ad6efe93275cf
msgid "paths to books on the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:1
# b1584afd30c748198ac363765bbb32bb
msgid "Update metadata on device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:1
# 2cd8909069b9480e8c580acf51d1162e
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:3
# 178c95ba719d47c7b22f0d0ec8e20191
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.config_widget:1
# d6489123bc9e46c0adeed30699868f9b
msgid "Should return a QWidget. The QWidget contains the settings for the device interface"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.save_settings:1
# d0fc13d07ec343bc86b35e573dc0b05c
msgid "Should save settings to disk. Takes the widget created in :meth:`config_widget` and saves all settings to disk."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.settings:1
# 0efe43a892284a058c936b80f3aa1373
msgid "Should return an opts object. The opts object should have at least one attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:1
# 4e80ea0e5e5a4ea09374fdfd89ec26a2
msgid "provide the driver the current set of plugboards and a function to select a specific plugboard. This method is called immediately before add_books and sync_booklists."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 30488815835e4d6a84c7c308f93ebfea
msgid "pb_func is a callable with the following signature::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# f6362996fa46423181e633a2286c355f
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:8
# 6a6652925da54f01beefaa94b936d932
msgid "You give it the current device name (either the class name or DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or 'device_db'), and the plugboards (you were given those by set_plugboards, the same place you got this method)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:13
# 9d50d67d2e7b4b9891e8755d693766d1
msgid "None or a single plugboard instance."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
# f037a372b66843a2b6c7203b3d1b564b
msgid "Set the device name in the driveinfo file to 'name'. This setting will persist until the file is re-created or the name is changed again."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
# 330b2719640847ca9449bf61f212a76a
msgid "Non-disk devices should implement this method based on the location codes returned by the get_device_information() method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:1
# 004464473e9343ec9cf0c760c278b5e5
msgid "Given a list of paths, returns another list of paths. These paths point to addable versions of the books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:4
# 9298273557bd475fb7f399aaa7f707a4
msgid "If there is an error preparing a book, then instead of a path, the position in the returned list for that book should be a three tuple: (original_path, the exception instance, traceback)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.startup:1
# b2b52a06e7e8474bb98738b10f5e31bd
msgid "Called when calibre is is starting the device. Do any initialization required. Note that multiple instances of the class can be instantiated, and thus __init__ can be called multiple times, but only one instance will have this method called. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.shutdown:1
# e5d7c2c9ffe949cca5b20ea56cbc6e6c
msgid "Called when calibre is shutting down, either for good or in preparation to restart. Do any cleanup required. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_uid:1
# d168240f02f941758b7e3299f08dfa5a
msgid "Must return a unique id for the currently connected device (this is called immediately after a successful call to open()). You must implement this method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ignore_connected_device:1
# b54630bec51e41a6935ba739543ecd1f
msgid "Should ignore the device identified by uid (the result of a call to get_device_uid()) in the future. You must implement this method if you set ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately after open(), so if open() caches some state, the driver should reset that state."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
# 6d15974fbd9d46aeba3d5862de81e05e
msgid "Return map of device uid to friendly name for all devices that the user has asked to be ignored."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
# 3cf043f08df8476bbdc59ff84dfc1848
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
# 6bfdb712e54f4a1db7470586cc1e9d1f
msgid "Implement this method if your device wants to override a particular preference. You must ensure that all call sites that want a preference that can be overridden use device_prefs['something'] instead of prefs['something']. Your method should call device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: metadata management (prefs['manage_device_metadata'])"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_library_info:1
# 6f920a346041444cbed9741249d380d1
msgid "Implement this method if you want information about the current calibre library. This method is called at startup and when the calibre library changes while connected."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
# 974b4802ee244263bd6bc036ef1acf15
msgid "Called by the device manager when starting plugins. If this method returns a string, then a) it supports the device manager's dynamic control interface, and b) that name is to be used when talking to the plugin."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:5
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:4
#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:3
# 8ee03a722eaa4b4995bfda6586147e9d
# f5678a7730914d308c081d278119ee26
# 7b308dd390834520abe827dff5eba300
# 7ed99f2be2b949ae87117be5e4c3a335
# c84827d7d4344d0d803a299fd2872045
# abbaa79dbd4b4e7faf9281b6d360f9b8
msgid "This method can be called on the GUI thread. A driver that implements this method must be thread safe."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:1
# 1b3b24eaa3154b0e8aa8cdbf2b5e152d
msgid "This method is called to start the plugin. The plugin should begin to accept device connections however it does that. If the plugin is already accepting connections, then do nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:1
# cde91506a4a64b4e8f17bee815141a3a
msgid "This method is called to stop the plugin. The plugin should no longer accept connections, and should cleanup behind itself. It is likely that this method should call shutdown. If the plugin is already not accepting connections, then do nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:1
# 62b8e911acbf4d7e9f6ee58688b6891f
msgid "Return the value of the option indicated by opt_string. This method can be called when the plugin is not started. Return None if the option does not exist."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:1
# 0c991bf727a142309a0323e2d460aed5
msgid "Set the value of the option indicated by opt_string. This method can be called when the plugin is not started."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:1
# 83829063d67c405c9a46050f62858a56
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:1
# 4b8851a886064a84a7faec6564db4789
msgid "Called during book matching when a book on the device is matched with a book in calibre's db. The method is responsible for syncronizing data from the device to calibre's db (if needed)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:5
# 6de153c29cb64a14bc6975c3f4e5c9da
msgid "The method must return a two-value tuple. The first value is a set of calibre book ids changed if calibre's database was changed or None if the database was not changed. If the first value is an empty set then the metadata for the book on the device is updated with calibre's metadata and given back to the device, but no GUI refresh of that book is done. This is useful when the calibre data is correct but must be sent to the device."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:13
# f7652b7c12bd4948a399641d91af11aa
msgid "The second value is itself a 2-value tuple. The first value in the tuple specifies whether a book format should be sent to the device. The intent is to permit verifying that the book on the device is the same as the book in calibre. This value must be None if no book is to be sent, otherwise return the base file name on the device (a string like foobar.epub). Be sure to include the extension in the name. The device subsystem will construct a send_books job for all books with not- None returned values. Note: other than to later retrieve the extension, the name is ignored in cases where the device uses a template to generate the file name, which most do. The second value in the returned tuple indicated whether the format is future-dated. Return True if it is, otherwise return False. Calibre will display a dialog to the user listing all future dated books."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:27
# 1f4e729e6a154106b2e5d7a007ffea00
msgid "Extremely important: this method is called on the GUI thread. It must be threadsafe with respect to the device manager's thread."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:30
# 550a9da7beef463f8b78646e69642c62
msgid "book_id: the calibre id for the book in the database. book_metadata: the Metadata object for the book coming from the device. first_call: True if this is the first call during a sync, False otherwise"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 254e551d6ffc49c5ad1e5407ce2c998e
msgid "Bases: :class:`list`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:1
# a7bd4c4e0e2443febc585f9a8486c6d3
msgid "A list of books. Each Book object must have the fields"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:3
# 5dcf8cff3bda42cc97784c144166ac60
msgid "title"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:4
# b155a7b3f20e49f796eee0d9f0d44668
msgid "authors"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:5
# ef634aa48cbd4c92823dc4a6f349c873
msgid "size (file size of the book)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:6
# 34fa245e304343b4af7b02cd3667e7e3
msgid "datetime (a UTC time tuple)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:7
# 8be0d89f9f354cec974c1ce6cc6b7f14
msgid "path (path on the device to the book)"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:8
# 98483cf68c6549879d03510ea731da2c
msgid "thumbnail (can be None) thumbnail is either a str/bytes object with the image data or it should have an attribute image_path that stores an absolute (platform native) path to the image"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:11
# e4c4dda531ff451cae8834d471b0cb2b
msgid "tags (a list of strings, can be empty)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.supports_collections:1
# 69ef909089f044d781ec3e352a0c5e8e
msgid "Return True if the device supports collections for this book list."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.add_book:1
# 258582509da041a89c55016fa70a1a8b
msgid "Add the book to the booklist. Intent is to maintain any device-internal metadata. Return True if booklists must be sync'ed"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.remove_book:1
# de620aff91a44daa95f29050f38c8007
msgid "Remove a book from the booklist. Correct any device metadata at the same time"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:1
# 819d407fe7d745b4a398bb38c345e0d5
msgid "Return a dictionary of collections created from collection_attributes. Each entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:5
# 286f18410a8c47a0a12cc94d40de28c6
msgid "The list of books is sorted by book title, except for collections created from series, in which case series_index is used."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:8
# 9d2c86fc0478400a9232fb8d84faebf1
msgid "A list of attributes of the Book object"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:109
# 78cd3c421b2b4b7eb50850d8e5edcaba
msgid "USB Mass Storage based devices"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:111
# 68a572d815634589a92ffa5e8bfcff1e
msgid "The base class for such devices is :class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits some of its functionality from its bases, documented below. A typical basic USBMS based driver looks like this:"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 33bd093f4f144611b25c87b00f4cdeaf
msgid "Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, :class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device:1
# 90449ae18bda47c5bb5ed791e9cd551c
msgid "This class provides logic common to all drivers for devices that export themselves as USB Mass Storage devices. Provides implementations for mounting/ejecting of USBMS devices on all platforms."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
# 9d604de65893453ea965014bc197be29
msgid "String identifying the main memory of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
# 2881020dbfd54d699395ce8f8d1befae
msgid "String identifying the first card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
# 8bb7611556ff4b0d883ae7ef9c9504a5
msgid "String identifying the second card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
# 963d27a04ac64f81831921f111b258ae
msgid "Used by the new driver detection to disambiguate main memory from storage cards. Should be a regular expression that matches the main memory mount point assigned by OS X"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
# 4f5751dcc1df49dba95a7aa991a682dd
msgid "The maximum length of paths created on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
# c4edf06d4f734e6c87a4a75b669a60fe
msgid "Put news in its own folder"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.windows_sort_drives:1
# 44810c845a00491083fcfce12210e04e
msgid "Called to disambiguate main memory and storage card for devices that do not distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The EB600"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_callback:1
# 3d260d56902e40e291fd78c80a1bf9a7
msgid "Callback to allow individual device drivers to override the path sanitization used by :meth:`create_upload_path`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.filename_callback:1
# 0c8c0b7825314b34a5edc10dbb3ab617
msgid "Callback to allow drivers to change the default file name set by :meth:`create_upload_path`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_path_components:1
# d202b506703f4d60aa25b39df4e96fa3
msgid "Perform any device specific sanitization on the path components for files to be uploaded to the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.get_annotations:1
# d2aa3a98397341c2a40e97bae457b4e1
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.add_annotation_to_library:1
# 8701e3b47a944d019df453f0dbc8ab24
msgid "Add an annotation to the calibre library"
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 5e2a64fffd744861a4300246979efdbe
msgid "Bases: :class:`calibre.devices.usbms.cli.CLI`, :class:`calibre.devices.usbms.device.Device`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS:1
# c54a2093ffd94fc0ba0b3708bb9c4e6a
msgid "The base class for all USBMS devices. Implements the logic for sending/getting/updating metadata/caching metadata/etc."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:1
# 6253544592154ebb9e353883b61fde56
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:3
# d7eb185e2d7c41f6b99e663e4d2123a6
msgid "The full path to the directory where the associated book is located."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:4
# 897d1de16fba49529c1657c28849c117
msgid "The name of the book file without the extension."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:5
# 465b1f05f1e64570b9edc9e10c4f823f
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:7
# 09962bd5261641bdb3981e759cf853ad
msgid "The full path to the ebook file"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.normalize_path:1
# 4a591793e0994af4affa7defa686dea7
msgid "Return path with platform native path separators"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:157
# f74dca644bcb4e8784e63158cc5eca5d
msgid "User Interface Actions"
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:159
# 084703682b0741e496337ac62c146df5
msgid "If you are adding your own plugin in a zip file, you should subclass both InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` method of you InterfaceActionBase subclass must return an instantiated object of your InterfaceBase subclass."
msgstr ""

#: ../../home/kovid/work/calibre/manual/<autodoc>:1
# 74017f50e5bc4116b0bad7614e88e90d
msgid "Bases: :class:`PyQt5.QtCore.QObject`"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:1
# 84bb58267feb4eb2bcce6e45a3658832
msgid "A plugin representing an \"action\" that can be taken in the graphical user interface. All the items in the toolbar and context menus are implemented by these plugins."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:5
# 89baf7b13750457ca1d16cddfddb13f6
msgid "Note that this class is the base class for these plugins, however, to integrate the plugin with calibre's plugin system, you have to make a wrapper class that references the actual plugin. See the :mod:`calibre.customize.builtins` module for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:10
# 6d090d71d0ab4ad5ab453dcd1b5ce68d
msgid "If two :class:`InterfaceAction` objects have the same name, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:13
# dd156be3e6a04ac5a147a36bf07fd26a
msgid "Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected` :meth:`shutting_down` and :meth:`initialization_complete` methods."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:17
# f5259858071c43ea91dc365e15bbe358
msgid "Once initialized, this plugin has access to the main calibre GUI via the :attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:22
# 531e29be860847a8af7445ab79662dc0
msgid "To access the actual plugin, use the :attr:`interface_action_base_plugin` attribute, this attribute only becomes available after the plugin has been initialized. Useful if you want to use methods from the plugin class like do_user_config()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:27
# 8938ee6a38014e09a579367311753cd1
msgid "The QAction specified by :attr:`action_spec` is automatically create and made available as ``self.qaction``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.name:1
# 255d407586814de9a70d6c5f35c4ff7a
msgid "The plugin name. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.priority:1
# d38b4fb0931445a7a2b523cd556768b9
msgid "The plugin priority. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.popup_type:1
# 7b775b84830c4661a691be18f3fc0477
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.auto_repeat:1
# 02f188d7e49342988dc46bd01b596e53
msgid "Whether this action should be auto repeated when its shortcut key is held down."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_spec:1
# f796108808a24b59a3dda70dec1c33dc
msgid "Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and keyboard shortcut can be None shortcut must be a string, None or tuple of shortcuts. If None, a keyboard shortcut corresponding to the action is not registered. If you pass an empty tuple, then the shortcut is registered with no default key binding."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_add_menu:1
# 43799553170f4ab3a98f84333f5f451e
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
# b85d061f8c5247bb8d74c681dbe7a1e1
msgid "If True, a clone of self.qaction is added to the menu of self.qaction If you want the text of this action to be different from that of self.qaction, set this variable to the new text"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_add_to:1
# ecd69213864a4ea8b8614ffbd1e11ecc
msgid "Set of locations to which this action must not be added. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_remove_from:1
# 4f04f988b13047eea8243232bed0ad5f
msgid "Set of locations from which this action must not be removed. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_type:1
# df5e1d35571143ffa521322b3cd199b4
msgid "Type of action 'current' means acts on the current view 'global' means an action that does not act on the current view, but rather on calibre as a whole"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accepts_drops:1
# d5210e1855d8465fb59fef37ea34a302
msgid "If True, then this InterfaceAction will have the opportunity to interact with drag and drop events. See the methods, :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
# 9203fb996b8f4b4ebfd55e34e75b784d
# 1423d3963a504b0a9ac7aaba2585d812
msgid "This method should return True iff this interface action is capable of handling the drag event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.drop_event:1
# f1fcef70a7ab406e87b2c733d1b9edc9
msgid "This method should perform some useful action and return True iff this interface action is capable of handling the drop event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI. You should not perform blocking/long operations in this function. Instead emit a signal or use QTimer.singleShot and return quickly. See the builtin actions for examples."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:1
# a18d614ccbf944acab1f32638a73f3ee
msgid "Convenience method to easily add actions to a QMenu. Returns the created QAction, This action has one extra attribute calibre_shortcut_unique_name which if not None refers to the unique name under which this action is registered with the keyboard manager."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:6
# 6a69e947b3cc4dcc83313932c870ad3a
msgid "The QMenu the newly created action will be added to"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:7
# a14e772e9fed4edb8f9bb8c6d1a18e0f
msgid "A unique name for this action, this must be globally unique, so make it as descriptive as possible. If in doubt add a uuid to it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:10
# 232d2975d81943499ae9247af0a196e8
msgid "The text of the action."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:11
# 11252a1fe55a479a95de1f413e3a451c
msgid "Either a QIcon or a file name. The file name is passed to the I() builtin, so you do not need to pass the full path to the images directory."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:14
# d82265397ac0455b9fc1e0329b7bc4c6
msgid "A string, a list of strings, None or False. If False, no keyboard shortcut is registered for this action. If None, a keyboard shortcut with no default keybinding is registered. String and list of strings register a shortcut with default keybinding as specified."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:18
# d167395adf284923904f56b4980ec04a
msgid "A description for this action. Used to set tooltips."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:20
# 8bd151735eb04609b6aca8e383b54458
msgid "A callable which is connected to the triggered signal of the created action."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:22
# e920c2d2413f4ff9b8abac9074082096
msgid "The test displayed to the user when customizing the keyboard shortcuts for this action. By default it is set to the value of ``text``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:12
# 3d2ec7b118c346678b63593cc208f0b5
msgid "A dictionary of the form ``{name : file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.genesis:1
# d4ea3bd951224c308b3c1c2f7ead4ca0
msgid "Setup this plugin. Only called once during initialization. self.gui is available. The action specified by :attr:`action_spec` is available as ``self.qaction``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:1
# 5a64f2d09ccc44adbd8ac5e6af732a5c
msgid "Called whenever the book list being displayed in calibre changes. Currently values for loc are: ``library, main, card and cardb``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:4
# fe6e8a284cb64677bb9e996b3e03b266
msgid "This method should enable/disable this action and its sub actions as appropriate for the location."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:1
# 1ba508b7b8d649db9f6ff396194f7aea
msgid "Called whenever the current library is changed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:3
# 1d50bef48ff34035877c1ef0b256fb7e
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
# ca53ee71e872470bb300ee31973cb019
msgid "Called once per action when the layout of the main GUI is completed. If your action needs to make changes to the layout, they should be done here, rather than in :meth:`initialization_complete`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.initialization_complete:1
# 4106a17b013d442291072ebab108d02c
msgid "Called once per action when the initialization of the main GUI is completed."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:1
# 54e93873eba94236b16b6580fad0ae89
msgid "Called once per plugin when the main GUI is in the process of shutting down. Release any used resources, but try not to block the shutdown for long periods of time."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:5
# fd4f18ec2cd146b29e95d8a0e33530df
msgid "False to halt the shutdown. You are responsible for telling the user why the shutdown was halted."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.InterfaceActionBase.load_actual_plugin:1
# cf2b146c41064436a5e9907ac1d30ea7
msgid "This method must return the actual interface action plugin object."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:174
# d169b9e071c94dbe9ad5a6c86233ab1f
msgid "Preferences Plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:1
# 37485d238ec54dd0ab94b654e6944f9e
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:3
# 48b9b3c28d7a48389b0ff8159f8e3977
msgid "This plugin has only one important method :meth:`create_widget`. The various fields of the plugin control how it is categorized in the UI."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.config_widget:1
# 9f22d809a4304aab9061478e1c88d0c4
msgid "Import path to module that contains a class named ConfigWidget which implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category_order:1
# cf3a6fe446a64703a536d952444586fe
msgid "Where in the list of categories the :attr:`category` of this plugin should be."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.name_order:1
# aab87c1c658f494897bb6dc87b9ed39a
msgid "Where in the list of names in a category, the :attr:`gui_name` of this plugin should be"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category:1
# d0fcff1f7cf04547a72ffe606e855430
msgid "The category this plugin should be in"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_category:1
# cfecdb5b8eec4e64b536db0b620a07f6
msgid "The category name displayed to the user for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_name:1
# 10eb293ff8d54e39bb9003191be6a414
msgid "The name displayed to the user for this plugin"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.icon:1
# 0eabee76a7ee4bf09caa48d1e9cb7221
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.description:1
# 141b30490d7c47b4856cd8aeb6681fdc
msgid "The description used for tooltips and the like"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:1
# b0765ec76754475ca255a85832df748d
msgid "Create and return the actual Qt widget used for setting this group of preferences. The widget must implement the :class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:5
# edea24aa94a04954bfe7d50da180a091
msgid "The default implementation uses :attr:`config_widget` to instantiate the widget."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface:1
# b3571951fd7f4ebbac6a9faa2a8c90b7
msgid "This class defines the interface that all widgets displayed in the Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base class that implements this interface and defines various convenience methods as well."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
# 85ee76082d474f1baa718c31eab39f00
msgid "This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
# 0e36bedbe3d34fa5be67b43db76e9240
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
# 209a9f9847a5496bb643f08a473c3c27
msgid "The tooltip for the Restore to defaults button"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
# be942b15c72e445e8f6714a59d77cb17
msgid "If True the Preferences dialog will not allow the user to set any more preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
# 297ecba6e98e45eba5c646852d40b114
msgid "Called once before the widget is displayed, should perform any necessary setup."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
# c199d90e31a5452fb55dc7182b0fea81
msgid "The main calibre graphical user interface"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
# 76e5526e686f431e95918af4ee079d54
msgid "Should set all config values to their initial values (the values stored in the config files)."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
# 15c315c596c24ed8baa670674b5d4725
msgid "Should set all config values to their defaults."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
# 9eb322e979d94332bedfab21e7ea3b3c
msgid "Save any changed settings. Return True if the changes require a restart, False otherwise. Raise an :class:`AbortCommit` exception to indicate that an error occurred. You are responsible for giving the user feedback about what the error is and how to correct it."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
# 69611032eff14137bb09c42893e7e445
msgid "Called once after this widget is committed. Responsible for causing the gui to reread any changed settings. Note that by default the GUI re-initializes various elements anyway, so most widgets won't need to use this method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:1
# 61ed9c8ccd5d47a588a7de3cd0693710
msgid "Base class that contains code to easily add standard config widgets like checkboxes, combo boxes, text fields and so on. See the :meth:`register` method."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:5
# 447e981ab9f54d319e0863298cc1b712
msgid "This class automatically handles change notification, resetting to default, translation between gui objects and config objects, etc. for registered settings."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:9
# 63b943a45f034634ab3a30d2241bdb3f
msgid "If your config widget inherits from this class but includes setting that are not registered, you should override the :class:`ConfigWidgetInterface` methods and call the base class methods inside the overrides."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:1
# ec2091b2cafa4384ae0ca295427a850e
msgid "Register a setting."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:3
# eac691453311459485752ef223650ebe
msgid "The setting name"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:4
# 2d5ae54dcb634618892b6791443e2722
msgid "The config object that reads/writes the setting"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:5
# 6cd89354f9b343f48a074dc3a4b6ca1b
msgid "The name of the GUI object that presents an interface to change the setting. By default it is assumed to be ``'opt_' + name``."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:8
# 02ba2abca46d47e49dac9a38fa87ef50
msgid "If this setting is a multiple choice (combobox) based setting, the list of choices. The list is a list of two element tuples of the form: ``[(gui name, value), ...]``"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:11
# 1335df1e0c7b478b8bd148d0d574e6b0
msgid "The class responsible for managing this setting. The default class handles almost all cases, so this param is rarely used."
msgstr ""

#: ../../home/kovid/work/calibre/manual/plugins.rst:190
# 5685c8e1264740ddb030c69afeab78b5
msgid "Viewer plugins"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.type:1
# 79d1f34c5be54dd29aa38a1bf45abe37
msgid "These plugins are used to add functionality to the calibre viewer."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_fonts:1
# 48b3566bd6b7408dbd6713a1537da2ae
msgid "This method is called once at viewer startup. It should load any fonts it wants to make available. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_javascript:1
# 894cd52c8493467c87eec2a60dcb7347
msgid "This method is called every time a new HTML document is loaded in the viewer. Use it to load javascript libraries into the viewer. For example::"
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.run_javascript:1
# 9968cd6c71ee47e3b8e577b4638e9077
msgid "This method is called every time a document has finished loading. Use it in the same way as load_javascript()."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_ui:1
# 20aaf765dc41407d9fc9aa0aa18e8a40
msgid "This method is called once when the viewer is created. Use it to make any customizations you want to the viewer's user interface. For example, you can modify the toolbars via ui.tool_bar and ui.tool_bar2."
msgstr ""

#: ../../home/kovid/work/calibre/src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_context_menu:1
# 0633554895bc4209b2f5257d075fe8af
msgid "This method is called every time the context (right-click) menu is shown. You can use it to customize the context menu. ``event`` is the context menu event and hit_test_result is the QWebHitTestResult for this event in the currently loaded document."
msgstr ""

