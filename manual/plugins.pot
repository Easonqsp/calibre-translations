# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.47.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-01 08:15+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../plugins.rst:6
# dd3f2e4032d84039bc2a252395c227fc
msgid "API Documentation for plugins"
msgstr ""

#: ../../plugins.rst:11
# bb7cac71386a4a73a94eacd6206a8d44
msgid "Defines various abstract base classes that can be subclassed to create powerful plugins. The useful classes are:"
msgstr ""

#: ../../plugins.rst:21
# 860a4cc9a8274c44bb040be22c113f2d
msgid "Plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:1
# acf3569b9dba45828e64df169257dfd6
msgid "A calibre plugin. Useful members include:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# 4d6a99de5a2847f68c47d02040a1a783
msgid "``self.plugin_path``: Stores path to the zip file that contains"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:4
# e81d976c2f784bd5bf0e3d7b4c387cbe
msgid "this plugin or None if it is a builtin plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# 3cb46f63e3c648669c85b5cd8d4bdb36
msgid "``self.site_customization``: Stores a customization string entered"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:7
# cefa6759e0cc446891c778b4e7683c93
msgid "by the user."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:9
# 1dfd579b67cf4468b9b8d6211884f28b
msgid "Methods that should be overridden in sub classes:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:11
# 44c1e4f633f844418ad359b5b991043f
msgid ":meth:`initialize`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:12
# a2fe2adab06647afbe5bbbed87084164
msgid ":meth:`customization_help`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:14
# f7f6db1e5d8c4c248f5420f927d8d761
msgid "Useful methods:"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin:16
# 5d9b6ff2de134f68b49bed69604ca804
msgid ":meth:`temporary_file`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.supported_platforms:1
# 5856560008764b859072085efb806422
msgid "List of platforms this plugin works on For example: ``['windows', 'osx', 'linux']``"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.name:1
# 38586449ad3349a9956ecd405394e9b8
msgid "The name of this plugin. You must set it something other than Trivial Plugin for it to work."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.version:1
# 0d433d894fec4ee6a0da3b98cd57b737
msgid "The version of this plugin as a 3-tuple (major, minor, revision)"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.description:1
# 924c178e4f4945c086346703a3790ee5
msgid "A short string describing what this plugin does"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.author:1
# 9946a958e9db477e9f92f5e83a48b1f3
msgid "The author of this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.priority:1
# c5a99a36eb454d21a4def6afb675b482
msgid "When more than one plugin exists for a filetype, the plugins are run in order of decreasing priority i.e. plugins with higher priority will be run first. The highest possible priority is ``sys.maxint``. Default priority is 1."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.minimum_calibre_version:1
# 17626cee554c4614899cfa857cb7f8f4
msgid "The earliest version of calibre this plugin requires"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.can_be_disabled:1
# 1dd380732171415384af6e186cabb3f1
msgid "If False, the user will not be able to disable this plugin. Use with care."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.type:1
# 4516a313194442bdb80a8bae4695f730
msgid "The type of this plugin. Used for categorizing plugins in the GUI"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:1
# 20b810f2503841a9a3e94dcb81146723
msgid "Called once when calibre plugins are initialized. Plugins are re-initialized every time a new plugin is added."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:4
# 3cf67ae88e3048babeb4566e2cfc0d4c
msgid "Perform any plugin specific initialization here, such as extracting resources from the plugin zip file. The path to the zip file is available as ``self.plugin_path``."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.initialize:8
# 80e16e0e66fa4558acdbd1bc3148822b
msgid "Note that ``self.site_customization`` is **not** available at this point."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:1
# 3c2c6eeb6b2c4feca443626bc46f5112
msgid "Implement this method and :meth:`save_settings` in your plugin to use a custom configuration dialog, rather then relying on the simple string based default customization."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:5
# f5c573eff11740aaa8d9cb43e28d9104
msgid "This method, if implemented, must return a QWidget. The widget can have an optional method validate() that takes no arguments and is called immediately after the user clicks OK. Changes are applied if and only if the method returns True."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.config_widget:10
# b77d77db4e254a8293ba6fd7c0d342e6
msgid "If for some reason you cannot perform the configuration at this time, return a tuple of two strings (message, details), these will be displayed as a warning dialog to the user and the process will be aborted."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:1
# 8a085e57800b429bb50f914aff6ebe0b
msgid "Save the settings specified by the user with config_widget."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.save_settings:3
# 31b608589a4842e9846b36cfa00ea900
msgid "The widget returned by :meth:`config_widget`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.do_user_config:1
# 078ba518408c4d2f838da2ab1a6df261
msgid "This method shows a configuration dialog for this plugin. It returns True if the user clicks OK, False otherwise. The changes are automatically applied."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:1
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:1
# 8fab3aeeaf44489382625f6d62dc6a30
# 68ae197b2f8b4188a4b41e3b7d784a67
msgid "If this plugin comes in a ZIP file (user added plugin), this method will allow you to load resources from the ZIP file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:4
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:4
# c29dee5fd2be402c889657ce2310ceb3
# 4d93a75b880a454aa1e133009a7b24c0
msgid "For example to load an image::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:10
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:10
# 2429433f21584439be886501cb188307
# 2b9f509c73694e9199aff87a7aee9443
msgid "List of paths to resources in the zip file using / as separator"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.load_resources:12
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.load_resources:12
# 8a28cb04766c4a579341f0abf1b8e877
# 7ce927ce97ad4a73879b460e6d17970b
msgid "A dictionary of the form ``{name : file_contents}``. Any names that were not found in the zip file will not be present in the dictionary."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:1
# 11644a3f04d549cead9649c36bfccf92
msgid "Return a string giving help on how to customize this plugin. By default raise a :class:`NotImplementedError`, which indicates that the plugin does not require customization."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:5
# b8e2592b95744162af0dc43aee01c052
msgid "If you re-implement this method in your subclass, the user will be asked to enter a string as customization for this plugin. The customization string will be available as ``self.site_customization``."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:10
# 3d1bd9c9cec54e498a3f3301ed82627a
msgid "Site customization could be anything, for example, the path to a needed binary on the user's computer."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.customization_help:13
# 9baaee2120b747c98a4c7e7283eeea13
msgid "If True return HTML help, otherwise return plain text help."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:1
# e0e8c9fad4864201a17559c20cd54785
msgid "Return a file-like object that is a temporary file on the file system. This file will remain available even after being closed and will only be removed on interpreter shutdown. Use the ``name`` member of the returned object to access the full path to the created temporary file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.temporary_file:6
# fc5bc24aa5e043658af9f1b51b307d14
msgid "The suffix that the temporary file will have."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.Plugin.cli_main:1
# 19a01cffceaf49ea93f68f3cb02cdb43
msgid "This method is the main entry point for your plugins command line interface. It is called when the user does: calibre-debug -r \"Plugin Name\". Any arguments passed are present in the args variable."
msgstr ""

#: ../../plugins.rst:30
# 01e12c2a9ef34cdbb8ff6a504a6a2c95
msgid "FileTypePlugin"
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
# 38427792f060481788b2e69449e01255
# b630c539cf084fbca24da9bb22647a31
# 1a725aa943b542b0a8410b158276dbec
# 53680c4d8da44d91995315a72a5843a3
# fb93044a30a34fbeb7fc6abfc4fbfd08
# 5843c450c622407eb4fd170ad437bcd7
# 9732f397fcda4dccbe910f21b19c9ab9
# b9b0a3faebcc4c2ebb997792cb8ddfb1
# b826bf082e78459ea82431918aaffdad
# 920f5946425745f8b48072dbf998c671
# 1e4229ad48964c4ab9fcef2500deab6f
msgid "Bases: :class:`calibre.customize.Plugin`"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin:1
# 5416e2b46fea44db854465034993181c
msgid "A plugin that is associated with a particular set of file types."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.file_types:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.file_types:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.file_types:1
# e923c7e4360742ff907d1be76bfc8c58
# 62865327c972479faa10baf420625ec4
# 33cc9d39454f4e9fa2fc328078410816
msgid "Set of file types for which this plugin should be run For example: ``set(['lit', 'mobi', 'prc'])``"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_import:1
# ee10acc85aa445f08f1985236a951cca
msgid "If True, this plugin is run when books are added to the database"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postimport:1
# 1927092094f44bcab53aacb908d644ff
msgid "If True, this plugin is run after books are added to the database"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_preprocess:1
# b6fe91f15d1d4dceb6b8d78aae41da5f
msgid "If True, this plugin is run just before a conversion"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.on_postprocess:1
# 982387a5deae411b891d19ba5246995b
msgid "If True, this plugin is run after conversion on the final file produced by the conversion output plugin."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:1
# d37edeee931f44a8aa77fee3e505f9ec
msgid "Run the plugin. Must be implemented in subclasses. It should perform whatever modifications are required on the ebook and return the absolute path to the modified ebook. If no modifications are needed, it should return the path to the original ebook. If an error is encountered it should raise an Exception. The default implementation simply return the path to the original ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:9
# a16130fb58394cba9bd7611226e926a3
msgid "The modified ebook file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:12
# 2a8fa20d91034abdacfdae4dc5d6e8da
msgid "Absolute path to the ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.run:14
# cb13d27fc3ad49ee8b7a67ea56927c98
msgid "Absolute path to the modified ebook."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:1
# 53497b001fea4a53a2f213bd981763aa
msgid "Called post import, i.e., after the book file has been added to the database."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:3
# 9fbd5626b20548f5b7ec13322c1ea0ca
msgid "Database id of the added book."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.FileTypePlugin.postimport:4
# 198bf3b8e9964940be7d7456a3438c40
msgid "The file type of the book that was added. :param db: Library database."
msgstr ""

#: ../../plugins.rst:41
# dcbfd14ba65d4e85897c76a4d9175fc4
msgid "Metadata plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin:1
#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin:1
# e8dc17c55584473f84eb1c8c45912637
# 237fbb36637f4ea3ab661622f1828f27
msgid "A plugin that implements reading metadata from a set of file types."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataReaderPlugin.get_metadata:1
# 0535c12cc4794f54aab5c0fa7de193d6
msgid "Return metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :return: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.MetadataWriterPlugin.set_metadata:1
# 436013519df7414a8fc99d9c0e2e9e30
msgid "Set metadata for the file represented by stream (a file like object that supports reading). Raise an exception when there is an error with the input data. :param type: The type of file. Guaranteed to be one of the entries in :attr:`file_types`. :param mi: A :class:`calibre.ebooks.metadata.book.Metadata` object"
msgstr ""

#: ../../plugins.rst:56
# ef93a966fc724a5c877b1945cfbb34a9
msgid "Catalog plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin:1
# ff08eb1103e64599bdfbe79ec72fe72d
msgid "A plugin that implements a catalog generator."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.file_types:1
# 3e66a7aadc9e4c18bd2f0b6a5a6317da
msgid "Output file type for which this plugin should be run For example: 'epub' or 'xml'"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.cli_options:1
# 0d983ca4b92148c49b9f1a816944f6cb
msgid "CLI parser options specific to this plugin, declared as namedtuple Option::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.initialize:1
# 94e7fa13102f4d31b8e16e997b2ca8c4
msgid "If plugin is not a built-in, copy the plugin's .ui and .py files from the zip file to $TMPDIR. Tab will be dynamically generated and added to the Catalog Options dialog in calibre.gui2.dialogs.catalog.py:Catalog"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:1
# 5b70efaaa77d438588cad6ac72e54cfd
msgid "Run the plugin. Must be implemented in subclasses. It should generate the catalog in the format specified in file_types, returning the absolute path to the generated catalog file. If an error is encountered it should raise an Exception."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:7
# 0a46b9fc3bce420fa0a34bef06751343
msgid "The generated catalog file should be created with the :meth:`temporary_file` method."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:10
# 96cf4cf063f14929b0e78fb61f7bfaaa
msgid "Absolute path to the generated catalog file."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:11
# cb02b6f870744f0c9f2d4a5d6b287272
msgid "A dictionary of keyword arguments"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.CatalogPlugin.run:12
# a2b61c6abc374c1b955aae24dbd86d61
msgid "A LibraryDatabase2 object"
msgstr ""

#: ../../plugins.rst:66
# fa03b5275519451ca61e0c40f6a48ec8
msgid "Metadata download plugins"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.capabilities:1
# 9afe34283d8e40d7a0ced46693be50b6
msgid "Set of capabilities supported by this plugin. Useful capabilities are: 'identify', 'cover'"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.touched_fields:1
# d4ae1744a5454976813c04410ffa9857
msgid "List of metadata fields that can potentially be download by this plugin during the identify phase"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.has_html_comments:1
# 0b3fc51dfcf642d2847de1578ef02bf5
msgid "Set this to True if your plugin returns HTML formatted comments"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.supports_gzip_transfer_encoding:1
# 024be8349e304071803944415fcb5bd0
msgid "Setting this to True means that the browser object will add Accept-Encoding: gzip to all requests. This can speedup downloads but make sure that the source actually supports gzip transfer encoding correctly first"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.cached_cover_url_is_reliable:1
# 31e83bc1a4184711856ef7da363dc3a9
msgid "Cached cover URLs can sometimes be unreliable (i.e. the download could fail or the returned image could be bogus. If that is often the case with this source set to False"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.options:1
# af73ba59de654c3d98c22fb974390698
msgid "A list of :class:`Option` objects. They will be used to automatically construct the configuration widget for this plugin"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.config_help_message:1
# a1174760395a4ed190dc9141d3c4af1b
msgid "A string that is displayed at the top of the config widget for this plugin"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.can_get_multiple_covers:1
# f6a06883c04b49faa164ff3c7a45364e
msgid "If True this source can return multiple covers for a given query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.auto_trim_covers:1
# caaca67d2a814cdb86e9e6761940bcd8
msgid "If set to True covers downloaded by this plugin are automatically trimmed."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.is_configured:1
# 584e18131b9640958847ecbefd6043d4
msgid "Return False if your plugin needs to be configured before it can be used. For example, it might need a username/password/API key."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_author_tokens:1
# a350443a774241e4bebc104d70ff55dc
msgid "Take a list of authors and return a list of tokens useful for an AND search query. This function tries to return tokens in first name middle names last name order, by assuming that if a comma is in the author name, the name is in lastname, other names form."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_title_tokens:1
# 019ccb2b65c8417c8511fdd64817e051
msgid "Take a title and return a list of tokens useful for an AND search query. Excludes connectives(optionally) and punctuation."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.split_jobs:1
# ec30aa6e73824848896bf7aca27737e4
msgid "Split a list of jobs into at most num groups, as evenly as possible"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.test_fields:1
# da8b772885324f89b2cd6eecb66d9b80
msgid "Return the first field from self.touched_fields that is null on the mi object"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.clean_downloaded_metadata:1
# a8e81765c7844ef698800fc9f1702ebb
msgid "Call this method in your plugin's identify method to normalize metadata before putting the Metadata object into result_queue. You can of course, use a custom algorithm suited to your metadata source."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url:1
# cd11119ce3534842b0e44b062ef6424d
msgid "Return a 3-tuple or None. The 3-tuple is of the form: (identifier_type, identifier_value, URL). The URL is the URL for the book identified by identifiers at this source. identifier_type, identifier_value specify the identifier corresponding to the URL. This URL must be browseable to by a human using a browser. It is meant to provide a clickable link for the user to easily visit the books page at this source. If no URL is found, return None. This method must be quick, and consistent, so only implement it if it is possible to construct the URL from a known scheme given identifiers."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_book_url_name:1
# ba1ffb937f904cae8cbdf1e00469ccbe
msgid "Return a human readable name from the return value of get_book_url()."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:1
# dac2bc0769194621b31838af397570bf
msgid "Return cached cover URL for the book identified by the identifiers dict or None if no such URL exists."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.get_cached_cover_url:4
# 47a3515f7cd34ca1825128ff296f1172
msgid "Note that this method must only return validated URLs, i.e. not URLS that could result in a generic cover image or a not found error."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:1
# 387ef15b319c46dea1807c18caad6fd2
msgid "Return a function that is used to generate a key that can sort Metadata objects by their relevance given a search query (title, authors, identifiers)."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:5
# 1a51f841c722450b8c883121d8cbd9cc
msgid "These keys are used to sort the results of a call to :meth:`identify`."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify_results_keygen:7
# 5f65e5b5119c42189bd6e10c3b4cef2c
msgid "For details on the default algorithm see :class:`InternalMetadataCompareKeyGen`. Re-implement this function in your plugin if the default algorithm is not suitable."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:1
# fe3b804114fc4b128bc2faa2f047c610
msgid "Identify a book by its title/author/isbn/etc."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:3
# ace91f5e116040e296e9c01ee065f2c3
msgid "If identifiers(s) are specified and no match is found and this metadata source does not store all related identifiers (for example, all ISBNs of a book), this method should retry with just the title and author (assuming they were specified)."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:8
# a96adb4fb4ae4b9db788146cd40d2640
msgid "If this metadata source also provides covers, the URL to the cover should be cached so that a subsequent call to the get covers API with the same ISBN/special identifier does not need to get the cover URL again. Use the caching API for this."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:13
# bb3b371ef5854efd8a78fbfc5e66d23b
msgid "Every Metadata object put into result_queue by this method must have a `source_relevance` attribute that is an integer indicating the order in which the results were returned by the metadata source for this query. This integer will be used by :meth:`compare_identify_results`. If the order is unimportant, set it to zero for every result."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:19
# eb82457af3954bf9a558c097e9f78d38
msgid "Make sure that any cover/isbn mapping information is cached before the Metadata object is put into result_queue."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:22
# 515c8d00488a45daa3efac0443c5d511
msgid "A log object, use it to output debugging information/errors"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:23
# 367cf08feb4b49809819755defeebd83
msgid "A result Queue, results should be put into it. Each result is a Metadata object"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:25
# b9f257287f1944d5b54648190dfbffd0
msgid "If abort.is_set() returns True, abort further processing and return as soon as possible"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:27
# 2df2c6df93eb404ab45795e18eda1ec0
msgid "The title of the book, can be None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:28
# 649c7354f2d644c4b151b9cfc553cb69
msgid "A list of authors of the book, can be None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:29
# 36bf1d5d49a1475fa005e85239ad7a27
msgid "A dictionary of other identifiers, most commonly {'isbn':'1234...'}"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:31
# 433b62e01eb54e3fb7774cc3cd6dd1c5
msgid "Timeout in seconds, no network request should hang for longer than timeout."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.identify:33
# 2bd3234a27a84c76bc480148f5735144
msgid "None if no errors occurred, otherwise a unicode representation of the error suitable for showing to the user"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:1
# d07dcc4ae947467dbd05055baa54d0d6
msgid "Download a cover and put it into result_queue. The parameters all have the same meaning as for :meth:`identify`. Put (self, cover_data) into result_queue."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:5
# a0c1c7272d8b4eeeb7a82a13f3f173ea
msgid "This method should use cached cover URLs for efficiency whenever possible. When cached data is not present, most plugins simply call identify and use its results."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.Source.download_cover:9
# 02a114d2b0b74ccdbf3ef5e17927260f
msgid "If the parameter get_best_cover is True and this plugin can get multiple covers, it should only get the \"best\" one."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:1
# 00f98c7f1d2b468cbb90f82e3c3f4a1a
msgid "Generate a sort key for comparison of the relevance of Metadata objects, given a search query. This is used only to compare results from the same metadata source, not across different sources."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:5
# 3a82b4c512eb4b5e9846942aca7a448a
msgid "The sort key ensures that an ascending order sort is a sort by order of decreasing relevance."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:8
# 31b6f30382594d0fbdf32bed58782861
msgid "The algorithm is:"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:10
# 53c5c5970fdd4eeeb97fd64dedd8fd6f
msgid "Prefer results that have the same ISBN as specified in the query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:11
# 60369c7e60a44b04aeb5e72a7c7bab71
msgid "Prefer results with a cached cover URL"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:12
# 366550c39dda4af99063ba539cee72ac
msgid "Prefer results with all available fields filled in"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:13
# 6200acda17a449e98555556250af40c7
msgid "Prefer results that are an exact title match to the query"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:14
# 5717f88df192416799d822108599a697
msgid "Prefer results with longer comments (greater than 10% longer)"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:15
# 287ced099577465b93947627d880fa32
msgid "Use the relevance of the result as reported by the metadata source's search"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/sources/base.py:docstring of calibre.ebooks.metadata.sources.base.InternalMetadataCompareKeyGen:16
# f546b2c48497410dbe4e45c9c8b626d2
msgid "engine"
msgstr ""

#: ../../plugins.rst:78
# f1a788c536364674839db66bc4441d63
msgid "Conversion plugins"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin:1
# 8ae2f34e2e2847439d68998f68986f2c
msgid "InputFormatPlugins are responsible for converting a document into HTML+OPF+CSS+etc. The results of the conversion *must* be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.file_types:1
# 395820e6ed844ee8915e9100e0e5f8d7
msgid "Set of file types for which this plugin should be run For example: ``set(['azw', 'mobi', 'prc'])``"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.is_image_collection:1
# d691471d897e44208ba024129560d8c0
msgid "If True, this input plugin generates a collection of images, one per HTML file. This can be set dynamically, in the convert method if the input files can be both image collections and non-image collections. If you set this to True, you must implement the get_images() method that returns a list of images."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.core_usage:1
# 914ee166378048388a3fc436b05d6709
msgid "Number of CPU cores used by this plugin A value of -1 means that it uses all available cores"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.for_viewer:1
# 87288a098b114840815ba3514b188f76
msgid "If set to True, the input plugin will perform special processing to make its output suitable for viewing"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.output_encoding:1
# e925be63ab89483284391981a8b12883
msgid "The encoding that this input plugin creates files in. A value of None means that the encoding is undefined and must be detected individually"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.common_options:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.common_options:1
# c63d172410a74ad2b3108d55f819361d
# 32e503d2247441299bc90017b9d33c83
msgid "Options shared by all Input format plugins. Do not override in sub-classes. Use :attr:`options` instead. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.options:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.options:1
# b80e065e854c497f8ed44bc8bd38c01d
# 9a090412672647ad90bb97d7fe384ef3
msgid "Options to customize the behavior of this plugin. Every option must be an instance of :class:`OptionRecommendation`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.recommendations:1
#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.recommendations:1
# 1510a0a301964923b55bec2ee8d5e2b2
# 279d9570caaa4a24971616b8978e5a0f
msgid "A set of 3-tuples of the form (option_name, recommended_value, recommendation_level)"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.get_images:1
# db9ca8297bae47b29c7ca7d1497331f6
msgid "Return a list of absolute paths to the images, if this input plugin represents an image collection. The list of images is in the same order as the spine and the TOC."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:1
# ee4bfbaa19ee45059cace59d1a25aae4
msgid "This method must be implemented in sub-classes. It must return the path to the created OPF file or an :class:`OEBBook` instance. All output should be contained in the current directory. If this plugin creates files outside the current directory they must be deleted/marked for deletion before this method returns."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:8
# 5dfb48c3d01c498781c909e77ee37ac1
msgid "A file like object that contains the input file."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:9
# 005e5e06c3bd4fe7abf823361a767ef6
msgid "Options to customize the conversion process. Guaranteed to have attributes corresponding to all the options declared by this plugin. In addition, it will have a verbose attribute that takes integral values from zero upwards. Higher numbers mean be more verbose. Another useful attribute is ``input_profile`` that is an instance of :class:`calibre.customize.profiles.InputProfile`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:17
# d422f9a25e944429bae0abb95e8a5b81
msgid "The extension (without the .) of the input file. It is guaranteed to be one of the `file_types` supported by this plugin."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:20
# 766cc56b9a7343db8bb1b7b26f2ecc89
msgid "A :class:`calibre.utils.logging.Log` object. All output should use this object."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.convert:22
# e8c61559f00245dd9194cadde3aa78e8
msgid "A dictionary of various information that the input plugin can get easily that would speed up the subsequent stages of the conversion."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.postprocess_book:1
# b7ccff03d6354574803d6605e2d6cdaa
msgid "Called to allow the input plugin to perform postprocessing after the book has been parsed."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.specialize:1
# ef565ee98e9b4eb7864c1b6df371c9c5
msgid "Called to allow the input plugin to specialize the parsed book for a particular output format. Called after postprocess_book and before any transforms are performed on the parsed book."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.InputFormatPlugin.gui_configuration_widget:1
# 303941327285486fa81c5b5dd13b723e
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builting input plugins for examples."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:1
# 4fd6174db4b24eb3a5af40770d4521c5
msgid "OutputFormatPlugins are responsible for converting an OEB document (OPF+HTML) into an output ebook."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin:4
# 22cefd8d270d4289a3086809a534d893
msgid "The OEB document can be assumed to be encoded in UTF-8. The main action happens in :meth:`convert`."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.file_type:1
# feef6e9f80b24bb496f31c1952c11ce2
msgid "The file type (extension without leading period) that this plugin outputs"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:1
# 41a28298717d48d78dc2b02c7019a3bf
msgid "Render the contents of `oeb_book` (which is an instance of :class:`calibre.ebooks.oeb.OEBBook` to the file specified by output."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:4
# c755e2b3cc25471982ece04a6b15b325
msgid "Either a file like object or a string. If it is a string it is the path to a directory that may or may not exist. The output plugin should write its output into that directory. If it is a file like object, the output plugin should write its output into the file."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:8
# b60e83fab0fd4ba99abe477a0144207d
msgid "The input plugin that was used at the beginning of the conversion pipeline."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:10
# a8e008ec156e4f6baa7f59fddbb750c6
msgid "Conversion options. Guaranteed to have attributes corresponding to the OptionRecommendations of this plugin."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.convert:12
# 41b9d568f2e34ad1b2f9ab42098c646a
msgid "The logger. Print debug/info messages etc. using this."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:1
# 4950650b815b44f19e258e80478577e1
msgid "Can be used to make changes to the css during the CSS flattening process."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:4
# bac7bab64b7a4f43aa619e8d1156eefe
msgid "The item (HTML file) being processed"
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.specialize_css_for_output:5
# 8ddfb51316f84f99805ef895e21ce697
msgid "A Stylizer object containing the flattened styles for item. You can get the style for any element by stylizer.style(element)."
msgstr ""

#: ../../../src/calibre/customize/conversion.py:docstring of calibre.customize.conversion.OutputFormatPlugin.gui_configuration_widget:1
# 2bbf83c36d44462f9c95b76ae99f51e3
msgid "Called to create the widget used for configuring this plugin in the calibre GUI. The widget must be an instance of the PluginWidget class. See the builtin output plugins for examples."
msgstr ""

#: ../../plugins.rst:93
# edf09c574a5a493d8e58f2702cd77f83
msgid "Device Drivers"
msgstr ""

#: ../../plugins.rst:97
# b4355d831d3f484ab8f56aedb277a040
msgid "The base class for all device drivers is :class:`DevicePlugin`. However, if your device exposes itself as a USBMS drive to the operating system, you should use the USBMS class instead as it implements all the logic needed to support these kinds of devices."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin:1
# 1d5db085b79c4caf917fa42d7a9aa40e
msgid "Defines the interface that should be implemented by backends that communicate with an ebook reader."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.FORMATS:1
# d9ec50e9653f495c80adfbd0e8b9c9bb
msgid "Ordered list of supported formats"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VENDOR_ID:1
# 60a4fd46cf4f4fac91e2b3b1becaf808
msgid "VENDOR_ID can be either an integer, a list of integers or a dictionary If it is a dictionary, it must be a dictionary of dictionaries, of the form::"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.PRODUCT_ID:1
# bd148c7f7f4d4728a3b025df67e36a5d
msgid "An integer or a list of integers"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.BCD:1
# bb2ce80edba34e37a9e9584e070558e9
msgid "BCD can be either None to not distinguish between devices based on BCD, or it can be a list of the BCD numbers of all devices supported by this driver."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_HEIGHT:1
# d249df6ad1d54107a1b38fc46d330a98
msgid "Height for thumbnails on the device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.THUMBNAIL_COMPRESSION_QUALITY:1
# 536bb55e7d3048308316ff6dbc110016
msgid "Width for thumbnails on the device. Setting this will force thumbnails to this size, not preserving aspect ratio. If it is not set, then the aspect ratio will be preserved and the thumbnail will be no higher than THUMBNAIL_HEIGHT Compression quality for thumbnails. Set this closer to 100 to have better quality thumbnails with fewer compression artifacts. Of course, the thumbnails get larger as well."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.WANTS_UPDATED_THUMBNAILS:1
# 431469a902fe4bcdbf185a623c503d8c
msgid "Set this to True if the device supports updating cover thumbnails during sync_booklists. Setting it to true will ask device.py to refresh the cover thumbnails during book matching"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_SET_METADATA:1
# 005c10837be5444a8723e21b2999f6ae
msgid "Whether the metadata on books can be set via the GUI."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.CAN_DO_DEVICE_DB_PLUGBOARD:1
# 94869af330834971a4119b7d6d696f45
msgid "Whether the device can handle device_db metadata plugboards"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.path_sep:1
# 5f9943edfe9e4a0e974d407c38c65ba1
msgid "Path separator for paths to books on device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.icon:1
# aa1d20e69d3b4b54a5b2411318fb2348
msgid "Icon for this device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.OPEN_FEEDBACK_MESSAGE:1
# 06e9368dee5c458e8d8a00ca3575f07d
msgid "GUI displays this as a message if not None. Useful if opening can take a long time"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.VIRTUAL_BOOK_EXTENSIONS:1
# 44d8907755ff4c158a84ea3c67c8f11d
msgid "Set of extensions that are \"virtual books\" on the device and therefore cannot be viewed/saved/added to library For example: ``frozenset(['kobo'])``"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.NUKE_COMMENTS:1
# ec46441c59f843d58c20f3518205efb9
msgid "Whether to nuke comments in the copy of the book sent to the device. If not None this should be short string that the comments will be replaced by."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.MANAGES_DEVICE_PRESENCE:1
# 0a399bc79d83464db4d1d47c1a087048
msgid "If True indicates that  this driver completely manages device detection, ejecting and so forth. If you set this to True, you *must* implement the detect_managed_devices and debug_managed_device_detection methods. A driver with this set to true is responsible for detection of devices, managing a blacklist of devices, a list of ejected devices and so forth. calibre will periodically call the detect_managed_devices() method and is it returns a detected device, calibre will call open(). open() will be called every time a device is returned even is previous calls to open() failed, therefore the driver must maintain its own blacklist of failed devices. Similarly, when ejecting, calibre will call eject() and then assuming the next call to detect_managed_devices() returns None, it will call post_yank_cleanup()."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.SLOW_DRIVEINFO:1
# 1ae9b4e382b4451684e66f28ea8f47ae
msgid "If set the True, calibre will call the :meth:`get_driveinfo()` method after the books lists have been loaded to get the driveinfo."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ASK_TO_ALLOW_CONNECT:1
# 387dd2463b5c43a9a19bf14d4d847baa
msgid "If set to True, calibre will ask the user if they want to manage the device with calibre, the first time it is detected. If you set this to True you must implement :meth:`get_device_uid()` and :meth:`ignore_connected_device()` and :meth:`get_user_blacklisted_devices` and :meth:`set_user_blacklisted_devices`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.user_feedback_after_callback:1
# e6464244c6834fc2b08070bd79d3a6cd
msgid "Set this to a dictionary of the form {'title':title, 'msg':msg, 'det_msg':detailed_msg} to have calibre popup a message to the user after some callbacks are run (currently only upload_books). Be careful to not spam the user with too many messages. This variable is checked after *every* callback, so only set it when you really need to."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:1
# 04ccf48eb79e46158909e61f2f45cb84
msgid "Return True, device_info if a device handled by this plugin is currently connected."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_usb_connected:3
# d737c5f5e45b4b7396481bf870a7bf89
msgid "List of devices currently connected"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:1
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:1
# dd20e1e8e48047c4b4e12f3b8ce6d40e
# 85a9939d644049ec9c9f89adbd7dbe1b
msgid "Called only if MANAGES_DEVICE_PRESENCE is True."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:3
# f46d1806ce7445b18e8c0b4219bcb9b1
msgid "Scan for devices that this driver can handle. Should return a device object if a device is found. This object will be passed to the open() method as the connected_device. If no device is found, return None. The returned object can be anything, calibre does not use it, it is only passed to open()."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:9
# 9d61776e83aa4c489e10de49223b7e48
msgid "This method is called periodically by the GUI, so make sure it is not too resource intensive. Use a cache to avoid repeatedly scanning the system."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:13
# 094c416ee07444d9a703fa7758e2e8d3
msgid "Set of USB devices found on the system."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.detect_managed_devices:15
# 039a662790d247149a008a100f619a60
msgid "If True and the driver uses a cache to prevent repeated scanning, the cache must be flushed."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:3
# 5d4c193717784d89be2294939fc2baa6
msgid "Should write information about the devices detected on the system to output, which is a file like object."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.debug_managed_device_detection:6
# 8fed8bd2aacf4ec8ad3f6336dec2f6bb
msgid "Should return True if a device was detected and successfully opened, otherwise False."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:1
# b4649dd8d27846c88dda62e446764e50
msgid "The key to unlock the device"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:2
# 05bf30a0059c48a191ae38211eaba8e1
msgid "If true the packet stream to/from the device is logged"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:3
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:3
# e0d4d834cb674733878636226d5603d2
# 9e0a9db3883e4d42acaa9ef8696e9431
msgid "Function that is called with a % progress (number between 0 and 100) for various tasks If it is called with -1 that means that the task does not have any progress information"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.reset:7
# 07d50abad72644e3a50c47952c1d0ced
msgid "Device information from the device scanner"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:1
# d79614f2d2b249bea1741be42b9f9444
msgid "Optional method to perform further checks on a device to see if this driver is capable of handling it. If it is not it should return False. This method is only called after the vendor, product ids and the bcd have matched, so it can do some relatively time intensive checks. The default implementation returns True. This method is called only on windows. See also :meth:`can_handle`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle_windows:8
# bdf446a2d78c4af9b9071c1872100c36
msgid "On windows a device ID string. On Unix a tuple of ``(vendor_id, product_id, bcd)``."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:1
# b59b1e77b96f4c62be7b3dc3cbd4a8fd
msgid "Unix version of :meth:`can_handle_windows`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.can_handle:3
# 17d7d843274b44e293f5b0218ac1c18b
msgid "Is a tuple of (vid, pid, bcd, manufacturer, product, serial number)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:1
# 32fbb79b13474f72b15e815618aa7d13
msgid "Perform any device specific initialization. Called after the device is detected but before any other functions that communicate with the device. For example: For devices that present themselves as USB Mass storage devices, this method would be responsible for mounting the device or if the device has been automounted, for finding out where it has been mounted. The method :meth:`calibre.devices.usbms.device.Device.open` has an implementation of this function that should serve as a good example for USB Mass storage devices."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:11
# a6c30050b6214e53b393cdfe467b139c
msgid "This method can raise an OpenFeedback exception to display a message to the user."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:14
# 52147219676f47c884259d5e06049ccd
msgid "The device that we are trying to open. It is a tuple of (vendor id, product id, bcd, manufacturer name, product name, device serial number). However, some devices have no serial number and on windows only the first three fields are present, the rest are None."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.open:20
# b2f75f5ffc2242c7b483be4cdb552f9f
msgid "The UUID of the current calibre library. Can be None if there is no library (for example when used from the command line)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:1
# 990da158e4be4ee58d900fe676a4fb6d
msgid "Un-mount / eject the device from the OS. This does not check if there are pending GUI jobs that need to communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.eject:4
# 52d513864a734bd38ba0e84e7f15c0f1
msgid "NOTE: That this method may not be called on the same thread as the rest of the device methods."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.post_yank_cleanup:1
# 8ed0828ef051486ab582170cdd368ac3
msgid "Called if the user yanks the device without ejecting it first."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_progress_reporter:1
# 3b61306230764350a5f7b80cdb1fed4a
msgid "Set a function to report progress information."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:1
# 3f760a16f2274731a8986d8ebb39f345
msgid "Ask device for device information. See L{DeviceInfoQuery}."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_information:3
# 3477ee52495f489db152f72d4e7ad94b
msgid "(device name, device version, software version on device, mime type) The tuple can optionally have a fifth element, which is a drive information dictionary. See usbms.driver for an example."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_driveinfo:1
# f49669d3c83e40e2a77ec06853d2f199
msgid "Return the driveinfo dictionary. Usually called from get_device_information(), but if loading the driveinfo is slow for this driver, then it should set SLOW_DRIVEINFO. In this case, this method will be called by calibre after the book lists have been loaded. Note that it is not called on the device thread, so the driver should cache the drive info in the books() method and this function should return the cached data."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.card_prefix:1
# 6eacd9152cca4697bfecd1df435a6fbc
msgid "Return a 2 element list of the prefix to paths on the cards. If no card is present None is set for the card's prefix. E.G. ('/place', '/place2') (None, 'place2') ('place', None) (None, None)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# 220091342c4e4fe3adf24290006c3e9c
msgid "Get total space available on the mountpoints:"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:2
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:2
# d74d9822cf2248e38381a26a0b08c89d
# 15746642e244457bae2e62a3fd522005
msgid "Main memory"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:3
# 4d552f41ead1445f82bed741a9828f19
msgid "Memory Card A"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:4
# d97c049ea4a541849ef0434f67cfcbab
msgid "Memory Card B"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.total_space:6
# a2ce46d597d14816ab80aebc04fdb9a7
msgid "A 3 element list with total space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return 0."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# cdbbb98b65d840a6a6c5982292a8062a
msgid "Get free space available on the mountpoints:"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:3
# 461a9988ee7848c29a731ca2ed6440bb
msgid "Card A"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:4
# b6c2672fe3114f3b9e27efc910805c71
msgid "Card B"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.free_space:6
# 5211b5393b8840218bcddb5dae8c887f
msgid "A 3 element list with free space in bytes of (1, 2, 3). If a particular device doesn't have any of these locations it should return -1."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:1
# 3fec2d180b3f47b1860e4cefe5491b5c
msgid "Return a list of ebooks on the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:3
# f096449539af4a6d9a6ba19ff5c53199
msgid "If 'carda' or 'cardb' return a list of ebooks on the specific storage card, otherwise return list of ebooks in main memory of device. If a card is specified and no books are on the card return empty list."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.books:8
# e44a84abdcab44c8a84afc9571b081f5
msgid "A BookList."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:1
# 474ec1b895774babab1c7b55983635e6
msgid "Upload a list of books to the device. If a file already exists on the device, it should be replaced. This method should raise a :class:`FreeSpaceError` if there is not enough free space on the device. The text of the FreeSpaceError must contain the word \"card\" if ``on_card`` is not None otherwise it must contain the word \"memory\"."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:7
# 30941f3cbd9a49bc860513785ffd6cc3
msgid "A list of paths"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:8
# 885f7cc0996044279944bc44f7c8d7a4
msgid "A list of file names that the books should have once uploaded to the device. len(names) == len(files)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:10
# d5b9adf58c0e43c9b27d0741c5f6ec25
msgid "If not None, it is a list of :class:`Metadata` objects. The idea is to use the metadata to determine where on the device to put the book. len(metadata) == len(files). Apart from the regular cover (path to cover), there may also be a thumbnail attribute, which should be used in preference. The thumbnail attribute is of the form (width, height, cover_data as jpeg)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.upload_books:17
# 317a7c0d8bd84942a531e2683f5f361f
msgid "A list of 3-element tuples. The list is meant to be passed to :meth:`add_books_to_metadata`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:1
# 986fea43cabf4f48bf60bb5c00542aa4
msgid "Add locations to the booklists. This function must not communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:4
# 474263103c4c423e8c8b4e764db4b2c1
msgid "Result of a call to L{upload_books}"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:5
# 88d30503e0e044f99f38277377fc9dbc
msgid "List of :class:`Metadata` objects, same as for :meth:`upload_books`."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.add_books_to_metadata:7
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:3
# 50001998e7c9441cb9813630d6d02f34
# 287f91878ce84604af72b21e7dec10ee
# 98f8131bcdbb46ae9fb024038eec89a4
msgid "A tuple containing the result of calls to (:meth:`books(oncard=None)`, :meth:`books(oncard='carda')`, :meth`books(oncard='cardb')`)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.delete_books:1
# 2beae16666eb45c6872647a198d3ff52
msgid "Delete books at paths on device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:1
# 727e2bb04e4e450cbef8a3f5bfe9a3ad
msgid "Remove books from the metadata list. This function must not communicate with the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.remove_books_from_metadata:4
# 9002f64c8bff4a0d8e49fd37339bd076
msgid "paths to books on the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.sync_booklists:1
# 7d8da152486f42c0b0fae8ea92dfc13c
msgid "Update metadata on device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:1
# b74c498a479c45269f02ffa2199cdbac
msgid "Read the file at ``path`` on the device and write it to outfile."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_file:3
# cfdd97ca52c1450892bcd8a95fbc0ac5
msgid "file object like ``sys.stdout`` or the result of an :func:`open` call."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.config_widget:1
# a5e9051e3e504eec9f4c450840bc9a55
msgid "Should return a QWidget. The QWidget contains the settings for the device interface"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.save_settings:1
# 840e48ecbb394ddba917b5f737fb75d7
msgid "Should save settings to disk. Takes the widget created in :meth:`config_widget` and saves all settings to disk."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.settings:1
# 432f09d8a1ef4ad3adeb3ecfd6815a04
msgid "Should return an opts object. The opts object should have at least one attribute `format_map` which is an ordered list of formats for the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:1
# 2364303391564cfc8a9d1994640f2b0e
msgid "provide the driver the current set of plugboards and a function to select a specific plugboard. This method is called immediately before add_books and sync_booklists."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 18fead4d4f754e3d926438f647c9c63c
msgid "pb_func is a callable with the following signature::"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:6
# 2161bf69571b48faae8d6663b051f785
msgid "def pb_func(device_name, format, plugboards)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:8
# 12e90bf7b58a4517bcee8721a49fbb2b
msgid "You give it the current device name (either the class name or DEVICE_PLUGBOARD_NAME), the format you are interested in (a 'real' format or 'device_db'), and the plugboards (you were given those by set_plugboards, the same place you got this method)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_plugboards:13
# ad14e5a9c30f453e843d94c5bccdb0d5
msgid "None or a single plugboard instance."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:1
# 7566affe419d4c1a943113f5f2579b4e
msgid "Set the device name in the driveinfo file to 'name'. This setting will persist until the file is re-created or the name is changed again."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_driveinfo_name:4
# 1b6840a8ab8d479c8fcbd7623d02ea6b
msgid "Non-disk devices should implement this method based on the location codes returned by the get_device_information() method."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:1
# ba80f1d1bc6c4c009db2610d6f5f6e9f
msgid "Given a list of paths, returns another list of paths. These paths point to addable versions of the books."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.prepare_addable_books:4
# 8ed228b1fcc24534a4cfaff542b9b87a
msgid "If there is an error preparing a book, then instead of a path, the position in the returned list for that book should be a three tuple: (original_path, the exception instance, traceback)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.startup:1
# ca956c13df2e4fddba2ddf1203d6405a
msgid "Called when calibre is is starting the device. Do any initialization required. Note that multiple instances of the class can be instantiated, and thus __init__ can be called multiple times, but only one instance will have this method called. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.shutdown:1
# 4fa094ac573b48208c23596d39877aad
msgid "Called when calibre is shutting down, either for good or in preparation to restart. Do any cleanup required. This method is called on the device thread, not the GUI thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_device_uid:1
# c3f7d47762674769a4275ebbd95e0ad4
msgid "Must return a unique id for the currently connected device (this is called immediately after a successful call to open()). You must implement this method if you set ASK_TO_ALLOW_CONNECT = True"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.ignore_connected_device:1
# f49571d049264dfa83fdf4466f2f4c5e
msgid "Should ignore the device identified by uid (the result of a call to get_device_uid()) in the future. You must implement this method if you set ASK_TO_ALLOW_CONNECT = True. Note that this function is called immediately after open(), so if open() caches some state, the driver should reset that state."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_user_blacklisted_devices:1
# cd3f46d33a2b4fd2a69b119e495da0c4
msgid "Return map of device uid to friendly name for all devices that the user has asked to be ignored."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_user_blacklisted_devices:1
# 89061dc11f36409690001bde242b2223
msgid "Set the list of device uids that should be ignored by this driver."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.specialize_global_preferences:1
# 113b1b732eca42ad8a02b9eda1262634
msgid "Implement this method if your device wants to override a particular preference. You must ensure that all call sites that want a preference that can be overridden use device_prefs['something'] instead of prefs['something']. Your method should call device_prefs.set_overrides(pref=val, pref=val, ...). Currently used for: metadata management (prefs['manage_device_metadata'])"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:1
# f4860c8af9e240a19c32533b0d9d2fff
msgid "Called by the device manager when starting plugins. If this method returns a string, then a) it supports the device manager's dynamic control interface, and b) that name is to be used when talking to the plugin."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_dynamically_controllable:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:6
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:5
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:4
#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:3
# 95566ac5df4c49b6bffb37ffb0d86330
# b35500aecb904db882f441afa4bf7eb7
# 4475181b1c8740468bdb3dcc900db73c
# 2ce0942952464e3f9d20c50b93b3f88b
# f3a5eeca948544728a23f52fb3d3ad2a
# d56737f62f604f5ca95cff1917b767ff
msgid "This method can be called on the GUI thread. A driver that implements this method must be thread safe."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.start_plugin:1
# 4c4366372aac4810af60346bcbd442ec
msgid "This method is called to start the plugin. The plugin should begin to accept device connections however it does that. If the plugin is already accepting connections, then do nothing."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.stop_plugin:1
# 829b48ad009a4d989db0fe417f685a2f
msgid "This method is called to stop the plugin. The plugin should no longer accept connections, and should cleanup behind itself. It is likely that this method should call shutdown. If the plugin is already not accepting connections, then do nothing."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.get_option:1
# 273512b59ce14f9fbae02c1c65f973f6
msgid "Return the value of the option indicated by opt_string. This method can be called when the plugin is not started. Return None if the option does not exist."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.set_option:1
# 40afd08fa7744450ac827e778ef87da5
msgid "Set the value of the option indicated by opt_string. This method can be called when the plugin is not started."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.is_running:1
# a90cf329d369427b9494a74934e31edc
msgid "Return True if the plugin is started, otherwise false"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:1
# 5e720d3f4b5e466e80fe5c8cc7f1174d
msgid "Called during book matching when a book on the device is matched with a book in calibre's db. The method is responsible for syncronizing data from the device to calibre's db (if needed)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:5
# c5db2ae00b574113a55207af8b4d8303
msgid "The method must return a set of calibre book ids changed if calibre's database was changed, None if the database was not changed. If the method returns an empty set then the metadata for the book on the device is updated with calibre's metadata and given back to the device, but no GUI refresh of that book is done. This is useful when the calire data is correct but must be sent to the device."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:12
# 443548fbb7a74f77b3509b4b763677ca
msgid "Extremely important: this method is called on the GUI thread. It must be threadsafe with respect to the device manager's thread."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.DevicePlugin.synchronize_with_db:15
# c5e4c35dcb3641038f8d2ca40f863e63
msgid "book_id: the calibre id for the book in the database. book_metadata: the Metadata object for the book coming from the device."
msgstr ""

#: ../../<autodoc>:1
# 9ca4fac0068b46c59cae9876d58dbacd
msgid "Bases: :class:`list`"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:1
# 287f849f6b5749ddbf85fe026bdaaf31
msgid "A list of books. Each Book object must have the fields"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:3
# 484b07229f184b7cbbc0516413600aa4
msgid "title"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:4
# 8b8418b1765f4316a0a0038782bc9503
msgid "authors"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:5
# 1d43c092d87e4afe98d75fd2f708f334
msgid "size (file size of the book)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:6
# e9b2a4ca633549f5afdbf2f8f9caeb95
msgid "datetime (a UTC time tuple)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:7
# 96a1a7caac9b4669a102746ad9e965f4
msgid "path (path on the device to the book)"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:8
# bd8e85d88ca14d9db79c8e8f523e2905
msgid "thumbnail (can be None) thumbnail is either a str/bytes object with the image data or it should have an attribute image_path that stores an absolute (platform native) path to the image"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList:11
# 1a01035981b84e8787ccca0ba9358147
msgid "tags (a list of strings, can be empty)."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.supports_collections:1
# 277db1193e28468ebffea8aca40e9995
msgid "Return True if the device supports collections for this book list."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.add_book:1
# a44c761806874f96887364306b68946f
msgid "Add the book to the booklist. Intent is to maintain any device-internal metadata. Return True if booklists must be sync'ed"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.remove_book:1
# 45cf4553eaf24c75bc5f239a8f56cdf0
msgid "Remove a book from the booklist. Correct any device metadata at the same time"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:1
# 885847240f11403f9b8db4c2660b3ca5
msgid "Return a dictionary of collections created from collection_attributes. Each entry in the dictionary is of the form collection name:[list of books]"
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:5
# ab1ff20108404bf7973c600c90db79a8
msgid "The list of books is sorted by book title, except for collections created from series, in which case series_index is used."
msgstr ""

#: ../../../src/calibre/devices/interface.py:docstring of calibre.devices.interface.BookList.get_collections:8
# 0340a6b59e5d48a1bcd82adeaa3cc767
msgid "A list of attributes of the Book object"
msgstr ""

#: ../../plugins.rst:111
# 2c06b6e72ded4793a3f8a19b36791786
msgid "USB Mass Storage based devices"
msgstr ""

#: ../../plugins.rst:113
# b452ee6944034030a5e18af9c6798044
msgid "The base class for such devices is :class:`calibre.devices.usbms.driver.USBMS`. This class in turn inherits some of its functionality from its bases, documented below. A typical basic USBMS based driver looks like this:"
msgstr ""

#: ../../<autodoc>:1
# dacc0b3b81d0484fad61f44687d8fc89
msgid "Bases: :class:`calibre.devices.usbms.deviceconfig.DeviceConfig`, :class:`calibre.devices.interface.DevicePlugin`"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device:1
# 8f914cced8eb43eab82016eb1e89f13a
msgid "This class provides logic common to all drivers for devices that export themselves as USB Mass Storage devices. Provides implementations for mounting/ejecting of USBMS devices on all platforms."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_MAIN_MEM:1
# 1018f30159134283928fdbae7b272791
msgid "String identifying the main memory of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_A_MEM:1
# d83c9e3b46ea42d5ab7c19f33bacf25d
msgid "String identifying the first card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.WINDOWS_CARD_B_MEM:1
# 2ab776e4837b4b50b091d303bd52d9f1
msgid "String identifying the second card of the device in the windows PnP id strings This can be None, string, list of strings or compiled regex"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.OSX_MAIN_MEM_VOL_PAT:1
# 70c6cbabb1b64a8fadd3e43ba5eb0307
msgid "Used by the new driver detection to disambiguate main memory from storage cards. Should be a regular expression that matches the main memory mount point assigned by OS X"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.MAX_PATH_LEN:1
# 5a93cdd32f0b4831bef07c19beb04a09
msgid "The maximum length of paths created on the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.NEWS_IN_FOLDER:1
# a9bd91fa3eb542f7b5fdb29841f758af
msgid "Put news in its own folder"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.windows_sort_drives:1
# 386324d34d4a4fa19a7a47aa9a3438cc
msgid "Called to disambiguate main memory and storage card for devices that do not distinguish between them on the basis of `WINDOWS_CARD_NAME`. For e.g.: The EB600"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_callback:1
# fac5ed0443bc4cfeaefdee4cb2275ee8
msgid "Callback to allow individual device drivers to override the path sanitization used by :meth:`create_upload_path`."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.filename_callback:1
# 91455605761641f197d00dccbc4da663
msgid "Callback to allow drivers to change the default file name set by :meth:`create_upload_path`."
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.sanitize_path_components:1
# 80e2493079ef4a27aeec8c6549ceedd1
msgid "Perform any device specific sanitization on the path components for files to be uploaded to the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.get_annotations:1
# 05c04db419824536bce03c9a68d60caf
msgid "Resolve path_map to annotation_map of files found on the device"
msgstr ""

#: ../../../src/calibre/devices/usbms/device.py:docstring of calibre.devices.usbms.device.Device.add_annotation_to_library:1
# 2bd2dc91cf36459abcc52f77909fd8b9
msgid "Add an annotation to the calibre library"
msgstr ""

#: ../../<autodoc>:1
# 927cb31b5e62438ea798ad30ff8b1e17
msgid "Bases: :class:`calibre.devices.usbms.cli.CLI`, :class:`calibre.devices.usbms.device.Device`"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS:1
# a637444d6f6e401d8994aa578657d40d
msgid "The base class for all USBMS devices. Implements the logic for sending/getting/updating metadata/caching metadata/etc."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:1
# a9601cab854b46f3b9825d0c642e0cae
msgid "Upload book cover to the device. Default implementation does nothing."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:3
# f5ee4570c572424cb353e23b8fb30ff5
msgid "The full path to the directory where the associated book is located."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:4
# 44c3993073dc42499a0ca8d40ade24be
msgid "The name of the book file without the extension."
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:5
# 816c9a9b67804ad99d75c1b87cbfbf39
msgid "metadata belonging to the book. Use metadata.thumbnail for cover"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.upload_cover:7
# 692220f32e7040efbc597c85bfe84898
msgid "The full path to the ebook file"
msgstr ""

#: ../../../src/calibre/devices/usbms/driver.py:docstring of calibre.devices.usbms.driver.USBMS.normalize_path:1
# 11fb4e4847004333a46086c4d8ded070
msgid "Return path with platform native path separators"
msgstr ""

#: ../../plugins.rst:159
# 38b652f49fa44cd0b89c181bcb95a291
msgid "User Interface Actions"
msgstr ""

#: ../../plugins.rst:161
# e707bb0ac5ee4c988590d3b2c28e58c9
msgid "If you are adding your own plugin in a zip file, you should subclass both InterfaceActionBase and InterfaceAction. The :meth:`load_actual_plugin` method of you InterfaceActionBase subclass must return an instantiated object of your InterfaceBase subclass."
msgstr ""

#: ../../<autodoc>:1
# 2aa1ba6d411e4adcb591dff1fbb2fa23
msgid "Bases: :class:`PyQt4.QtCore.QObject`"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:1
# b2f6c47374db444a8adf3e494a6dd6bf
msgid "A plugin representing an \"action\" that can be taken in the graphical user interface. All the items in the toolbar and context menus are implemented by these plugins."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:5
# 47e88926401f4c769a1c42ec83a75c33
msgid "Note that this class is the base class for these plugins, however, to integrate the plugin with calibre's plugin system, you have to make a wrapper class that references the actual plugin. See the :mod:`calibre.customize.builtins` module for examples."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:10
# 06d20b914ed14128a1357f79de10f776
msgid "If two :class:`InterfaceAction` objects have the same name, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:13
# 00451ca8f6f5462a87739153abafac63
msgid "Sub-classes should implement the :meth:`genesis`, :meth:`library_changed`, :meth:`location_selected` :meth:`shutting_down` and :meth:`initialization_complete` methods."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:17
# d00fd89affb24e189b9c09fa82f6c6e2
msgid "Once initialized, this plugin has access to the main calibre GUI via the :attr:`gui` member. You can access other plugins by name, for example::"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:22
# 94fe1828718b455ab853a52c30bacb44
msgid "To access the actual plugin, use the :attr:`interface_action_base_plugin` attribute, this attribute only becomes available after the plugin has been initialized. Useful if you want to use methods from the plugin class like do_user_config()."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction:27
# 62f1b83b73b949cbbe5400572ad5aac3
msgid "The QAction specified by :attr:`action_spec` is automatically create and made available as ``self.qaction``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.name:1
# 483ae158e15b4090b83f13376f129e6a
msgid "The plugin name. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.priority:1
# c68cd6bad74f4bc88eb87727652579cc
msgid "The plugin priority. If two plugins with the same name are present, the one with higher priority takes precedence."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.popup_type:1
# 126d966d64754491b6b9275861297b8b
msgid "The menu popup type for when this plugin is added to a toolbar"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.auto_repeat:1
# d729cdda28894fb6a0725b4141ea966c
msgid "Whether this action should be auto repeated when its shortcut key is held down."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_spec:1
# 73c5649c576e496c8c1c2636db4a328e
msgid "Of the form: (text, icon_path, tooltip, keyboard shortcut) icon, tooltip and keyboard shortcut can be None shortcut must be a string, None or tuple of shortcuts. If None, a keyboard shortcut corresponding to the action is not registered. If you pass an empty tuple, then the shortcut is registered with no default key binding."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_add_menu:1
# 9c4b075b51aa4269a1faf0c5a1900bf9
msgid "If True, a menu is automatically created and added to self.qaction"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_menu_clone_qaction:1
# 91d7f362699f4b7891f1a9c6fa696e1d
msgid "If True, a clone of self.qaction is added to the menu of self.qaction If you want the text of this action to be different from that of self.qaction, set this variable to the new text"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_add_to:1
# 3ff6c1ef2872460b88c1554164b46c90
msgid "Set of locations to which this action must not be added. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.dont_remove_from:1
# 8c24b85155314f04a39327d5442cbd80
msgid "Set of locations from which this action must not be removed. See :attr:`all_locations` for a list of possible locations"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.action_type:1
# 60783b50823f4027956dd6f460936898
msgid "Type of action 'current' means acts on the current view 'global' means an action that does not act on the current view, but rather on calibre as a whole"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accepts_drops:1
# 8f23b38bfa8d41d2b62045355ae33293
msgid "If True, then this InterfaceAction will have the opportunity to interact with drag and drop events. See the methods, :meth:`accept_enter_event`, :meth`:accept_drag_move_event`, :meth:`drop_event` for details."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_enter_event:1
#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.accept_drag_move_event:1
# ee2babbd54b64abaa993a0aff280489d
# dbb6108de31d4d56bdee551949292f7f
msgid "This method should return True iff this interface action is capable of handling the drag event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.drop_event:1
# 4d8045d0e1c24ece8dd16fbcb5ea1b89
msgid "This method should perform some useful action and return True iff this interface action is capable of handling the drop event. Do not call accept/ignore on the event, that will be taken care of by the calibre UI. You should not perform blocking/long operations in this function. Instead emit a signal or use QTimer.singleShot and return quickly. See the builtin actions for examples."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:1
# 8dc07c895faf463db752498ab5fce118
msgid "Convenience method to easily add actions to a QMenu. Returns the created QAction, This action has one extra attribute calibre_shortcut_unique_name which if not None refers to the unique name under which this action is registered with the keyboard manager."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:6
# f4de111eaf734d84bacc7ca55789239d
msgid "The QMenu the newly created action will be added to"
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:7
# b5b1a1eb29b44d7583f301c360edd4f9
msgid "A unique name for this action, this must be globally unique, so make it as descriptive as possible. If in doubt add a uuid to it."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:10
# bbabd645ceff453e84fa8a9704e17adb
msgid "The text of the action."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:11
# afa693a24ea24c1b8679e8ef9420a48f
msgid "Either a QIcon or a file name. The file name is passed to the I() builtin, so you do not need to pass the full path to the images directory."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:14
# 0e1cc8722adb48fa97004973b97128f5
msgid "A string, a list of strings, None or False. If False, no keyboard shortcut is registered for this action. If None, a keyboard shortcut with no default keybinding is registered. String and list of strings register a shortcut with default keybinding as specified."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:18
# 97a1ff7ea1684c089808af6e248830c3
msgid "A description for this action. Used to set tooltips."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:20
# 9b77452e5c9749d2b444d1833fe70191
msgid "A callable which is connected to the triggered signal of the created action."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.create_menu_action:22
# a70082a880dc43bd8bad489e8be7a315
msgid "The test displayed to the user when customizing the keyboard shortcuts for this action. By default it is set to the value of ``text``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.genesis:1
# d9f64e8566614b07b8753a5ef9eb0506
msgid "Setup this plugin. Only called once during initialization. self.gui is available. The action specified by :attr:`action_spec` is available as ``self.qaction``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:1
# 4612d4ccf3fc41468243d9ffd1a1b37f
msgid "Called whenever the book list being displayed in calibre changes. Currently values for loc are: ``library, main, card and cardb``."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.location_selected:4
# a6ac5c8f86d64a11b5d782659c498273
msgid "This method should enable/disable this action and its sub actions as appropriate for the location."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:1
# 7df35da08d9c4488a105641900a430fd
msgid "Called whenever the current library is changed."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.library_changed:3
# 055a7eb5d85b4680a536c8cc45a1f11f
msgid "The LibraryDatabase corresponding to the current library."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.gui_layout_complete:1
# 6b24935850474cda82e7559a94cad912
msgid "Called once per action when the layout of the main GUI is completed. If your action needs to make changes to the layout, they should be done here, rather than in :meth:`initialization_complete`."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.initialization_complete:1
# c60b00b886f44cb7924605baba52e99d
msgid "Called once per action when the initialization of the main GUI is completed."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:1
# 6d290a8ca49449e1ad3c555dfd55c5fb
msgid "Called once per plugin when the main GUI is in the process of shutting down. Release any used resources, but try not to block the shutdown for long periods of time."
msgstr ""

#: ../../../src/calibre/gui2/actions/__init__.py:docstring of calibre.gui2.actions.InterfaceAction.shutting_down:5
# 3d685a35b64647fbb05887dfbfa1d1e1
msgid "False to halt the shutdown. You are responsible for telling the user why the shutdown was halted."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.InterfaceActionBase.load_actual_plugin:1
# a50e83caac824c408d74d7f05057b838
msgid "This method must return the actual interface action plugin object."
msgstr ""

#: ../../plugins.rst:176
# ff61d148f1774ed4beb1ab82c6f919c4
msgid "Preferences Plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:1
# e9a2a447c88d41ae9eb16623b60c7521
msgid "A plugin representing a widget displayed in the Preferences dialog."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin:3
# b1357114c83248078ce531c704a4023e
msgid "This plugin has only one important method :meth:`create_widget`. The various fields of the plugin control how it is categorized in the UI."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.config_widget:1
# 367cb6a5b4c7488f98819c861dcd2ccf
msgid "Import path to module that contains a class named ConfigWidget which implements the ConfigWidgetInterface. Used by :meth:`create_widget`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category_order:1
# 39714e69e2394093aac044c8a5dd1f3f
msgid "Where in the list of categories the :attr:`category` of this plugin should be."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.name_order:1
# 6f43c06f5a4649e9891613aa709de682
msgid "Where in the list of names in a category, the :attr:`gui_name` of this plugin should be"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.category:1
# 1b5e2a638bf84b14901d790638f126bd
msgid "The category this plugin should be in"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_category:1
# 8f24e1d95fcc4ba99dafaa047b3b9254
msgid "The category name displayed to the user for this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.gui_name:1
# 647673eb3c164f389290dc781cc91843
msgid "The name displayed to the user for this plugin"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.icon:1
# e837a76c66444782b74d0a872addf9ab
msgid "The icon for this plugin, should be an absolute path"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.description:1
# 49423051f5d440948f49d47d00a0130e
msgid "The description used for tooltips and the like"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:1
# 2b0051a88e044ddcb0fc585b7925fffe
msgid "Create and return the actual Qt widget used for setting this group of preferences. The widget must implement the :class:`calibre.gui2.preferences.ConfigWidgetInterface`."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.PreferencesPlugin.create_widget:5
# b974b380234049718c30a0393dd0b99f
msgid "The default implementation uses :attr:`config_widget` to instantiate the widget."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface:1
# 273895a2dc7740d8b36da2eb6bd9512f
msgid "This class defines the interface that all widgets displayed in the Preferences dialog must implement. See :class:`ConfigWidgetBase` for a base class that implements this interface and defines various convenience methods as well."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.changed_signal:1
# 7707818867a94d3f8a800f32dc9b6437
msgid "This signal must be emitted whenever the user changes a value in this widget"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.supports_restoring_to_defaults:1
# e6fc4f7153ec4f2d8d65e4a1e4ddf1f1
msgid "Set to True iff the :meth:`restore_to_defaults` method is implemented."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults_desc:1
# 198b7288efb84b88a0261a5ffd502dfa
msgid "The tooltip for the Restore to defaults button"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restart_critical:1
# e3d9440dc16e4e85abfc9c3aa2c116b9
msgid "If True the Preferences dialog will not allow the user to set any more preferences. Only has effect if :meth:`commit` returns True."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:1
# 5769a0ec6bfd4fedbfc2da4828763389
msgid "Called once before the widget is displayed, should perform any necessary setup."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.genesis:4
# cbd9567bd5b24abe9d5c1f9b50353c1e
msgid "The main calibre graphical user interface"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.initialize:1
# f5657b1b4b9d4ab59fa4fcc82b8c7d40
msgid "Should set all config values to their initial values (the values stored in the config files)."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.restore_defaults:1
# 4efa99503ffd42cf8dd1ee73d1e92720
msgid "Should set all config values to their defaults."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.commit:1
# 1cb309f240854801a5f1bc2486efbfde
msgid "Save any changed settings. Return True if the changes require a restart, False otherwise. Raise an :class:`AbortCommit` exception to indicate that an error occurred. You are responsible for giving the user feedback about what the error is and how to correct it."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetInterface.refresh_gui:1
# b8fc20a0ba58470381d7a1a6b5ffee45
msgid "Called once after this widget is committed. Responsible for causing the gui to reread any changed settings. Note that by default the GUI re-initializes various elements anyway, so most widgets won't need to use this method."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:1
# 0136b1b2bdcc4c93bf2cb7c13e7487df
msgid "Base class that contains code to easily add standard config widgets like checkboxes, combo boxes, text fields and so on. See the :meth:`register` method."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:5
# 8d175df7ecf84497868bf37bf3850cb9
msgid "This class automatically handles change notification, resetting to default, translation between gui objects and config objects, etc. for registered settings."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase:9
# 40da11d98b554aabb6df21cc71a0722f
msgid "If your config widget inherits from this class but includes setting that are not registered, you should override the :class:`ConfigWidgetInterface` methods and call the base class methods inside the overrides."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:1
# ca72d379bf0f4c1983c59ff700a81c1a
msgid "Register a setting."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:3
# ccc0ac6aecc9449fa33270a43d88a1df
msgid "The setting name"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:4
# 89c247ea1fa543ea9181e8ed561cdf9e
msgid "The config object that reads/writes the setting"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:5
# 471151caccd048ee81e606b7165248e7
msgid "The name of the GUI object that presents an interface to change the setting. By default it is assumed to be ``'opt_' + name``."
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:8
# ff6af1ae0bf14bc986c349239834b326
msgid "If this setting is a multiple choice (combobox) based setting, the list of choices. The list is a list of two element tuples of the form: ``[(gui name, value), ...]``"
msgstr ""

#: ../../../src/calibre/gui2/preferences/__init__.py:docstring of calibre.gui2.preferences.ConfigWidgetBase.register:11
# f9657a8f64cb486e8a7b7d5ce3b9faec
msgid "The class responsible for managing this setting. The default class handles almost all cases, so this param is rarely used."
msgstr ""

#: ../../plugins.rst:192
# d7c5d164ca044952b8a65fd8d4aade37
msgid "Viewer plugins"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.type:1
# 0cc83a7d0dbd42c2b72e2c38bdbb5b67
msgid "These plugins are used to add functionality to the calibre viewer."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_fonts:1
# 525d89ee09274e558453ea42229cf187
msgid "This method is called once at viewer startup. It should load any fonts it wants to make available. For example::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.load_javascript:1
# 2026138735364207b0168188288b0aae
msgid "This method is called every time a new HTML document is loaded in the viewer. Use it to load javascript libraries into the viewer. For example::"
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.run_javascript:1
# bd62153cbfc74fb9af29bef310fba3d8
msgid "This method is called every time a document has finished loading. Use it in the same way as load_javascript()."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_ui:1
# 05100f28b6a34ba689397107025f6bcd
msgid "This method is called once when the viewer is created. Use it to make any customizations you want to the viewer's user interface. For example, you can modify the toolbars via ui.tool_bar and ui.tool_bar2."
msgstr ""

#: ../../../src/calibre/customize/__init__.py:docstring of calibre.customize.ViewerPlugin.customize_context_menu:1
# 1b0fb12126c94044a77efc0eec3cd435
msgid "This method is called every time the context (right-click) menu is shown. You can use it to customize the context menu. ``event`` is the context menu event and hit_test_result is the QWebHitTestResult for this event in the currently loaded document."
msgstr ""

#: ../../plugins.rst:200
# eb34628524454a7cb48c012072c5e288
msgid "Edit Book plugins"
msgstr ""

#: ../../<autodoc>:1
# c2594780f0ee4377a4aacd680d3b1bc6
msgid "Bases: :class:`object`"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.name:1
# dd2eff61b5304460b9162b1c5cf4d0cf
msgid "Set this to a unique name it will be used as a key"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.allowed_in_toolbar:1
# cc619495377d47daa4c90cc64a06d549
msgid "If True the user can choose to place this tool in the plugins toolbar"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.allowed_in_menu:1
# ff40367e25a14a5686a9b0a0779a2907
msgid "If True the user can choose to place this tool in the plugins menu"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.toolbar_button_popup_mode:1
# a763392a001140c8a7bf5f549d880d81
msgid "The popup mode for the menu (if any) of the toolbar button. Possible values are 'delayed', 'instant', 'button'"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.boss:1
# 75cce2dd28754661aca0ffbe8e1cd20b
msgid "The :class:`calibre.gui2.tweak_book.boss.Boss` object. Used to control the user interface."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.gui:1
# b494bb4ac45542eeae53c4b8a9d39e70
msgid "The main window of the user interface"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.current_container:1
# a28b4a1a84eb4507b9c03a3b79feec02
msgid "Return the current :class:`calibre.ebooks.oeb.polish.container.Container` object that represents the book being edited."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:1
# 8212590db7894f3bbea1d8db1352720e
msgid "Register a keyboard shortcut that will trigger the specified ``qaction``. This keyboard shortcut will become automatically customizable by the user in the Keyboard section of the editor preferences."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:4
# cf70740baf864a108b65ddcbc3ca377b
msgid "A QAction object, it will be triggered when the configured key combination is pressed by the user."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:6
# 11aa90cdafba4296b7f01ff653652d57
msgid "A unique name for this shortcut/action. It will be used internally, it must not be shared by any other actions in this plugin."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:9
# 0201a26d9fbf4e65924b3b064cb61fee
msgid "A list of the default keyboard shortcuts. If not specified no default shortcuts will be set. If the shortcuts specified here conflict with either builtin shortcuts or shortcuts from user configuration/other plugins, they will be ignored. In that case, users will have to configure the shortcuts manually via Preferences. For example: ``default_keys=('Ctrl+J', 'F9')``."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:15
# 8b753b814f544b72880282719ab9a9af
msgid "An optional short description of this action. If not specified the text from the QAction will be used."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.register_shortcut:17
# 30f81b16cadd4427b9ca5324227fd9b8
msgid "An optional longer description of this action, it will be used in the preferences entry for this shortcut."
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.create_action:1
# 2cf18bf6cb53461384f3890a0173f66e
msgid "Create a QAction that will be added to either the plugins toolbar or the plugins menu depending on ``for_toolbar``. For example::"
msgstr ""

#: ../../../src/calibre/gui2/tweak_book/plugin.py:docstring of calibre.gui2.tweak_book.plugin.Tool.create_action:19
# 38ab1d0765b7412191f1cd53ac3f8db1
msgid "Method :meth:`register_shortcut`."
msgstr ""

