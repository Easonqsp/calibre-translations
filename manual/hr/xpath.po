# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: calibre\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-03 09:06+0530\n"
"PO-Revision-Date: 2014-10-11 02:10+0000\n"
"Last-Translator: Kovid Goyal <kovid@kovidgoyal.net>\n"
"Language-Team: Croatian (http://www.transifex.com/projects/p/calibre/language/hr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: hr\n"
"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"

# ee7e6bb0c375443eb83061f498a901e2
#: ../../home/kovid/work/calibre/manual/xpath.rst:5
msgid "XPath Tutorial"
msgstr ""

# 5653ad2126084e8580dc90751f6d2fbc
#: ../../home/kovid/work/calibre/manual/xpath.rst:7
msgid ""
"In this tutorial, you will be given a gentle introduction to `XPath "
"<http://en.wikipedia.org/wiki/XPath>`_, a query language that can be used to"
" select arbitrary parts of `HTML <http://en.wikipedia.org/wiki/HTML>`_ "
"documents in |app|. XPath is a widely used standard, and googling it will "
"yield a ton of information. This tutorial, however, focuses on using XPath "
"for ebook related tasks like finding chapter headings in an unstructured "
"HTML document."
msgstr ""

# d9085e6c4ae54ac2ae9963fc9cd148c9
#: ../../home/kovid/work/calibre/manual/xpath.rst:0
msgid "Contents"
msgstr "Sadrzaj"

# 9ab84f6b9be3491cb409872a296a332f
#: ../../home/kovid/work/calibre/manual/xpath.rst:20
msgid "Selecting by tagname"
msgstr ""

# 06de13d8d84c4e5a822b523f1e0d1daa
#: ../../home/kovid/work/calibre/manual/xpath.rst:22
msgid ""
"The simplest form of selection is to select tags by name. For example, "
"suppose you want to select all the ``<h2>`` tags in a document. The XPath "
"query for this is simply::"
msgstr ""

# e9d6db0724de4610a2712a460a8f31ce
#: ../../home/kovid/work/calibre/manual/xpath.rst:28
msgid ""
"The prefix `//` means *search at any level of the document*. Now suppose you"
" want to search for ``<span>`` tags that are inside ``<a>`` tags. That can "
"be achieved with::"
msgstr ""

# 125f98c9b34f4eb7949af0d3db6de029
#: ../../home/kovid/work/calibre/manual/xpath.rst:34
msgid ""
"If you want to search for tags at a particular level in the document, change"
" the prefix::"
msgstr ""

# e0fdecd3769c4e25a0a0f162b220dc59
#: ../../home/kovid/work/calibre/manual/xpath.rst:40
msgid ""
"This will match only ``<p>A very short ebook to demonstrate the use of "
"XPath.</p>`` in the :ref:`sample_ebook` but not any of the other ``<p>`` "
"tags. The ``h:`` prefix in the above examples is needed to match XHTML tags."
" This is because internally, |app| represents all content as XHTML. In XHTML"
" tags have a *namespace*, and ``h:`` is the namespace prefix for HTML tags."
msgstr ""

# 692140a38b204f26b791ba96319c8aaa
#: ../../home/kovid/work/calibre/manual/xpath.rst:46
msgid ""
"Now suppose you want to select both ``<h1>`` and ``<h2>`` tags. To do that, "
"we need a XPath construct called *predicate*. A :dfn:`predicate` is simply a"
" test that is used to select tags. Tests can be arbitrarily powerful and as "
"this tutorial progresses, you will see more powerful examples. A predicate "
"is created by enclosing the test expression in square brackets::"
msgstr ""

# 1632102b95ce4e729579df84b893ade1
#: ../../home/kovid/work/calibre/manual/xpath.rst:54
msgid ""
"There are several new features in this XPath expression. The first is the "
"use of the wildcard ``*``. It means *match any tag*. Now look at the test "
"expression ``name()='h1' or name()='h2'``. :term:`name()` is an example of a"
" *built-in function*. It simply evaluates to the name of the tag. So by "
"using it, we can select tags whose names are either `h1` or `h2`. Note that "
"the :term:`name()` function ignores namespaces so that there is no need for "
"the ``h:`` prefix. XPath has several useful built-in functions. A few more "
"will be introduced in this tutorial."
msgstr ""

# c32a61910e674352b4319f0ddf37795c
#: ../../home/kovid/work/calibre/manual/xpath.rst:63
msgid "Selecting by attributes"
msgstr ""

# 994c3b7314fc4628ad66e25e87dcd37e
#: ../../home/kovid/work/calibre/manual/xpath.rst:65
msgid ""
"To select tags based on their attributes, the use of predicates is "
"required::"
msgstr ""

# 1e6c62cf7d8b4eb9b5a17123fcaed0ba
#: ../../home/kovid/work/calibre/manual/xpath.rst:71
msgid ""
"Here, the ``@`` operator refers to the attributes of the tag. You can use "
"some of the `XPath built-in functions`_ to perform more sophisticated "
"matching on attribute values."
msgstr ""

# 59ba919ab84f473a82226917b29624c7
#: ../../home/kovid/work/calibre/manual/xpath.rst:77
msgid "Selecting by tag content"
msgstr ""

# 5078220e8cba4c9290dff23a417e1150
#: ../../home/kovid/work/calibre/manual/xpath.rst:79
msgid ""
"Using XPath, you can even select tags based on the text they contain. The "
"best way to do this is to use the power of *regular expressions* via the "
"built-in function :term:`re:test()`::"
msgstr ""

# 82d48e5a98a64c78bc5dcd6a8d44c139
#: ../../home/kovid/work/calibre/manual/xpath.rst:85
msgid ""
"Here the ``.`` operator refers to the contents of the tag, just as the ``@``"
" operator referred to its attributes."
msgstr ""

# c25f415675f94693bdf9eecaa08f8c5c
#: ../../home/kovid/work/calibre/manual/xpath.rst:91
msgid "Sample ebook"
msgstr ""

# 0f4b1f4c544445d38fe73240cf4dc63a
#: ../../home/kovid/work/calibre/manual/xpath.rst:97
msgid "XPath built-in functions"
msgstr ""

# c3e8061d54e544378986416f7698f7e0
#: ../../home/kovid/work/calibre/manual/xpath.rst:100
msgid "name()"
msgstr ""

# 694b6e09cf934fee9884ea07c48d42ee
#: ../../home/kovid/work/calibre/manual/xpath.rst:102
msgid "The name of the current tag."
msgstr ""

# c734b1c7cdd4459c9fe24c1c8938edc5
#: ../../home/kovid/work/calibre/manual/xpath.rst:103
msgid "contains()"
msgstr ""

# e011d99ebfc143f3807be391040530a1
#: ../../home/kovid/work/calibre/manual/xpath.rst:105
msgid "``contains(s1, s2)`` returns `true` if s1 contains s2."
msgstr ""

# 8533ea04c4fa4758be6e3de481f28c1a
#: ../../home/kovid/work/calibre/manual/xpath.rst:106
msgid "re:test()"
msgstr ""

# 4facc88cb6e24e15892394ca6aa805ed
#: ../../home/kovid/work/calibre/manual/xpath.rst:108
msgid ""
"``re:test(src, pattern, flags)`` returns `true` if the string `src` matches "
"the regular expression `pattern`. A particularly useful flag is ``i``, it "
"makes matching case insensitive. A good primer on the syntax for regular "
"expressions can be found at `regexp syntax <http://docs.python.org/lib/re-"
"syntax.html>`_"
msgstr ""
