# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.48.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-11 23:35+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../template_ref.rst:5
# e0b5daef880c437dae71905fccfa3767
msgid "Reference for all built-in template language functions"
msgstr ""

#: ../../template_ref.rst:7
# 18120f76e5394b27bd64cd6eb8eda3f7
msgid "Here, we document all the built-in functions available in the |app| template language. Every function is implemented as a class in python and you can click the source links to see the source code, in case the documentation is insufficient. The functions are arranged in logical groups by type."
msgstr ""

#: ../../template_ref.rst:16
# 0feb51b9ff8a4183aa0f8a44cd32f00f
msgid "Arithmetic"
msgstr ""

#: ../../template_ref.rst:19
# 9c9adc5d6ad44eb48ebe1e22cc54c2e9
msgid "add(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinAdd:1
# 807ce57538bc49fb90a69a63ab2e5d08
msgid "add(x, y) -- returns x + y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:24
# 5f566cd1d08043a0bbe7e3c710ee6820
msgid "divide(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinDivide:1
# 93ad5c450f974471af4067cb6238e938
msgid "divide(x, y) -- returns x / y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:29
# 2344d6a60d12489eb46d197c30d167c7
msgid "multiply(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinMultiply:1
# 4ed2570a19fb4d69a44c8b8972b1c625
msgid "multiply(x, y) -- returns x * y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:34
# 0b274456ecfe4da8b8d054e8917bd45c
msgid "subtract(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSubtract:1
# 93c31c9694874b99b28ba0a8789185a6
msgid "subtract(x, y) -- returns x - y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:39
# bd3bf482cc6841a9976c61b65ee876d6
msgid "Boolean"
msgstr ""

#: ../../template_ref.rst:42
# 02567656e3d248fa80d10e80a13ad532
msgid "and(value, value, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinAnd:1
# a070cb6b68614e0fb5914a4bdf0faea3
msgid "and(value, value, ...) -- returns the string \"1\" if all values are not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:47
# 24a04757185c4e0bafad9443f77de9a9
msgid "not(value)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinNot:1
# 2b8f5d5665dd4fd887dfd668aaf65293
msgid "not(value) -- returns the string \"1\" if the value is empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:52
# 0f3407c96634415ca4e917fffe670dd6
msgid "or(value, value, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinOr:1
# 0e0f2eb627da447680a4fd32752eb5df
msgid "or(value, value, ...) -- returns the string \"1\" if any value is not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:57
# fc1745dac0de4bc997b9bb5271d54354
msgid "Date functions"
msgstr ""

#: ../../template_ref.rst:60
# b879b3a3efaa47ffa4c413dc42241f9b
msgid "days_between(date1, date2)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinDaysBetween:1
# b2d7bc891d4c4be98e982162dbe0e70e
msgid "days_between(date1, date2) -- return the number of days between date1 and date2. The number is positive if date1 is greater than date2, otherwise negative. If either date1 or date2 are not dates, the function returns the empty string."
msgstr ""

#: ../../template_ref.rst:65
# 6d864bf724e94cd6961be94f4baffe96
msgid "today()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinToday:1
# b48b7a908b934ebdb0a20cffd6365dd0
msgid "today() -- return a date string for today. This value is designed for use in format_date or days_between, but can be manipulated like any other string. The date is in ISO format."
msgstr ""

#: ../../template_ref.rst:70
# a24c21e0de114477ba42ed19b0d8dca0
msgid "Formatting values"
msgstr ""

#: ../../template_ref.rst:73
# eacdf8835964444a9a0ba221ba8e54cc
msgid "finish_formatting(val, fmt, prefix, suffix)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFinishFormatting:1
# 6b3dc07f8ebb4f5697bd75e203b3cd5c
msgid "finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and suffix to a value in the same way as done in a template like `{series_index:05.2f| - |- }`. For example, the following program produces the same output as the above template: program: finish_formatting(field(\"series_index\"), \"05.2f\", \" - \", \" - \")"
msgstr ""

#: ../../template_ref.rst:78
# a46c57b2f5294860ae5722d9aa259d43
msgid "format_date(val, format_string)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatDate:1
# ff5ab570f0f846969ff29574f37b1fab
msgid "format_date(val, format_string) -- format the value, which must be a date, using the format_string, returning a string. The formatting codes are: d    : the day as number without a leading zero (1 to 31) dd   : the day as number with a leading zero (01 to 31) ddd  : the abbreviated localized day name (e.g. \"Mon\" to \"Sun\"). dddd : the long localized day name (e.g. \"Monday\" to \"Sunday\"). M    : the month as number without a leading zero (1 to 12). MM   : the month as number with a leading zero (01 to 12) MMM  : the abbreviated localized month name (e.g. \"Jan\" to \"Dec\"). MMMM : the long localized month name (e.g. \"January\" to \"December\"). yy   : the year as two digit number (00 to 99). yyyy : the year as four digit number. h    : the hours without a leading 0 (0 to 11 or 0 to 23, depending on am/pm) hh   : the hours with a leading 0 (00 to 11 or 00 to 23, depending on am/pm) m    : the minutes without a leading 0 (0 to 59) mm   : the minutes with a leading 0 (00 to 59) s    : the seconds without a leading 0 (0 to 59) ss   : the seconds with a leading 0 (00 to 59) ap   : use a 12-hour clock instead of a 24-hour clock, with \"ap\" replaced by the localized string for am or pm AP   : use a 12-hour clock instead of a 24-hour clock, with \"AP\" replaced by the localized string for AM or PM iso  : the date with time and timezone. Must be the only format present"
msgstr ""

#: ../../template_ref.rst:83
# c449ea125e9744ddbd81dcc1f3dda5c3
msgid "format_number(v, template)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatNumber:1
# 342601e2a94144008bb60d59ec453509
msgid "format_number(v, template) -- format the number v using a python formatting template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The field_name part of the template must be a 0 (zero) (the \"{0:\" in the above examples). See the template language and python documentation for more examples. Returns the empty string if formatting fails."
msgstr ""

#: ../../template_ref.rst:88
# 02f3beb1116b46f78398d185548091e3
msgid "human_readable(v)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinHumanReadable:1
# 65cc315309594b268b54f2e083b7e90b
msgid "human_readable(v) -- return a string representing the number v in KB, MB, GB, etc."
msgstr ""

#: ../../template_ref.rst:93
# 5373fd37ffab48d5874c4657aeb326c3
msgid "Get values from metadata"
msgstr ""

#: ../../template_ref.rst:96
# 5df807591d184bb19f3c6a278f49cbd0
msgid "approximate_formats()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinApproximateFormats:1
# 567e1d0ea50949a48a623c133827d8d9
msgid "approximate_formats() -- return a comma-separated list of formats that at one point were associated with the book. There is no guarantee that this list is correct, although it probably is. This function can be called in template program mode using the template \"{:'approximate_formats()'}\". Note that format names are always uppercase, as in EPUB. This function works only in the GUI. If you want to use these values in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:101
# 96801549bebd44d0984ebf9aa55be4b5
msgid "author_links(val_separator, pair_separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinAuthorLinks:1
# 4614e8d1c7c647269faa4a4f199176d8
msgid "author_links(val_separator, pair_separator) -- returns a string containing a list of authors and that author's link values in the form author1 val_separator author1link pair_separator author2 val_separator author2link etc. An author is separated from its link value by the val_separator string with no added spaces. author:linkvalue pairs are separated by the pair_separator string argument with no added spaces. It is up to you to choose separator strings that do not occur in author names or links. An author is included even if the author link is empty."
msgstr ""

#: ../../template_ref.rst:106
# 944fcd29ecfa4835957b7250f8c26b4c
msgid "booksize()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinBooksize:1
# efba5f56c14148d4901f41c970a0cd87
msgid "booksize() -- return value of the size field. This function works only in the GUI. If you want to use this value in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:111
# 2af9033ef9ad49b38d5e286266560314
msgid "current_library_name()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCurrentLibraryName:1
# 8a76179c9bd44f4fb32ca79bff43c0b8
msgid "current_library_name() -- return the last name on the path to the current calibre library. This function can be called in template program mode using the template \"{:'current_library_name()'}\"."
msgstr ""

#: ../../template_ref.rst:116
# 3a017fffad264d07a0ec8260072d22fe
msgid "current_library_path()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCurrentLibraryPath:1
# e3205dc8409b47c2b170eb9b45488c20
msgid "current_library_path() -- return the path to the current calibre library. This function can be called in template program mode using the template \"{:'current_library_path()'}\"."
msgstr ""

#: ../../template_ref.rst:121
# 29747ee9f60e4a73bbd2d6316a03e855
msgid "field(name)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinField:1
# c4d13628cccb4a5da6a8d0cf8f30011e
msgid "field(name) -- returns the metadata field named by name"
msgstr ""

#: ../../template_ref.rst:126
# 01e30825463d48b481539b326e46666a
msgid "formats_modtimes(date_format)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatsModtimes:1
# c8becc9d59764aa096a483fa24d8466d
msgid "formats_modtimes(date_format) -- return a comma-separated list of colon_separated items representing modification times for the formats of a book. The date_format parameter specifies how the date is to be formatted. See the date_format function for details. You can use the select function to get the mod time for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_ref.rst:131
# 90721b0466604f84a107b947586b412b
msgid "formats_paths()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatsPaths:1
# 14da1d9899c846d08d8b30ce9b3ae22b
msgid "formats_paths() -- return a comma-separated list of colon_separated items representing full path to the formats of a book. You can use the select function to get the path for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_ref.rst:136
# eaa516d6d76549d2b504ff832dae2e7c
msgid "formats_sizes()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatsSizes:1
# 7c7a1fa2888d4be5aa782ed9f5cfb8eb
msgid "formats_sizes() -- return a comma-separated list of colon_separated items representing sizes in bytes of the formats of a book. You can use the select function to get the size for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_ref.rst:141
# 8e3d79bbb60d4ddfa4017e29056d6fb7
msgid "has_cover()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinHasCover:1
# 42915d25126349b19fbd288284bf9e9b
msgid "has_cover() -- return Yes if the book has a cover, otherwise return the empty string"
msgstr ""

#: ../../template_ref.rst:146
# 11e74181bba74016ab00cf180a8388e2
msgid "language_codes(lang_strings)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLanguageCodes:1
# a8ba94e07e1445679556a7369e82feb4
msgid "language_codes(lang_strings) -- return the language codes for the strings passed in lang_strings. The strings must be in the language of the current locale. Lang_strings is a comma-separated list."
msgstr ""

#: ../../template_ref.rst:151
# 6c6c4582890242a183cfd557b70fdbb4
msgid "language_strings(lang_codes, localize)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLanguageStrings:1
# 3a636a6f7b6d4f749b7921d8c511608c
msgid "language_strings(lang_codes, localize) -- return the strings for the language codes passed in lang_codes. If localize is zero, return the strings in English. If localize is not zero, return the strings in the language of the current locale. Lang_codes is a comma-separated list."
msgstr ""

#: ../../template_ref.rst:156
# 0076dba499244902a2655d77dd180383
msgid "ondevice()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinOndevice:1
# 23a54a2f744d4989a1f787da5e88349f
msgid "ondevice() -- return Yes if ondevice is set, otherwise return the empty string. This function works only in the GUI. If you want to use this value in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:161
# 7ba627ec53ad4e2e99d9be6566c3bd91
msgid "raw_field(name)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinRawField:1
# a0a2adb7160b4c7c89c90b9ddcfb35de
msgid "raw_field(name) -- returns the metadata field named by name without applying any formatting."
msgstr ""

#: ../../template_ref.rst:166
# 7d04b6e5aefc4f5786a44d26c9217057
msgid "series_sort()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSeriesSort:1
# 521d5da0fd9247a18ae53ab751e5b278
msgid "series_sort() -- return the series sort value"
msgstr ""

#: ../../template_ref.rst:171
# f2334d8777034a92af76e735cbef82f1
msgid "virtual_libraries()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinVirtualLibraries:1
# abb3ff1d80bf4a1f9b03bbb1c3c27c07
msgid "virtual_libraries() -- return a comma-separated list of virtual libraries that contain this book. This function works only in the GUI. If you want to use these values in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:176
# 95a4e1cd6b254806bde77df5e2b87e1f
msgid "If-then-else"
msgstr ""

#: ../../template_ref.rst:179
# aadfc0f7a1de466893a4dae1164c03e9
msgid "contains(val, pattern, text if match, text if not match)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinContains:1
# 28f189ce362a470b94cf2ee99117da30
msgid "contains(val, pattern, text if match, text if not match) -- checks if field contains matches for the regular expression `pattern`. Returns `text if match` if matches are found, otherwise it returns `text if no match`"
msgstr ""

#: ../../template_ref.rst:184
# e490c54c88ac4e9e80edbe8891035a27
msgid "ifempty(val, text if empty)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinIfempty:1
# 1352778f0ea349df835db13203c8ec3a
msgid "ifempty(val, text if empty) -- return val if val is not empty, otherwise return `text if empty`"
msgstr ""

#: ../../template_ref.rst:189
# b2cfea2468694cc882fcba8566fa02f0
msgid "test(val, text if not empty, text if empty)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTest:1
# 60017719925543128e2df8fa7cdd7ae3
msgid "test(val, text if not empty, text if empty) -- return `text if not empty` if the field is not empty, otherwise return `text if empty`"
msgstr ""

#: ../../template_ref.rst:194
# 2429347854784a03998ee52fa6b80a43
msgid "Iterating over values"
msgstr ""

#: ../../template_ref.rst:197
# 29a163f6cd5742dea81183cd0437a1c3
msgid "first_non_empty(value, value, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFirstNonEmpty:1
# 30e3ea7d0c874c6f89377663b47c9ff0
msgid "first_non_empty(value, value, ...) -- returns the first value that is not empty. If all values are empty, then the empty value is returned. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:202
# 3c64b4cdd66c41a8b1db43b157aaf2b0
msgid "lookup(val, pattern, field, pattern, field, ..., else_field)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLookup:1
# a65974114c8c4250b73497c99e67f176
msgid "lookup(val, pattern, field, pattern, field, ..., else_field) -- like switch, except the arguments are field (metadata) names, not text. The value of the appropriate field will be fetched and used. Note that because composite columns are fields, you can use this function in one composite field to use the value of some other composite field. This is extremely useful when constructing variable save paths"
msgstr ""

#: ../../template_ref.rst:207
# 7ccf50aecf664eef917c20c340973484
msgid "switch(val, pattern, value, pattern, value, ..., else_value)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSwitch:1
# aef03217bb9a42b0ab80ce37811dd56c
msgid "switch(val, pattern, value, pattern, value, ..., else_value) -- for each `pattern, value` pair, checks if the field matches the regular expression `pattern` and if so, returns that `value`. If no pattern matches, then else_value is returned. You can have as many `pattern, value` pairs as you want"
msgstr ""

#: ../../template_ref.rst:212
# 1284ac495e80494d8f26826c4aa4b2ad
msgid "List lookup"
msgstr ""

#: ../../template_ref.rst:215
# b139a5a61c5749a4822476dc0982501e
msgid "identifier_in_list(val, id, found_val, not_found_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinIdentifierInList:1
# fb2d5c22635e48309dcc861c7a164721
msgid "identifier_in_list(val, id, found_val, not_found_val) -- treat val as a list of identifiers separated by commas, comparing the string against each value in the list. An identifier has the format \"identifier:value\". The id parameter should be either \"id\" or \"id:regexp\". The first case matches if there is any identifier with that id. The second case matches if the regexp matches the identifier's value. If there is a match, return found_val, otherwise return not_found_val."
msgstr ""

#: ../../template_ref.rst:220
# 82426cf16de345ea9d56727c77dec881
msgid "in_list(val, separator, pattern, found_val, not_found_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinInList:1
# fdd9ff81bc5a4ebb9a8360d9d18ad5c0
msgid "in_list(val, separator, pattern, found_val, not_found_val) -- treat val as a list of items separated by separator, comparing the pattern against each value in the list. If the pattern matches a value, return found_val, otherwise return not_found_val."
msgstr ""

#: ../../template_ref.rst:225
# 22ba0f2572094fbd9d38774dfe4f85cb
msgid "list_item(val, index, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListitem:1
# 1ec92f89d71c4040b45cccb1c2cf69f3
msgid "list_item(val, index, separator) -- interpret the value as a list of items separated by `separator`, returning the `index`th item. The first item is number zero. The last item can be returned using `list_item(-1,separator)`. If the item is not in the list, then the empty value is returned. The separator has the same meaning as in the count function."
msgstr ""

#: ../../template_ref.rst:230
# ba1583b7944548f49aca5f00646c82f1
msgid "select(val, key)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSelect:1
# 6dc27378c1284c3a8bd55ae4e6653b2e
msgid "select(val, key) -- interpret the value as a comma-separated list of items, with the items being \"id:value\". Find the pair with the id equal to key, and return the corresponding value."
msgstr ""

#: ../../template_ref.rst:235
# 96da715b79e94ce39fead6cfd7041b9d
msgid "str_in_list(val, separator, string, found_val, not_found_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrInList:1
# e3edab2d2e4b4d508e603fe72ad9fdf6
msgid "str_in_list(val, separator, string, found_val, not_found_val) -- treat val as a list of items separated by separator, comparing the string against each value in the list. If the string matches a value, return found_val, otherwise return not_found_val. If the string contains separators, then it is also treated as a list and each value is checked."
msgstr ""

#: ../../template_ref.rst:240
# 933533366ab8438da907d75c5a9370ca
msgid "List manipulation"
msgstr ""

#: ../../template_ref.rst:243
# 5d771307421743dc8b13d32005f57aef
msgid "count(val, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCount:1
# 54883755c8454236ab53c21debac1618
msgid "count(val, separator) -- interprets the value as a list of items separated by `separator`, returning the number of items in the list. Most lists use a comma as the separator, but authors uses an ampersand. Examples: {tags:count(,)}, {authors:count(&)}"
msgstr ""

#: ../../template_ref.rst:248
# 88d58c364da64505b695e2069203ca8f
msgid "list_difference(list1, list2, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListDifference:1
# 08d249b9f5ed46ddab54124390224a65
msgid "list_difference(list1, list2, separator) -- return a list made by removing from list1 any item found in list2, using a case-insensitive compare. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:253
# 7a060773e6f44d5981cd20e862d44813
msgid "list_equals(list1, sep1, list2, sep2, yes_val, no_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListEquals:1
# 6d68b46ea55b4ea4abc168a54016dd79
msgid "list_equals(list1, sep1, list2, sep2, yes_val, no_val) -- return yes_val if list1 and list2 contain the same items, otherwise return no_val. The items are determined by splitting each list using the appropriate separator character (sep1 or sep2). The order of items in the lists is not relevant. The compare is case insensitive."
msgstr ""

#: ../../template_ref.rst:258
# f0b12702902d41dc866266f9413b2eec
msgid "list_intersection(list1, list2, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListIntersection:1
# 3f64d73cf13c480ba21081a1879b7b07
msgid "list_intersection(list1, list2, separator) -- return a list made by removing from list1 any item not found in list2, using a case-insensitive compare. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:263
# e37cfa77c4f64be5b7a60afc9ad4b6e9
msgid "list_re(src_list, separator, include_re, opt_replace)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListRe:1
# e5f4204f8474426dad6bdaaf067b4c03
msgid "list_re(src_list, separator, include_re, opt_replace) -- Construct a list by first separating src_list into items using the separator character. For each item in the list, check if it matches include_re. If it does, then add it to the list to be returned. If opt_replace is not the empty string, then apply the replacement before adding the item to the returned list."
msgstr ""

#: ../../template_ref.rst:268
# f1afdb1b617e422db817de3740e116d9
msgid "list_re_group(src_list, separator, include_re, search_re, group_1_template, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListReGroup:1
# 881dab36e4a84407b4c537672fe9df9b
msgid "list_re_group(src_list, separator, include_re, search_re, group_1_template, ...) -- Like list_re except replacements are not optional. It uses re_group(list_item, search_re, group_1_template, ...) when doing the replacements on the resulting list."
msgstr ""

#: ../../template_ref.rst:273
# ef7cd0ca59d74ed5961e823e8befc614
msgid "list_sort(list, direction, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListSort:1
# 3293e1e5680148ce92dd1077971e1638
msgid "list_sort(list, direction, separator) -- return list sorted using a case-insensitive sort. If direction is zero, the list is sorted ascending, otherwise descending. The list items are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:278
# 4787cf0b549a4a1aa5a68ef7bf580f22
msgid "list_union(list1, list2, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListUnion:1
# 8240aeb43a534a84895a4700ab376e17
msgid "list_union(list1, list2, separator) -- return a list made by merging the items in list1 and list2, removing duplicate items using a case-insensitive compare. If items differ in case, the one in list1 is used. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:283
# fae5c61fcaf94aa19c4f55e0706b4b95
msgid "subitems(val, start_index, end_index)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSubitems:1
# 65e1abec9c8f4037bf71b5488ffc3152
msgid "subitems(val, start_index, end_index) -- This function is used to break apart lists of items such as genres. It interprets the value as a comma-separated list of items, where each item is a period-separated list. Returns a new list made by first finding all the period-separated items, then for each such item extracting the `start_index` to the `end_index` components, then combining the results back together. The first component in a period-separated list has an index of zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Example using basic template mode and assuming a #genre value of \"A.B.C\": {#genre:subitems(0,1)} returns \"A\". {#genre:subitems(0,2)} returns \"A.B\". {#genre:subitems(1,0)} returns \"B.C\". Assuming a #genre value of \"A.B.C, D.E.F\", {#genre:subitems(0,1)} returns \"A, D\". {#genre:subitems(0,2)} returns \"A.B, D.E\""
msgstr ""

#: ../../template_ref.rst:288
# 0b6daadfb9ee4e089564abeefd77fdd9
msgid "sublist(val, start_index, end_index, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSublist:1
# 88a4f467cef64986a282b1f3d5fe86e7
msgid "sublist(val, start_index, end_index, separator) -- interpret the value as a list of items separated by `separator`, returning a new list made from the `start_index` to the `end_index` item. The first item is number zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples using basic template mode and assuming that the tags column (which is comma-separated) contains \"A, B, C\": {tags:sublist(0,1,\\,)} returns \"A\". {tags:sublist(-1,0,\\,)} returns \"C\". {tags:sublist(0,-1,\\,)} returns \"A, B\"."
msgstr ""

#: ../../template_ref.rst:293
# 8603c74bbf4845ada8498fe4f28bc23b
msgid "Other"
msgstr ""

#: ../../template_ref.rst:296
# 1f78c4619d1640a39561a32d743cd3b1
msgid "assign(id, val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinAssign:1
# 62b02357b0b0404f8374a882e8fef4cf
msgid "assign(id, val) -- assigns val to id, then returns val. id must be an identifier, not an expression"
msgstr ""

#: ../../template_ref.rst:301
# 08bda8fd3ef84e629f7a92219db1a14d
msgid "print(a, b, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinPrint:1
# e8636579668c4e15a0ddb1969deaa2d9
msgid "print(a, b, ...) -- prints the arguments to standard output. Unless you start calibre from the command line (calibre-debug -g), the output will go to a black hole."
msgstr ""

#: ../../template_ref.rst:306
# 2f9cc5bb60b04f4b838c8c921ac0a740
msgid "Recursion"
msgstr ""

#: ../../template_ref.rst:309
# 1f925f742ec2485593b14baceeb9f497
msgid "eval(template)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinEval:1
# 29c93791a0fa44de84c81770b7d5f931
msgid "eval(template) -- evaluates the template, passing the local variables (those 'assign'ed to) instead of the book metadata.  This permits using the template processor to construct complex results from local variables. Because the { and } characters are special, you must use [[ for the { character and ]] for the } character; they are converted automatically. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../template_ref.rst:314
# 67066b5afd2b491abcf54eef9bd6f979
msgid "template(x)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTemplate:1
# e60eb23a4e484dbb8d667e635545803c
msgid "template(x) -- evaluates x as a template. The evaluation is done in its own context, meaning that variables are not shared between the caller and the template evaluation. Because the { and } characters are special, you must use [[ for the { character and ]] for the } character; they are converted automatically. For example, template('[[title_sort]]') will evaluate the template {title_sort} and return its value. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../template_ref.rst:319
# 9860dd3ac3f14310b9b3613a62891be5
msgid "Relational"
msgstr ""

#: ../../template_ref.rst:322
# ec221987a87a41d5a9be83cada4105db
msgid "cmp(x, y, lt, eq, gt)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCmp:1
# b35d97b37e084f6289f388653d99771c
msgid "cmp(x, y, lt, eq, gt) -- compares x and y after converting both to numbers. Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr ""

#: ../../template_ref.rst:327
# 60da3fa1ecd94e8b8e02dea7a504c21a
msgid "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFirstMatchingCmp:1
# 71837813c9fb4ab793d49036bb543c06
msgid "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result) -- compares \"val < cmpN\" in sequence, returning resultN for the first comparison that succeeds. Returns else_result if no comparison succeeds. Example: first_matching_cmp(10,5,\"small\",10,\"middle\",15,\"large\",\"giant\") returns \"large\". The same example with a first value of 16 returns \"giant\"."
msgstr ""

#: ../../template_ref.rst:332
# 9ec7312d8c764f6bab84b19733fa64f0
msgid "strcmp(x, y, lt, eq, gt)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrcmp:1
# 2f4af94d0fe6444092b2a1885a5a170d
msgid "strcmp(x, y, lt, eq, gt) -- does a case-insensitive comparison of x and y as strings. Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr ""

#: ../../template_ref.rst:337
# 529540d67eeb4d31adab3122497218ce
msgid "String case changes"
msgstr ""

#: ../../template_ref.rst:340
# 25f3ce63f165460eaec495372026a02b
msgid "capitalize(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCapitalize:1
# 86cd7d67dc154ce9b225a5f1a2da5069
msgid "capitalize(val) -- return value of the field capitalized"
msgstr ""

#: ../../template_ref.rst:345
# e1de770490ef4b2eab776f50c6ea6d25
msgid "lowercase(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLowercase:1
# cccf8157a2464345afb369f98076365d
msgid "lowercase(val) -- return value of the field in lower case"
msgstr ""

#: ../../template_ref.rst:350
# 8603fdd20c154ef6927b85eef6a070c8
msgid "titlecase(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTitlecase:1
# 09c00bb099884a60985c931db61083a9
msgid "titlecase(val) -- return value of the field in title case"
msgstr ""

#: ../../template_ref.rst:355
# 9db7c6e5ba814fe89fa5494057c3a46b
msgid "uppercase(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinUppercase:1
# 35eb189d062a402c98052fed156299e1
msgid "uppercase(val) -- return value of the field in upper case"
msgstr ""

#: ../../template_ref.rst:360
# ebe0b579b82e4d8a8ffd3f92415a299b
msgid "String manipulation"
msgstr ""

#: ../../template_ref.rst:363
# 4418358bdbf54f869064795b8f998cce
msgid "re(val, pattern, replacement)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinRe:1
# 3e363b9c0ed94968ba6ea172e4cbc05d
msgid "re(val, pattern, replacement) -- return the field after applying the regular expression. All instances of `pattern` are replaced with `replacement`. As in all of calibre, these are python-compatible regular expressions"
msgstr ""

#: ../../template_ref.rst:368
# 4e0f01816c194cf99c5751eb3015f7bd
msgid "re_group(val, pattern, template_for_group_1, for_group_2, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinReGroup:1
# b68c493c97f3489f90013059ef8bf735
msgid "re_group(val, pattern, template_for_group_1, for_group_2, ...) -- return a string made by applying the reqular expression pattern to the val and replacing each matched instance with the string computed by replacing each matched group by the value returned by the corresponding template. The original matched value for the group is available as $. In template program mode, like for the template and the eval functions, you use [[ for { and ]] for }. The following example in template program mode looks for series with more than one word and uppercases the first word: {series:'re_group($, \"(\\S* )(.*)\", \"[[$:uppercase()]]\", \"[[$]]\")'}"
msgstr ""

#: ../../template_ref.rst:373
# 1ecf7e2630044f0da484fe88971012d6
msgid "shorten(val, left chars, middle text, right chars)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinShorten:1
# 064c430f05e8422d8c6de2fb2ac933a8
msgid "shorten(val, left chars, middle text, right chars) -- Return a shortened version of the field, consisting of `left chars` characters from the beginning of the field, followed by `middle text`, followed by `right chars` characters from the end of the string. `Left chars` and `right chars` must be integers. For example, assume the title of the book is `Ancient English Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most 15 characters. If you use {title:shorten(9,-,5)}, the result will be `Ancient E-nhoe`. If the field's length is less than left chars + right chars + the length of `middle text`, then the field will be used intact. For example, the title `The Dome` would not be changed."
msgstr ""

#: ../../template_ref.rst:378
# 927498a3561349f9be8440cf3cfce4dc
msgid "strcat(a, b, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrcat:1
# 316e2ebc198442c593573ef6fbec0aa8
msgid "strcat(a, b, ...) -- can take any number of arguments. Returns a string formed by concatenating all the arguments"
msgstr ""

#: ../../template_ref.rst:383
# 3aefa98e18674f6da7ec779178adc80f
msgid "strcat_max(max, string1, prefix2, string2, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrcatMax:1
# 43a19acabf1d4198b6b1fed185bb8a35
msgid "strcat_max(max, string1, prefix2, string2, ...) -- Returns a string formed by concatenating the arguments. The returned value is initialized to string1. `Prefix, string` pairs are added to the end of the value as long as the resulting string length is less than `max`. String1 is returned even if string1 is longer than max. You can pass as many `prefix, string` pairs as you wish."
msgstr ""

#: ../../template_ref.rst:388
# b16d7a79f5154d5291e438d1c1d6cd18
msgid "strlen(a)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrlen:1
# c57108f12db7470dbae9ba6bdf6d05ba
msgid "strlen(a) -- Returns the length of the string passed as the argument"
msgstr ""

#: ../../template_ref.rst:393
# 8bd87441ad9b4a2b8562d61a2b473c43
msgid "substr(str, start, end)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSubstr:1
# 0a95ff156c1b438084766c7f3a80958a
msgid "substr(str, start, end) -- returns the start'th through the end'th characters of str. The first character in str is the zero'th character. If end is negative, then it indicates that many characters counting from the right. If end is zero, then it indicates the last character. For example, substr('12345', 1, 0) returns '2345', and substr('12345', 1, -1) returns '234'."
msgstr ""

#: ../../template_ref.rst:398
# 9abf67aa2c844d0c99616427054a31cb
msgid "swap_around_comma(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSwapAroundComma:1
# c7f3ff806e0b4f3a8917937eaa09ea2a
msgid "swap_around_comma(val) -- given a value of the form \"B, A\", return \"A B\". This is most useful for converting names in LN, FN format to FN LN. If there is no comma, the function returns val unchanged"
msgstr ""

#: ../../template_ref.rst:403
# 068903d1fadb49b294d370c142bfd5f8
msgid "transliterate(a)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTransliterate:1
# fc7a470106dd4d4aae7773beba9978e1
msgid "transliterate(a) -- Returns a string in a latin alphabet formed by approximating the sound of the words in the source string. For example, if the source is \"Фёдор Миха́йлович Достоевский\" the function returns \"Fiodor Mikhailovich Dostoievskii\"."
msgstr ""

#: ../../template_ref.rst:409
# c7b11d680b1e4bb78a37253954cceecb
msgid "API of the Metadata objects"
msgstr ""

#: ../../template_ref.rst:411
# a1218cd006ca48508330f2d1ab7d323e
msgid "The python implementation of the template functions is passed in a Metadata object. Knowing it's API is useful if you want to define your own template functions."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:1
# 91d13b46848b4f85a6a59fc3606407a5
msgid "A class representing all the metadata for a book. The various standard metadata fields are available as attributes of this object. You can also stick arbitrary attributes onto this object."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:5
# 73a9d4d26a014f439e1bc618b4c36420
msgid "Metadata from custom columns should be accessed via the get() method, passing in the lookup name for the column, for example: \"#mytags\"."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:8
# 849a08b09c5c4b72bfaf0dd954ec6f97
msgid "Use the :meth:`is_null` method to test if a field is null."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:10
# 1a1f456d793445d5b116f6238662812a
msgid "This object also has functions to format fields into strings."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:12
# 6f702e73ce8849d292f869021e7dfab5
msgid "The list of standard metadata fields grows with time is in :data:`STANDARD_METADATA_FIELDS`."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:15
# a2886120558249a38a1ef5fe459e6bd3
msgid "Please keep the method based API of this class to a minimum. Every method becomes a reserved field name."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.is_null:1
# f37d03829c71473db84b77b14e82c4a3
msgid "Return True if the value of field is null in this object. 'null' means it is unknown or evaluates to False. So a title of _('Unknown') is null or a language of 'und' is null."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.is_null:5
# 442d111fd38e4022be3c16187d3609e2
msgid "Be careful with numeric fields since this will return True for zero as well as None."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.is_null:8
# 66c4d0a1066544359936d8bde442ba47
msgid "Also returns True if the field does not exist."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.deepcopy:1
# 591fb1a5d8c14f0f9acf7ca84d55a2a2
msgid "Do not use this method unless you know what you are doing, if you want to create a simple clone of this object, use :meth:`deepcopy_metadata` instead. Class_generator must be a function that returns an instance of Metadata or a subclass of it."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_identifiers:1
# 42b2fee77fdb4c47a68e431faeafb713
msgid "Return a copy of the identifiers dictionary. The dict is small, and the penalty for using a reference where a copy is needed is large. Also, we don't want any manipulations of the returned dict to show up in the book."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_identifiers:1
# 8159734070d64dcabd2b8994d8727d81
msgid "Set all identifiers. Note that if you previously set ISBN, calling this method will delete it."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_identifier:1
# dfa8bd04c6264f85aa3ed5e88f927b4c
msgid "If val is empty, deletes identifier of type typ"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.standard_field_keys:1
# 0de16fde55a640158ff7f079093cb310
msgid "return a list of all possible keys, even if this book doesn't have them"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.custom_field_keys:1
# b1f0df46ab254449891222d2b5b0ba7a
msgid "return a list of the custom fields in this book"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.all_field_keys:1
# 273bf34887de46299cbeb83810ed38e9
msgid "All field keys known by this instance, even if their value is None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.metadata_for_field:1
# 60df10d33a1b4154ade8169c43be87f2
msgid "return metadata describing a standard or custom field."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.all_non_none_fields:1
# 2a2c4978ceff45f6b8f54428236e78f3
msgid "Return a dictionary containing all non-None metadata fields, including the custom ones."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_standard_metadata:1
# 3739480a131e4daa80f7852b302c2142
msgid "return field metadata from the field if it is there. Otherwise return None. field is the key name, not the label. Return a copy if requested, just in case the user wants to change values in the dict."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_all_standard_metadata:1
# 0e6772631fdb432cb3d8ea067254d5a2
msgid "return a dict containing all the standard field metadata associated with the book."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_all_user_metadata:1
# 5003cbb1254249df8818b6e1318eba2b
msgid "return a dict containing all the custom field metadata associated with the book."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_user_metadata:1
# 5cb87b1c493c484dac6da4eef343b394
msgid "return field metadata from the object if it is there. Otherwise return None. field is the key name, not the label. Return a copy if requested, just in case the user wants to change values in the dict."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_all_user_metadata:1
# 571083c3844a4a9a85102eed9f4f65fc
msgid "store custom field metadata into the object. Field is the key name not the label"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_user_metadata:1
# cbe374b2e2f14e678bade8df81a9be7e
msgid "store custom field metadata for one column into the object. Field is the key name not the label"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.template_to_attribute:1
# a3547a694894432eb0313df705df962b
msgid "Takes a list [(src,dest), (src,dest)], evaluates the template in the context of other, then copies the result to self[dest]. This is on a best-efforts basis. Some assignments can make no sense."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.smart_update:1
# c82c5b172f034d93bfc68c834c9cd7a7
msgid "Merge the information in `other` into self. In case of conflicts, the information in `other` takes precedence, unless the information in `other` is NULL."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.format_field:1
# 3d5a6a0dd22148eabae949c98b9172da
msgid "Returns the tuple (display_name, formatted_value)"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.to_html:1
# 08fa4c9078a8419991cd0b8187b5c72c
msgid "A HTML representation of this object."
msgstr ""

#: ../../template_ref.rst:421
# a32b70b29c2345bdbc7d3f37cd084534
msgid "The set of standard metadata fields."
msgstr ""

