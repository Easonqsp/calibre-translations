# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.43.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-06 17:44+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../template_ref.rst:6
# 6c3a02ebfb1048129675109abe699f14
msgid "Reference for all built-in template language functions"
msgstr ""

#: ../../template_ref.rst:8
# 43fb32135a1842e8840141a7c5abe7f7
msgid "Here, we document all the built-in functions available in the |app| template language. Every function is implemented as a class in python and you can click the source links to see the source code, in case the documentation is insufficient. The functions are arranged in logical groups by type."
msgstr ""

#: ../../template_ref.rst:17
# c0b56e746d5345e198abb012c89d63ed
msgid "Arithmetic"
msgstr ""

#: ../../template_ref.rst:20
# 1537dfebed084cafbbd740058d81ebd0
msgid "add(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinAdd:1
# f0dc8481792146b2ac3cc38905e6627f
msgid "add(x, y) -- returns x + y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:25
# 6c811ce7f1fa481b9541cd5d268ee9a7
msgid "divide(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinDivide:1
# dfdd760289354454958e83530c9884e8
msgid "divide(x, y) -- returns x / y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:30
# 4d644fd1f5cd4c30b71fac0796cc56da
msgid "multiply(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinMultiply:1
# 9d84b6a4eb38490490407e47e67a9719
msgid "multiply(x, y) -- returns x * y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:35
# bc75037cf2b04548b041531c6db46d31
msgid "subtract(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSubtract:1
# 6ab268b4d5fa4a96b57c9369e964d8c3
msgid "subtract(x, y) -- returns x - y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:40
# 5ade87243f31469fbf98f785fa34742f
msgid "Boolean"
msgstr ""

#: ../../template_ref.rst:43
# 0f26bcb92f3842b993d4c42e57fcb30f
msgid "and(value, value, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinAnd:1
# 38ec871d29f64f95a504e7e88ea845cb
msgid "and(value, value, ...) -- returns the string \"1\" if all values are not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:48
# eb550731926b4eb796ef604b2980fd8f
msgid "not(value)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinNot:1
# c5b8bed11ebb4593afe807dbedd01948
msgid "not(value) -- returns the string \"1\" if the value is empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:53
# ac6cb2dce64443eba2decdafe2b8144b
msgid "or(value, value, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinOr:1
# c01e8ad73bb34847ad54fbc84f677fa5
msgid "or(value, value, ...) -- returns the string \"1\" if any value is not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:58
# c70ef4b6f80d4fbda4ef9bd56a68396c
msgid "Date functions"
msgstr ""

#: ../../template_ref.rst:61
# 3452f7e824844d39ad55f205428068b5
msgid "days_between(date1, date2)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinDaysBetween:1
# a1ad68bee36b4a59bc572438e5a0beb9
msgid "days_between(date1, date2) -- return the number of days between date1 and date2. The number is positive if date1 is greater than date2, otherwise negative. If either date1 or date2 are not dates, the function returns the empty string."
msgstr ""

#: ../../template_ref.rst:66
# fc51604f2ac24d5eadea4c517be2f3f5
msgid "today()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinToday:1
# 490d4e4ecd8a4a58b3e06181c3c69111
msgid "today() -- return a date string for today. This value is designed for use in format_date or days_between, but can be manipulated like any other string. The date is in ISO format."
msgstr ""

#: ../../template_ref.rst:71
# 9e122da305574a2c864a90b7f79212f3
msgid "Formatting values"
msgstr ""

#: ../../template_ref.rst:74
# a992371b0e0747519e0ff17f93ab68ac
msgid "finish_formatting(val, fmt, prefix, suffix)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFinishFormatting:1
# 4cdec2388527412aaed69bbb85586412
msgid "finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and suffix to a value in the same way as done in a template like `{series_index:05.2f| - |- }`. For example, the following program produces the same output as the above template: program: finish_formatting(field(\"series_index\"), \"05.2f\", \" - \", \" - \")"
msgstr ""

#: ../../template_ref.rst:79
# ac4a30aa24b848c19f95201248f2bab3
msgid "format_date(val, format_string)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatDate:1
# ee2f607b872c4386a36c5b66dc294471
msgid "format_date(val, format_string) -- format the value, which must be a date, using the format_string, returning a string. The formatting codes are: d    : the day as number without a leading zero (1 to 31) dd   : the day as number with a leading zero (01 to 31) ddd  : the abbreviated localized day name (e.g. \"Mon\" to \"Sun\"). dddd : the long localized day name (e.g. \"Monday\" to \"Sunday\"). M    : the month as number without a leading zero (1 to 12). MM   : the month as number with a leading zero (01 to 12) MMM  : the abbreviated localized month name (e.g. \"Jan\" to \"Dec\"). MMMM : the long localized month name (e.g. \"January\" to \"December\"). yy   : the year as two digit number (00 to 99). yyyy : the year as four digit number. h    : the hours without a leading 0 (0 to 11 or 0 to 23, depending on am/pm) hh   : the hours with a leading 0 (00 to 11 or 00 to 23, depending on am/pm) m    : the minutes without a leading 0 (0 to 59) mm   : the minutes with a leading 0 (00 to 59) s    : the seconds without a leading 0 (0 to 59) ss   : the seconds with a leading 0 (00 to 59) ap   : use a 12-hour clock instead of a 24-hour clock, with \"ap\" replaced by the localized string for am or pm AP   : use a 12-hour clock instead of a 24-hour clock, with \"AP\" replaced by the localized string for AM or PM iso  : the date with time and timezone. Must be the only format present"
msgstr ""

#: ../../template_ref.rst:84
# 131a75a9006d4e3a8eff654a05ff3695
msgid "format_number(v, template)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatNumber:1
# 7b1ce56beeaa424ab75a0034c44bc19b
msgid "format_number(v, template) -- format the number v using a python formatting template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The field_name part of the template must be a 0 (zero) (the \"{0:\" in the above examples). See the template language and python documentation for more examples. Returns the empty string if formatting fails."
msgstr ""

#: ../../template_ref.rst:89
# 8ff50bbf26664eeca5e6efdc32076747
msgid "human_readable(v)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinHumanReadable:1
# 4fd910c5412a45e38a45011685f42c3f
msgid "human_readable(v) -- return a string representing the number v in KB, MB, GB, etc."
msgstr ""

#: ../../template_ref.rst:94
# 1806723fe14b4d45b286a19bf1611f5f
msgid "Get values from metadata"
msgstr ""

#: ../../template_ref.rst:97
# 791306ce1e3343ad95d534ba6642521a
msgid "approximate_formats()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinApproximateFormats:1
# 60601ca3c6424a28837f34521fdf77fb
msgid "approximate_formats() -- return a comma-separated list of formats that at one point were associated with the book. There is no guarantee that this list is correct, although it probably is. This function can be called in template program mode using the template \"{:'approximate_formats()'}\". Note that format names are always uppercase, as in EPUB. This function works only in the GUI. If you want to use these values in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:102
# d8e690481b264247a60571ddc90489ac
msgid "booksize()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinBooksize:1
# 9e6c9ac75f634c3980753c79be541ad3
msgid "booksize() -- return value of the size field. This function works only in the GUI. If you want to use this value in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:107
# e580c5db0c7d49efb955b465c5b928c7
msgid "current_library_name()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCurrentLibraryName:1
# 103c0819184e49cf95174b6f8e2b7415
msgid "current_library_name() -- return the last name on the path to the current calibre library. This function can be called in template program mode using the template \"{:'current_library_name()'}\"."
msgstr ""

#: ../../template_ref.rst:112
# b2fb7b0b2148447ba3635492b539983b
msgid "current_library_path()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCurrentLibraryPath:1
# 712e0d281a9d4959b37ac39a0faa2489
msgid "current_library_path() -- return the path to the current calibre library. This function can be called in template program mode using the template \"{:'current_library_path()'}\"."
msgstr ""

#: ../../template_ref.rst:117
# 370c828c34c74ba8bf57e2a7e48e5182
msgid "field(name)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinField:1
# 0efcffd83d5f408d9aff7dd99c252bdd
msgid "field(name) -- returns the metadata field named by name"
msgstr ""

#: ../../template_ref.rst:122
# dba50a8df8294bbe8ef9e4fe7eeb0d42
msgid "formats_modtimes(date_format)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatsModtimes:1
# a922c719732d443ea5bd69574f32c13b
msgid "formats_modtimes(date_format) -- return a comma-separated list of colon_separated items representing modification times for the formats of a book. The date_format parameter specifies how the date is to be formatted. See the date_format function for details. You can use the select function to get the mod time for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_ref.rst:127
# 4e62c6097318441387f6c8136f9c22a7
msgid "formats_paths()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatsPaths:1
# 130dd12a5b224d3fb59bab182f6fb5e9
msgid "formats_paths() -- return a comma-separated list of colon_separated items representing full path to the formats of a book. You can use the select function to get the path for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_ref.rst:132
# 7975a71f413141258c9739282484a50d
msgid "formats_sizes()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatsSizes:1
# 4985c7c8c9d74d02be03a67e40e072d1
msgid "formats_sizes() -- return a comma-separated list of colon_separated items representing sizes in bytes of the formats of a book. You can use the select function to get the size for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_ref.rst:137
# a78cd8a21b174c9f976a19d261b60e4f
msgid "has_cover()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinHasCover:1
# dbe8a85e81f146d7b28d90994a7db67d
msgid "has_cover() -- return Yes if the book has a cover, otherwise return the empty string"
msgstr ""

#: ../../template_ref.rst:142
# 20e4d6a41b3742f1ad8097b48b6416f9
msgid "language_codes(lang_strings)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLanguageCodes:1
# aa0e8e98080444b9b80deb92ac8ff28d
msgid "language_codes(lang_strings) -- return the language codes for the strings passed in lang_strings. The strings must be in the language of the current locale. Lang_strings is a comma-separated list."
msgstr ""

#: ../../template_ref.rst:147
# cd199b4170b248ea9f9e541e79f76647
msgid "language_strings(lang_codes, localize)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLanguageStrings:1
# 49b3b64988a8451db60b872cf1f597ce
msgid "language_strings(lang_codes, localize) -- return the strings for the language codes passed in lang_codes. If localize is zero, return the strings in English. If localize is not zero, return the strings in the language of the current locale. Lang_codes is a comma-separated list."
msgstr ""

#: ../../template_ref.rst:152
# 971198b944a348248159efc0388d286b
msgid "ondevice()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinOndevice:1
# fe44a4c92d1c48e185c14b25e5b839e8
msgid "ondevice() -- return Yes if ondevice is set, otherwise return the empty string. This function works only in the GUI. If you want to use this value in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:157
# df05061755bb493894efefae74d7191b
msgid "raw_field(name)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinRawField:1
# 4ccab3d7e9b24d52b74dcce0cece562a
msgid "raw_field(name) -- returns the metadata field named by name without applying any formatting."
msgstr ""

#: ../../template_ref.rst:162
# b6575f92fe934267bd1ff8762614a902
msgid "series_sort()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSeriesSort:1
# 01b4bf9eef8540b188852472bc48c496
msgid "series_sort() -- return the series sort value"
msgstr ""

#: ../../template_ref.rst:167
# e941eb9d313e4a3aacc175177ab39457
msgid "virtual_libraries()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinVirtualLibraries:1
# 05f5b83666b54f369219e9a0e611f86c
msgid "virtual_libraries() -- return a comma-separated list of virtual libraries that contain this book. This function works only in the GUI. If you want to use these values in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:172
# f5aab606dc6e4940bae291d5ce37d0c5
msgid "If-then-else"
msgstr ""

#: ../../template_ref.rst:175
# 8faf9e9d7e1e4619a30c23ac3b5a6a9d
msgid "contains(val, pattern, text if match, text if not match)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinContains:1
# 5c48535067c4478f97e23cd5ae98a0c2
msgid "contains(val, pattern, text if match, text if not match) -- checks if field contains matches for the regular expression `pattern`. Returns `text if match` if matches are found, otherwise it returns `text if no match`"
msgstr ""

#: ../../template_ref.rst:180
# 537861343dac47fc838f421698e2b3e3
msgid "ifempty(val, text if empty)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinIfempty:1
# f06b402c6ccd4c74bd71d35d5bfc1cc7
msgid "ifempty(val, text if empty) -- return val if val is not empty, otherwise return `text if empty`"
msgstr ""

#: ../../template_ref.rst:185
# 62bf11b796b945b792d3b5653b56fdc8
msgid "test(val, text if not empty, text if empty)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTest:1
# ec5ff98a33a24583bebd8c9641f56967
msgid "test(val, text if not empty, text if empty) -- return `text if not empty` if the field is not empty, otherwise return `text if empty`"
msgstr ""

#: ../../template_ref.rst:190
# 43c332569abd40ba8cc0e6065043dcb0
msgid "Iterating over values"
msgstr ""

#: ../../template_ref.rst:193
# 736c1cf7a8544aa08a3cf5d8e82d80d0
msgid "first_non_empty(value, value, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFirstNonEmpty:1
# 8f01b56c82564a21bb516d80cb66a5f2
msgid "first_non_empty(value, value, ...) -- returns the first value that is not empty. If all values are empty, then the empty value is returned. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:198
# 24a39b7ebb9947dbb572ab6ab53dad50
msgid "lookup(val, pattern, field, pattern, field, ..., else_field)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLookup:1
# e2504ff2b91f421c8edd6767e071032f
msgid "lookup(val, pattern, field, pattern, field, ..., else_field) -- like switch, except the arguments are field (metadata) names, not text. The value of the appropriate field will be fetched and used. Note that because composite columns are fields, you can use this function in one composite field to use the value of some other composite field. This is extremely useful when constructing variable save paths"
msgstr ""

#: ../../template_ref.rst:203
# d02675fbd84b4aadabd6c7bca48b8e5c
msgid "switch(val, pattern, value, pattern, value, ..., else_value)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSwitch:1
# fb77c4cce34443e4af2dde0ec1b6dac5
msgid "switch(val, pattern, value, pattern, value, ..., else_value) -- for each `pattern, value` pair, checks if the field matches the regular expression `pattern` and if so, returns that `value`. If no pattern matches, then else_value is returned. You can have as many `pattern, value` pairs as you want"
msgstr ""

#: ../../template_ref.rst:208
# 9530add8679c4cb3b0df33214b4be27c
msgid "List lookup"
msgstr ""

#: ../../template_ref.rst:211
# 513985eb2f0945b39b692590a0464720
msgid "identifier_in_list(val, id, found_val, not_found_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinIdentifierInList:1
# 3f6fbebd888944588c32536c329e7785
msgid "identifier_in_list(val, id, found_val, not_found_val) -- treat val as a list of identifiers separated by commas, comparing the string against each value in the list. An identifier has the format \"identifier:value\". The id parameter should be either \"id\" or \"id:regexp\". The first case matches if there is any identifier with that id. The second case matches if the regexp matches the identifier's value. If there is a match, return found_val, otherwise return not_found_val."
msgstr ""

#: ../../template_ref.rst:216
# 5712fc0265a54392a53340eb075a120f
msgid "in_list(val, separator, pattern, found_val, not_found_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinInList:1
# 8719c3f2834c4acf85b8db4d158e865d
msgid "in_list(val, separator, pattern, found_val, not_found_val) -- treat val as a list of items separated by separator, comparing the pattern against each value in the list. If the pattern matches a value, return found_val, otherwise return not_found_val."
msgstr ""

#: ../../template_ref.rst:221
# 670110a50f20494dbfd9d2067bc9c2e4
msgid "list_item(val, index, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListitem:1
# 146ad2090b0f4aff8b09cbe33a492ec1
msgid "list_item(val, index, separator) -- interpret the value as a list of items separated by `separator`, returning the `index`th item. The first item is number zero. The last item can be returned using `list_item(-1,separator)`. If the item is not in the list, then the empty value is returned. The separator has the same meaning as in the count function."
msgstr ""

#: ../../template_ref.rst:226
# bcfc1a93e0ee4b09a47d040bc5ca12c1
msgid "select(val, key)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSelect:1
# bc2f21baa5194cc7aec0e72a7a5363ea
msgid "select(val, key) -- interpret the value as a comma-separated list of items, with the items being \"id:value\". Find the pair with the id equal to key, and return the corresponding value."
msgstr ""

#: ../../template_ref.rst:231
# 3791ca617dca47bcbc7db98a6c265962
msgid "str_in_list(val, separator, string, found_val, not_found_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrInList:1
# 7639438d88374dbf94763d982d48462f
msgid "str_in_list(val, separator, string, found_val, not_found_val) -- treat val as a list of items separated by separator, comparing the string against each value in the list. If the string matches a value, return found_val, otherwise return not_found_val. If the string contains separators, then it is also treated as a list and each value is checked."
msgstr ""

#: ../../template_ref.rst:236
# efec37ca11844d2eb2bbaf97a87d9c58
msgid "List manipulation"
msgstr ""

#: ../../template_ref.rst:239
# b148bb3f63024c609f8f129758486b33
msgid "count(val, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCount:1
# 1223f6c5b51e4166aeb69b2f03fbda2d
msgid "count(val, separator) -- interprets the value as a list of items separated by `separator`, returning the number of items in the list. Most lists use a comma as the separator, but authors uses an ampersand. Examples: {tags:count(,)}, {authors:count(&)}"
msgstr ""

#: ../../template_ref.rst:244
# d9ad16f37c0e4454bbb4dc8b9bcbe6e5
msgid "list_difference(list1, list2, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListDifference:1
# 538d639edc9e4ea483aa2f685708dd17
msgid "list_difference(list1, list2, separator) -- return a list made by removing from list1 any item found in list2, using a case-insensitive compare. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:249
# 50f6ca590d9947dfbc6b99dbd1e45ac5
msgid "list_equals(list1, sep1, list2, sep2, yes_val, no_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListEquals:1
# 266b90123dc0426e84522a4cf005f315
msgid "list_equals(list1, sep1, list2, sep2, yes_val, no_val) -- return yes_val if list1 and list2 contain the same items, otherwise return no_val. The items are determined by splitting each list using the appropriate separator character (sep1 or sep2). The order of items in the lists is not relevant. The compare is case insensitive."
msgstr ""

#: ../../template_ref.rst:254
# 1e350ff5b0e74ef9a4cf6edfab0f1097
msgid "list_intersection(list1, list2, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListIntersection:1
# a2e473f4cc2640baaece8c8c0efe6763
msgid "list_intersection(list1, list2, separator) -- return a list made by removing from list1 any item not found in list2, using a case-insensitive compare. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:259
# 001682450b4a42028dc6f3657dc4cf5b
msgid "list_re(src_list, separator, include_re, opt_replace)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListRe:1
# 54594ffe188b416b9b5e3426871b6ac8
msgid "list_re(src_list, separator, include_re, opt_replace) -- Construct a list by first separating src_list into items using the separator character. For each item in the list, check if it matches include_re. If it does, then add it to the list to be returned. If opt_replace is not the empty string, then apply the replacement before adding the item to the returned list."
msgstr ""

#: ../../template_ref.rst:264
# c6447589a44c46e0a78a4c98f40895d9
msgid "list_re(src_list, separator, include_re, search_re, group_1_template, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListReGroup:1
# 4783ffe5ea334651b9e9c4f01b7dc441
msgid "list_re(src_list, separator, include_re, search_re, group_1_template, ...) -- Like list_re except replacements are not optional. It uses re_group(list_item, search_re, group_1_template, ...) when doing the replacements on the resulting list."
msgstr ""

#: ../../template_ref.rst:269
# ad48b3b274264a3887cdd208c3a2c28f
msgid "list_sort(list, direction, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListSort:1
# 27644d89cfba4f3386f054c070c234ef
msgid "list_sort(list, direction, separator) -- return list sorted using a case-insensitive sort. If direction is zero, the list is sorted ascending, otherwise descending. The list items are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:274
# f34e872747074a769435467e0f199b6e
msgid "list_union(list1, list2, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListUnion:1
# 30ab39499e824d24b871cc14c27a9ba6
msgid "list_union(list1, list2, separator) -- return a list made by merging the items in list1 and list2, removing duplicate items using a case-insensitive compare. If items differ in case, the one in list1 is used. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:279
# aad9790b3ff34f21857bcb1dacfca4ae
msgid "subitems(val, start_index, end_index)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSubitems:1
# 7c1d032d8db74515bac44aac3482f4d8
msgid "subitems(val, start_index, end_index) -- This function is used to break apart lists of items such as genres. It interprets the value as a comma-separated list of items, where each item is a period-separated list. Returns a new list made by first finding all the period-separated items, then for each such item extracting the `start_index` to the `end_index` components, then combining the results back together. The first component in a period-separated list has an index of zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Example using basic template mode and assuming a #genre value of \"A.B.C\": {#genre:subitems(0,1)} returns \"A\". {#genre:subitems(0,2)} returns \"A.B\". {#genre:subitems(1,0)} returns \"B.C\". Assuming a #genre value of \"A.B.C, D.E.F\", {#genre:subitems(0,1)} returns \"A, D\". {#genre:subitems(0,2)} returns \"A.B, D.E\""
msgstr ""

#: ../../template_ref.rst:284
# 656f03558541482496b4b40618b22aa7
msgid "sublist(val, start_index, end_index, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSublist:1
# 9db66a746863493d95fde95e871b3e73
msgid "sublist(val, start_index, end_index, separator) -- interpret the value as a list of items separated by `separator`, returning a new list made from the `start_index` to the `end_index` item. The first item is number zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples using basic template mode and assuming that the tags column (which is comma-separated) contains \"A, B, C\": {tags:sublist(0,1,\\,)} returns \"A\". {tags:sublist(-1,0,\\,)} returns \"C\". {tags:sublist(0,-1,\\,)} returns \"A, B\"."
msgstr ""

#: ../../template_ref.rst:289
# 1a01fe78e46040ffbb4266e7b74dbff3
msgid "Other"
msgstr ""

#: ../../template_ref.rst:292
# 462d6c711721419d810453be637ad944
msgid "assign(id, val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinAssign:1
# 8377903488424fd196d463b163556f73
msgid "assign(id, val) -- assigns val to id, then returns val. id must be an identifier, not an expression"
msgstr ""

#: ../../template_ref.rst:297
# 2afcb58f4dc844ab8cf849e0a5ba3c38
msgid "print(a, b, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinPrint:1
# 4abd24c40f3146efbe424b2753497417
msgid "print(a, b, ...) -- prints the arguments to standard output. Unless you start calibre from the command line (calibre-debug -g), the output will go to a black hole."
msgstr ""

#: ../../template_ref.rst:302
# 7dff62b24c074381b314e3df3ba3203e
msgid "Recursion"
msgstr ""

#: ../../template_ref.rst:305
# f290dc28f62b464897622501dc6b3be1
msgid "eval(template)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinEval:1
# 826873d4efc64a549226c5233cb4270f
msgid "eval(template) -- evaluates the template, passing the local variables (those 'assign'ed to) instead of the book metadata.  This permits using the template processor to construct complex results from local variables. Because the { and } characters are special, you must use [[ for the { character and ]] for the } character; they are converted automatically. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../template_ref.rst:310
# 48f0d39e5c2e479492a1fc252880e779
msgid "template(x)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTemplate:1
# 5429aee703984d6faadb176e60852565
msgid "template(x) -- evaluates x as a template. The evaluation is done in its own context, meaning that variables are not shared between the caller and the template evaluation. Because the { and } characters are special, you must use [[ for the { character and ]] for the } character; they are converted automatically. For example, template('[[title_sort]]') will evaluate the template {title_sort} and return its value. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../template_ref.rst:315
# abc8b15f10584c5e96ee9611ae3ae20e
msgid "Relational"
msgstr ""

#: ../../template_ref.rst:318
# 281f4c504b204f51b9b2b244e61a1c3d
msgid "cmp(x, y, lt, eq, gt)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCmp:1
# ce6be385027a4bda977cd653e78c1279
msgid "cmp(x, y, lt, eq, gt) -- compares x and y after converting both to numbers. Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr ""

#: ../../template_ref.rst:323
# c5b42984a35847a980600a53e7aee3d7
msgid "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFirstMatchingCmp:1
# 89bbd6c1afed472e9b7a1b6007aa4cd8
msgid "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result) -- compares \"val < cmpN\" in sequence, returning resultN for the first comparison that succeeds. Returns else_result if no comparison succeeds. Example: first_matching_cmp(10,5,\"small\",10,\"middle\",15,\"large\",\"giant\") returns \"large\". The same example with a first value of 16 returns \"giant\"."
msgstr ""

#: ../../template_ref.rst:328
# e06a84a75e224a64b9c08a12a5c5ad3f
msgid "strcmp(x, y, lt, eq, gt)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrcmp:1
# 560f9105babc425e9599d3f92960fa9b
msgid "strcmp(x, y, lt, eq, gt) -- does a case-insensitive comparison of x and y as strings. Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr ""

#: ../../template_ref.rst:333
# 275674d6d46b4947b83a95b2aa25a815
msgid "String case changes"
msgstr ""

#: ../../template_ref.rst:336
# b5e18bd72254434a93bbd653f90c0631
msgid "capitalize(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCapitalize:1
# 679315d609454528bad15f51b68ded61
msgid "capitalize(val) -- return value of the field capitalized"
msgstr ""

#: ../../template_ref.rst:341
# db1045a5b13347a5a592b0cdc9a19377
msgid "lowercase(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLowercase:1
# 0887c07dbadc4308a540e5ea0f0a7098
msgid "lowercase(val) -- return value of the field in lower case"
msgstr ""

#: ../../template_ref.rst:346
# bcf0fc21fbf647ecbbafe37f55754217
msgid "titlecase(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTitlecase:1
# 811019c4f99b48548e47c49bbd783eee
msgid "titlecase(val) -- return value of the field in title case"
msgstr ""

#: ../../template_ref.rst:351
# a200d0c1e02b44539da606d389854bb8
msgid "uppercase(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinUppercase:1
# 8d41e1700eae42559d0301fbd29613bd
msgid "uppercase(val) -- return value of the field in upper case"
msgstr ""

#: ../../template_ref.rst:356
# b52097178be646bea64d4d6dc8c92c83
msgid "String manipulation"
msgstr ""

#: ../../template_ref.rst:359
# d526be70e2744e5baea981431ad7e734
msgid "re(val, pattern, replacement)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinRe:1
# 99156afe05d84cb3a52ead261264abbe
msgid "re(val, pattern, replacement) -- return the field after applying the regular expression. All instances of `pattern` are replaced with `replacement`. As in all of calibre, these are python-compatible regular expressions"
msgstr ""

#: ../../template_ref.rst:364
# 9823cdc1a4f8447aad2a6c738696efa6
msgid "re_group(val, pattern, template_for_group_1, for_group_2, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinReGroup:1
# d2cef4a35911441daa7fbdc0a026ef27
msgid "re_group(val, pattern, template_for_group_1, for_group_2, ...) -- return a string made by applying the reqular expression pattern to the val and replacing each matched instance with the string computed by replacing each matched group by the value returned by the corresponding template. The original matched value for the group is available as $. In template program mode, like for the template and the eval functions, you use [[ for { and ]] for }. The following example in template program mode looks for series with more than one word and uppercases the first word: {series:'re_group($, \"(\\S* )(.*)\", \"[[$:uppercase()]]\", \"[[$]]\")'}"
msgstr ""

#: ../../template_ref.rst:369
# 8ad9ba34427c4b529f9c71b2c5129273
msgid "shorten(val, left chars, middle text, right chars)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinShorten:1
# 6ecf25dacf994b4493f133155d89cb55
msgid "shorten(val, left chars, middle text, right chars) -- Return a shortened version of the field, consisting of `left chars` characters from the beginning of the field, followed by `middle text`, followed by `right chars` characters from the end of the string. `Left chars` and `right chars` must be integers. For example, assume the title of the book is `Ancient English Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most 15 characters. If you use {title:shorten(9,-,5)}, the result will be `Ancient E-nhoe`. If the field's length is less than left chars + right chars + the length of `middle text`, then the field will be used intact. For example, the title `The Dome` would not be changed."
msgstr ""

#: ../../template_ref.rst:374
# 85eb472ecce340d0851c3999b13db042
msgid "strcat(a, b, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrcat:1
# 4c6e18d9874b4eaaa553a1290cb1b0d1
msgid "strcat(a, b, ...) -- can take any number of arguments. Returns a string formed by concatenating all the arguments"
msgstr ""

#: ../../template_ref.rst:379
# 355aabcaf8214a5e8049ab0c6bdbece0
msgid "strcat_max(max, string1, prefix2, string2, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrcatMax:1
# c4dfbf120c9a4859af03ec19d4068963
msgid "strcat_max(max, string1, prefix2, string2, ...) -- Returns a string formed by concatenating the arguments. The returned value is initialized to string1. `Prefix, string` pairs are added to the end of the value as long as the resulting string length is less than `max`. String1 is returned even if string1 is longer than max. You can pass as many `prefix, string` pairs as you wish."
msgstr ""

#: ../../template_ref.rst:384
# e2cdaef154274473a73c11716c00ef83
msgid "strlen(a)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrlen:1
# 90fb4cfa01e34f988f64feba901c71b8
msgid "strlen(a) -- Returns the length of the string passed as the argument"
msgstr ""

#: ../../template_ref.rst:389
# 8dd4b08811ce42e5b7fd446f46e9259e
msgid "substr(str, start, end)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSubstr:1
# 2224bacb208f4448ae3813fef34160ef
msgid "substr(str, start, end) -- returns the start'th through the end'th characters of str. The first character in str is the zero'th character. If end is negative, then it indicates that many characters counting from the right. If end is zero, then it indicates the last character. For example, substr('12345', 1, 0) returns '2345', and substr('12345', 1, -1) returns '234'."
msgstr ""

#: ../../template_ref.rst:394
# d34e3fe5323e41fba1dcd106e8f661df
msgid "swap_around_comma(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSwapAroundComma:1
# e2215bfec4c042f6bfb710724f8c1909
msgid "swap_around_comma(val) -- given a value of the form \"B, A\", return \"A B\". This is most useful for converting names in LN, FN format to FN LN. If there is no comma, the function returns val unchanged"
msgstr ""

#: ../../template_ref.rst:399
# 5ef18d98491f4eabbc036a72ec9514ca
msgid "transliterate(a)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTransliterate:1
# c556cbbff5a64af6b42143d519b88270
msgid "transliterate(a) -- Returns a string in a latin alphabet formed by approximating the sound of the words in the source string. For example, if the source is \"Фёдор Миха́йлович Достоевский\" the function returns \"Fiodor Mikhailovich Dostoievskii\"."
msgstr ""

#: ../../template_ref.rst:405
# f89e192053af413e8e3e1274e9cb087c
msgid "API of the Metadata objects"
msgstr ""

#: ../../template_ref.rst:407
# d5468ad1a9e64b78b3ef65cbc9a3486a
msgid "The python implementation of the template functions is passed in a Metadata object. Knowing it's API is useful if you want to define your own template functions."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:1
# 521bea72430d4170858e896945f06a19
msgid "A class representing all the metadata for a book. The various standard metadata fields are available as attributes of this object. You can also stick arbitrary attributes onto this object."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:5
# effadba9a88c4963b40f7b9695ecebd4
msgid "Metadata from custom columns should be accessed via the get() method, passing in the lookup name for the column, for example: \"#mytags\"."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:8
# 7a6def67ffc441fbae8bd8e3ad77d115
msgid "Use the :meth:`is_null` method to test if a field is null."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:10
# e40e4b82a79442a5a841f6ec35636ef1
msgid "This object also has functions to format fields into strings."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:12
# 203dd6e5820c408ca3e10ef8f2c0a5c0
msgid "The list of standard metadata fields grows with time is in :data:`STANDARD_METADATA_FIELDS`."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:15
# 2046a6b8dc694b4190450894bd4143ca
msgid "Please keep the method based API of this class to a minimum. Every method becomes a reserved field name."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.is_null:1
# 0252453211c04c24bdf6528300618872
msgid "Return True if the value of field is null in this object. 'null' means it is unknown or evaluates to False. So a title of _('Unknown') is null or a language of 'und' is null."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.is_null:5
# 1d8ce58336404f5c9e62a602ad9795d8
msgid "Be careful with numeric fields since this will return True for zero as well as None."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.is_null:8
# 8a45e33434644bc1a5490f3ea4ead620
msgid "Also returns True if the field does not exist."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.deepcopy:1
# 994f9ea924fc43d6a1ef93ad1b69fad5
msgid "Do not use this method unless you know what you are doing, if you want to create a simple clone of this object, use :meth:`deepcopy_metadata` instead. Class_generator must be a function that returns an instance of Metadata or a subclass of it."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_identifiers:1
# 2c26d9ecc62c45b689e449c4ee7704e5
msgid "Return a copy of the identifiers dictionary. The dict is small, and the penalty for using a reference where a copy is needed is large. Also, we don't want any manipulations of the returned dict to show up in the book."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_identifiers:1
# b1fa3628f9fc4eedaab7240c5b447009
msgid "Set all identifiers. Note that if you previously set ISBN, calling this method will delete it."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_identifier:1
# 314f99803b17457bba2aa94ada8064a7
msgid "If val is empty, deletes identifier of type typ"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.standard_field_keys:1
# 456065c3fa4440b98244ef3afde94a25
msgid "return a list of all possible keys, even if this book doesn't have them"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.custom_field_keys:1
# da5204f0b3cd46ebbd50c55f277fe0b6
msgid "return a list of the custom fields in this book"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.all_field_keys:1
# 959933f0470f48ce83efd29abf5c9285
msgid "All field keys known by this instance, even if their value is None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.metadata_for_field:1
# 975814622dd548d29df17b9cc24ec29d
msgid "return metadata describing a standard or custom field."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.all_non_none_fields:1
# cf37467518ba45a0823a103e22fc7b19
msgid "Return a dictionary containing all non-None metadata fields, including the custom ones."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_standard_metadata:1
# 829c038ca0f24041b4866bdf60633a3d
msgid "return field metadata from the field if it is there. Otherwise return None. field is the key name, not the label. Return a copy if requested, just in case the user wants to change values in the dict."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_all_standard_metadata:1
# 651684efc2bb447bba35cd51c41f7f90
msgid "return a dict containing all the standard field metadata associated with the book."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_all_user_metadata:1
# 245a00dcd9e04b40a3ea3bc83c1a92da
msgid "return a dict containing all the custom field metadata associated with the book."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_user_metadata:1
# 7e8baf9c9aff48f583d40d07e2b62330
msgid "return field metadata from the object if it is there. Otherwise return None. field is the key name, not the label. Return a copy if requested, just in case the user wants to change values in the dict."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_all_user_metadata:1
# 8eb13b62e1f44b638494f52d5c28efb0
msgid "store custom field metadata into the object. Field is the key name not the label"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_user_metadata:1
# 98d4768f744c45f3b4028f09c2b7b1d2
msgid "store custom field metadata for one column into the object. Field is the key name not the label"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.template_to_attribute:1
# 460e5877e2854357b6ca1937820377ef
msgid "Takes a list [(src,dest), (src,dest)], evaluates the template in the context of other, then copies the result to self[dest]. This is on a best-efforts basis. Some assignments can make no sense."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.smart_update:1
# 986b6783a16a454fb1fb202da6c203d8
msgid "Merge the information in `other` into self. In case of conflicts, the information in `other` takes precedence, unless the information in `other` is NULL."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.format_field:1
# 7bff128a2d0a47ce8a24c5f3d1149e1c
msgid "Returns the tuple (display_name, formatted_value)"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.to_html:1
# 3a1fe77a49454b17b473cf099933b93c
msgid "A HTML representation of this object."
msgstr ""

#: ../../template_ref.rst:417
# d84d0aff2c484d2e90e0a374e5f5982e
msgid "The set of standard metadata fields."
msgstr ""

