# SOME DESCRIPTIVE TITLE.
# Copyright (C) Kovid Goyal
# This file is distributed under the same license as the calibre package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: calibre 1.42.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-27 09:25+0530\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../template_ref.rst:6
# 954ac973524a424db3eef875f4733b94
msgid "Reference for all built-in template language functions"
msgstr ""

#: ../../template_ref.rst:8
# 852784bea2d647418dbb45d6bf3dcb2e
msgid "Here, we document all the built-in functions available in the |app| template language. Every function is implemented as a class in python and you can click the source links to see the source code, in case the documentation is insufficient. The functions are arranged in logical groups by type."
msgstr ""

#: ../../template_ref.rst:17
# 2468944c3de64030a92cec75c688017d
msgid "Arithmetic"
msgstr ""

#: ../../template_ref.rst:20
# a47e20cb4c6f428b9fa13bf4a47e803a
msgid "add(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinAdd:1
# 2382011efd334b8c9e3cae762440a8b0
msgid "add(x, y) -- returns x + y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:25
# 40ba7ab7c9724660b7ff799088644436
msgid "divide(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinDivide:1
# d69e13cdef4745ed99a1058db52a204f
msgid "divide(x, y) -- returns x / y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:30
# 1d9a33832bad408fa490ff8d330f828f
msgid "multiply(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinMultiply:1
# dad0916e4e294c969cf2c3526c7ee220
msgid "multiply(x, y) -- returns x * y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:35
# c55aced537044fc09321c542e3174ace
msgid "subtract(x, y)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSubtract:1
# 3e2a003efee74c2e9a67fc70c29ebe9f
msgid "subtract(x, y) -- returns x - y. Throws an exception if either x or y are not numbers."
msgstr ""

#: ../../template_ref.rst:40
# e0fcf5231f03474ba4fd1c3ddcab16ff
msgid "Boolean"
msgstr ""

#: ../../template_ref.rst:43
# e4f5c388447045bb9b2857871f4835c6
msgid "and(value, value, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinAnd:1
# 0452ea99ccfb4588977c6232728bd5c9
msgid "and(value, value, ...) -- returns the string \"1\" if all values are not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:48
# 7c0be2ba90c94199b5435b0d2ebdbb3f
msgid "not(value)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinNot:1
# 209b85a7db9341ceb8a89dd1f94fd373
msgid "not(value) -- returns the string \"1\" if the value is empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:53
# a181803caf834a938768f1574af385b5
msgid "or(value, value, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinOr:1
# 04cfd88b4bb340a1874c0526a244ea37
msgid "or(value, value, ...) -- returns the string \"1\" if any value is not empty, otherwise returns the empty string. This function works well with test or first_non_empty. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:58
# 18c9cc204425454ba1359ac2c2f6a418
msgid "Date functions"
msgstr ""

#: ../../template_ref.rst:61
# ad4fa32f6a6f49d8b7fcdadf0eded5df
msgid "days_between(date1, date2)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinDaysBetween:1
# 4297d760fddb473cb427add15b7c0ead
msgid "days_between(date1, date2) -- return the number of days between date1 and date2. The number is positive if date1 is greater than date2, otherwise negative. If either date1 or date2 are not dates, the function returns the empty string."
msgstr ""

#: ../../template_ref.rst:66
# d495dc997c6e4ca3b194af39cd9ec238
msgid "today()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinToday:1
# 945e9dc6414f43028011f6814b02a5c4
msgid "today() -- return a date string for today. This value is designed for use in format_date or days_between, but can be manipulated like any other string. The date is in ISO format."
msgstr ""

#: ../../template_ref.rst:71
# 62545a1cbd5946a8b8a4d8b25216d89e
msgid "Formatting values"
msgstr ""

#: ../../template_ref.rst:74
# 0e039efef2be4b8e9bbad5436377e949
msgid "finish_formatting(val, fmt, prefix, suffix)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFinishFormatting:1
# 1b29d4282a26407daca705daba41a236
msgid "finish_formatting(val, fmt, prefix, suffix) -- apply the format, prefix, and suffix to a value in the same way as done in a template like `{series_index:05.2f| - |- }`. For example, the following program produces the same output as the above template: program: finish_formatting(field(\"series_index\"), \"05.2f\", \" - \", \" - \")"
msgstr ""

#: ../../template_ref.rst:79
# 682b8ff09e3c4d8eb048fe581f1fc470
msgid "format_date(val, format_string)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatDate:1
# 388646471430498eaa2e82c1e4c7fd3f
msgid "format_date(val, format_string) -- format the value, which must be a date, using the format_string, returning a string. The formatting codes are: d    : the day as number without a leading zero (1 to 31) dd   : the day as number with a leading zero (01 to 31) ddd  : the abbreviated localized day name (e.g. \"Mon\" to \"Sun\"). dddd : the long localized day name (e.g. \"Monday\" to \"Sunday\"). M    : the month as number without a leading zero (1 to 12). MM   : the month as number with a leading zero (01 to 12) MMM  : the abbreviated localized month name (e.g. \"Jan\" to \"Dec\"). MMMM : the long localized month name (e.g. \"January\" to \"December\"). yy   : the year as two digit number (00 to 99). yyyy : the year as four digit number. h    : the hours without a leading 0 (0 to 11 or 0 to 23, depending on am/pm) hh   : the hours with a leading 0 (00 to 11 or 00 to 23, depending on am/pm) m    : the minutes without a leading 0 (0 to 59) mm   : the minutes with a leading 0 (00 to 59) s    : the seconds without a leading 0 (0 to 59) ss   : the seconds with a leading 0 (00 to 59) ap   : use a 12-hour clock instead of a 24-hour clock, with \"ap\" replaced by the localized string for am or pm AP   : use a 12-hour clock instead of a 24-hour clock, with \"AP\" replaced by the localized string for AM or PM iso  : the date with time and timezone. Must be the only format present"
msgstr ""

#: ../../template_ref.rst:84
# 8d9731df8c5c48879817ff1ead3b41cd
msgid "format_number(v, template)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatNumber:1
# 4d63b70a722848119ab6cf50fb327287
msgid "format_number(v, template) -- format the number v using a python formatting template such as \"{0:5.2f}\" or \"{0:,d}\" or \"${0:5,.2f}\". The field_name part of the template must be a 0 (zero) (the \"{0:\" in the above examples). See the template language and python documentation for more examples. Returns the empty string if formatting fails."
msgstr ""

#: ../../template_ref.rst:89
# f258fa5e39e24160a61166157a588cd2
msgid "human_readable(v)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinHumanReadable:1
# fdcf7aaf884144f4b69c73de2323cb32
msgid "human_readable(v) -- return a string representing the number v in KB, MB, GB, etc."
msgstr ""

#: ../../template_ref.rst:94
# 664ac523bf09481fb87cca622dfce5fb
msgid "Get values from metadata"
msgstr ""

#: ../../template_ref.rst:97
# a72158eb67404c87ba3ca769930714c4
msgid "approximate_formats()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinApproximateFormats:1
# d45b28fd2054458b9079c2a8ee55660c
msgid "approximate_formats() -- return a comma-separated list of formats that at one point were associated with the book. There is no guarantee that this list is correct, although it probably is. This function can be called in template program mode using the template \"{:'approximate_formats()'}\". Note that format names are always uppercase, as in EPUB. This function works only in the GUI. If you want to use these values in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:102
# 942cf43fbb214cc7a71978bb8f7e635b
msgid "booksize()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinBooksize:1
# 61388499a2af4aec9edf236c2a6b1e48
msgid "booksize() -- return value of the size field. This function works only in the GUI. If you want to use this value in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:107
# 216dae6081e24dc9a7b0ad9282c19206
msgid "current_library_name()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCurrentLibraryName:1
# 3961a9daa9414373b3484073a941296f
msgid "current_library_name() -- return the last name on the path to the current calibre library. This function can be called in template program mode using the template \"{:'current_library_name()'}\"."
msgstr ""

#: ../../template_ref.rst:112
# 7f149a4ac4834c34800d0a7066846551
msgid "current_library_path()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCurrentLibraryPath:1
# 4fa6f37673474877b10fe901f58c379c
msgid "current_library_path() -- return the path to the current calibre library. This function can be called in template program mode using the template \"{:'current_library_path()'}\"."
msgstr ""

#: ../../template_ref.rst:117
# c19130f3240e46978ef155782e021003
msgid "field(name)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinField:1
# 7de44429dc684cfda64cc1e58e8ad73d
msgid "field(name) -- returns the metadata field named by name"
msgstr ""

#: ../../template_ref.rst:122
# 8d6f4c3a3bd34b739aa33ef39c4e1ddb
msgid "formats_modtimes(date_format)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatsModtimes:1
# 84979de3c19c409286c68e5a3fbb7ced
msgid "formats_modtimes(date_format) -- return a comma-separated list of colon_separated items representing modification times for the formats of a book. The date_format parameter specifies how the date is to be formatted. See the date_format function for details. You can use the select function to get the mod time for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_ref.rst:127
# b6c20a8ab1924a2d8a4b2ed6d01602be
msgid "formats_paths()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatsPaths:1
# c131b6c541554029a97236f01a776efd
msgid "formats_paths() -- return a comma-separated list of colon_separated items representing full path to the formats of a book. You can use the select function to get the path for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_ref.rst:132
# ab206dc192e14b79a9198696ce29803c
msgid "formats_sizes()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFormatsSizes:1
# 986193decee54f37896de63597fcbc64
msgid "formats_sizes() -- return a comma-separated list of colon_separated items representing sizes in bytes of the formats of a book. You can use the select function to get the size for a specific format. Note that format names are always uppercase, as in EPUB."
msgstr ""

#: ../../template_ref.rst:137
# a085e722458a4f6697234b5ad9883495
msgid "has_cover()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinHasCover:1
# c49d4b38e8884946bd380e0743c52c32
msgid "has_cover() -- return Yes if the book has a cover, otherwise return the empty string"
msgstr ""

#: ../../template_ref.rst:142
# 91af6de919304d329a0458f449281f25
msgid "language_codes(lang_strings)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLanguageCodes:1
# 94d0db0f5a0542e5ba77f3e75be84043
msgid "language_codes(lang_strings) -- return the language codes for the strings passed in lang_strings. The strings must be in the language of the current locale. Lang_strings is a comma-separated list."
msgstr ""

#: ../../template_ref.rst:147
# 7104fe4d5c0c445090ae520beeacefac
msgid "language_strings(lang_codes, localize)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLanguageStrings:1
# a5281c4b4a10498d9b2f46cb877acc3a
msgid "language_strings(lang_codes, localize) -- return the strings for the language codes passed in lang_codes. If localize is zero, return the strings in English. If localize is not zero, return the strings in the language of the current locale. Lang_codes is a comma-separated list."
msgstr ""

#: ../../template_ref.rst:152
# 985955a227ed43109e9a955d6e4d897c
msgid "ondevice()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinOndevice:1
# e55cc22ac7324adb9318756ad2a6f6d5
msgid "ondevice() -- return Yes if ondevice is set, otherwise return the empty string. This function works only in the GUI. If you want to use this value in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:157
# 45fd2d7e501f44ee8bd841a960f84fcb
msgid "raw_field(name)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinRawField:1
# 16446b694e0c46579ae7d461e123b3bf
msgid "raw_field(name) -- returns the metadata field named by name without applying any formatting."
msgstr ""

#: ../../template_ref.rst:162
# edd2941507404be8a0018c11c583abef
msgid "series_sort()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSeriesSort:1
# 00b6896ba6c047fbb07803b409f5bd38
msgid "series_sort() -- return the series sort value"
msgstr ""

#: ../../template_ref.rst:167
# d170c6ff94bb44f083852da765bb6bd3
msgid "virtual_libraries()"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinVirtualLibraries:1
# 3ad1d28453a4432cbe03863c2ff7800d
msgid "virtual_libraries() -- return a comma-separated list of virtual libraries that contain this book. This function works only in the GUI. If you want to use these values in save-to-disk or send-to-device templates then you must make a custom \"Column built from other columns\", use the function in that column's template, and use that column's value in your save/send templates"
msgstr ""

#: ../../template_ref.rst:172
# 50866cda20d84d18b527a354bb86ba9f
msgid "If-then-else"
msgstr ""

#: ../../template_ref.rst:175
# 0b13b87d9b8c408c9b9f319062ba744e
msgid "contains(val, pattern, text if match, text if not match)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinContains:1
# 7af93b6e00da41d58bbdb98bd1df7912
msgid "contains(val, pattern, text if match, text if not match) -- checks if field contains matches for the regular expression `pattern`. Returns `text if match` if matches are found, otherwise it returns `text if no match`"
msgstr ""

#: ../../template_ref.rst:180
# 4aeb4e1847f14b4890655a22c4f6f52b
msgid "ifempty(val, text if empty)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinIfempty:1
# c1e1e2e2c8ce43a1815a0ef0264bd280
msgid "ifempty(val, text if empty) -- return val if val is not empty, otherwise return `text if empty`"
msgstr ""

#: ../../template_ref.rst:185
# c8b41c8bcb044b268cbdb8c04873693d
msgid "test(val, text if not empty, text if empty)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTest:1
# 3be62a7c93bb4cdb87b4fb6e909e9af5
msgid "test(val, text if not empty, text if empty) -- return `text if not empty` if the field is not empty, otherwise return `text if empty`"
msgstr ""

#: ../../template_ref.rst:190
# d6086d198d0e4d5db7ff3fdc19e26ad1
msgid "Iterating over values"
msgstr ""

#: ../../template_ref.rst:193
# b1845ac719df481cb4a67cc8475a4e21
msgid "first_non_empty(value, value, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFirstNonEmpty:1
# 81134053264b4b99a2e8290b4e01048b
msgid "first_non_empty(value, value, ...) -- returns the first value that is not empty. If all values are empty, then the empty value is returned. You can have as many values as you want."
msgstr ""

#: ../../template_ref.rst:198
# 67ffb4c59d5c45be91400e1ebe28bae1
msgid "lookup(val, pattern, field, pattern, field, ..., else_field)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLookup:1
# d5668fa87e0b4316a752e216d44108fd
msgid "lookup(val, pattern, field, pattern, field, ..., else_field) -- like switch, except the arguments are field (metadata) names, not text. The value of the appropriate field will be fetched and used. Note that because composite columns are fields, you can use this function in one composite field to use the value of some other composite field. This is extremely useful when constructing variable save paths"
msgstr ""

#: ../../template_ref.rst:203
# 321e9ca4bf4a463f834f3a8594b61631
msgid "switch(val, pattern, value, pattern, value, ..., else_value)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSwitch:1
# 30c74a2f33ac404ca86a82b491c8ed81
msgid "switch(val, pattern, value, pattern, value, ..., else_value) -- for each `pattern, value` pair, checks if the field matches the regular expression `pattern` and if so, returns that `value`. If no pattern matches, then else_value is returned. You can have as many `pattern, value` pairs as you want"
msgstr ""

#: ../../template_ref.rst:208
# 4508e050eb83467d9d4ef630583ba287
msgid "List lookup"
msgstr ""

#: ../../template_ref.rst:211
# 2fe99c7019d04a46ac61bf42d0ce5401
msgid "identifier_in_list(val, id, found_val, not_found_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinIdentifierInList:1
# 55c04435d75a40579639a2704def5800
msgid "identifier_in_list(val, id, found_val, not_found_val) -- treat val as a list of identifiers separated by commas, comparing the string against each value in the list. An identifier has the format \"identifier:value\". The id parameter should be either \"id\" or \"id:regexp\". The first case matches if there is any identifier with that id. The second case matches if the regexp matches the identifier's value. If there is a match, return found_val, otherwise return not_found_val."
msgstr ""

#: ../../template_ref.rst:216
# f0fee9b316774c8e8a05a4323c95277c
msgid "in_list(val, separator, pattern, found_val, not_found_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinInList:1
# cb810144587942e2a85215e7f25e776e
msgid "in_list(val, separator, pattern, found_val, not_found_val) -- treat val as a list of items separated by separator, comparing the pattern against each value in the list. If the pattern matches a value, return found_val, otherwise return not_found_val."
msgstr ""

#: ../../template_ref.rst:221
# 9ccdd12e323840ef898397b3b1d0ed45
msgid "list_item(val, index, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListitem:1
# 4e6d204c35344e26a67e59ae62106b73
msgid "list_item(val, index, separator) -- interpret the value as a list of items separated by `separator`, returning the `index`th item. The first item is number zero. The last item can be returned using `list_item(-1,separator)`. If the item is not in the list, then the empty value is returned. The separator has the same meaning as in the count function."
msgstr ""

#: ../../template_ref.rst:226
# d015f1b72709497faa3659077eb6cb99
msgid "select(val, key)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSelect:1
# 2449888f5d7e4ac5b9eed35de6f18c36
msgid "select(val, key) -- interpret the value as a comma-separated list of items, with the items being \"id:value\". Find the pair with the id equal to key, and return the corresponding value."
msgstr ""

#: ../../template_ref.rst:231
# 3f30f8a423c248c49dd63e8ba873f455
msgid "str_in_list(val, separator, string, found_val, not_found_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrInList:1
# 90f12265efdf452eb227a07f3583a20f
msgid "str_in_list(val, separator, string, found_val, not_found_val) -- treat val as a list of items separated by separator, comparing the string against each value in the list. If the string matches a value, return found_val, otherwise return not_found_val. If the string contains separators, then it is also treated as a list and each value is checked."
msgstr ""

#: ../../template_ref.rst:236
# 758184b53bf3483b9d77a4e6b4d7ff5a
msgid "List manipulation"
msgstr ""

#: ../../template_ref.rst:239
# 2595f5f258834cd3be953e7a80091907
msgid "count(val, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCount:1
# 2c9ae1b6528c4350b74ec77ab03abe73
msgid "count(val, separator) -- interprets the value as a list of items separated by `separator`, returning the number of items in the list. Most lists use a comma as the separator, but authors uses an ampersand. Examples: {tags:count(,)}, {authors:count(&)}"
msgstr ""

#: ../../template_ref.rst:244
# 51c66fb89ffe48219c8faa349347926c
msgid "list_difference(list1, list2, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListDifference:1
# 661495e47ad042b2bc5575cb9dc9de20
msgid "list_difference(list1, list2, separator) -- return a list made by removing from list1 any item found in list2, using a case-insensitive compare. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:249
# 3d136e0d9f5440f997483f2613d8f718
msgid "list_equals(list1, sep1, list2, sep2, yes_val, no_val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListEquals:1
# 1bd9a899e1f8474bab62dba1ff3fcb8c
msgid "list_equals(list1, sep1, list2, sep2, yes_val, no_val) -- return yes_val if list1 and list2 contain the same items, otherwise return no_val. The items are determined by splitting each list using the appropriate separator character (sep1 or sep2). The order of items in the lists is not relevant. The compare is case insensitive."
msgstr ""

#: ../../template_ref.rst:254
# 4296c857bf0446148fa691899625ed31
msgid "list_intersection(list1, list2, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListIntersection:1
# 5e5f5fdb79534f21920002a0aa211705
msgid "list_intersection(list1, list2, separator) -- return a list made by removing from list1 any item not found in list2, using a case-insensitive compare. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:259
# 2be5ff4ef8af46aea93fcd9ee241e616
msgid "list_re(src_list, separator, include_re, opt_replace)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListRe:1
# e3f3563c31fa4f6b9191846527b47527
msgid "list_re(src_list, separator, include_re, opt_replace) -- Construct a list by first separating src_list into items using the separator character. For each item in the list, check if it matches include_re. If it does, then add it to the list to be returned. If opt_replace is not the empty string, then apply the replacement before adding the item to the returned list."
msgstr ""

#: ../../template_ref.rst:264
# 1a6b5cc313694be88b5fdc1a76d52618
msgid "list_re(src_list, separator, include_re, search_re, group_1_template, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListReGroup:1
# b74bbbf34a0f441683b227437b9f1706
msgid "list_re(src_list, separator, include_re, search_re, group_1_template, ...) -- Like list_re except replacements are not optional. It uses re_group(list_item, search_re, group_1_template, ...) when doing the replacements on the resulting list."
msgstr ""

#: ../../template_ref.rst:269
# 19dc9c088a2a46bf804723002493de2c
msgid "list_sort(list, direction, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListSort:1
# 9d32cbb1707b4029b81080cf61d64658
msgid "list_sort(list, direction, separator) -- return list sorted using a case-insensitive sort. If direction is zero, the list is sorted ascending, otherwise descending. The list items are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:274
# f0780179ab47470a8568c9e0ddce0a35
msgid "list_union(list1, list2, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinListUnion:1
# 76daace5d849425895d3db29c81dc619
msgid "list_union(list1, list2, separator) -- return a list made by merging the items in list1 and list2, removing duplicate items using a case-insensitive compare. If items differ in case, the one in list1 is used. The items in list1 and list2 are separated by separator, as are the items in the returned list."
msgstr ""

#: ../../template_ref.rst:279
# 3262f2c4e7b6477e8b765131648bb183
msgid "subitems(val, start_index, end_index)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSubitems:1
# 862ea6f660af442bb26587d2aa735945
msgid "subitems(val, start_index, end_index) -- This function is used to break apart lists of items such as genres. It interprets the value as a comma-separated list of items, where each item is a period-separated list. Returns a new list made by first finding all the period-separated items, then for each such item extracting the `start_index` to the `end_index` components, then combining the results back together. The first component in a period-separated list has an index of zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Example using basic template mode and assuming a #genre value of \"A.B.C\": {#genre:subitems(0,1)} returns \"A\". {#genre:subitems(0,2)} returns \"A.B\". {#genre:subitems(1,0)} returns \"B.C\". Assuming a #genre value of \"A.B.C, D.E.F\", {#genre:subitems(0,1)} returns \"A, D\". {#genre:subitems(0,2)} returns \"A.B, D.E\""
msgstr ""

#: ../../template_ref.rst:284
# d7e6c9b94a9f4a6985517fc23d3a6d51
msgid "sublist(val, start_index, end_index, separator)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSublist:1
# e2ddf6264c23441a92be0cf3d1cf4a81
msgid "sublist(val, start_index, end_index, separator) -- interpret the value as a list of items separated by `separator`, returning a new list made from the `start_index` to the `end_index` item. The first item is number zero. If an index is negative, then it counts from the end of the list. As a special case, an end_index of zero is assumed to be the length of the list. Examples using basic template mode and assuming that the tags column (which is comma-separated) contains \"A, B, C\": {tags:sublist(0,1,\\,)} returns \"A\". {tags:sublist(-1,0,\\,)} returns \"C\". {tags:sublist(0,-1,\\,)} returns \"A, B\"."
msgstr ""

#: ../../template_ref.rst:289
# caed1299799a4f6eb03350940ec2dd74
msgid "Other"
msgstr ""

#: ../../template_ref.rst:292
# f296252f697a466193f2be5bfa1e26e0
msgid "assign(id, val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinAssign:1
# 6d218f17df2743119ae89e344a4ed000
msgid "assign(id, val) -- assigns val to id, then returns val. id must be an identifier, not an expression"
msgstr ""

#: ../../template_ref.rst:297
# 0125c794599a4eae8876ae028c95eaa1
msgid "print(a, b, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinPrint:1
# 9d0c3a57b9d94ceab213799955f3e148
msgid "print(a, b, ...) -- prints the arguments to standard output. Unless you start calibre from the command line (calibre-debug -g), the output will go to a black hole."
msgstr ""

#: ../../template_ref.rst:302
# 8973abe556bb413d901850bc5ee8c0c4
msgid "Recursion"
msgstr ""

#: ../../template_ref.rst:305
# 13a32032a6924d248475108251bcefa2
msgid "eval(template)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinEval:1
# 8fb129de41614f738f0a2e4995615da0
msgid "eval(template) -- evaluates the template, passing the local variables (those 'assign'ed to) instead of the book metadata.  This permits using the template processor to construct complex results from local variables. Because the { and } characters are special, you must use [[ for the { character and ]] for the } character; they are converted automatically. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../template_ref.rst:310
# 10d0a98a9257441ab46f62f677b2b42d
msgid "template(x)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTemplate:1
# fa609dd578994dc28d9bcd95fbeca89e
msgid "template(x) -- evaluates x as a template. The evaluation is done in its own context, meaning that variables are not shared between the caller and the template evaluation. Because the { and } characters are special, you must use [[ for the { character and ]] for the } character; they are converted automatically. For example, template('[[title_sort]]') will evaluate the template {title_sort} and return its value. Note also that prefixes and suffixes (the `|prefix|suffix` syntax) cannot be used in the argument to this function when using template program mode."
msgstr ""

#: ../../template_ref.rst:315
# a50f73c670864a48b7f3bbf6ec715e7c
msgid "Relational"
msgstr ""

#: ../../template_ref.rst:318
# a0d6a1d2f56a46d9b387e92e8bc2b968
msgid "cmp(x, y, lt, eq, gt)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCmp:1
# 8b6d6e69304b4dda85c54df92e311082
msgid "cmp(x, y, lt, eq, gt) -- compares x and y after converting both to numbers. Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr ""

#: ../../template_ref.rst:323
# 06deb41da9734e42b1cb0c5010c5524a
msgid "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinFirstMatchingCmp:1
# f3dda971fde6451aad341ba75e609b7a
msgid "first_matching_cmp(val, cmp1, result1, cmp2, r2, ..., else_result) -- compares \"val < cmpN\" in sequence, returning resultN for the first comparison that succeeds. Returns else_result if no comparison succeeds. Example: first_matching_cmp(10,5,\"small\",10,\"middle\",15,\"large\",\"giant\") returns \"large\". The same example with a first value of 16 returns \"giant\"."
msgstr ""

#: ../../template_ref.rst:328
# 3c20503d1719457f8dd956adc5974d77
msgid "strcmp(x, y, lt, eq, gt)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrcmp:1
# 8183f5ab8aed45dc81cba689006160b6
msgid "strcmp(x, y, lt, eq, gt) -- does a case-insensitive comparison of x and y as strings. Returns lt if x < y. Returns eq if x == y. Otherwise returns gt."
msgstr ""

#: ../../template_ref.rst:333
# e915e2216c454ad3940548043d58915a
msgid "String case changes"
msgstr ""

#: ../../template_ref.rst:336
# 3d74423ac8e443319b2e29c4abed4e10
msgid "capitalize(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinCapitalize:1
# cabc99f584cc47f0a8bc61bba96ca886
msgid "capitalize(val) -- return value of the field capitalized"
msgstr ""

#: ../../template_ref.rst:341
# 9e24a7692812437a939a0a3c334612d1
msgid "lowercase(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinLowercase:1
# 2470ea1bf4ee49dd8ccd389f43c9719b
msgid "lowercase(val) -- return value of the field in lower case"
msgstr ""

#: ../../template_ref.rst:346
# 5d81ae97189a4a00baabe5742ce425d2
msgid "titlecase(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTitlecase:1
# b8ed2b45241b49a3a75a91abfcd19100
msgid "titlecase(val) -- return value of the field in title case"
msgstr ""

#: ../../template_ref.rst:351
# b26735f0dbbb4ac4ad3659c0609e048c
msgid "uppercase(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinUppercase:1
# 334acac6c75942b2ab7ffc08981c59dc
msgid "uppercase(val) -- return value of the field in upper case"
msgstr ""

#: ../../template_ref.rst:356
# 8bf7dc90bcb84b0e9af84f635f66e50e
msgid "String manipulation"
msgstr ""

#: ../../template_ref.rst:359
# a26176c153ae43a182c192969643a31d
msgid "re(val, pattern, replacement)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinRe:1
# c8ca948067a84589b61abf5943fc981d
msgid "re(val, pattern, replacement) -- return the field after applying the regular expression. All instances of `pattern` are replaced with `replacement`. As in all of calibre, these are python-compatible regular expressions"
msgstr ""

#: ../../template_ref.rst:364
# 1a90f822a8824d62bf8138313660dfa9
msgid "re_group(val, pattern, template_for_group_1, for_group_2, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinReGroup:1
# 130b71735a924d8d853767ff1b09e8d6
msgid "re_group(val, pattern, template_for_group_1, for_group_2, ...) -- return a string made by applying the reqular expression pattern to the val and replacing each matched instance with the string computed by replacing each matched group by the value returned by the corresponding template. The original matched value for the group is available as $. In template program mode, like for the template and the eval functions, you use [[ for { and ]] for }. The following example in template program mode looks for series with more than one word and uppercases the first word: {series:'re_group($, \"(\\S* )(.*)\", \"[[$:uppercase()]]\", \"[[$]]\")'}"
msgstr ""

#: ../../template_ref.rst:369
# a5985bab81544aeeb7ee73b4099a1641
msgid "shorten(val, left chars, middle text, right chars)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinShorten:1
# 0702c326d4af4f85b96dbef9f265e31f
msgid "shorten(val, left chars, middle text, right chars) -- Return a shortened version of the field, consisting of `left chars` characters from the beginning of the field, followed by `middle text`, followed by `right chars` characters from the end of the string. `Left chars` and `right chars` must be integers. For example, assume the title of the book is `Ancient English Laws in the Times of Ivanhoe`, and you want it to fit in a space of at most 15 characters. If you use {title:shorten(9,-,5)}, the result will be `Ancient E-nhoe`. If the field's length is less than left chars + right chars + the length of `middle text`, then the field will be used intact. For example, the title `The Dome` would not be changed."
msgstr ""

#: ../../template_ref.rst:374
# 3bbc677d84bc4eaba46d2a903db8d578
msgid "strcat(a, b, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrcat:1
# 4df5c7936eff448492c910faceff0a00
msgid "strcat(a, b, ...) -- can take any number of arguments. Returns a string formed by concatenating all the arguments"
msgstr ""

#: ../../template_ref.rst:379
# e433404117fe4ef29a06154e47712410
msgid "strcat_max(max, string1, prefix2, string2, ...)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrcatMax:1
# 3cd998c9fca54d1697365eb98382c5f4
msgid "strcat_max(max, string1, prefix2, string2, ...) -- Returns a string formed by concatenating the arguments. The returned value is initialized to string1. `Prefix, string` pairs are added to the end of the value as long as the resulting string length is less than `max`. String1 is returned even if string1 is longer than max. You can pass as many `prefix, string` pairs as you wish."
msgstr ""

#: ../../template_ref.rst:384
# 20f4b4d7c2214d34b46b2f43c60afb94
msgid "strlen(a)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinStrlen:1
# 32e62347a5ef487792c2321ddf664714
msgid "strlen(a) -- Returns the length of the string passed as the argument"
msgstr ""

#: ../../template_ref.rst:389
# 86375aeafc06490cb4e66a97b61fa77d
msgid "substr(str, start, end)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSubstr:1
# c063ac3c65c848a0976108a830549376
msgid "substr(str, start, end) -- returns the start'th through the end'th characters of str. The first character in str is the zero'th character. If end is negative, then it indicates that many characters counting from the right. If end is zero, then it indicates the last character. For example, substr('12345', 1, 0) returns '2345', and substr('12345', 1, -1) returns '234'."
msgstr ""

#: ../../template_ref.rst:394
# feeff66068504aeea98872216e75981f
msgid "swap_around_comma(val)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinSwapAroundComma:1
# e10954a81e294069af596857b856205b
msgid "swap_around_comma(val) -- given a value of the form \"B, A\", return \"A B\". This is most useful for converting names in LN, FN format to FN LN. If there is no comma, the function returns val unchanged"
msgstr ""

#: ../../template_ref.rst:399
# bdfe220d12594fc2a7d784a5d8af1cd6
msgid "transliterate(a)"
msgstr ""

#: ../../../src/calibre/utils/formatter_functions.py:docstring of calibre.utils.formatter_functions.BuiltinTransliterate:1
# af9f26513af042ddacecd7ed4b5baff6
msgid "transliterate(a) -- Returns a string in a latin alphabet formed by approximating the sound of the words in the source string. For example, if the source is \"Фёдор Миха́йлович Достоевский\" the function returns \"Fiodor Mikhailovich Dostoievskii\"."
msgstr ""

#: ../../template_ref.rst:405
# 73c486dd9a73473b9b276c6b16c7eed5
msgid "API of the Metadata objects"
msgstr ""

#: ../../template_ref.rst:407
# 420bbb9c7b244805bfcb7f0f42d8076b
msgid "The python implementation of the template functions is passed in a Metadata object. Knowing it's API is useful if you want to define your own template functions."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:1
# 000f2799a2c448d59e310a000aebf946
msgid "A class representing all the metadata for a book. The various standard metadata fields are available as attributes of this object. You can also stick arbitrary attributes onto this object."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:5
# 8d8739be64564470b4634cd7dce9549f
msgid "Metadata from custom columns should be accessed via the get() method, passing in the lookup name for the column, for example: \"#mytags\"."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:8
# 5ee7b159f1f84ac9b1d49cb1ff7d6129
msgid "Use the :meth:`is_null` method to test if a field is null."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:10
# 18c61e8542c142c58282d4c617084bf2
msgid "This object also has functions to format fields into strings."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:12
# da87dae5ebca440ea07b9f24da520f16
msgid "The list of standard metadata fields grows with time is in :data:`STANDARD_METADATA_FIELDS`."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata:15
# 44b24b25d4f24e0280a9f058fcfd662f
msgid "Please keep the method based API of this class to a minimum. Every method becomes a reserved field name."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.is_null:1
# b16e2b00b8cc4495bd3855a85dda36f2
msgid "Return True if the value of field is null in this object. 'null' means it is unknown or evaluates to False. So a title of _('Unknown') is null or a language of 'und' is null."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.is_null:5
# 41da961490c14140bc20be0f0bbcfb81
msgid "Be careful with numeric fields since this will return True for zero as well as None."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.is_null:8
# 11612b8b28b64bf6aced49d1aa402a70
msgid "Also returns True if the field does not exist."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.deepcopy:1
# e2b3b12ff2db4513913b2fce010fc235
msgid "Do not use this method unless you know what you are doing, if you want to create a simple clone of this object, use :meth:`deepcopy_metadata` instead. Class_generator must be a function that returns an instance of Metadata or a subclass of it."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_identifiers:1
# 1a37ccb2afb64bad8925681e018ee77f
msgid "Return a copy of the identifiers dictionary. The dict is small, and the penalty for using a reference where a copy is needed is large. Also, we don't want any manipulations of the returned dict to show up in the book."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_identifiers:1
# 225ef162d0874cbbae51bf7b40568321
msgid "Set all identifiers. Note that if you previously set ISBN, calling this method will delete it."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_identifier:1
# f34f52076ed949e08ea0d3d7e6446c4c
msgid "If val is empty, deletes identifier of type typ"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.standard_field_keys:1
# f4b9d48cc42a46dc95aa9ab3cbb7c775
msgid "return a list of all possible keys, even if this book doesn't have them"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.custom_field_keys:1
# c1011cdb300e493ba0a8de5f43ab27a1
msgid "return a list of the custom fields in this book"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.all_field_keys:1
# 93aeb72dc9084f578e4f8464d4654466
msgid "All field keys known by this instance, even if their value is None"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.metadata_for_field:1
# 5e95f5a5e5ad4905a71718599122e282
msgid "return metadata describing a standard or custom field."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.all_non_none_fields:1
# 036c72be31d24fbb8c6595e1ceae5bbf
msgid "Return a dictionary containing all non-None metadata fields, including the custom ones."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_standard_metadata:1
# 0af6fdb0fbc1402395e019674c84e870
msgid "return field metadata from the field if it is there. Otherwise return None. field is the key name, not the label. Return a copy if requested, just in case the user wants to change values in the dict."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_all_standard_metadata:1
# 411abe67b4ad4d419cfbb71372236892
msgid "return a dict containing all the standard field metadata associated with the book."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_all_user_metadata:1
# b72ebe59449943ab90ae49c61c432160
msgid "return a dict containing all the custom field metadata associated with the book."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.get_user_metadata:1
# 5872d53b0d0b48c1a37e4e2ea46a12c7
msgid "return field metadata from the object if it is there. Otherwise return None. field is the key name, not the label. Return a copy if requested, just in case the user wants to change values in the dict."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_all_user_metadata:1
# 773d3f8c8c6c4bf9af01cdf1a6d05d8b
msgid "store custom field metadata into the object. Field is the key name not the label"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.set_user_metadata:1
# 96cd45ef88da4f3f8399482dc13daf77
msgid "store custom field metadata for one column into the object. Field is the key name not the label"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.template_to_attribute:1
# e3183348001c47219408af203f3191f5
msgid "Takes a list [(src,dest), (src,dest)], evaluates the template in the context of other, then copies the result to self[dest]. This is on a best-efforts basis. Some assignments can make no sense."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.smart_update:1
# 34f2ca3ae13a49eea535633081fc0e53
msgid "Merge the information in `other` into self. In case of conflicts, the information in `other` takes precedence, unless the information in `other` is NULL."
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.format_field:1
# 4a8f7e387bbd42eab8999de7ab5a4e1b
msgid "Returns the tuple (display_name, formatted_value)"
msgstr ""

#: ../../../src/calibre/ebooks/metadata/book/base.py:docstring of calibre.ebooks.metadata.book.base.Metadata.to_html:1
# 6f6d521223954963b282d3524f6fb2b6
msgid "A HTML representation of this object."
msgstr ""

#: ../../template_ref.rst:417
# 43bf24c366a3494088f311b0106fe2ee
msgid "The set of standard metadata fields."
msgstr ""

